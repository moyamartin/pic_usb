

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Jan 03 19:41:50 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           	psect	idataCOMRAM
    40  00119A                     __pidataCOMRAM:
    41                           	opt stack 0
    42                           
    43                           ;initializer for _DutyCycle
    44  00119A  000A               	dw	10
    45                           
    46                           	psect	smallconst
    47  000800                     __psmallconst:
    48                           	opt stack 0
    49  000800  00                 	db	0
    50  000801                     _LCD_ROW_ADDRESS:
    51                           	opt stack 0
    52  000801  80                 	db	128
    53  000802  C0                 	db	192
    54  000803  94                 	db	148
    55  000804  D4                 	db	212
    56  000805                     __end_of_LCD_ROW_ADDRESS:
    57                           	opt stack 0
    58  0000                     _CCP1CON	set	4029
    59  0000                     _CCPR1L	set	4030
    60  0000                     _INTCONbits	set	4082
    61  0000                     _LATDbits	set	3980
    62  0000                     _PIE1	set	3997
    63  0000                     _PIE1bits	set	3997
    64  0000                     _PIR1bits	set	3998
    65  0000                     _PR2	set	4043
    66  0000                     _RCREG	set	4014
    67  0000                     _RCSTA	set	4011
    68  0000                     _RCSTAbits	set	4011
    69  0000                     _SPBRG	set	4015
    70  0000                     _SPBRGH	set	4016
    71  0000                     _T2CON	set	4042
    72  0000                     _T2CONbits	set	4042
    73  0000                     _TRISC	set	3988
    74  0000                     _TRISCbits	set	3988
    75  0000                     _TRISD	set	3989
    76  0000                     _TXREG	set	4013
    77  0000                     _TXSTA	set	4012
    78  0000                     _TXSTAbits	set	4012
    79  0000                     _PEIE	set	32662
    80  0000                     _RCIE	set	31981
    81  0000                     _RCIF	set	31989
    82  0000                     _RCIP	set	31997
    83  000805                     __stringdata:
    84                           	opt stack 0
    85  000805                     STR_2:
    86  000805  4D                 	db	77	;'M'
    87  000806  6F                 	db	111	;'o'
    88  000807  64                 	db	100	;'d'
    89  000808  69                 	db	105	;'i'
    90  000809  66                 	db	102	;'f'
    91  00080A  69                 	db	105	;'i'
    92  00080B  63                 	db	99	;'c'
    93  00080C  61                 	db	97	;'a'
    94  00080D  64                 	db	100	;'d'
    95  00080E  6F                 	db	111	;'o'
    96  00080F  20                 	db	32
    97  000810  65                 	db	101	;'e'
    98  000811  6C                 	db	108	;'l'
    99  000812  20                 	db	32
   100  000813  53                 	db	83	;'S'
   101  000814  65                 	db	101	;'e'
   102  000815  74                 	db	116	;'t'
   103  000816  50                 	db	80	;'P'
   104  000817  6F                 	db	111	;'o'
   105  000818  69                 	db	105	;'i'
   106  000819  6E                 	db	110	;'n'
   107  00081A  74                 	db	116	;'t'
   108  00081B  20                 	db	32
   109  00081C  61                 	db	97	;'a'
   110  00081D  3A                 	db	58	;':'
   111  00081E  20                 	db	32
   112  00081F  00                 	db	0
   113  000820                     STR_4:
   114  000820  45                 	db	69	;'E'
   115  000821  72                 	db	114	;'r'
   116  000822  72                 	db	114	;'r'
   117  000823  6F                 	db	111	;'o'
   118  000824  72                 	db	114	;'r'
   119  000825  20                 	db	32
   120  000826  6D                 	db	109	;'m'
   121  000827  61                 	db	97	;'a'
   122  000828  71                 	db	113	;'q'
   123  000829  75                 	db	117	;'u'
   124  00082A  69                 	db	105	;'i'
   125  00082B  6E                 	db	110	;'n'
   126  00082C  6F                 	db	111	;'o'
   127  00082D  6C                 	db	108	;'l'
   128  00082E  61                 	db	97	;'a'
   129  00082F  0A                 	db	10
   130  000830  00                 	db	0
   131  000831                     STR_1:
   132  000831  44                 	db	68	;'D'
   133  000832  75                 	db	117	;'u'
   134  000833  74                 	db	116	;'t'
   135  000834  79                 	db	121	;'y'
   136  000835  20                 	db	32
   137  000836  43                 	db	67	;'C'
   138  000837  79                 	db	121	;'y'
   139  000838  63                 	db	99	;'c'
   140  000839  6C                 	db	108	;'l'
   141  00083A  65                 	db	101	;'e'
   142  00083B  3A                 	db	58	;':'
   143  00083C  20                 	db	32
   144  00083D  00                 	db	0
   145  00083E                     __end_of__stringdata:
   146                           	opt stack 0
   147                           
   148                           ; #config settings
   149  00083E  00                 	db	0	; dummy byte at the end
   150  0000                     
   151                           	psect	cinit
   152  000FA6                     __pcinit:
   153                           	opt stack 0
   154  000FA6                     start_initialization:
   155                           	opt stack 0
   156  000FA6                     __initialization:
   157                           	opt stack 0
   158                           
   159                           ; Clear objects allocated to BANK3 (200 bytes)
   160  000FA6  EE03  F000         	lfsr	0,__pbssBANK3
   161  000FAA  0EC8               	movlw	200
   162  000FAC                     clear_0:
   163  000FAC  6AEE               	clrf	postinc0,c
   164  000FAE  06E8               	decf	wreg,f,c
   165  000FB0  E1FD               	bnz	clear_0
   166                           
   167                           ; Clear objects allocated to BANK2 (200 bytes)
   168  000FB2  EE02  F000         	lfsr	0,__pbssBANK2
   169  000FB6  0EC8               	movlw	200
   170  000FB8                     clear_1:
   171  000FB8  6AEE               	clrf	postinc0,c
   172  000FBA  06E8               	decf	wreg,f,c
   173  000FBC  E1FD               	bnz	clear_1
   174                           
   175                           ; Clear objects allocated to BANK1 (200 bytes)
   176  000FBE  EE01  F000         	lfsr	0,__pbssBANK1
   177  000FC2  0EC8               	movlw	200
   178  000FC4                     clear_2:
   179  000FC4  6AEE               	clrf	postinc0,c
   180  000FC6  06E8               	decf	wreg,f,c
   181  000FC8  E1FD               	bnz	clear_2
   182                           
   183                           ; Clear objects allocated to BANK0 (16 bytes)
   184  000FCA  EE00  F060         	lfsr	0,__pbssBANK0
   185  000FCE  0E10               	movlw	16
   186  000FD0                     clear_3:
   187  000FD0  6AEE               	clrf	postinc0,c
   188  000FD2  06E8               	decf	wreg,f,c
   189  000FD4  E1FD               	bnz	clear_3
   190                           
   191                           ; Clear objects allocated to COMRAM (34 bytes)
   192  000FD6  EE00  F001         	lfsr	0,__pbssCOMRAM
   193  000FDA  0E22               	movlw	34
   194  000FDC                     clear_4:
   195  000FDC  6AEE               	clrf	postinc0,c
   196  000FDE  06E8               	decf	wreg,f,c
   197  000FE0  E1FD               	bnz	clear_4
   198                           
   199                           ; Initialize objects allocated to COMRAM (2 bytes)
   200                           ; load TBLPTR registers with __pidataCOMRAM
   201  000FE2  0E9A               	movlw	low __pidataCOMRAM
   202  000FE4  6EF6               	movwf	tblptrl,c
   203  000FE6  0E11               	movlw	high __pidataCOMRAM
   204  000FE8  6EF7               	movwf	tblptrh,c
   205  000FEA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   206  000FEC  6EF8               	movwf	tblptru,c
   207  000FEE  0009               	tblrd		*+	;fetch initializer
   208  000FF0  CFF5 F043          	movff	tablat,__pdataCOMRAM
   209  000FF4  0009               	tblrd		*+	;fetch initializer
   210  000FF6  CFF5 F044          	movff	tablat,__pdataCOMRAM+1
   211  000FFA                     end_of_initialization:
   212                           	opt stack 0
   213  000FFA                     __end_of__initialization:
   214                           	opt stack 0
   215  000FFA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   216  000FFC  6EF8               	movwf	tblptru,c
   217  000FFE  0100               	movlb	0
   218  001000  EFFA  F004         	goto	_main	;jump to C main() function
   219                           tblptru	equ	0xFF8
   220                           tblptrh	equ	0xFF7
   221                           tblptrl	equ	0xFF6
   222                           tablat	equ	0xFF5
   223                           postinc0	equ	0xFEE
   224                           wreg	equ	0xFE8
   225                           
   226                           	psect	bssCOMRAM
   227  000001                     __pbssCOMRAM:
   228                           	opt stack 0
   229  000001                     _lcd_lower_display_buffer:
   230                           	opt stack 0
   231  000001                     	ds	16
   232  000011                     _cantidadLetrasDOWN:
   233                           	opt stack 0
   234  000011                     	ds	2
   235  000013                     _cantidadLetrasUP:
   236                           	opt stack 0
   237  000013                     	ds	2
   238  000015                     _i:
   239                           	opt stack 0
   240  000015                     	ds	2
   241  000017                     _k:
   242                           	opt stack 0
   243  000017                     	ds	2
   244  000019                     _USART_Status:
   245                           	opt stack 0
   246  000019                     	ds	1
   247  00001A                     _c:
   248                           	opt stack 0
   249  00001A                     	ds	1
   250  00001B                     _flag_newline:
   251                           	opt stack 0
   252  00001B                     	ds	1
   253  00001C                     _lcd_x:
   254                           	opt stack 0
   255  00001C                     	ds	1
   256  00001D                     _lcd_y:
   257                           	opt stack 0
   258  00001D                     	ds	1
   259  00001E                     _DC_str:
   260                           	opt stack 0
   261  00001E                     	ds	5
   262                           tblptru	equ	0xFF8
   263                           tblptrh	equ	0xFF7
   264                           tblptrl	equ	0xFF6
   265                           tablat	equ	0xFF5
   266                           postinc0	equ	0xFEE
   267                           wreg	equ	0xFE8
   268                           
   269                           	psect	dataCOMRAM
   270  000043                     __pdataCOMRAM:
   271                           	opt stack 0
   272  000043                     _DutyCycle:
   273                           	opt stack 0
   274  000043                     	ds	2
   275                           tblptru	equ	0xFF8
   276                           tblptrh	equ	0xFF7
   277                           tblptrl	equ	0xFF6
   278                           tablat	equ	0xFF5
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           
   282                           	psect	bssBANK0
   283  000060                     __pbssBANK0:
   284                           	opt stack 0
   285  000060                     _lcd_upper_display_buffer:
   286                           	opt stack 0
   287  000060                     	ds	16
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           tblptrl	equ	0xFF6
   291                           tablat	equ	0xFF5
   292                           postinc0	equ	0xFEE
   293                           wreg	equ	0xFE8
   294                           
   295                           	psect	bssBANK1
   296  000100                     __pbssBANK1:
   297                           	opt stack 0
   298  000100                     _MessageBuffer:
   299                           	opt stack 0
   300  000100                     	ds	200
   301                           tblptru	equ	0xFF8
   302                           tblptrh	equ	0xFF7
   303                           tblptrl	equ	0xFF6
   304                           tablat	equ	0xFF5
   305                           postinc0	equ	0xFEE
   306                           wreg	equ	0xFE8
   307                           
   308                           	psect	bssBANK2
   309  000200                     __pbssBANK2:
   310                           	opt stack 0
   311  000200                     _lcd_upper_row_buffer:
   312                           	opt stack 0
   313  000200                     	ds	200
   314                           tblptru	equ	0xFF8
   315                           tblptrh	equ	0xFF7
   316                           tblptrl	equ	0xFF6
   317                           tablat	equ	0xFF5
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           
   321                           	psect	bssBANK3
   322  000300                     __pbssBANK3:
   323                           	opt stack 0
   324  000300                     _lcd_lower_row_buffer:
   325                           	opt stack 0
   326  000300                     	ds	200
   327                           tblptru	equ	0xFF8
   328                           tblptrh	equ	0xFF7
   329                           tblptrl	equ	0xFF6
   330                           tablat	equ	0xFF5
   331                           postinc0	equ	0xFEE
   332                           wreg	equ	0xFE8
   333                           
   334                           	psect	cstackBANK0
   335  000070                     __pcstackBANK0:
   336                           	opt stack 0
   337  000070                     ??_lcd_init:
   338  000070                     lcd_gotoxy@y:
   339                           	opt stack 0
   340  000070                     OpenUSART@config:
   341                           	opt stack 0
   342  000070                     SetDCPWM1@DCycle:
   343                           	opt stack 0
   344  000070                     ___lwdiv@quotient:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x0
   348  000070                     	ds	1
   349  000071                     lcd_gotoxy@addr:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0x1
   353  000071                     	ds	1
   354  000072                     lcd_gotoxy@x:
   355                           	opt stack 0
   356  000072                     ___lwdiv@counter:
   357                           	opt stack 0
   358                           
   359                           ; 1 bytes @ 0x2
   360  000072                     	ds	1
   361  000073                     lcd_putnum@num:
   362                           	opt stack 0
   363  000073                     lcd_puts@str:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x3
   367  000073                     	ds	2
   368  000075                     lcd_putnum@len:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0x5
   372  000075                     	ds	1
   373  000076                     lcd_putnum@x:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0x6
   377  000076                     	ds	1
   378  000077                     lcd_putnum@y:
   379                           	opt stack 0
   380                           
   381                           ; 1 bytes @ 0x7
   382  000077                     	ds	1
   383  000078                     lcd_putnum@dec:
   384                           	opt stack 0
   385                           
   386                           ; 1 bytes @ 0x8
   387  000078                     	ds	1
   388  000079                     lcd_putnum@r:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x9
   392  000079                     	ds	2
   393  00007B                     ??_main:
   394                           
   395                           ; 0 bytes @ 0xB
   396  00007B                     	ds	1
   397  00007C                     main@config:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0xC
   401  00007C                     	ds	1
   402  00007D                     main@spbrg:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0xD
   406  00007D                     	ds	1
   407                           tblptru	equ	0xFF8
   408                           tblptrh	equ	0xFF7
   409                           tblptrl	equ	0xFF6
   410                           tablat	equ	0xFF5
   411                           postinc0	equ	0xFEE
   412                           wreg	equ	0xFE8
   413                           
   414                           	psect	cstackCOMRAM
   415  000023                     __pcstackCOMRAM:
   416                           	opt stack 0
   417  000023                     ??_isdigit:
   418  000023                     ?___wmul:
   419                           	opt stack 0
   420  000023                     ReadUSART@data:
   421                           	opt stack 0
   422  000023                     WriteUSART@data:
   423                           	opt stack 0
   424  000023                     ___wmul@multiplier:
   425                           	opt stack 0
   426  000023                     strncpy@to:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x0
   430  000023                     	ds	1
   431  000024                     _isdigit$1314:
   432                           	opt stack 0
   433  000024                     putsUSART@data:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x1
   437  000024                     	ds	1
   438  000025                     isdigit@c:
   439                           	opt stack 0
   440  000025                     ___wmul@multiplicand:
   441                           	opt stack 0
   442  000025                     strncpy@from:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x2
   446  000025                     	ds	1
   447  000026                     ??_putsUSART:
   448                           
   449                           ; 0 bytes @ 0x3
   450  000026                     	ds	1
   451  000027                     ___wmul@product:
   452                           	opt stack 0
   453  000027                     strncpy@size:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x4
   457  000027                     	ds	2
   458  000029                     ?_atoi:
   459                           	opt stack 0
   460  000029                     atoi@s:
   461                           	opt stack 0
   462  000029                     strncpy@cp:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x6
   466  000029                     	ds	2
   467  00002B                     ??_atoi:
   468                           
   469                           ; 0 bytes @ 0x8
   470  00002B                     	ds	2
   471  00002D                     atoi@sign:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0xA
   475  00002D                     	ds	1
   476  00002E                     atoi@a:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0xB
   480  00002E                     	ds	2
   481  000030                     ??_ISR:
   482                           
   483                           ; 0 bytes @ 0xD
   484  000030                     	ds	14
   485  00003E                     ?___lwdiv:
   486                           	opt stack 0
   487  00003E                     lcd_write_nibble@is_data:
   488                           	opt stack 0
   489  00003E                     OpenPWM1@period:
   490                           	opt stack 0
   491  00003E                     SetDCPWM1@dutycycle:
   492                           	opt stack 0
   493  00003E                     OpenUSART@spbrg:
   494                           	opt stack 0
   495  00003E                     ___lwdiv@dividend:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0x1B
   499  00003E                     	ds	1
   500  00003F                     ??_lcd_write_nibble:
   501                           
   502                           ; 0 bytes @ 0x1C
   503  00003F                     	ds	1
   504  000040                     ??_OpenUSART:
   505  000040                     ??_SetDCPWM1:
   506  000040                     lcd_write_nibble@nibble:
   507                           	opt stack 0
   508  000040                     ___lwdiv@divisor:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x1D
   512  000040                     	ds	1
   513  000041                     lcd_write_byte@is_data:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x1E
   517  000041                     	ds	1
   518  000042                     lcd_write_byte@byte:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x1F
   522  000042                     	ds	1
   523  000043                     tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           
   530                           ; 0 bytes @ 0x20
   531 ;;
   532 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   533 ;;
   534 ;; *************** function _main *****************
   535 ;; Defined at:
   536 ;;		line 46 in file "main.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;		None
   539 ;; Auto vars:     Size  Location     Type
   540 ;;  spbrg           1   13[BANK0 ] unsigned char 
   541 ;;  config          1   12[BANK0 ] unsigned char 
   542 ;; Return value:  Size  Location     Type
   543 ;;		None               void
   544 ;; Registers used:
   545 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   546 ;; Tracked objects:
   547 ;;		On entry : 0/0
   548 ;;		On exit  : 0/0
   549 ;;		Unchanged: 0/0
   550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   551 ;;      Params:         0       0       0       0       0       0       0       0       0
   552 ;;      Locals:         0       2       0       0       0       0       0       0       0
   553 ;;      Temps:          0       1       0       0       0       0       0       0       0
   554 ;;      Totals:         0       3       0       0       0       0       0       0       0
   555 ;;Total ram usage:        3 bytes
   556 ;; Hardware stack levels required when called:    7
   557 ;; This function calls:
   558 ;;		_OpenPWM1
   559 ;;		_OpenUSART
   560 ;;		_SetDCPWM1
   561 ;;		_lcd_gotoxy
   562 ;;		_lcd_init
   563 ;;		_lcd_putnum
   564 ;;		_lcd_puts
   565 ;;		_lcd_write_byte
   566 ;; This function is called by:
   567 ;;		Startup code after reset
   568 ;; This function uses a non-reentrant model
   569 ;;
   570                           
   571                           	psect	text0
   572  0009F4                     __ptext0:
   573                           	opt stack 0
   574  0009F4                     _main:
   575                           	opt stack 24
   576                           
   577                           ;main.c: 48: unsigned char config = 0, spbrg = 0;
   578                           
   579                           ;incstack = 0
   580  0009F4  0E00               	movlw	0
   581  0009F6  0100               	movlb	0	; () banked
   582  0009F8  6F7C               	movwf	main@config& (0+255),b
   583  0009FA  0E00               	movlw	0
   584  0009FC  0100               	movlb	0	; () banked
   585  0009FE  6F7D               	movwf	main@spbrg& (0+255),b
   586                           
   587                           ;main.c: 50: TRISC = 0b10000000;
   588  000A00  0E80               	movlw	128
   589  000A02  6E94               	movwf	3988,c	;volatile
   590                           
   591                           ;main.c: 51: TRISD = 0b00000000;
   592  000A04  0E00               	movlw	0
   593  000A06  6E95               	movwf	3989,c	;volatile
   594                           
   595                           ; BSR set to: 0
   596                           ;main.c: 56: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
   597  000A08  0E4F               	movlw	79
   598  000A0A  16AB               	andwf	4011,f,c	;volatile
   599                           
   600                           ; BSR set to: 0
   601  000A0C  9AAC               	bcf	4012,5,c	;volatile
   602                           
   603                           ; BSR set to: 0
   604  000A0E  0ECF               	movlw	207
   605  000A10  169D               	andwf	3997,f,c	;volatile
   606                           
   607                           ;main.c: 57: config = 0b01111111& 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111;
   608  000A12  0E7C               	movlw	124
   609  000A14  0100               	movlb	0	; () banked
   610  000A16  6F7C               	movwf	main@config& (0+255),b
   611                           
   612                           ;main.c: 58: spbrg = 77;
   613  000A18  0E4D               	movlw	77
   614  000A1A  0100               	movlb	0	; () banked
   615  000A1C  6F7D               	movwf	main@spbrg& (0+255),b
   616                           
   617                           ; BSR set to: 0
   618                           ;main.c: 59: OpenUSART(config, spbrg);
   619  000A1E  0100               	movlb	0	; () banked
   620  000A20  C07D  F03E         	movff	main@spbrg,OpenUSART@spbrg
   621  000A24  6A3F               	clrf	OpenUSART@spbrg+1,c
   622  000A26  0100               	movlb	0	; () banked
   623  000A28  517C               	movf	main@config& (0+255),w,b
   624  000A2A  ECF9  F006         	call	_OpenUSART
   625                           
   626                           ;main.c: 60: RCIF = 0;
   627  000A2E  9A9E               	bcf	3998,5,c	;volatile
   628                           
   629                           ;main.c: 61: RCIP = 0;
   630  000A30  9A9F               	bcf	3999,5,c	;volatile
   631                           
   632                           ;main.c: 62: RCIE = 1;
   633  000A32  8A9D               	bsf	3997,5,c	;volatile
   634                           
   635                           ;main.c: 63: PEIE = 1;
   636  000A34  8CF2               	bsf	intcon,6,c	;volatile
   637                           
   638                           ;main.c: 64: PIR1bits.RCIF = 0;
   639  000A36  9A9E               	bcf	3998,5,c	;volatile
   640                           
   641                           ;main.c: 65: (INTCONbits.GIE = 1);
   642  000A38  8EF2               	bsf	intcon,7,c	;volatile
   643                           
   644                           ;main.c: 69: T2CON = 0b00000111 ;
   645  000A3A  0E07               	movlw	7
   646  000A3C  6ECA               	movwf	4042,c	;volatile
   647                           
   648                           ;main.c: 70: OpenPWM1(0b10111011);
   649  000A3E  0EBB               	movlw	187
   650  000A40  ECBB  F008         	call	_OpenPWM1
   651                           
   652                           ;main.c: 72: SetDCPWM1(DutyCycle);
   653  000A44  C043  F03E         	movff	_DutyCycle,SetDCPWM1@dutycycle
   654  000A48  C044  F03F         	movff	_DutyCycle+1,SetDCPWM1@dutycycle+1
   655  000A4C  EC5F  F008         	call	_SetDCPWM1	;wreg free
   656                           
   657                           ;main.c: 75: lcd_init();
   658  000A50  EC8F  F005         	call	_lcd_init	;wreg free
   659                           
   660                           ;main.c: 76: {lcd_write_byte(0x01, 0); { _delay((unsigned long)((5000)*(12000000/4000000
      +                          .0))); };};
   661  000A54  0E00               	movlw	0
   662  000A56  6E41               	movwf	lcd_write_byte@is_data,c
   663  000A58  0E01               	movlw	1
   664  000A5A  ECAE  F008         	call	_lcd_write_byte
   665  000A5E  0E14               	movlw	20
   666  000A60  0100               	movlb	0	; () banked
   667  000A62  6F7B               	movwf	??_main& (0+255),b
   668  000A64  0E7A               	movlw	122
   669  000A66                     u1107:
   670  000A66  2EE8               	decfsz	wreg,f,c
   671  000A68  D7FE               	goto	u1107
   672  000A6A  2F7B               	decfsz	??_main& (0+255),f,b
   673  000A6C  D7FC               	goto	u1107
   674                           
   675                           ;main.c: 77: lcd_gotoxy(0,0);
   676  000A6E  0E00               	movlw	0
   677  000A70  0100               	movlb	0	; () banked
   678  000A72  6F70               	movwf	lcd_gotoxy@y& (0+255),b
   679  000A74  0E00               	movlw	0
   680  000A76  EC36  F007         	call	_lcd_gotoxy
   681  000A7A                     l1640:
   682                           
   683                           ;main.c: 79: {
   684                           ;main.c: 80: SetDCPWM1(DutyCycle);
   685  000A7A  C043  F03E         	movff	_DutyCycle,SetDCPWM1@dutycycle
   686  000A7E  C044  F03F         	movff	_DutyCycle+1,SetDCPWM1@dutycycle+1
   687  000A82  EC5F  F008         	call	_SetDCPWM1	;wreg free
   688                           
   689                           ;main.c: 82: lcd_gotoxy(0,0);
   690  000A86  0E00               	movlw	0
   691  000A88  0100               	movlb	0	; () banked
   692  000A8A  6F70               	movwf	lcd_gotoxy@y& (0+255),b
   693  000A8C  0E00               	movlw	0
   694  000A8E  EC36  F007         	call	_lcd_gotoxy
   695                           
   696                           ;main.c: 83: lcd_puts("Duty Cycle: ");
   697  000A92  0E08               	movlw	high STR_1
   698  000A94  0100               	movlb	0	; () banked
   699  000A96  6F74               	movwf	(lcd_puts@str+1)& (0+255),b
   700  000A98  0E31               	movlw	low STR_1
   701  000A9A  0100               	movlb	0	; () banked
   702  000A9C  6F73               	movwf	lcd_puts@str& (0+255),b
   703  000A9E  ECB1  F006         	call	_lcd_puts	;wreg free
   704                           
   705                           ;main.c: 84: lcd_putnum(DutyCycle, 4, 0, 1);
   706  000AA2  C043  F073         	movff	_DutyCycle,lcd_putnum@num
   707  000AA6  C044  F074         	movff	_DutyCycle+1,lcd_putnum@num+1
   708  000AAA  0E04               	movlw	4
   709  000AAC  0100               	movlb	0	; () banked
   710  000AAE  6F75               	movwf	lcd_putnum@len& (0+255),b
   711  000AB0  0E00               	movlw	0
   712  000AB2  0100               	movlb	0	; () banked
   713  000AB4  6F76               	movwf	lcd_putnum@x& (0+255),b
   714  000AB6  0E01               	movlw	1
   715  000AB8  0100               	movlb	0	; () banked
   716  000ABA  6F77               	movwf	lcd_putnum@y& (0+255),b
   717  000ABC  EC6E  F007         	call	_lcd_putnum	;wreg free
   718                           
   719                           ;main.c: 85: _delay((unsigned long)((50)*(12000000/4000.0)));
   720  000AC0  0EC3               	movlw	195
   721  000AC2  0100               	movlb	0	; () banked
   722  000AC4  6F7B               	movwf	??_main& (0+255),b
   723  000AC6  0ECD               	movlw	205
   724  000AC8                     u1117:
   725  000AC8  2EE8               	decfsz	wreg,f,c
   726  000ACA  D7FE               	goto	u1117
   727  000ACC  2F7B               	decfsz	??_main& (0+255),f,b
   728  000ACE  D7FC               	goto	u1117
   729  000AD0  F000               	nop	
   730                           
   731                           ;main.c: 86: _delay((unsigned long)((50)*(12000000/4000.0)));
   732  000AD2  0EC3               	movlw	195
   733  000AD4  0100               	movlb	0	; () banked
   734  000AD6  6F7B               	movwf	??_main& (0+255),b
   735  000AD8  0ECD               	movlw	205
   736  000ADA                     u1127:
   737  000ADA  2EE8               	decfsz	wreg,f,c
   738  000ADC  D7FE               	goto	u1127
   739  000ADE  2F7B               	decfsz	??_main& (0+255),f,b
   740  000AE0  D7FC               	goto	u1127
   741  000AE2  F000               	nop	
   742                           
   743                           ;main.c: 87: _delay((unsigned long)((50)*(12000000/4000.0)));
   744  000AE4  0EC3               	movlw	195
   745  000AE6  0100               	movlb	0	; () banked
   746  000AE8  6F7B               	movwf	??_main& (0+255),b
   747  000AEA  0ECD               	movlw	205
   748  000AEC                     u1137:
   749  000AEC  2EE8               	decfsz	wreg,f,c
   750  000AEE  D7FE               	goto	u1137
   751  000AF0  2F7B               	decfsz	??_main& (0+255),f,b
   752  000AF2  D7FC               	goto	u1137
   753  000AF4  F000               	nop	
   754                           
   755                           ;main.c: 88: _delay((unsigned long)((50)*(12000000/4000.0)));
   756  000AF6  0EC3               	movlw	195
   757  000AF8  0100               	movlb	0	; () banked
   758  000AFA  6F7B               	movwf	??_main& (0+255),b
   759  000AFC  0ECD               	movlw	205
   760  000AFE                     u1147:
   761  000AFE  2EE8               	decfsz	wreg,f,c
   762  000B00  D7FE               	goto	u1147
   763  000B02  2F7B               	decfsz	??_main& (0+255),f,b
   764  000B04  D7FC               	goto	u1147
   765  000B06  F000               	nop	
   766                           
   767                           ;main.c: 89: _delay((unsigned long)((50)*(12000000/4000.0)));
   768  000B08  0EC3               	movlw	195
   769  000B0A  0100               	movlb	0	; () banked
   770  000B0C  6F7B               	movwf	??_main& (0+255),b
   771  000B0E  0ECD               	movlw	205
   772  000B10                     u1157:
   773  000B10  2EE8               	decfsz	wreg,f,c
   774  000B12  D7FE               	goto	u1157
   775  000B14  2F7B               	decfsz	??_main& (0+255),f,b
   776  000B16  D7FC               	goto	u1157
   777  000B18  F000               	nop	
   778                           
   779                           ;main.c: 90: LATDbits.LATD0 =~ LATDbits.LATD0;
   780  000B1A  708C               	btg	3980,0,c	;volatile
   781  000B1C  D7AE               	goto	l1640
   782  000B1E                     __end_of_main:
   783                           	opt stack 0
   784                           tblptru	equ	0xFF8
   785                           tblptrh	equ	0xFF7
   786                           tblptrl	equ	0xFF6
   787                           tablat	equ	0xFF5
   788                           intcon	equ	0xFF2
   789                           postinc0	equ	0xFEE
   790                           wreg	equ	0xFE8
   791                           
   792 ;; *************** function _lcd_puts *****************
   793 ;; Defined at:
   794 ;;		line 108 in file "lcd_driver.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;  str             2    3[BANK0 ] PTR unsigned char 
   797 ;;		 -> STR_1(13), 
   798 ;; Auto vars:     Size  Location     Type
   799 ;;		None
   800 ;; Return value:  Size  Location     Type
   801 ;;		None               void
   802 ;; Registers used:
   803 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   809 ;;      Params:         0       2       0       0       0       0       0       0       0
   810 ;;      Locals:         0       0       0       0       0       0       0       0       0
   811 ;;      Temps:          0       0       0       0       0       0       0       0       0
   812 ;;      Totals:         0       2       0       0       0       0       0       0       0
   813 ;;Total ram usage:        2 bytes
   814 ;; Hardware stack levels used:    1
   815 ;; Hardware stack levels required when called:    6
   816 ;; This function calls:
   817 ;;		_lcd_gotoxy
   818 ;;		_lcd_write_byte
   819 ;; This function is called by:
   820 ;;		_main
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           	psect	text1
   825  000D62                     __ptext1:
   826                           	opt stack 0
   827  000D62                     _lcd_puts:
   828                           	opt stack 24
   829                           
   830                           ;lcd_driver.c: 110: while (*str != 0)
   831                           
   832                           ;incstack = 0
   833  000D62  D03B               	goto	l1584
   834  000D64                     l1568:
   835                           
   836                           ;lcd_driver.c: 111: {
   837                           ;lcd_driver.c: 112: if (*str != '\n')
   838  000D64  0100               	movlb	0	; () banked
   839  000D66  C073  FFF6         	movff	lcd_puts@str,tblptrl
   840  000D6A  0100               	movlb	0	; () banked
   841  000D6C  C074  FFF7         	movff	lcd_puts@str+1,tblptrh
   842  000D70                     	if	0	;tblptru may be non-zero
   843  000D70                     	endif
   844  000D70                     	if	0	;tblptru may be non-zero
   845  000D70                     	endif
   846  000D70  0008               	tblrd		*
   847  000D72  50F5               	movf	tablat,w,c
   848  000D74  0A0A               	xorlw	10
   849  000D76  B4D8               	btfsc	status,2,c
   850  000D78  D00C               	goto	l1572
   851                           
   852                           ; BSR set to: 0
   853                           ;lcd_driver.c: 113: {
   854                           ;lcd_driver.c: 114: {lcd_write_byte(*str, 1);};
   855  000D7A  0E01               	movlw	1
   856  000D7C  6E41               	movwf	lcd_write_byte@is_data,c
   857  000D7E  0100               	movlb	0	; () banked
   858  000D80  C073  FFF6         	movff	lcd_puts@str,tblptrl
   859  000D84  0100               	movlb	0	; () banked
   860  000D86  C074  FFF7         	movff	lcd_puts@str+1,tblptrh
   861  000D8A                     	if	0	;tblptru may be non-zero
   862  000D8A                     	endif
   863  000D8A                     	if	0	;tblptru may be non-zero
   864  000D8A                     	endif
   865  000D8A  0008               	tblrd		*
   866  000D8C  50F5               	movf	tablat,w,c
   867  000D8E  ECAE  F008         	call	_lcd_write_byte
   868  000D92                     l1572:
   869                           
   870                           ;lcd_driver.c: 115: }
   871                           ;lcd_driver.c: 117: if ((++lcd_x == 16) || (*str == '\n'))
   872  000D92  2A1C               	incf	_lcd_x,f,c
   873  000D94  501C               	movf	_lcd_x& (0+255),w,c
   874  000D96  0A10               	xorlw	16
   875  000D98  B4D8               	btfsc	status,2,c
   876  000D9A  D00B               	goto	l1576
   877  000D9C  0100               	movlb	0	; () banked
   878  000D9E  C073  FFF6         	movff	lcd_puts@str,tblptrl
   879  000DA2  0100               	movlb	0	; () banked
   880  000DA4  C074  FFF7         	movff	lcd_puts@str+1,tblptrh
   881  000DA8                     	if	0	;tblptru may be non-zero
   882  000DA8                     	endif
   883  000DA8                     	if	0	;tblptru may be non-zero
   884  000DA8                     	endif
   885  000DA8  0008               	tblrd		*
   886  000DAA  50F5               	movf	tablat,w,c
   887  000DAC  0A0A               	xorlw	10
   888  000DAE  A4D8               	btfss	status,2,c
   889  000DB0  D011               	goto	l1582
   890  000DB2                     l1576:
   891                           
   892                           ;lcd_driver.c: 118: {
   893                           ;lcd_driver.c: 119: if (++lcd_y == 2)
   894  000DB2  2A1D               	incf	_lcd_y,f,c
   895  000DB4  501D               	movf	_lcd_y& (0+255),w,c
   896  000DB6  0A02               	xorlw	2
   897  000DB8  A4D8               	btfss	status,2,c
   898  000DBA  D007               	goto	l1580
   899                           
   900                           ;lcd_driver.c: 120: {
   901                           ;lcd_driver.c: 121: lcd_gotoxy(0,0);
   902  000DBC  0E00               	movlw	0
   903  000DBE  0100               	movlb	0	; () banked
   904  000DC0  6F70               	movwf	lcd_gotoxy@y& (0+255),b
   905  000DC2  0E00               	movlw	0
   906  000DC4  EC36  F007         	call	_lcd_gotoxy
   907                           
   908                           ;lcd_driver.c: 122: }
   909  000DC8  D005               	goto	l1582
   910  000DCA                     l1580:
   911                           
   912                           ;lcd_driver.c: 123: else
   913                           ;lcd_driver.c: 124: {
   914                           ;lcd_driver.c: 125: lcd_gotoxy(0, lcd_y);
   915  000DCA  C01D  F070         	movff	_lcd_y,lcd_gotoxy@y
   916  000DCE  0E00               	movlw	0
   917  000DD0  EC36  F007         	call	_lcd_gotoxy
   918  000DD4                     l1582:
   919                           
   920                           ;lcd_driver.c: 126: }
   921                           ;lcd_driver.c: 127: }
   922                           ;lcd_driver.c: 128: str++;
   923  000DD4  0100               	movlb	0	; () banked
   924  000DD6  4B73               	infsnz	lcd_puts@str& (0+255),f,b
   925  000DD8  2B74               	incf	(lcd_puts@str+1)& (0+255),f,b
   926  000DDA                     l1584:
   927  000DDA  0100               	movlb	0	; () banked
   928  000DDC  C073  FFF6         	movff	lcd_puts@str,tblptrl
   929  000DE0  0100               	movlb	0	; () banked
   930  000DE2  C074  FFF7         	movff	lcd_puts@str+1,tblptrh
   931  000DE6                     	if	0	;tblptru may be non-zero
   932  000DE6                     	endif
   933  000DE6                     	if	0	;tblptru may be non-zero
   934  000DE6                     	endif
   935  000DE6  0008               	tblrd		*
   936  000DE8  50F5               	movf	tablat,w,c
   937  000DEA  0900               	iorlw	0
   938  000DEC  B4D8               	btfsc	status,2,c
   939                           
   940                           ; BSR set to: 0
   941                           
   942                           ; BSR set to: 0
   943  000DEE  0012               	return	
   944  000DF0  D7B9               	goto	l1568
   945  000DF2                     __end_of_lcd_puts:
   946                           	opt stack 0
   947                           tblptru	equ	0xFF8
   948                           tblptrh	equ	0xFF7
   949                           tblptrl	equ	0xFF6
   950                           tablat	equ	0xFF5
   951                           intcon	equ	0xFF2
   952                           postinc0	equ	0xFEE
   953                           wreg	equ	0xFE8
   954                           status	equ	0xFD8
   955                           
   956 ;; *************** function _lcd_putnum *****************
   957 ;; Defined at:
   958 ;;		line 87 in file "lcd_driver.c"
   959 ;; Parameters:    Size  Location     Type
   960 ;;  num             2    3[BANK0 ] unsigned int 
   961 ;;  len             1    5[BANK0 ] unsigned char 
   962 ;;  x               1    6[BANK0 ] unsigned char 
   963 ;;  y               1    7[BANK0 ] unsigned char 
   964 ;; Auto vars:     Size  Location     Type
   965 ;;  r               2    9[BANK0 ] unsigned int 
   966 ;;  dec             1    8[BANK0 ] unsigned char 
   967 ;; Return value:  Size  Location     Type
   968 ;;		None               void
   969 ;; Registers used:
   970 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   971 ;; Tracked objects:
   972 ;;		On entry : 0/0
   973 ;;		On exit  : 0/0
   974 ;;		Unchanged: 0/0
   975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   976 ;;      Params:         0       5       0       0       0       0       0       0       0
   977 ;;      Locals:         0       3       0       0       0       0       0       0       0
   978 ;;      Temps:          0       0       0       0       0       0       0       0       0
   979 ;;      Totals:         0       8       0       0       0       0       0       0       0
   980 ;;Total ram usage:        8 bytes
   981 ;; Hardware stack levels used:    1
   982 ;; Hardware stack levels required when called:    6
   983 ;; This function calls:
   984 ;;		___lwdiv
   985 ;;		_lcd_gotoxy
   986 ;;		_lcd_write_byte
   987 ;; This function is called by:
   988 ;;		_main
   989 ;; This function uses a non-reentrant model
   990 ;;
   991                           
   992                           	psect	text2
   993  000EDC                     __ptext2:
   994                           	opt stack 0
   995  000EDC                     _lcd_putnum:
   996                           	opt stack 24
   997                           
   998                           ;lcd_driver.c: 92: uint16_t r;
   999                           ;lcd_driver.c: 93: uint8_t dec;
  1000                           ;lcd_driver.c: 95: x+=len;
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;incstack = 0
  1004  000EDC  0100               	movlb	0	; () banked
  1005  000EDE  5175               	movf	lcd_putnum@len& (0+255),w,b
  1006  000EE0  0100               	movlb	0	; () banked
  1007  000EE2  2776               	addwf	lcd_putnum@x& (0+255),f,b
  1008                           
  1009                           ;lcd_driver.c: 96: while (len)
  1010  000EE4  D02C               	goto	l1602
  1011  000EE6                     l1588:
  1012                           
  1013                           ; BSR set to: 0
  1014                           ;lcd_driver.c: 97: {
  1015                           ;lcd_driver.c: 98: r = num/10;
  1016  000EE6  C073  F03E         	movff	lcd_putnum@num,___lwdiv@dividend
  1017  000EEA  C074  F03F         	movff	lcd_putnum@num+1,___lwdiv@dividend+1
  1018  000EEE  0E00               	movlw	0
  1019  000EF0  6E41               	movwf	___lwdiv@divisor+1,c
  1020  000EF2  0E0A               	movlw	10
  1021  000EF4  6E40               	movwf	___lwdiv@divisor,c
  1022  000EF6  ECA3  F007         	call	___lwdiv	;wreg free
  1023  000EFA  C03E  F079         	movff	?___lwdiv,lcd_putnum@r
  1024  000EFE  C03F  F07A         	movff	?___lwdiv+1,lcd_putnum@r+1
  1025                           
  1026                           ;lcd_driver.c: 99: dec = num - r*10;
  1027  000F02  0100               	movlb	0	; () banked
  1028  000F04  5179               	movf	lcd_putnum@r& (0+255),w,b
  1029  000F06  0D0A               	mullw	10
  1030  000F08  50F3               	movf	prodl,w,c
  1031  000F0A  0800               	sublw	0
  1032  000F0C  0100               	movlb	0	; () banked
  1033  000F0E  2573               	addwf	lcd_putnum@num& (0+255),w,b
  1034  000F10  0100               	movlb	0	; () banked
  1035  000F12  6F78               	movwf	lcd_putnum@dec& (0+255),b
  1036                           
  1037                           ; BSR set to: 0
  1038                           ;lcd_driver.c: 100: x--;
  1039  000F14  0100               	movlb	0	; () banked
  1040  000F16  0776               	decf	lcd_putnum@x& (0+255),f,b
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;lcd_driver.c: 101: len--;
  1044  000F18  0100               	movlb	0	; () banked
  1045  000F1A  0775               	decf	lcd_putnum@len& (0+255),f,b
  1046                           
  1047                           ; BSR set to: 0
  1048                           ;lcd_driver.c: 102: lcd_gotoxy(x,y);
  1049  000F1C  C077  F070         	movff	lcd_putnum@y,lcd_gotoxy@y
  1050  000F20  0100               	movlb	0	; () banked
  1051  000F22  5176               	movf	lcd_putnum@x& (0+255),w,b
  1052  000F24  EC36  F007         	call	_lcd_gotoxy
  1053                           
  1054                           ;lcd_driver.c: 103: {lcd_write_byte(dec + 0x30, 1);};
  1055  000F28  0E01               	movlw	1
  1056  000F2A  6E41               	movwf	lcd_write_byte@is_data,c
  1057  000F2C  0100               	movlb	0	; () banked
  1058  000F2E  5178               	movf	lcd_putnum@dec& (0+255),w,b
  1059  000F30  0F30               	addlw	48
  1060  000F32  ECAE  F008         	call	_lcd_write_byte
  1061                           
  1062                           ;lcd_driver.c: 104: num = r;
  1063  000F36  C079  F073         	movff	lcd_putnum@r,lcd_putnum@num
  1064  000F3A  C07A  F074         	movff	lcd_putnum@r+1,lcd_putnum@num+1
  1065  000F3E                     l1602:
  1066  000F3E  0100               	movlb	0	; () banked
  1067  000F40  6775               	tstfsz	lcd_putnum@len& (0+255),b
  1068  000F42  D7D1               	goto	l1588
  1069                           
  1070                           ; BSR set to: 0
  1071                           
  1072                           ; BSR set to: 0
  1073  000F44  0012               	return	
  1074  000F46                     __end_of_lcd_putnum:
  1075                           	opt stack 0
  1076                           tblptru	equ	0xFF8
  1077                           tblptrh	equ	0xFF7
  1078                           tblptrl	equ	0xFF6
  1079                           tablat	equ	0xFF5
  1080                           prodl	equ	0xFF3
  1081                           intcon	equ	0xFF2
  1082                           postinc0	equ	0xFEE
  1083                           wreg	equ	0xFE8
  1084                           status	equ	0xFD8
  1085                           
  1086 ;; *************** function _lcd_gotoxy *****************
  1087 ;; Defined at:
  1088 ;;		line 54 in file "lcd_driver.c"
  1089 ;; Parameters:    Size  Location     Type
  1090 ;;  x               1    wreg     unsigned char 
  1091 ;;  y               1    0[BANK0 ] unsigned char 
  1092 ;; Auto vars:     Size  Location     Type
  1093 ;;  x               1    2[BANK0 ] unsigned char 
  1094 ;;  addr            1    1[BANK0 ] unsigned char 
  1095 ;; Return value:  Size  Location     Type
  1096 ;;		None               void
  1097 ;; Registers used:
  1098 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1099 ;; Tracked objects:
  1100 ;;		On entry : 0/0
  1101 ;;		On exit  : 0/0
  1102 ;;		Unchanged: 0/0
  1103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1104 ;;      Params:         0       1       0       0       0       0       0       0       0
  1105 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1106 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1107 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1108 ;;Total ram usage:        3 bytes
  1109 ;; Hardware stack levels used:    1
  1110 ;; Hardware stack levels required when called:    5
  1111 ;; This function calls:
  1112 ;;		_lcd_write_byte
  1113 ;; This function is called by:
  1114 ;;		_main
  1115 ;;		_lcd_putnum
  1116 ;;		_lcd_puts
  1117 ;;		_lcd_put_blank
  1118 ;;		_lcd_puts_const
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           	psect	text3
  1123  000E6C                     __ptext3:
  1124                           	opt stack 0
  1125  000E6C                     _lcd_gotoxy:
  1126                           	opt stack 24
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;incstack = 0
  1130                           ;lcd_gotoxy@x stored from wreg
  1131  000E6C  0100               	movlb	0	; () banked
  1132  000E6E  6F72               	movwf	lcd_gotoxy@x& (0+255),b
  1133                           
  1134                           ; BSR set to: 0
  1135                           ;lcd_driver.c: 57: uint8_t addr;
  1136                           ;lcd_driver.c: 59: if ((y > 3) || (x > 19))
  1137  000E70  0E04               	movlw	4
  1138  000E72  0100               	movlb	0	; () banked
  1139  000E74  5D70               	subwf	lcd_gotoxy@y& (0+255),w,b
  1140  000E76  B0D8               	btfsc	status,0,c
  1141  000E78  D030               	goto	l134
  1142                           
  1143                           ; BSR set to: 0
  1144  000E7A  0E13               	movlw	19
  1145  000E7C  0100               	movlb	0	; () banked
  1146  000E7E  6572               	cpfsgt	lcd_gotoxy@x& (0+255),b
  1147  000E80  D001               	goto	l131
  1148  000E82  D02B               	goto	l134
  1149  000E84                     l131:
  1150                           
  1151                           ; BSR set to: 0
  1152                           ;lcd_driver.c: 62: }
  1153                           ;lcd_driver.c: 63: lcd_x = x;
  1154  000E84  C072  F01C         	movff	lcd_gotoxy@x,_lcd_x
  1155                           
  1156                           ;lcd_driver.c: 64: lcd_y = y;
  1157  000E88  C070  F01D         	movff	lcd_gotoxy@y,_lcd_y
  1158                           
  1159                           ;lcd_driver.c: 65: addr = x;
  1160  000E8C  C072  F071         	movff	lcd_gotoxy@x,lcd_gotoxy@addr
  1161                           
  1162                           ; BSR set to: 0
  1163                           ;lcd_driver.c: 66: addr += LCD_ROW_ADDRESS[y];
  1164  000E90  0100               	movlb	0	; () banked
  1165  000E92  5170               	movf	lcd_gotoxy@y& (0+255),w,b
  1166  000E94  0D01               	mullw	1
  1167  000E96  0E01               	movlw	low _LCD_ROW_ADDRESS
  1168  000E98  24F3               	addwf	prodl,w,c
  1169  000E9A  6EF6               	movwf	tblptrl,c
  1170  000E9C  0E08               	movlw	high _LCD_ROW_ADDRESS
  1171  000E9E  20F4               	addwfc	prodh,w,c
  1172  000EA0  6EF7               	movwf	tblptrh,c
  1173  000EA2                     	if	0	;There are less than 3 active tblptr bytes
  1174  000EA2                     	endif
  1175  000EA2  0008               	tblrd		*
  1176  000EA4  50F5               	movf	tablat,w,c
  1177  000EA6  0100               	movlb	0	; () banked
  1178  000EA8  2771               	addwf	lcd_gotoxy@addr& (0+255),f,b
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;lcd_driver.c: 67: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1182  000EAA  0EFA               	movlw	250
  1183  000EAC                     u1167:
  1184  000EAC  F000               	nop	
  1185  000EAE  2EE8               	decfsz	wreg,f,c
  1186  000EB0  D7FD               	goto	u1167
  1187                           
  1188                           ;lcd_driver.c: 68: lcd_write_byte(addr, 0);
  1189  000EB2  0E00               	movlw	0
  1190  000EB4  6E41               	movwf	lcd_write_byte@is_data,c
  1191  000EB6  0100               	movlb	0	; () banked
  1192  000EB8  5171               	movf	lcd_gotoxy@addr& (0+255),w,b
  1193  000EBA  ECAE  F008         	call	_lcd_write_byte
  1194                           
  1195                           ;lcd_driver.c: 69: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1196  000EBE  0EFA               	movlw	250
  1197  000EC0                     u1177:
  1198  000EC0  F000               	nop	
  1199  000EC2  2EE8               	decfsz	wreg,f,c
  1200  000EC4  D7FD               	goto	u1177
  1201                           
  1202                           ;lcd_driver.c: 70: lcd_write_byte(addr, 0);
  1203  000EC6  0E00               	movlw	0
  1204  000EC8  6E41               	movwf	lcd_write_byte@is_data,c
  1205  000ECA  0100               	movlb	0	; () banked
  1206  000ECC  5171               	movf	lcd_gotoxy@addr& (0+255),w,b
  1207  000ECE  ECAE  F008         	call	_lcd_write_byte
  1208                           
  1209                           ;lcd_driver.c: 71: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1210  000ED2  0EFA               	movlw	250
  1211  000ED4                     u1187:
  1212  000ED4  F000               	nop	
  1213  000ED6  2EE8               	decfsz	wreg,f,c
  1214  000ED8  D7FD               	goto	u1187
  1215  000EDA                     l134:
  1216  000EDA  0012               	return	
  1217  000EDC                     __end_of_lcd_gotoxy:
  1218                           	opt stack 0
  1219                           tblptru	equ	0xFF8
  1220                           tblptrh	equ	0xFF7
  1221                           tblptrl	equ	0xFF6
  1222                           tablat	equ	0xFF5
  1223                           prodh	equ	0xFF4
  1224                           prodl	equ	0xFF3
  1225                           intcon	equ	0xFF2
  1226                           postinc0	equ	0xFEE
  1227                           wreg	equ	0xFE8
  1228                           status	equ	0xFD8
  1229                           
  1230 ;; *************** function ___lwdiv *****************
  1231 ;; Defined at:
  1232 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;  dividend        2   27[COMRAM] unsigned int 
  1235 ;;  divisor         2   29[COMRAM] unsigned int 
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;  quotient        2    0[BANK0 ] unsigned int 
  1238 ;;  counter         1    2[BANK0 ] unsigned char 
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  2   27[COMRAM] unsigned int 
  1241 ;; Registers used:
  1242 ;;		wreg, status,2, status,0
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1248 ;;      Params:         4       0       0       0       0       0       0       0       0
  1249 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1250 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1251 ;;      Totals:         4       3       0       0       0       0       0       0       0
  1252 ;;Total ram usage:        7 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:    3
  1255 ;; This function calls:
  1256 ;;		Nothing
  1257 ;; This function is called by:
  1258 ;;		_lcd_putnum
  1259 ;; This function uses a non-reentrant model
  1260 ;;
  1261                           
  1262                           	psect	text4
  1263  000F46                     __ptext4:
  1264                           	opt stack 0
  1265  000F46                     ___lwdiv:
  1266                           	opt stack 26
  1267                           
  1268                           ;incstack = 0
  1269  000F46  0E00               	movlw	0
  1270  000F48  0100               	movlb	0	; () banked
  1271  000F4A  6F71               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1272  000F4C  0E00               	movlw	0
  1273  000F4E  0100               	movlb	0	; () banked
  1274  000F50  6F70               	movwf	___lwdiv@quotient& (0+255),b
  1275                           
  1276                           ; BSR set to: 0
  1277  000F52  5041               	movf	___lwdiv@divisor+1,w,c
  1278  000F54  1040               	iorwf	___lwdiv@divisor,w,c
  1279  000F56  B4D8               	btfsc	status,2,c
  1280  000F58  D021               	goto	l807
  1281                           
  1282                           ; BSR set to: 0
  1283  000F5A  0E01               	movlw	1
  1284  000F5C  0100               	movlb	0	; () banked
  1285  000F5E  6F72               	movwf	___lwdiv@counter& (0+255),b
  1286  000F60  D005               	goto	l1466
  1287  000F62                     l1464:
  1288                           
  1289                           ; BSR set to: 0
  1290  000F62  90D8               	bcf	status,0,c
  1291  000F64  3640               	rlcf	___lwdiv@divisor,f,c
  1292  000F66  3641               	rlcf	___lwdiv@divisor+1,f,c
  1293  000F68  0100               	movlb	0	; () banked
  1294  000F6A  2B72               	incf	___lwdiv@counter& (0+255),f,b
  1295  000F6C                     l1466:
  1296                           
  1297                           ; BSR set to: 0
  1298  000F6C  AE41               	btfss	___lwdiv@divisor+1,7,c
  1299  000F6E  D7F9               	goto	l1464
  1300  000F70                     l1468:
  1301                           
  1302                           ; BSR set to: 0
  1303  000F70  0100               	movlb	0	; () banked
  1304  000F72  90D8               	bcf	status,0,c
  1305  000F74  3770               	rlcf	___lwdiv@quotient& (0+255),f,b
  1306  000F76  3771               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1307                           
  1308                           ; BSR set to: 0
  1309  000F78  5040               	movf	___lwdiv@divisor,w,c
  1310  000F7A  5C3E               	subwf	___lwdiv@dividend,w,c
  1311  000F7C  5041               	movf	___lwdiv@divisor+1,w,c
  1312  000F7E  583F               	subwfb	___lwdiv@dividend+1,w,c
  1313  000F80  A0D8               	btfss	status,0,c
  1314  000F82  D006               	goto	l1476
  1315                           
  1316                           ; BSR set to: 0
  1317  000F84  5040               	movf	___lwdiv@divisor,w,c
  1318  000F86  5E3E               	subwf	___lwdiv@dividend,f,c
  1319  000F88  5041               	movf	___lwdiv@divisor+1,w,c
  1320  000F8A  5A3F               	subwfb	___lwdiv@dividend+1,f,c
  1321                           
  1322                           ; BSR set to: 0
  1323  000F8C  0100               	movlb	0	; () banked
  1324  000F8E  8170               	bsf	___lwdiv@quotient& (0+255),0,b
  1325  000F90                     l1476:
  1326                           
  1327                           ; BSR set to: 0
  1328  000F90  90D8               	bcf	status,0,c
  1329  000F92  3241               	rrcf	___lwdiv@divisor+1,f,c
  1330  000F94  3240               	rrcf	___lwdiv@divisor,f,c
  1331                           
  1332                           ; BSR set to: 0
  1333  000F96  0100               	movlb	0	; () banked
  1334  000F98  2F72               	decfsz	___lwdiv@counter& (0+255),f,b
  1335  000F9A  D7EA               	goto	l1468
  1336  000F9C                     l807:
  1337                           
  1338                           ; BSR set to: 0
  1339  000F9C  C070  F03E         	movff	___lwdiv@quotient,?___lwdiv
  1340  000FA0  C071  F03F         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1341                           
  1342                           ; BSR set to: 0
  1343  000FA4  0012               	return	
  1344  000FA6                     __end_of___lwdiv:
  1345                           	opt stack 0
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           prodh	equ	0xFF4
  1351                           prodl	equ	0xFF3
  1352                           intcon	equ	0xFF2
  1353                           postinc0	equ	0xFEE
  1354                           wreg	equ	0xFE8
  1355                           status	equ	0xFD8
  1356                           
  1357 ;; *************** function _lcd_init *****************
  1358 ;; Defined at:
  1359 ;;		line 11 in file "lcd_driver.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;		None
  1362 ;; Auto vars:     Size  Location     Type
  1363 ;;		None
  1364 ;; Return value:  Size  Location     Type
  1365 ;;		None               void
  1366 ;; Registers used:
  1367 ;;		wreg, status,2, status,0, cstack
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1373 ;;      Params:         0       0       0       0       0       0       0       0       0
  1374 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1375 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1376 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1377 ;;Total ram usage:        1 bytes
  1378 ;; Hardware stack levels used:    1
  1379 ;; Hardware stack levels required when called:    5
  1380 ;; This function calls:
  1381 ;;		_lcd_write_byte
  1382 ;;		_lcd_write_nibble
  1383 ;; This function is called by:
  1384 ;;		_main
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           	psect	text5
  1389  000B1E                     __ptext5:
  1390                           	opt stack 0
  1391  000B1E                     _lcd_init:
  1392                           	opt stack 25
  1393                           
  1394                           ;lcd_driver.c: 15: { _delay((unsigned long)((15000)*(4000000/4000000.0))); };
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;incstack = 0
  1398  000B1E  0E14               	movlw	20
  1399  000B20  0100               	movlb	0	; () banked
  1400  000B22  6F70               	movwf	??_lcd_init& (0+255),b
  1401  000B24  0E7A               	movlw	122
  1402  000B26                     u1197:
  1403  000B26  2EE8               	decfsz	wreg,f,c
  1404  000B28  D7FE               	goto	u1197
  1405  000B2A  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1406  000B2C  D7FC               	goto	u1197
  1407                           
  1408                           ;lcd_driver.c: 18: lcd_write_nibble(0x3, 0);
  1409  000B2E  0E00               	movlw	0
  1410  000B30  6E3E               	movwf	lcd_write_nibble@is_data,c
  1411  000B32  0E03               	movlw	3
  1412  000B34  EC64  F006         	call	_lcd_write_nibble
  1413                           
  1414                           ;lcd_driver.c: 20: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1415  000B38  0E07               	movlw	7
  1416  000B3A  0100               	movlb	0	; () banked
  1417  000B3C  6F70               	movwf	??_lcd_init& (0+255),b
  1418  000B3E  0E7D               	movlw	125
  1419  000B40                     u1207:
  1420  000B40  2EE8               	decfsz	wreg,f,c
  1421  000B42  D7FE               	goto	u1207
  1422  000B44  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1423  000B46  D7FC               	goto	u1207
  1424  000B48  F000               	nop	
  1425                           
  1426                           ;lcd_driver.c: 22: lcd_write_nibble(0x3, 0);
  1427  000B4A  0E00               	movlw	0
  1428  000B4C  6E3E               	movwf	lcd_write_nibble@is_data,c
  1429  000B4E  0E03               	movlw	3
  1430  000B50  EC64  F006         	call	_lcd_write_nibble
  1431                           
  1432                           ;lcd_driver.c: 24: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1433  000B54  0E07               	movlw	7
  1434  000B56  0100               	movlb	0	; () banked
  1435  000B58  6F70               	movwf	??_lcd_init& (0+255),b
  1436  000B5A  0E7D               	movlw	125
  1437  000B5C                     u1217:
  1438  000B5C  2EE8               	decfsz	wreg,f,c
  1439  000B5E  D7FE               	goto	u1217
  1440  000B60  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1441  000B62  D7FC               	goto	u1217
  1442  000B64  F000               	nop	
  1443                           
  1444                           ;lcd_driver.c: 26: lcd_write_nibble(0x3, 0);
  1445  000B66  0E00               	movlw	0
  1446  000B68  6E3E               	movwf	lcd_write_nibble@is_data,c
  1447  000B6A  0E03               	movlw	3
  1448  000B6C  EC64  F006         	call	_lcd_write_nibble
  1449                           
  1450                           ;lcd_driver.c: 28: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1451  000B70  0E07               	movlw	7
  1452  000B72  0100               	movlb	0	; () banked
  1453  000B74  6F70               	movwf	??_lcd_init& (0+255),b
  1454  000B76  0E7D               	movlw	125
  1455  000B78                     u1227:
  1456  000B78  2EE8               	decfsz	wreg,f,c
  1457  000B7A  D7FE               	goto	u1227
  1458  000B7C  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1459  000B7E  D7FC               	goto	u1227
  1460  000B80  F000               	nop	
  1461                           
  1462                           ;lcd_driver.c: 30: lcd_write_nibble(0x2, 0);
  1463  000B82  0E00               	movlw	0
  1464  000B84  6E3E               	movwf	lcd_write_nibble@is_data,c
  1465  000B86  0E02               	movlw	2
  1466  000B88  EC64  F006         	call	_lcd_write_nibble
  1467                           
  1468                           ;lcd_driver.c: 39: lcd_write_byte(0x28, 0);
  1469  000B8C  0E00               	movlw	0
  1470  000B8E  6E41               	movwf	lcd_write_byte@is_data,c
  1471  000B90  0E28               	movlw	40
  1472  000B92  ECAE  F008         	call	_lcd_write_byte
  1473                           
  1474                           ;lcd_driver.c: 40: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1475  000B96  0E07               	movlw	7
  1476  000B98  0100               	movlb	0	; () banked
  1477  000B9A  6F70               	movwf	??_lcd_init& (0+255),b
  1478  000B9C  0E7D               	movlw	125
  1479  000B9E                     u1237:
  1480  000B9E  2EE8               	decfsz	wreg,f,c
  1481  000BA0  D7FE               	goto	u1237
  1482  000BA2  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1483  000BA4  D7FC               	goto	u1237
  1484  000BA6  F000               	nop	
  1485                           
  1486                           ;lcd_driver.c: 42: lcd_write_byte(0x0c, 0);
  1487  000BA8  0E00               	movlw	0
  1488  000BAA  6E41               	movwf	lcd_write_byte@is_data,c
  1489  000BAC  0E0C               	movlw	12
  1490  000BAE  ECAE  F008         	call	_lcd_write_byte
  1491                           
  1492                           ;lcd_driver.c: 43: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1493  000BB2  0E07               	movlw	7
  1494  000BB4  0100               	movlb	0	; () banked
  1495  000BB6  6F70               	movwf	??_lcd_init& (0+255),b
  1496  000BB8  0E7D               	movlw	125
  1497  000BBA                     u1247:
  1498  000BBA  2EE8               	decfsz	wreg,f,c
  1499  000BBC  D7FE               	goto	u1247
  1500  000BBE  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1501  000BC0  D7FC               	goto	u1247
  1502  000BC2  F000               	nop	
  1503                           
  1504                           ;lcd_driver.c: 45: lcd_write_byte(0x01, 0);
  1505  000BC4  0E00               	movlw	0
  1506  000BC6  6E41               	movwf	lcd_write_byte@is_data,c
  1507  000BC8  0E01               	movlw	1
  1508  000BCA  ECAE  F008         	call	_lcd_write_byte
  1509                           
  1510                           ;lcd_driver.c: 46: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1511  000BCE  0E07               	movlw	7
  1512  000BD0  0100               	movlb	0	; () banked
  1513  000BD2  6F70               	movwf	??_lcd_init& (0+255),b
  1514  000BD4  0E7D               	movlw	125
  1515  000BD6                     u1257:
  1516  000BD6  2EE8               	decfsz	wreg,f,c
  1517  000BD8  D7FE               	goto	u1257
  1518  000BDA  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1519  000BDC  D7FC               	goto	u1257
  1520  000BDE  F000               	nop	
  1521                           
  1522                           ;lcd_driver.c: 48: lcd_write_byte(0x6, 0);
  1523  000BE0  0E00               	movlw	0
  1524  000BE2  6E41               	movwf	lcd_write_byte@is_data,c
  1525  000BE4  0E06               	movlw	6
  1526  000BE6  ECAE  F008         	call	_lcd_write_byte
  1527                           
  1528                           ;lcd_driver.c: 49: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1529  000BEA  0E07               	movlw	7
  1530  000BEC  0100               	movlb	0	; () banked
  1531  000BEE  6F70               	movwf	??_lcd_init& (0+255),b
  1532  000BF0  0E7D               	movlw	125
  1533  000BF2                     u1267:
  1534  000BF2  2EE8               	decfsz	wreg,f,c
  1535  000BF4  D7FE               	goto	u1267
  1536  000BF6  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1537  000BF8  D7FC               	goto	u1267
  1538  000BFA  F000               	nop	
  1539  000BFC  0012               	return	
  1540  000BFE                     __end_of_lcd_init:
  1541                           	opt stack 0
  1542                           tblptru	equ	0xFF8
  1543                           tblptrh	equ	0xFF7
  1544                           tblptrl	equ	0xFF6
  1545                           tablat	equ	0xFF5
  1546                           prodh	equ	0xFF4
  1547                           prodl	equ	0xFF3
  1548                           intcon	equ	0xFF2
  1549                           postinc0	equ	0xFEE
  1550                           wreg	equ	0xFE8
  1551                           status	equ	0xFD8
  1552                           
  1553 ;; *************** function _lcd_write_byte *****************
  1554 ;; Defined at:
  1555 ;;		line 185 in file "lcd_driver.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;  byte            1    wreg     unsigned char 
  1558 ;;  is_data         1   30[COMRAM] unsigned char 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;  byte            1   31[COMRAM] unsigned char 
  1561 ;; Return value:  Size  Location     Type
  1562 ;;		None               void
  1563 ;; Registers used:
  1564 ;;		wreg, status,2, status,0, cstack
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1570 ;;      Params:         1       0       0       0       0       0       0       0       0
  1571 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1572 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1573 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1574 ;;Total ram usage:        2 bytes
  1575 ;; Hardware stack levels used:    1
  1576 ;; Hardware stack levels required when called:    4
  1577 ;; This function calls:
  1578 ;;		_lcd_write_nibble
  1579 ;; This function is called by:
  1580 ;;		_main
  1581 ;;		_lcd_init
  1582 ;;		_lcd_gotoxy
  1583 ;;		_lcd_putnum
  1584 ;;		_lcd_puts
  1585 ;;		_lcd_put_blank
  1586 ;;		_lcd_puts_const
  1587 ;;		_lcd_set_cgram
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text6
  1592  00115C                     __ptext6:
  1593                           	opt stack 0
  1594  00115C                     _lcd_write_byte:
  1595                           	opt stack 26
  1596                           
  1597                           ;incstack = 0
  1598                           ;lcd_write_byte@byte stored from wreg
  1599  00115C  6E42               	movwf	lcd_write_byte@byte,c
  1600                           
  1601                           ;lcd_driver.c: 188: lcd_write_nibble(byte >> 4, is_data);
  1602  00115E  C041  F03E         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
  1603  001162  3842               	swapf	lcd_write_byte@byte,w,c
  1604  001164  0B0F               	andlw	15
  1605  001166  EC64  F006         	call	_lcd_write_nibble
  1606                           
  1607                           ;lcd_driver.c: 189: lcd_write_nibble(byte, is_data);
  1608  00116A  C041  F03E         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
  1609  00116E  5042               	movf	lcd_write_byte@byte,w,c
  1610  001170  EC64  F006         	call	_lcd_write_nibble
  1611  001174  0012               	return	
  1612  001176                     __end_of_lcd_write_byte:
  1613                           	opt stack 0
  1614                           tblptru	equ	0xFF8
  1615                           tblptrh	equ	0xFF7
  1616                           tblptrl	equ	0xFF6
  1617                           tablat	equ	0xFF5
  1618                           prodh	equ	0xFF4
  1619                           prodl	equ	0xFF3
  1620                           intcon	equ	0xFF2
  1621                           postinc0	equ	0xFEE
  1622                           wreg	equ	0xFE8
  1623                           status	equ	0xFD8
  1624                           
  1625 ;; *************** function _lcd_write_nibble *****************
  1626 ;; Defined at:
  1627 ;;		line 176 in file "lcd_driver.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;  nibble          1    wreg     unsigned char 
  1630 ;;  is_data         1   27[COMRAM] unsigned char 
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;  nibble          1   29[COMRAM] unsigned char 
  1633 ;; Return value:  Size  Location     Type
  1634 ;;		None               void
  1635 ;; Registers used:
  1636 ;;		wreg, status,2, status,0, cstack
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1642 ;;      Params:         1       0       0       0       0       0       0       0       0
  1643 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1644 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1645 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1646 ;;Total ram usage:        3 bytes
  1647 ;; Hardware stack levels used:    1
  1648 ;; Hardware stack levels required when called:    3
  1649 ;; This function calls:
  1650 ;;		Nothing
  1651 ;; This function is called by:
  1652 ;;		_lcd_init
  1653 ;;		_lcd_write_byte
  1654 ;; This function uses a non-reentrant model
  1655 ;;
  1656                           
  1657                           	psect	text7
  1658  000CC8                     __ptext7:
  1659                           	opt stack 0
  1660  000CC8                     _lcd_write_nibble:
  1661                           	opt stack 26
  1662                           
  1663                           ;incstack = 0
  1664                           ;lcd_write_nibble@nibble stored from wreg
  1665  000CC8  6E40               	movwf	lcd_write_nibble@nibble,c
  1666                           
  1667                           ;lcd_driver.c: 179: { LATDbits.LATD2 = is_data; };
  1668  000CCA  B03E               	btfsc	lcd_write_nibble@is_data,0,c
  1669  000CCC  D002               	bra	u785
  1670  000CCE  948C               	bcf	3980,2,c	;volatile
  1671  000CD0  D001               	bra	u786
  1672  000CD2                     u785:
  1673  000CD2  848C               	bsf	3980,2,c	;volatile
  1674  000CD4                     u786:
  1675                           
  1676                           ;lcd_driver.c: 180: { _delay((unsigned long)((100)*(4000000/4000000.0))); };
  1677  000CD4  0E21               	movlw	33
  1678  000CD6                     u1277:
  1679  000CD6  2EE8               	decfsz	wreg,f,c
  1680  000CD8  D7FE               	goto	u1277
  1681  000CDA  F000               	nop	
  1682                           
  1683                           ;lcd_driver.c: 181: { LATDbits.LATD4 = nibble & 1; LATDbits.LATD5 = (nibble & 2) >> 1; L
      +                          ATDbits.LATD6 = (nibble & 4) >> 2; LATDbits.LATD7 = (nibble & 8) >> 3; };
  1684  000CDC  C040  F03F         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1685  000CE0  0E01               	movlw	1
  1686  000CE2  163F               	andwf	??_lcd_write_nibble,f,c
  1687  000CE4  3A3F               	swapf	??_lcd_write_nibble,f,c
  1688  000CE6  508C               	movf	3980,w,c	;volatile
  1689  000CE8  183F               	xorwf	??_lcd_write_nibble,w,c
  1690  000CEA  0BEF               	andlw	-17
  1691  000CEC  183F               	xorwf	??_lcd_write_nibble,w,c
  1692  000CEE  6E8C               	movwf	3980,c	;volatile
  1693  000CF0  C040  F03F         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1694  000CF4  90D8               	bcf	status,0,c
  1695  000CF6  323F               	rrcf	??_lcd_write_nibble,f,c
  1696  000CF8  0E01               	movlw	1
  1697  000CFA  163F               	andwf	??_lcd_write_nibble,f,c
  1698  000CFC  3A3F               	swapf	??_lcd_write_nibble,f,c
  1699  000CFE  463F               	rlncf	??_lcd_write_nibble,f,c
  1700  000D00  508C               	movf	3980,w,c	;volatile
  1701  000D02  183F               	xorwf	??_lcd_write_nibble,w,c
  1702  000D04  0BDF               	andlw	-33
  1703  000D06  183F               	xorwf	??_lcd_write_nibble,w,c
  1704  000D08  6E8C               	movwf	3980,c	;volatile
  1705  000D0A  C040  F03F         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1706  000D0E  90D8               	bcf	status,0,c
  1707  000D10  323F               	rrcf	??_lcd_write_nibble,f,c
  1708  000D12  90D8               	bcf	status,0,c
  1709  000D14  323F               	rrcf	??_lcd_write_nibble,f,c
  1710  000D16  0E01               	movlw	1
  1711  000D18  163F               	andwf	??_lcd_write_nibble,f,c
  1712  000D1A  3A3F               	swapf	??_lcd_write_nibble,f,c
  1713  000D1C  463F               	rlncf	??_lcd_write_nibble,f,c
  1714  000D1E  463F               	rlncf	??_lcd_write_nibble,f,c
  1715  000D20  508C               	movf	3980,w,c	;volatile
  1716  000D22  183F               	xorwf	??_lcd_write_nibble,w,c
  1717  000D24  0BBF               	andlw	-65
  1718  000D26  183F               	xorwf	??_lcd_write_nibble,w,c
  1719  000D28  6E8C               	movwf	3980,c	;volatile
  1720  000D2A  C040  F03F         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1721  000D2E  90D8               	bcf	status,0,c
  1722  000D30  323F               	rrcf	??_lcd_write_nibble,f,c
  1723  000D32  90D8               	bcf	status,0,c
  1724  000D34  323F               	rrcf	??_lcd_write_nibble,f,c
  1725  000D36  90D8               	bcf	status,0,c
  1726  000D38  323F               	rrcf	??_lcd_write_nibble,f,c
  1727  000D3A  0E01               	movlw	1
  1728  000D3C  163F               	andwf	??_lcd_write_nibble,f,c
  1729  000D3E  323F               	rrcf	??_lcd_write_nibble,f,c
  1730  000D40  323F               	rrcf	??_lcd_write_nibble,f,c
  1731  000D42  508C               	movf	3980,w,c	;volatile
  1732  000D44  183F               	xorwf	??_lcd_write_nibble,w,c
  1733  000D46  0B7F               	andlw	-129
  1734  000D48  183F               	xorwf	??_lcd_write_nibble,w,c
  1735  000D4A  6E8C               	movwf	3980,c	;volatile
  1736                           
  1737                           ;lcd_driver.c: 182: { LATDbits.LATD3 = 1; { _delay((unsigned long)((200)*(4000000/400000
      +                          0.0))); }; LATDbits.LATD3 = 0; { _delay((unsigned long)((500)*(4000000/4000000.0))); }; 
      +                          };
  1738  000D4C  868C               	bsf	3980,3,c	;volatile
  1739  000D4E  0E42               	movlw	66
  1740  000D50                     u1287:
  1741  000D50  2EE8               	decfsz	wreg,f,c
  1742  000D52  D7FE               	goto	u1287
  1743  000D54  D000               	nop2		;nop
  1744  000D56  968C               	bcf	3980,3,c	;volatile
  1745  000D58  0EA6               	movlw	166
  1746  000D5A                     u1297:
  1747  000D5A  2EE8               	decfsz	wreg,f,c
  1748  000D5C  D7FE               	goto	u1297
  1749  000D5E  D000               	nop2		;nop
  1750  000D60  0012               	return	
  1751  000D62                     __end_of_lcd_write_nibble:
  1752                           	opt stack 0
  1753                           tblptru	equ	0xFF8
  1754                           tblptrh	equ	0xFF7
  1755                           tblptrl	equ	0xFF6
  1756                           tablat	equ	0xFF5
  1757                           prodh	equ	0xFF4
  1758                           prodl	equ	0xFF3
  1759                           intcon	equ	0xFF2
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           status	equ	0xFD8
  1763                           
  1764 ;; *************** function _SetDCPWM1 *****************
  1765 ;; Defined at:
  1766 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;  dutycycle       2   27[COMRAM] unsigned int 
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;  DCycle          2    0[BANK0 ] struct PWMDC
  1771 ;; Return value:  Size  Location     Type
  1772 ;;		None               void
  1773 ;; Registers used:
  1774 ;;		wreg, status,2, status,0
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1780 ;;      Params:         2       0       0       0       0       0       0       0       0
  1781 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1782 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1783 ;;      Totals:         4       2       0       0       0       0       0       0       0
  1784 ;;Total ram usage:        6 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; Hardware stack levels required when called:    3
  1787 ;; This function calls:
  1788 ;;		Nothing
  1789 ;; This function is called by:
  1790 ;;		_main
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           	psect	text8
  1795  0010BE                     __ptext8:
  1796                           	opt stack 0
  1797  0010BE                     _SetDCPWM1:
  1798                           	opt stack 27
  1799                           
  1800                           ;incstack = 0
  1801  0010BE  C03E  F040         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  1802  0010C2  C03F  F041         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  1803  0010C6  0E06               	movlw	6
  1804  0010C8                     u945:
  1805  0010C8  90D8               	bcf	status,0,c
  1806  0010CA  3640               	rlcf	??_SetDCPWM1,f,c
  1807  0010CC  3641               	rlcf	??_SetDCPWM1+1,f,c
  1808  0010CE  2EE8               	decfsz	wreg,f,c
  1809  0010D0  D7FB               	goto	u945
  1810  0010D2  C040  F070         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  1811  0010D6  C041  F071         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  1812  0010DA  C071  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  1813  0010DE  C070  F040         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  1814  0010E2  90D8               	bcf	status,0,c
  1815  0010E4  3240               	rrcf	??_SetDCPWM1,f,c
  1816  0010E6  90D8               	bcf	status,0,c
  1817  0010E8  3240               	rrcf	??_SetDCPWM1,f,c
  1818  0010EA  0E30               	movlw	48
  1819  0010EC  1640               	andwf	??_SetDCPWM1,f,c
  1820  0010EE  50BD               	movf	4029,w,c	;volatile
  1821  0010F0  0BCF               	andlw	207
  1822  0010F2  1040               	iorwf	??_SetDCPWM1,w,c
  1823  0010F4  6EBD               	movwf	4029,c	;volatile
  1824  0010F6  0012               	return	
  1825  0010F8                     __end_of_SetDCPWM1:
  1826                           	opt stack 0
  1827                           tblptru	equ	0xFF8
  1828                           tblptrh	equ	0xFF7
  1829                           tblptrl	equ	0xFF6
  1830                           tablat	equ	0xFF5
  1831                           prodh	equ	0xFF4
  1832                           prodl	equ	0xFF3
  1833                           intcon	equ	0xFF2
  1834                           postinc0	equ	0xFEE
  1835                           wreg	equ	0xFE8
  1836                           status	equ	0xFD8
  1837                           
  1838 ;; *************** function _OpenUSART *****************
  1839 ;; Defined at:
  1840 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;  config          1    wreg     unsigned char 
  1843 ;;  spbrg           2   27[COMRAM] unsigned int 
  1844 ;; Auto vars:     Size  Location     Type
  1845 ;;  config          1    0[BANK0 ] unsigned char 
  1846 ;; Return value:  Size  Location     Type
  1847 ;;		None               void
  1848 ;; Registers used:
  1849 ;;		wreg, status,2
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1855 ;;      Params:         2       0       0       0       0       0       0       0       0
  1856 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1857 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1858 ;;      Totals:         5       1       0       0       0       0       0       0       0
  1859 ;;Total ram usage:        6 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; Hardware stack levels required when called:    3
  1862 ;; This function calls:
  1863 ;;		Nothing
  1864 ;; This function is called by:
  1865 ;;		_main
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869                           	psect	text9
  1870  000DF2                     __ptext9:
  1871                           	opt stack 0
  1872  000DF2                     _OpenUSART:
  1873                           	opt stack 27
  1874                           
  1875                           ;incstack = 0
  1876                           ;OpenUSART@config stored from wreg
  1877  000DF2  0100               	movlb	0	; () banked
  1878  000DF4  6F70               	movwf	OpenUSART@config& (0+255),b
  1879                           
  1880                           ; BSR set to: 0
  1881  000DF6  0E00               	movlw	0
  1882  000DF8  6EAC               	movwf	4012,c	;volatile
  1883  000DFA  0E00               	movlw	0
  1884  000DFC  6EAB               	movwf	4011,c	;volatile
  1885                           
  1886                           ; BSR set to: 0
  1887  000DFE  0100               	movlb	0	; () banked
  1888  000E00  B170               	btfsc	OpenUSART@config& (0+255),0,b
  1889                           
  1890                           ; BSR set to: 0
  1891  000E02  88AC               	bsf	4012,4,c	;volatile
  1892                           
  1893                           ; BSR set to: 0
  1894                           
  1895                           ; BSR set to: 0
  1896  000E04  0100               	movlb	0	; () banked
  1897  000E06  A370               	btfss	OpenUSART@config& (0+255),1,b
  1898  000E08  D002               	goto	l1490
  1899                           
  1900                           ; BSR set to: 0
  1901  000E0A  8CAC               	bsf	4012,6,c	;volatile
  1902  000E0C  8CAB               	bsf	4011,6,c	;volatile
  1903  000E0E                     l1490:
  1904                           
  1905                           ; BSR set to: 0
  1906  000E0E  0100               	movlb	0	; () banked
  1907  000E10  B570               	btfsc	OpenUSART@config& (0+255),2,b
  1908                           
  1909                           ; BSR set to: 0
  1910  000E12  8EAC               	bsf	4012,7,c	;volatile
  1911                           
  1912                           ; BSR set to: 0
  1913                           
  1914                           ; BSR set to: 0
  1915  000E14  0100               	movlb	0	; () banked
  1916  000E16  A770               	btfss	OpenUSART@config& (0+255),3,b
  1917  000E18  D002               	goto	l227
  1918                           
  1919                           ; BSR set to: 0
  1920  000E1A  88AB               	bsf	4011,4,c	;volatile
  1921  000E1C  D001               	goto	l1498
  1922  000E1E                     l227:
  1923                           
  1924                           ; BSR set to: 0
  1925  000E1E  8AAB               	bsf	4011,5,c	;volatile
  1926  000E20                     l1498:
  1927                           
  1928                           ; BSR set to: 0
  1929  000E20  0100               	movlb	0	; () banked
  1930  000E22  B970               	btfsc	OpenUSART@config& (0+255),4,b
  1931                           
  1932                           ; BSR set to: 0
  1933  000E24  84AC               	bsf	4012,2,c	;volatile
  1934                           
  1935                           ; BSR set to: 0
  1936  000E26  989E               	bcf	3998,4,c	;volatile
  1937                           
  1938                           ; BSR set to: 0
  1939  000E28  0100               	movlb	0	; () banked
  1940  000E2A  BB70               	btfsc	OpenUSART@config& (0+255),5,b
  1941                           
  1942                           ; BSR set to: 0
  1943  000E2C  86AB               	bsf	4011,3,c	;volatile
  1944                           
  1945                           ; BSR set to: 0
  1946                           
  1947                           ; BSR set to: 0
  1948  000E2E  0100               	movlb	0	; () banked
  1949  000E30  AD70               	btfss	OpenUSART@config& (0+255),6,b
  1950  000E32  D002               	goto	l231
  1951                           
  1952                           ; BSR set to: 0
  1953  000E34  8A9D               	bsf	3997,5,c	;volatile
  1954  000E36  D001               	goto	l232
  1955  000E38                     l231:
  1956                           
  1957                           ; BSR set to: 0
  1958  000E38  9A9D               	bcf	3997,5,c	;volatile
  1959  000E3A                     l232:
  1960                           
  1961                           ; BSR set to: 0
  1962  000E3A  9A9E               	bcf	3998,5,c	;volatile
  1963                           
  1964                           ; BSR set to: 0
  1965  000E3C  0100               	movlb	0	; () banked
  1966  000E3E  AF70               	btfss	OpenUSART@config& (0+255),7,b
  1967  000E40  D002               	goto	l233
  1968                           
  1969                           ; BSR set to: 0
  1970  000E42  889D               	bsf	3997,4,c	;volatile
  1971  000E44  D001               	goto	l234
  1972  000E46                     l233:
  1973                           
  1974                           ; BSR set to: 0
  1975  000E46  989D               	bcf	3997,4,c	;volatile
  1976  000E48                     l234:
  1977                           
  1978                           ; BSR set to: 0
  1979  000E48  C03E  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1980                           
  1981                           ; BSR set to: 0
  1982  000E4C  C03F  F040         	movff	OpenUSART@spbrg+1,??_OpenUSART
  1983  000E50  C040  F041         	movff	??_OpenUSART,??_OpenUSART+1
  1984  000E54  6A42               	clrf	(??_OpenUSART+2)& (0+255),c
  1985  000E56  5041               	movf	??_OpenUSART+1,w,c
  1986  000E58  6EB0               	movwf	4016,c	;volatile
  1987                           
  1988                           ; BSR set to: 0
  1989  000E5A  8AAC               	bsf	4012,5,c	;volatile
  1990                           
  1991                           ; BSR set to: 0
  1992  000E5C  8EAB               	bsf	4011,7,c	;volatile
  1993                           
  1994                           ; BSR set to: 0
  1995  000E5E  9C94               	bcf	3988,6,c	;volatile
  1996                           
  1997                           ; BSR set to: 0
  1998  000E60  8E94               	bsf	3988,7,c	;volatile
  1999                           
  2000                           ; BSR set to: 0
  2001  000E62  B8AC               	btfsc	4012,4,c	;volatile
  2002                           
  2003                           ; BSR set to: 0
  2004  000E64  BEAC               	btfsc	4012,7,c	;volatile
  2005  000E66  D001               	goto	l236
  2006                           
  2007                           ; BSR set to: 0
  2008  000E68  8C94               	bsf	3988,6,c	;volatile
  2009  000E6A                     l236:
  2010                           
  2011                           ; BSR set to: 0
  2012  000E6A  0012               	return	
  2013  000E6C                     __end_of_OpenUSART:
  2014                           	opt stack 0
  2015                           tblptru	equ	0xFF8
  2016                           tblptrh	equ	0xFF7
  2017                           tblptrl	equ	0xFF6
  2018                           tablat	equ	0xFF5
  2019                           prodh	equ	0xFF4
  2020                           prodl	equ	0xFF3
  2021                           intcon	equ	0xFF2
  2022                           postinc0	equ	0xFEE
  2023                           wreg	equ	0xFE8
  2024                           status	equ	0xFD8
  2025                           
  2026 ;; *************** function _OpenPWM1 *****************
  2027 ;; Defined at:
  2028 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;  period          1    wreg     unsigned char 
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;  period          1   27[COMRAM] unsigned char 
  2033 ;; Return value:  Size  Location     Type
  2034 ;;		None               void
  2035 ;; Registers used:
  2036 ;;		wreg, status,2, status,0
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2042 ;;      Params:         0       0       0       0       0       0       0       0       0
  2043 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2044 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2045 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2046 ;;Total ram usage:        1 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:    3
  2049 ;; This function calls:
  2050 ;;		Nothing
  2051 ;; This function is called by:
  2052 ;;		_main
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           	psect	text10
  2057  001176                     __ptext10:
  2058                           	opt stack 0
  2059  001176                     _OpenPWM1:
  2060                           	opt stack 27
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;incstack = 0
  2064                           ;OpenPWM1@period stored from wreg
  2065  001176  6E3E               	movwf	OpenPWM1@period,c
  2066  001178  0E0C               	movlw	12
  2067  00117A  12BD               	iorwf	4029,f,c	;volatile
  2068  00117C  9494               	bcf	3988,2,c	;volatile
  2069  00117E  94CA               	bcf	4042,2,c	;volatile
  2070  001180  C03E  FFCB         	movff	OpenPWM1@period,4043	;volatile
  2071  001184  84CA               	bsf	4042,2,c	;volatile
  2072  001186  0012               	return	
  2073  001188                     __end_of_OpenPWM1:
  2074                           	opt stack 0
  2075                           tblptru	equ	0xFF8
  2076                           tblptrh	equ	0xFF7
  2077                           tblptrl	equ	0xFF6
  2078                           tablat	equ	0xFF5
  2079                           prodh	equ	0xFF4
  2080                           prodl	equ	0xFF3
  2081                           intcon	equ	0xFF2
  2082                           postinc0	equ	0xFEE
  2083                           wreg	equ	0xFE8
  2084                           status	equ	0xFD8
  2085                           
  2086 ;; *************** function _ISR *****************
  2087 ;; Defined at:
  2088 ;;		line 96 in file "main.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;		None
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;		None
  2093 ;; Return value:  Size  Location     Type
  2094 ;;		None               void
  2095 ;; Registers used:
  2096 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2102 ;;      Params:         0       0       0       0       0       0       0       0       0
  2103 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2104 ;;      Temps:         14       0       0       0       0       0       0       0       0
  2105 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2106 ;;Total ram usage:       14 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:    2
  2109 ;; This function calls:
  2110 ;;		_ReadUSART
  2111 ;;		_atoi
  2112 ;;		_putsUSART
  2113 ;;		_strncpy
  2114 ;; This function is called by:
  2115 ;;		Interrupt level 2
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           	psect	intcode
  2120  000008                     __pintcode:
  2121                           	opt stack 0
  2122  000008                     _ISR:
  2123                           	opt stack 24
  2124                           
  2125                           ;incstack = 0
  2126  000008  CFFA F030          	movff	pclath,??_ISR
  2127  00000C  CFFB F031          	movff	pclatu,??_ISR+1
  2128  000010  CFE9 F032          	movff	fsr0l,??_ISR+2
  2129  000014  ED20  F004         	call	int_func,f	;refresh shadow registers
  2130                           pclatu	equ	0xFFB
  2131                           pclath	equ	0xFFA
  2132                           tblptru	equ	0xFF8
  2133                           tblptrh	equ	0xFF7
  2134                           tblptrl	equ	0xFF6
  2135                           tablat	equ	0xFF5
  2136                           prodh	equ	0xFF4
  2137                           prodl	equ	0xFF3
  2138                           intcon	equ	0xFF2
  2139                           postinc0	equ	0xFEE
  2140                           fsr0l	equ	0xFE9
  2141                           wreg	equ	0xFE8
  2142                           status	equ	0xFD8
  2143                           
  2144                           	psect	intcode_body
  2145  000840                     __pintcode_body:
  2146                           	opt stack 24
  2147  000840                     int_func:
  2148                           	opt stack 24
  2149  000840  0006               	pop		; remove dummy address from shadow register refresh
  2150  000842  CFEA F033          	movff	fsr0h,??_ISR+3
  2151  000846  CFE1 F034          	movff	fsr1l,??_ISR+4
  2152  00084A  CFE2 F035          	movff	fsr1h,??_ISR+5
  2153  00084E  CFD9 F036          	movff	fsr2l,??_ISR+6
  2154  000852  CFDA F037          	movff	fsr2h,??_ISR+7
  2155  000856  CFF3 F038          	movff	prodl,??_ISR+8
  2156  00085A  CFF4 F039          	movff	prodh,??_ISR+9
  2157  00085E  CFF6 F03A          	movff	tblptrl,??_ISR+10
  2158  000862  CFF7 F03B          	movff	tblptrh,??_ISR+11
  2159  000866  CFF8 F03C          	movff	tblptru,??_ISR+12
  2160  00086A  CFF5 F03D          	movff	tablat,??_ISR+13
  2161                           
  2162                           ;main.c: 99: if(PIR1bits.RCIF == 1)
  2163  00086E  AA9E               	btfss	3998,5,c	;volatile
  2164  000870  D0A4               	goto	i2l95
  2165                           
  2166                           ;main.c: 100: {
  2167                           ;main.c: 101: if(i<200)
  2168  000872  5016               	movf	_i+1,w,c
  2169  000874  0A80               	xorlw	128
  2170  000876  6EF3               	movwf	prodl,c
  2171  000878  0E80               	movlw	128
  2172  00087A  5CF3               	subwf	prodl,w,c
  2173  00087C  0EC8               	movlw	200
  2174  00087E  B4D8               	btfsc	status,2,c
  2175  000880  5C15               	subwf	_i,w,c
  2176  000882  B0D8               	btfsc	status,0,c
  2177  000884  D076               	goto	i2l1410
  2178                           
  2179                           ;main.c: 102: {
  2180                           ;main.c: 103: MessageBuffer[i] = ReadUSART();
  2181  000886  0101               	movlb	1	; () banked
  2182  000888  0E00               	movlw	low _MessageBuffer
  2183  00088A  2415               	addwf	_i,w,c
  2184  00088C  6ED9               	movwf	fsr2l,c
  2185  00088E  0101               	movlb	1	; () banked
  2186  000890  0E01               	movlw	high _MessageBuffer
  2187  000892  2016               	addwfc	_i+1,w,c
  2188  000894  6EDA               	movwf	fsr2h,c
  2189  000896  EC9F  F008         	call	_ReadUSART	;wreg free
  2190  00089A  6EDF               	movwf	indf2,c
  2191                           
  2192                           ;main.c: 104: if(MessageBuffer[i] == 0x0D)
  2193  00089C  0101               	movlb	1	; () banked
  2194  00089E  0E00               	movlw	low _MessageBuffer
  2195  0008A0  2415               	addwf	_i,w,c
  2196  0008A2  6ED9               	movwf	fsr2l,c
  2197  0008A4  0101               	movlb	1	; () banked
  2198  0008A6  0E01               	movlw	high _MessageBuffer
  2199  0008A8  2016               	addwfc	_i+1,w,c
  2200  0008AA  6EDA               	movwf	fsr2h,c
  2201  0008AC  0E0D               	movlw	13
  2202  0008AE  62DF               	cpfseq	indf2,c
  2203  0008B0  D05C               	goto	i2l1406
  2204                           
  2205                           ; BSR set to: 1
  2206                           ;main.c: 105: {
  2207                           ;main.c: 106: strncpy(DC_str, MessageBuffer,4);
  2208  0008B2  0E00               	movlw	high _DC_str
  2209  0008B4  6E24               	movwf	strncpy@to+1,c
  2210  0008B6  0E1E               	movlw	low _DC_str
  2211  0008B8  6E23               	movwf	strncpy@to,c
  2212  0008BA  0101               	movlb	1	; () banked
  2213  0008BC  0E01               	movlw	high _MessageBuffer
  2214  0008BE  6E26               	movwf	strncpy@from+1,c
  2215  0008C0  0101               	movlb	1	; () banked
  2216  0008C2  0E00               	movlw	low _MessageBuffer
  2217  0008C4  6E25               	movwf	strncpy@from,c
  2218  0008C6  0E00               	movlw	0
  2219  0008C8  6E28               	movwf	strncpy@size+1,c
  2220  0008CA  0E04               	movlw	4
  2221  0008CC  6E27               	movwf	strncpy@size,c
  2222  0008CE  EC02  F008         	call	_strncpy	;wreg free
  2223                           
  2224                           ;main.c: 107: k = atoi(DC_str);
  2225  0008D2  0E00               	movlw	high _DC_str
  2226  0008D4  6E2A               	movwf	atoi@s+1,c
  2227  0008D6  0E1E               	movlw	low _DC_str
  2228  0008D8  6E29               	movwf	atoi@s,c
  2229  0008DA  ECFF  F005         	call	_atoi	;wreg free
  2230  0008DE  C029  F017         	movff	?_atoi,_k
  2231  0008E2  C02A  F018         	movff	?_atoi+1,_k+1
  2232                           
  2233                           ;main.c: 108: if(k >= 0 && k <= 1023)
  2234  0008E6  BE18               	btfsc	_k+1,7,c
  2235  0008E8  D021               	goto	i2l1394
  2236  0008EA  5018               	movf	_k+1,w,c
  2237  0008EC  0A80               	xorlw	128
  2238  0008EE  6EF3               	movwf	prodl,c
  2239  0008F0  0E84               	movlw	132
  2240  0008F2  5CF3               	subwf	prodl,w,c
  2241  0008F4  0E00               	movlw	0
  2242  0008F6  B4D8               	btfsc	status,2,c
  2243  0008F8  5C17               	subwf	_k,w,c
  2244  0008FA  B0D8               	btfsc	status,0,c
  2245  0008FC  D017               	goto	i2l1394
  2246                           
  2247                           ;main.c: 109: {
  2248                           ;main.c: 110: DutyCycle = k;
  2249  0008FE  C017  F043         	movff	_k,_DutyCycle
  2250  000902  C018  F044         	movff	_k+1,_DutyCycle+1
  2251                           
  2252                           ;main.c: 111: putsUSART("Modificado el SetPoint a: ");
  2253  000906  0E08               	movlw	high STR_2
  2254  000908  6E25               	movwf	putsUSART@data+1,c
  2255  00090A  0E05               	movlw	low STR_2
  2256  00090C  6E24               	movwf	putsUSART@data,c
  2257  00090E  EC31  F008         	call	_putsUSART	;wreg free
  2258                           
  2259                           ;main.c: 112: putsUSART(DC_str);
  2260  000912  0E00               	movlw	high _DC_str
  2261  000914  6E25               	movwf	putsUSART@data+1,c
  2262  000916  0E1E               	movlw	low _DC_str
  2263  000918  6E24               	movwf	putsUSART@data,c
  2264  00091A  EC31  F008         	call	_putsUSART	;wreg free
  2265                           
  2266                           ;main.c: 113: putsUSART("\n");
  2267  00091E  0E08               	movlw	high (STR_4+15)
  2268  000920  6E25               	movwf	putsUSART@data+1,c
  2269  000922  0E2F               	movlw	low (STR_4+15)
  2270  000924  6E24               	movwf	putsUSART@data,c
  2271  000926  EC31  F008         	call	_putsUSART	;wreg free
  2272                           
  2273                           ;main.c: 114: }
  2274  00092A  D014               	goto	i2l1400
  2275  00092C                     i2l1394:
  2276                           
  2277                           ;main.c: 115: else
  2278                           ;main.c: 116: {
  2279                           ;main.c: 117: putsUSART("Error maquinola\n");
  2280  00092C  0E08               	movlw	high STR_4
  2281  00092E  6E25               	movwf	putsUSART@data+1,c
  2282  000930  0E20               	movlw	low STR_4
  2283  000932  6E24               	movwf	putsUSART@data,c
  2284  000934  EC31  F008         	call	_putsUSART	;wreg free
  2285  000938  D00D               	goto	i2l1400
  2286  00093A                     i2l1396:
  2287                           
  2288                           ;main.c: 121: MessageBuffer[i] = 0x00;
  2289  00093A  0101               	movlb	1	; () banked
  2290  00093C  0E00               	movlw	low _MessageBuffer
  2291  00093E  2415               	addwf	_i,w,c
  2292  000940  6ED9               	movwf	fsr2l,c
  2293  000942  0101               	movlb	1	; () banked
  2294  000944  0E01               	movlw	high _MessageBuffer
  2295  000946  2016               	addwfc	_i+1,w,c
  2296  000948  6EDA               	movwf	fsr2h,c
  2297  00094A  0E00               	movlw	0
  2298  00094C  6EDF               	movwf	indf2,c
  2299                           
  2300                           ; BSR set to: 1
  2301  00094E  0615               	decf	_i,f,c
  2302  000950  A0D8               	btfss	status,0,c
  2303  000952  0616               	decf	_i+1,f,c
  2304  000954                     i2l1400:
  2305  000954  5016               	movf	_i+1,w,c
  2306  000956  0A80               	xorlw	128
  2307  000958  6EF3               	movwf	prodl,c
  2308  00095A  0E80               	movlw	128
  2309  00095C  5CF3               	subwf	prodl,w,c
  2310  00095E  0E01               	movlw	1
  2311  000960  B4D8               	btfsc	status,2,c
  2312  000962  5C15               	subwf	_i,w,c
  2313  000964  B0D8               	btfsc	status,0,c
  2314  000966  D7E9               	goto	i2l1396
  2315  000968  D024               	goto	i2l1418
  2316  00096A                     i2l1406:
  2317                           
  2318                           ;main.c: 124: }
  2319                           ;main.c: 125: i++;
  2320  00096A  4A15               	infsnz	_i,f,c
  2321  00096C  2A16               	incf	_i+1,f,c
  2322                           
  2323                           ;main.c: 126: PIR1bits.RCIF = 0;
  2324  00096E  9A9E               	bcf	3998,5,c	;volatile
  2325                           
  2326                           ;main.c: 127: }
  2327  000970  D024               	goto	i2l95
  2328  000972                     i2l1410:
  2329                           
  2330                           ;main.c: 128: else
  2331                           ;main.c: 129: {
  2332                           ;main.c: 130: putsUSART(MessageBuffer);
  2333  000972  0101               	movlb	1	; () banked
  2334  000974  0E01               	movlw	high _MessageBuffer
  2335  000976  6E25               	movwf	putsUSART@data+1,c
  2336  000978  0101               	movlb	1	; () banked
  2337  00097A  0E00               	movlw	low _MessageBuffer
  2338  00097C  6E24               	movwf	putsUSART@data,c
  2339  00097E  EC31  F008         	call	_putsUSART	;wreg free
  2340                           
  2341                           ;main.c: 131: for(;i>0;i--)
  2342  000982  D00D               	goto	i2l1416
  2343  000984                     i2l1412:
  2344                           
  2345                           ;main.c: 132: MessageBuffer[i] = 0x00;
  2346  000984  0101               	movlb	1	; () banked
  2347  000986  0E00               	movlw	low _MessageBuffer
  2348  000988  2415               	addwf	_i,w,c
  2349  00098A  6ED9               	movwf	fsr2l,c
  2350  00098C  0101               	movlb	1	; () banked
  2351  00098E  0E01               	movlw	high _MessageBuffer
  2352  000990  2016               	addwfc	_i+1,w,c
  2353  000992  6EDA               	movwf	fsr2h,c
  2354  000994  0E00               	movlw	0
  2355  000996  6EDF               	movwf	indf2,c
  2356                           
  2357                           ; BSR set to: 1
  2358  000998  0615               	decf	_i,f,c
  2359  00099A  A0D8               	btfss	status,0,c
  2360  00099C  0616               	decf	_i+1,f,c
  2361  00099E                     i2l1416:
  2362  00099E  5016               	movf	_i+1,w,c
  2363  0009A0  0A80               	xorlw	128
  2364  0009A2  6EF3               	movwf	prodl,c
  2365  0009A4  0E80               	movlw	128
  2366  0009A6  5CF3               	subwf	prodl,w,c
  2367  0009A8  0E01               	movlw	1
  2368  0009AA  B4D8               	btfsc	status,2,c
  2369  0009AC  5C15               	subwf	_i,w,c
  2370  0009AE  B0D8               	btfsc	status,0,c
  2371  0009B0  D7E9               	goto	i2l1412
  2372  0009B2                     i2l1418:
  2373                           
  2374                           ;main.c: 133: i=0;
  2375  0009B2  0E00               	movlw	0
  2376  0009B4  6E16               	movwf	_i+1,c
  2377  0009B6  0E00               	movlw	0
  2378  0009B8  6E15               	movwf	_i,c
  2379  0009BA                     i2l95:
  2380  0009BA  C03D  FFF5         	movff	??_ISR+13,tablat
  2381  0009BE  C03C  FFF8         	movff	??_ISR+12,tblptru
  2382  0009C2  C03B  FFF7         	movff	??_ISR+11,tblptrh
  2383  0009C6  C03A  FFF6         	movff	??_ISR+10,tblptrl
  2384  0009CA  C039  FFF4         	movff	??_ISR+9,prodh
  2385  0009CE  C038  FFF3         	movff	??_ISR+8,prodl
  2386  0009D2  C037  FFDA         	movff	??_ISR+7,fsr2h
  2387  0009D6  C036  FFD9         	movff	??_ISR+6,fsr2l
  2388  0009DA  C035  FFE2         	movff	??_ISR+5,fsr1h
  2389  0009DE  C034  FFE1         	movff	??_ISR+4,fsr1l
  2390  0009E2  C033  FFEA         	movff	??_ISR+3,fsr0h
  2391  0009E6  C032  FFE9         	movff	??_ISR+2,fsr0l
  2392  0009EA  C031  FFFB         	movff	??_ISR+1,pclatu
  2393  0009EE  C030  FFFA         	movff	??_ISR,pclath
  2394  0009F2  0011               	retfie		f
  2395  0009F4                     __end_of_ISR:
  2396                           	opt stack 0
  2397                           pclatu	equ	0xFFB
  2398                           pclath	equ	0xFFA
  2399                           tblptru	equ	0xFF8
  2400                           tblptrh	equ	0xFF7
  2401                           tblptrl	equ	0xFF6
  2402                           tablat	equ	0xFF5
  2403                           prodh	equ	0xFF4
  2404                           prodl	equ	0xFF3
  2405                           intcon	equ	0xFF2
  2406                           postinc0	equ	0xFEE
  2407                           fsr0h	equ	0xFEA
  2408                           fsr0l	equ	0xFE9
  2409                           wreg	equ	0xFE8
  2410                           fsr1h	equ	0xFE2
  2411                           fsr1l	equ	0xFE1
  2412                           indf2	equ	0xFDF
  2413                           fsr2h	equ	0xFDA
  2414                           fsr2l	equ	0xFD9
  2415                           status	equ	0xFD8
  2416                           
  2417 ;; *************** function _strncpy *****************
  2418 ;; Defined at:
  2419 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\strncpy.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;  to              2    0[COMRAM] PTR unsigned char 
  2422 ;;		 -> DC_str(5), 
  2423 ;;  from            2    2[COMRAM] PTR const unsigned char 
  2424 ;;		 -> MessageBuffer(200), 
  2425 ;;  size            2    4[COMRAM] unsigned int 
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;  cp              2    6[COMRAM] PTR unsigned char 
  2428 ;;		 -> DC_str(5), 
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  2    0[COMRAM] PTR unsigned char 
  2431 ;; Registers used:
  2432 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2438 ;;      Params:         6       0       0       0       0       0       0       0       0
  2439 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2440 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2441 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2442 ;;Total ram usage:        8 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; This function calls:
  2445 ;;		Nothing
  2446 ;; This function is called by:
  2447 ;;		_ISR
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text12
  2452  001004                     __ptext12:
  2453                           	opt stack 0
  2454  001004                     _strncpy:
  2455                           	opt stack 25
  2456                           
  2457                           ;incstack = 0
  2458  001004  C024  F02A         	movff	strncpy@to+1,strncpy@cp+1
  2459  001008  C023  F029         	movff	strncpy@to,strncpy@cp
  2460  00100C  D014               	goto	i2l1130
  2461  00100E                     i2l1124:
  2462  00100E  0627               	decf	strncpy@size,f,c
  2463  001010  A0D8               	btfss	status,0,c
  2464  001012  0628               	decf	strncpy@size+1,f,c
  2465  001014  C025  FFD9         	movff	strncpy@from,fsr2l
  2466  001018  C026  FFDA         	movff	strncpy@from+1,fsr2h
  2467  00101C  4A25               	infsnz	strncpy@from,f,c
  2468  00101E  2A26               	incf	strncpy@from+1,f,c
  2469  001020  C029  FFE1         	movff	strncpy@cp,fsr1l
  2470  001024  C02A  FFE2         	movff	strncpy@cp+1,fsr1h
  2471  001028  4A29               	infsnz	strncpy@cp,f,c
  2472  00102A  2A2A               	incf	strncpy@cp+1,f,c
  2473  00102C  CFDF FFE7          	movff	indf2,indf1
  2474  001030  50E7               	movf	indf1,w,c
  2475  001032  B4D8               	btfsc	status,2,c
  2476  001034  D00D               	goto	i2l1136
  2477  001036                     i2l1130:
  2478  001036  5028               	movf	strncpy@size+1,w,c
  2479  001038  1027               	iorwf	strncpy@size,w,c
  2480  00103A  B4D8               	btfsc	status,2,c
  2481  00103C  D009               	goto	i2l1136
  2482  00103E  D7E7               	goto	i2l1124
  2483  001040                     i2l1132:
  2484  001040  C029  FFD9         	movff	strncpy@cp,fsr2l
  2485  001044  C02A  FFDA         	movff	strncpy@cp+1,fsr2h
  2486  001048  0E00               	movlw	0
  2487  00104A  6EDF               	movwf	indf2,c
  2488  00104C  4A29               	infsnz	strncpy@cp,f,c
  2489  00104E  2A2A               	incf	strncpy@cp+1,f,c
  2490  001050                     i2l1136:
  2491  001050  0627               	decf	strncpy@size,f,c
  2492  001052  A0D8               	btfss	status,0,c
  2493  001054  0628               	decf	strncpy@size+1,f,c
  2494  001056  2827               	incf	strncpy@size& (0+255),w,c
  2495  001058  B4D8               	btfsc	status,2,c
  2496  00105A  2828               	incf	(strncpy@size+1)& (0+255),w,c
  2497  00105C  B4D8               	btfsc	status,2,c
  2498                           
  2499                           ;	Return value of _strncpy is never used
  2500  00105E  0012               	return	
  2501  001060  D7EF               	goto	i2l1132
  2502  001062                     __end_of_strncpy:
  2503                           	opt stack 0
  2504                           pclatu	equ	0xFFB
  2505                           pclath	equ	0xFFA
  2506                           tblptru	equ	0xFF8
  2507                           tblptrh	equ	0xFF7
  2508                           tblptrl	equ	0xFF6
  2509                           tablat	equ	0xFF5
  2510                           prodh	equ	0xFF4
  2511                           prodl	equ	0xFF3
  2512                           intcon	equ	0xFF2
  2513                           postinc0	equ	0xFEE
  2514                           fsr0h	equ	0xFEA
  2515                           fsr0l	equ	0xFE9
  2516                           wreg	equ	0xFE8
  2517                           indf1	equ	0xFE7
  2518                           fsr1h	equ	0xFE2
  2519                           fsr1l	equ	0xFE1
  2520                           indf2	equ	0xFDF
  2521                           fsr2h	equ	0xFDA
  2522                           fsr2l	equ	0xFD9
  2523                           status	equ	0xFD8
  2524                           
  2525 ;; *************** function _putsUSART *****************
  2526 ;; Defined at:
  2527 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\uputs.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;  data            2    1[COMRAM] PTR unsigned char 
  2530 ;;		 -> STR_4(17), STR_3(2), STR_2(27), DC_str(5), 
  2531 ;;		 -> MessageBuffer(200), 
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;		None
  2534 ;; Return value:  Size  Location     Type
  2535 ;;		None               void
  2536 ;; Registers used:
  2537 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2538 ;; Tracked objects:
  2539 ;;		On entry : 0/0
  2540 ;;		On exit  : 0/0
  2541 ;;		Unchanged: 0/0
  2542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2543 ;;      Params:         2       0       0       0       0       0       0       0       0
  2544 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2545 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2546 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2547 ;;Total ram usage:        4 bytes
  2548 ;; Hardware stack levels used:    1
  2549 ;; Hardware stack levels required when called:    1
  2550 ;; This function calls:
  2551 ;;		_WriteUSART
  2552 ;; This function is called by:
  2553 ;;		_ISR
  2554 ;; This function uses a non-reentrant model
  2555 ;;
  2556                           
  2557                           	psect	text13
  2558  001062                     __ptext13:
  2559                           	opt stack 0
  2560  001062                     _putsUSART:
  2561                           	opt stack 24
  2562  001062                     i2l244:
  2563  001062  A2AC               	btfss	4012,1,c	;volatile
  2564  001064  D7FE               	goto	i2l244
  2565  001066  C024  FFF6         	movff	putsUSART@data,tblptrl
  2566  00106A  C025  FFF7         	movff	putsUSART@data+1,tblptrh
  2567  00106E  6AF8               	clrf	tblptru,c
  2568  001070  0E07               	movlw	(high __ramtop+-1)
  2569  001072  64F7               	cpfsgt	tblptrh,c
  2570  001074  D003               	bra	i2u42_47
  2571  001076  0008               	tblrd		*
  2572  001078  50F5               	movf	tablat,w,c
  2573  00107A  D005               	bra	i2u42_40
  2574  00107C                     i2u42_47:
  2575  00107C  CFF6 FFE1          	movff	tblptrl,fsr1l
  2576  001080  CFF7 FFE2          	movff	tblptrh,fsr1h
  2577  001084  50E7               	movf	indf1,w,c
  2578  001086                     i2u42_40:
  2579  001086  ECC4  F008         	call	_WriteUSART
  2580  00108A  5024               	movf	putsUSART@data,w,c
  2581  00108C  6E26               	movwf	??_putsUSART& (0+255),c
  2582  00108E  5025               	movf	putsUSART@data+1,w,c
  2583  001090  6E27               	movwf	(??_putsUSART+1)& (0+255),c
  2584  001092  4A24               	infsnz	putsUSART@data,f,c
  2585  001094  2A25               	incf	putsUSART@data+1,f,c
  2586  001096  C026  FFF6         	movff	??_putsUSART,tblptrl
  2587  00109A  C027  FFF7         	movff	??_putsUSART+1,tblptrh
  2588  00109E  6AF8               	clrf	tblptru,c
  2589  0010A0  0E07               	movlw	(high __ramtop+-1)
  2590  0010A2  64F7               	cpfsgt	tblptrh,c
  2591  0010A4  D003               	bra	i2u43_47
  2592  0010A6  0008               	tblrd		*
  2593  0010A8  50F5               	movf	tablat,w,c
  2594  0010AA  D005               	bra	i2u43_40
  2595  0010AC                     i2u43_47:
  2596  0010AC  CFF6 FFE1          	movff	tblptrl,fsr1l
  2597  0010B0  CFF7 FFE2          	movff	tblptrh,fsr1h
  2598  0010B4  50E7               	movf	indf1,w,c
  2599  0010B6                     i2u43_40:
  2600  0010B6  0900               	iorlw	0
  2601  0010B8  B4D8               	btfsc	status,2,c
  2602  0010BA  0012               	return	
  2603  0010BC  D7D2               	goto	i2l244
  2604  0010BE                     __end_of_putsUSART:
  2605                           	opt stack 0
  2606                           pclatu	equ	0xFFB
  2607                           pclath	equ	0xFFA
  2608                           tblptru	equ	0xFF8
  2609                           tblptrh	equ	0xFF7
  2610                           tblptrl	equ	0xFF6
  2611                           tablat	equ	0xFF5
  2612                           prodh	equ	0xFF4
  2613                           prodl	equ	0xFF3
  2614                           intcon	equ	0xFF2
  2615                           postinc0	equ	0xFEE
  2616                           fsr0h	equ	0xFEA
  2617                           fsr0l	equ	0xFE9
  2618                           wreg	equ	0xFE8
  2619                           indf1	equ	0xFE7
  2620                           fsr1h	equ	0xFE2
  2621                           fsr1l	equ	0xFE1
  2622                           indf2	equ	0xFDF
  2623                           fsr2h	equ	0xFDA
  2624                           fsr2l	equ	0xFD9
  2625                           status	equ	0xFD8
  2626                           
  2627 ;; *************** function _WriteUSART *****************
  2628 ;; Defined at:
  2629 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;  data            1    wreg     unsigned char 
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;  data            1    0[COMRAM] unsigned char 
  2634 ;; Return value:  Size  Location     Type
  2635 ;;		None               void
  2636 ;; Registers used:
  2637 ;;		wreg
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2643 ;;      Params:         0       0       0       0       0       0       0       0       0
  2644 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2645 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2646 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2647 ;;Total ram usage:        1 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; This function calls:
  2650 ;;		Nothing
  2651 ;; This function is called by:
  2652 ;;		_putsUSART
  2653 ;; This function uses a non-reentrant model
  2654 ;;
  2655                           
  2656                           	psect	text14
  2657  001188                     __ptext14:
  2658                           	opt stack 0
  2659  001188                     _WriteUSART:
  2660                           	opt stack 24
  2661                           
  2662                           ;incstack = 0
  2663                           ;WriteUSART@data stored from wreg
  2664  001188  6E23               	movwf	WriteUSART@data,c
  2665  00118A  ACAC               	btfss	4012,6,c	;volatile
  2666  00118C  D003               	goto	i2l940
  2667  00118E  90AC               	bcf	4012,0,c	;volatile
  2668  001190  B219               	btfsc	_USART_Status,1,c
  2669  001192  80AC               	bsf	4012,0,c	;volatile
  2670  001194                     i2l940:
  2671  001194  C023  FFAD         	movff	WriteUSART@data,4013	;volatile
  2672  001198  0012               	return	
  2673  00119A                     __end_of_WriteUSART:
  2674                           	opt stack 0
  2675                           pclatu	equ	0xFFB
  2676                           pclath	equ	0xFFA
  2677                           tblptru	equ	0xFF8
  2678                           tblptrh	equ	0xFF7
  2679                           tblptrl	equ	0xFF6
  2680                           tablat	equ	0xFF5
  2681                           prodh	equ	0xFF4
  2682                           prodl	equ	0xFF3
  2683                           intcon	equ	0xFF2
  2684                           postinc0	equ	0xFEE
  2685                           fsr0h	equ	0xFEA
  2686                           fsr0l	equ	0xFE9
  2687                           wreg	equ	0xFE8
  2688                           indf1	equ	0xFE7
  2689                           fsr1h	equ	0xFE2
  2690                           fsr1l	equ	0xFE1
  2691                           indf2	equ	0xFDF
  2692                           fsr2h	equ	0xFDA
  2693                           fsr2l	equ	0xFD9
  2694                           status	equ	0xFD8
  2695                           
  2696 ;; *************** function _atoi *****************
  2697 ;; Defined at:
  2698 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\atoi.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;  s               2    6[COMRAM] PTR const unsigned char 
  2701 ;;		 -> DC_str(5), 
  2702 ;; Auto vars:     Size  Location     Type
  2703 ;;  a               2   11[COMRAM] int 
  2704 ;;  sign            1   10[COMRAM] unsigned char 
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  2    6[COMRAM] int 
  2707 ;; Registers used:
  2708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2714 ;;      Params:         2       0       0       0       0       0       0       0       0
  2715 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2716 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2717 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2718 ;;Total ram usage:        7 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; Hardware stack levels required when called:    1
  2721 ;; This function calls:
  2722 ;;		___wmul
  2723 ;;		_isdigit
  2724 ;; This function is called by:
  2725 ;;		_ISR
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           	psect	text15
  2730  000BFE                     __ptext15:
  2731                           	opt stack 0
  2732  000BFE                     _atoi:
  2733                           	opt stack 24
  2734                           
  2735                           ;incstack = 0
  2736  000BFE  D002               	goto	i2l1350
  2737  000C00                     i2l1348:
  2738  000C00  4A29               	infsnz	atoi@s,f,c
  2739  000C02  2A2A               	incf	atoi@s+1,f,c
  2740  000C04                     i2l1350:
  2741  000C04  C029  FFD9         	movff	atoi@s,fsr2l
  2742  000C08  C02A  FFDA         	movff	atoi@s+1,fsr2h
  2743  000C0C  50DF               	movf	indf2,w,c
  2744  000C0E  0A20               	xorlw	32
  2745  000C10  B4D8               	btfsc	status,2,c
  2746  000C12  D7F6               	goto	i2l1348
  2747  000C14  C029  FFD9         	movff	atoi@s,fsr2l
  2748  000C18  C02A  FFDA         	movff	atoi@s+1,fsr2h
  2749  000C1C  50DF               	movf	indf2,w,c
  2750  000C1E  0A09               	xorlw	9
  2751  000C20  B4D8               	btfsc	status,2,c
  2752  000C22  D7EE               	goto	i2l1348
  2753  000C24  0E00               	movlw	0
  2754  000C26  6E2F               	movwf	atoi@a+1,c
  2755  000C28  0E00               	movlw	0
  2756  000C2A  6E2E               	movwf	atoi@a,c
  2757  000C2C  0E00               	movlw	0
  2758  000C2E  6E2D               	movwf	atoi@sign,c
  2759  000C30  0E2D               	movlw	45
  2760  000C32  C029  FFD9         	movff	atoi@s,fsr2l
  2761  000C36  C02A  FFDA         	movff	atoi@s+1,fsr2h
  2762  000C3A  62DF               	cpfseq	indf2,c
  2763  000C3C  D002               	goto	i2l1360
  2764  000C3E  2A2D               	incf	atoi@sign,f,c
  2765  000C40  D023               	goto	L1
  2766  000C42                     i2l1360:
  2767  000C42  0E2B               	movlw	43
  2768  000C44  C029  FFD9         	movff	atoi@s,fsr2l
  2769  000C48  C02A  FFDA         	movff	atoi@s+1,fsr2h
  2770  000C4C  62DF               	cpfseq	indf2,c
  2771  000C4E  D01E               	goto	i2l1368
  2772  000C50  D01B               	goto	L1
  2773  000C52                     i2l1364:
  2774  000C52  C02E  F023         	movff	atoi@a,___wmul@multiplier
  2775  000C56  C02F  F024         	movff	atoi@a+1,___wmul@multiplier+1
  2776  000C5A  0E00               	movlw	0
  2777  000C5C  6E26               	movwf	___wmul@multiplicand+1,c
  2778  000C5E  0E0A               	movlw	10
  2779  000C60  6E25               	movwf	___wmul@multiplicand,c
  2780  000C62  EC7C  F008         	call	___wmul	;wreg free
  2781  000C66  C029  FFD9         	movff	atoi@s,fsr2l
  2782  000C6A  C02A  FFDA         	movff	atoi@s+1,fsr2h
  2783  000C6E  50DF               	movf	indf2,w,c
  2784  000C70  6E2B               	movwf	??_atoi& (0+255),c
  2785  000C72  6A2C               	clrf	(??_atoi+1)& (0+255),c
  2786  000C74  5023               	movf	?___wmul,w,c
  2787  000C76  262B               	addwf	??_atoi,f,c
  2788  000C78  5024               	movf	?___wmul+1,w,c
  2789  000C7A  222C               	addwfc	??_atoi+1,f,c
  2790  000C7C  0ED0               	movlw	208
  2791  000C7E  242B               	addwf	??_atoi,w,c
  2792  000C80  6E2E               	movwf	atoi@a,c
  2793  000C82  0EFF               	movlw	255
  2794  000C84  202C               	addwfc	??_atoi+1,w,c
  2795  000C86  6E2F               	movwf	atoi@a+1,c
  2796  000C88                     L1:
  2797  000C88  4A29               	infsnz	atoi@s,f,c
  2798  000C8A  2A2A               	incf	atoi@s+1,f,c
  2799  000C8C                     i2l1368:
  2800  000C8C  C029  FFD9         	movff	atoi@s,fsr2l
  2801  000C90  C02A  FFDA         	movff	atoi@s+1,fsr2h
  2802  000C94  50DF               	movf	indf2,w,c
  2803  000C96  EC8F  F008         	call	_isdigit
  2804  000C9A  B0D8               	btfsc	status,0,c
  2805  000C9C  D7DA               	goto	i2l1364
  2806  000C9E  502D               	movf	atoi@sign,w,c
  2807  000CA0  B4D8               	btfsc	status,2,c
  2808  000CA2  D00D               	goto	i2l457
  2809  000CA4  C02E  F02B         	movff	atoi@a,??_atoi
  2810  000CA8  C02F  F02C         	movff	atoi@a+1,??_atoi+1
  2811  000CAC  1E2B               	comf	??_atoi,f,c
  2812  000CAE  1E2C               	comf	??_atoi+1,f,c
  2813  000CB0  4A2B               	infsnz	??_atoi,f,c
  2814  000CB2  2A2C               	incf	??_atoi+1,f,c
  2815  000CB4  C02B  F029         	movff	??_atoi,?_atoi
  2816  000CB8  C02C  F02A         	movff	??_atoi+1,?_atoi+1
  2817  000CBC  D004               	goto	i2l458
  2818  000CBE                     i2l457:
  2819  000CBE  C02E  F029         	movff	atoi@a,?_atoi
  2820  000CC2  C02F  F02A         	movff	atoi@a+1,?_atoi+1
  2821  000CC6                     i2l458:
  2822  000CC6  0012               	return	
  2823  000CC8                     __end_of_atoi:
  2824                           	opt stack 0
  2825                           pclatu	equ	0xFFB
  2826                           pclath	equ	0xFFA
  2827                           tblptru	equ	0xFF8
  2828                           tblptrh	equ	0xFF7
  2829                           tblptrl	equ	0xFF6
  2830                           tablat	equ	0xFF5
  2831                           prodh	equ	0xFF4
  2832                           prodl	equ	0xFF3
  2833                           intcon	equ	0xFF2
  2834                           postinc0	equ	0xFEE
  2835                           fsr0h	equ	0xFEA
  2836                           fsr0l	equ	0xFE9
  2837                           wreg	equ	0xFE8
  2838                           indf1	equ	0xFE7
  2839                           fsr1h	equ	0xFE2
  2840                           fsr1l	equ	0xFE1
  2841                           indf2	equ	0xFDF
  2842                           fsr2h	equ	0xFDA
  2843                           fsr2l	equ	0xFD9
  2844                           status	equ	0xFD8
  2845                           
  2846 ;; *************** function _isdigit *****************
  2847 ;; Defined at:
  2848 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;  c               1    wreg     unsigned char 
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;  c               1    2[COMRAM] unsigned char 
  2853 ;; Return value:  Size  Location     Type
  2854 ;;		None               void
  2855 ;; Registers used:
  2856 ;;		wreg, status,2, status,0
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2862 ;;      Params:         0       0       0       0       0       0       0       0       0
  2863 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2864 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2865 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2866 ;;Total ram usage:        3 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; This function calls:
  2869 ;;		Nothing
  2870 ;; This function is called by:
  2871 ;;		_atoi
  2872 ;; This function uses a non-reentrant model
  2873 ;;
  2874                           
  2875                           	psect	text16
  2876  00111E                     __ptext16:
  2877                           	opt stack 0
  2878  00111E                     _isdigit:
  2879                           	opt stack 24
  2880                           
  2881                           ;incstack = 0
  2882                           ;isdigit@c stored from wreg
  2883  00111E  6E25               	movwf	isdigit@c,c
  2884  001120  0E00               	movlw	0
  2885  001122  6E24               	movwf	_isdigit$1314,c
  2886  001124  0E3A               	movlw	58
  2887  001126  5C25               	subwf	isdigit@c,w,c
  2888  001128  B0D8               	btfsc	status,0,c
  2889  00112A  D005               	goto	i2l1342
  2890  00112C  0E2F               	movlw	47
  2891  00112E  6425               	cpfsgt	isdigit@c,c
  2892  001130  D002               	goto	i2l1342
  2893  001132  0E01               	movlw	1
  2894  001134  6E24               	movwf	_isdigit$1314,c
  2895  001136                     i2l1342:
  2896  001136  C024  F023         	movff	_isdigit$1314,??_isdigit
  2897  00113A  3023               	rrcf	??_isdigit,w,c
  2898  00113C  0012               	return	
  2899  00113E                     __end_of_isdigit:
  2900                           	opt stack 0
  2901                           pclatu	equ	0xFFB
  2902                           pclath	equ	0xFFA
  2903                           tblptru	equ	0xFF8
  2904                           tblptrh	equ	0xFF7
  2905                           tblptrl	equ	0xFF6
  2906                           tablat	equ	0xFF5
  2907                           prodh	equ	0xFF4
  2908                           prodl	equ	0xFF3
  2909                           intcon	equ	0xFF2
  2910                           postinc0	equ	0xFEE
  2911                           fsr0h	equ	0xFEA
  2912                           fsr0l	equ	0xFE9
  2913                           wreg	equ	0xFE8
  2914                           indf1	equ	0xFE7
  2915                           fsr1h	equ	0xFE2
  2916                           fsr1l	equ	0xFE1
  2917                           indf2	equ	0xFDF
  2918                           fsr2h	equ	0xFDA
  2919                           fsr2l	equ	0xFD9
  2920                           status	equ	0xFD8
  2921                           
  2922 ;; *************** function ___wmul *****************
  2923 ;; Defined at:
  2924 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;  multiplier      2    0[COMRAM] unsigned int 
  2927 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;  product         2    4[COMRAM] unsigned int 
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  2    0[COMRAM] unsigned int 
  2932 ;; Registers used:
  2933 ;;		wreg, status,2, status,0, prodl, prodh
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2939 ;;      Params:         4       0       0       0       0       0       0       0       0
  2940 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2941 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2942 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2943 ;;Total ram usage:        6 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; This function calls:
  2946 ;;		Nothing
  2947 ;; This function is called by:
  2948 ;;		_atoi
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           	psect	text17
  2953  0010F8                     __ptext17:
  2954                           	opt stack 0
  2955  0010F8                     ___wmul:
  2956                           	opt stack 24
  2957                           
  2958                           ;incstack = 0
  2959  0010F8  5023               	movf	___wmul@multiplier,w,c
  2960  0010FA  0225               	mulwf	___wmul@multiplicand,c
  2961  0010FC  CFF3 F027          	movff	prodl,___wmul@product
  2962  001100  CFF4 F028          	movff	prodh,___wmul@product+1
  2963  001104  5023               	movf	___wmul@multiplier,w,c
  2964  001106  0226               	mulwf	___wmul@multiplicand+1,c
  2965  001108  50F3               	movf	prodl,w,c
  2966  00110A  2628               	addwf	___wmul@product+1,f,c
  2967  00110C  5024               	movf	___wmul@multiplier+1,w,c
  2968  00110E  0225               	mulwf	___wmul@multiplicand,c
  2969  001110  50F3               	movf	prodl,w,c
  2970  001112  2628               	addwf	___wmul@product+1,f,c
  2971  001114  C027  F023         	movff	___wmul@product,?___wmul
  2972  001118  C028  F024         	movff	___wmul@product+1,?___wmul+1
  2973  00111C  0012               	return	
  2974  00111E                     __end_of___wmul:
  2975                           	opt stack 0
  2976                           pclatu	equ	0xFFB
  2977                           pclath	equ	0xFFA
  2978                           tblptru	equ	0xFF8
  2979                           tblptrh	equ	0xFF7
  2980                           tblptrl	equ	0xFF6
  2981                           tablat	equ	0xFF5
  2982                           prodh	equ	0xFF4
  2983                           prodl	equ	0xFF3
  2984                           intcon	equ	0xFF2
  2985                           postinc0	equ	0xFEE
  2986                           fsr0h	equ	0xFEA
  2987                           fsr0l	equ	0xFE9
  2988                           wreg	equ	0xFE8
  2989                           indf1	equ	0xFE7
  2990                           fsr1h	equ	0xFE2
  2991                           fsr1l	equ	0xFE1
  2992                           indf2	equ	0xFDF
  2993                           fsr2h	equ	0xFDA
  2994                           fsr2l	equ	0xFD9
  2995                           status	equ	0xFD8
  2996                           
  2997 ;; *************** function _ReadUSART *****************
  2998 ;; Defined at:
  2999 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;		None
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;  data            1    0[COMRAM] unsigned char 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      unsigned char 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2, status,0
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3013 ;;      Params:         0       0       0       0       0       0       0       0       0
  3014 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3016 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3017 ;;Total ram usage:        1 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; This function calls:
  3020 ;;		Nothing
  3021 ;; This function is called by:
  3022 ;;		_ISR
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           	psect	text18
  3027  00113E                     __ptext18:
  3028                           	opt stack 0
  3029  00113E                     _ReadUSART:
  3030                           	opt stack 25
  3031                           
  3032                           ;incstack = 0
  3033  00113E  0EF2               	movlw	242
  3034  001140  1619               	andwf	_USART_Status,f,c
  3035  001142  ACAB               	btfss	4011,6,c	;volatile
  3036  001144  D003               	goto	i2l257
  3037  001146  9019               	bcf	_USART_Status,0,c
  3038  001148  B0AB               	btfsc	4011,0,c	;volatile
  3039  00114A  8019               	bsf	_USART_Status,0,c
  3040  00114C                     i2l257:
  3041  00114C  B4AB               	btfsc	4011,2,c	;volatile
  3042  00114E  8419               	bsf	_USART_Status,2,c
  3043  001150  B2AB               	btfsc	4011,1,c	;volatile
  3044  001152  8619               	bsf	_USART_Status,3,c
  3045  001154  CFAE F023          	movff	4014,ReadUSART@data	;volatile
  3046  001158  5023               	movf	ReadUSART@data,w,c
  3047  00115A  0012               	return	
  3048  00115C                     __end_of_ReadUSART:
  3049                           	opt stack 0
  3050                           pclatu	equ	0xFFB
  3051                           pclath	equ	0xFFA
  3052                           tblptru	equ	0xFF8
  3053                           tblptrh	equ	0xFF7
  3054                           tblptrl	equ	0xFF6
  3055                           tablat	equ	0xFF5
  3056                           prodh	equ	0xFF4
  3057                           prodl	equ	0xFF3
  3058                           intcon	equ	0xFF2
  3059                           postinc0	equ	0xFEE
  3060                           fsr0h	equ	0xFEA
  3061                           fsr0l	equ	0xFE9
  3062                           wreg	equ	0xFE8
  3063                           indf1	equ	0xFE7
  3064                           fsr1h	equ	0xFE2
  3065                           fsr1l	equ	0xFE1
  3066                           indf2	equ	0xFDF
  3067                           fsr2h	equ	0xFDA
  3068                           fsr2l	equ	0xFD9
  3069                           status	equ	0xFD8
  3070                           pclatu	equ	0xFFB
  3071                           pclath	equ	0xFFA
  3072                           tblptru	equ	0xFF8
  3073                           tblptrh	equ	0xFF7
  3074                           tblptrl	equ	0xFF6
  3075                           tablat	equ	0xFF5
  3076                           prodh	equ	0xFF4
  3077                           prodl	equ	0xFF3
  3078                           intcon	equ	0xFF2
  3079                           postinc0	equ	0xFEE
  3080                           fsr0h	equ	0xFEA
  3081                           fsr0l	equ	0xFE9
  3082                           wreg	equ	0xFE8
  3083                           indf1	equ	0xFE7
  3084                           fsr1h	equ	0xFE2
  3085                           fsr1l	equ	0xFE1
  3086                           indf2	equ	0xFDF
  3087                           fsr2h	equ	0xFDA
  3088                           fsr2l	equ	0xFD9
  3089                           status	equ	0xFD8
  3090                           
  3091                           	psect	rparam
  3092  0000                     pclatu	equ	0xFFB
  3093                           pclath	equ	0xFFA
  3094                           tblptru	equ	0xFF8
  3095                           tblptrh	equ	0xFF7
  3096                           tblptrl	equ	0xFF6
  3097                           tablat	equ	0xFF5
  3098                           prodh	equ	0xFF4
  3099                           prodl	equ	0xFF3
  3100                           intcon	equ	0xFF2
  3101                           postinc0	equ	0xFEE
  3102                           fsr0h	equ	0xFEA
  3103                           fsr0l	equ	0xFE9
  3104                           wreg	equ	0xFE8
  3105                           indf1	equ	0xFE7
  3106                           fsr1h	equ	0xFE2
  3107                           fsr1l	equ	0xFE1
  3108                           indf2	equ	0xFDF
  3109                           fsr2h	equ	0xFDA
  3110                           fsr2l	equ	0xFD9
  3111                           status	equ	0xFD8


Data Sizes:
    Strings     57
    Constant    4
    Data        2
    BSS         650
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     32      68
    BANK0           160     14      30
    BANK1           256      0     200
    BANK2           256      0     200
    BANK3           256      0     200
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strncpy@from	PTR const unsigned char  size(2) Largest target is 200
		 -> MessageBuffer(BANK1[200]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 200
		 -> STR_4(CODE[17]), STR_3(CODE[2]), STR_2(CODE[27]), DC_str(COMRAM[5]), 
		 -> MessageBuffer(BANK1[200]), 

    lcd_puts@str	PTR unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 


Critical Paths under _main in COMRAM

    _main->_OpenUSART
    _main->_lcd_write_byte
    _lcd_puts->_lcd_write_byte
    _lcd_putnum->_lcd_write_byte
    _lcd_gotoxy->_lcd_write_byte
    _lcd_init->_lcd_write_byte
    _lcd_write_byte->_lcd_write_nibble

Critical Paths under _ISR in COMRAM

    _ISR->_atoi
    _putsUSART->_WriteUSART
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_lcd_putnum
    _lcd_puts->_lcd_gotoxy
    _lcd_putnum->___lwdiv
    _lcd_putnum->_lcd_gotoxy

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   13915
                                             11 BANK0      3     3      0
                           _OpenPWM1
                          _OpenUSART
                          _SetDCPWM1
                         _lcd_gotoxy
                           _lcd_init
                         _lcd_putnum
                           _lcd_puts
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    3671
                                              3 BANK0      2     0      2
                         _lcd_gotoxy
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_putnum                                           8     3      5    4268
                                              3 BANK0      8     3      5
                            ___lwdiv
                         _lcd_gotoxy
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    2104
                                              0 BANK0      3     2      1
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             27 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1908
                                              0 BANK0      1     1      0
                     _lcd_write_byte
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (1) _lcd_write_byte                                       2     1      1    1414
                                             30 COMRAM     2     1      1
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (2) _lcd_write_nibble                                     3     2      1     494
                                             27 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _SetDCPWM1                                            6     4      2     196
                                             27 COMRAM     4     2      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _OpenUSART                                            6     4      2     284
                                             27 COMRAM     5     3      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _OpenPWM1                                             1     1      0      22
                                             27 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 14    14      0    1150
                                             13 COMRAM    14    14      0
                          _ReadUSART
                               _atoi
                          _putsUSART
                            _strncpy
 ---------------------------------------------------------------------------------
 (6) _strncpy                                              8     2      6     254
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _putsUSART                                            4     2      2     310
                                              1 COMRAM     4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (7) _WriteUSART                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _atoi                                                 7     5      2     571
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     211
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _ReadUSART                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OpenPWM1
   _OpenUSART
   _SetDCPWM1
   _lcd_gotoxy
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_init
     _lcd_write_byte
       _lcd_write_nibble
     _lcd_write_nibble
   _lcd_putnum
     ___lwdiv
     _lcd_gotoxy
       _lcd_write_byte
         _lcd_write_nibble
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_puts
     _lcd_gotoxy
       _lcd_write_byte
         _lcd_write_nibble
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_write_byte
     _lcd_write_nibble

 _ISR (ROOT)
   _ReadUSART
   _atoi
     ___wmul
     _isdigit
   _putsUSART
     _WriteUSART
   _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      E      1E       5       18.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     20      44       1       71.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2BA      20        0.0%
DATA                 0      0     2BA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Jan 03 19:41:50 2017

                        _c 001A                          _i 0015                          _k 0017  
      ___wmul@multiplicand 0025                        l131 0E84                        l134 0EDA  
                      l231 0E38                        l232 0E3A                        l233 0E46  
                      l234 0E48                        l227 0E1E                        l236 0E6A  
                      l807 0F9C                        _PR2 000FCB                        _ISR 0008  
                      u945 10C8                        u785 0CD2                        u786 0CD4  
                      wreg 000FE8               __CFG_FOSC$HS 000000                lcd_gotoxy@x 0072  
              lcd_gotoxy@y 0070               __CFG_LVP$OFF 000000                       ?_ISR 0023  
             __CFG_WDT$OFF 000000                       l1602 0F3E                       l1464 0F62  
                     l1640 0A7A                       l1490 0E0E                       l1466 0F6C  
                     l1476 0F90                       l1468 0F70                       l1580 0DCA  
                     l1572 0D92                       l1582 0DD4                       l1576 0DB2  
                     l1568 0D64                       l1584 0DDA                       l1498 0E20  
                     l1588 0EE6                       STR_1 0831                       STR_2 0805  
                     STR_3 082F                       STR_4 0820                       u1107 0A66  
                     u1117 0AC8                       u1207 0B40                       u1127 0ADA  
                     u1217 0B5C                       u1137 0AEC                       u1227 0B78  
                     u1147 0AFE                       u1237 0B9E                       u1157 0B10  
                     u1247 0BBA                       u1167 0EAC                       u1257 0BD6  
                     u1177 0EC0                       u1267 0BF2                       u1187 0ED4  
                     u1277 0CD6                       u1197 0B26                       u1287 0D50  
                     u1297 0D5A                       _PIE1 000F9D                       _PEIE 007F96  
                     _RCIE 007CED                       _RCIF 007CF5                       _RCIP 007CFD  
                     i2l95 09BA     __end_of_lcd_write_byte 1176                       _atoi 0BFE  
                     _main 09F4                       fsr0h 000FEA                       fsr1h 000FE2  
                     fsr0l 000FE9                       fsr2h 000FDA                       indf1 000FE7  
                     fsr1l 000FE1                       indf2 000FDF                       fsr2l 000FD9  
              lcd_puts@str 0073                       pclat 000FFA                       prodh 000FF4  
                     prodl 000FF3                       start 0018                lcd_putnum@r 0079  
              lcd_putnum@x 0076                lcd_putnum@y 0077              __CFG_MCLRE$ON 000000  
                    ??_ISR 0030                      ?_atoi 0029                      ?_main 0023  
                    _T2CON 000FCA            __end_of___lwdiv 0FA6                      i2l244 1062  
                    i2l257 114C                      i2l457 0CBE                      i2l458 0CC6  
                    i2l940 1194                      _RCREG 000FAE                      _RCSTA 000FAB  
                    _SPBRG 000FAF                      _TRISC 000F94                      _TRISD 000F95  
                    _TXREG 000FAD                      _TXSTA 000FAC                      _lcd_x 001C  
                    _lcd_y 001D            __end_of_isdigit 113E                      atoi@a 002E  
                    atoi@s 0029                      tablat 000FF5                      status 000FD8  
          ?_lcd_write_byte 0041            __end_of_strncpy 1062             WriteUSART@data 0023  
          __initialization 0FA6               __end_of_atoi 0CC8               __end_of_main 0B1E  
         __end_of_OpenPWM1 1188                     ??_atoi 002B                     ??_main 007B  
            __activetblptr 000002                     _CCPR1L 000FBE                     i2l1130 1036  
                   i2l1132 1040                     i2l1124 100E                     i2l1136 1050  
                   i2l1400 0954                     i2l1410 0972                     i2l1412 0984  
                   i2l1342 1136                     i2l1350 0C04                     i2l1406 096A  
                   i2l1360 0C42                     i2l1416 099E                     i2l1418 09B2  
                   i2l1364 0C52                     i2l1348 0C00                     i2l1368 0C8C  
                   i2l1394 092C                     i2l1396 093A                     _DC_str 001E  
       __size_of_ReadUSART 001E                     _SPBRGH 000FB0         __size_of_SetDCPWM1 003A  
         __end_of_lcd_init 0BFE         __size_of_OpenUSART 007A           __end_of_lcd_puts 0DF2  
                   ___wmul 10F8   __end_of_lcd_write_nibble 0D62                  ??___lwdiv 0042  
                   clear_0 0FAC                     clear_1 0FB8                     clear_2 0FC4  
                   clear_3 0FD0                     clear_4 0FDC               __pdataCOMRAM 0043  
                ??_isdigit 0023       _lcd_lower_row_buffer 0300               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
            lcd_putnum@dec 0078              lcd_putnum@len 0075              lcd_putnum@num 0073  
                ??_strncpy 0029              _MessageBuffer 0100                 __accesstop 0060  
  __end_of__initialization 0FFA                 _WriteUSART 1188             __pcstackCOMRAM 0023  
        __end_of_ReadUSART 115C          __end_of_SetDCPWM1 10F8             lcd_gotoxy@addr 0071  
            ReadUSART@data 0023          __end_of_OpenUSART 0E6C                 __pbssBANK0 0060  
               __pbssBANK1 0100                 __pbssBANK2 0200                 __pbssBANK3 0300  
                ?_OpenPWM1 0023                    ?___wmul 0023                    _CCP1CON 000FBD  
            putsUSART@data 0024                 _lcd_gotoxy 0E6C                    i2u42_40 1086  
                  i2u42_47 107C                    i2u43_40 10B6                    i2u43_47 10AC  
       __size_of_putsUSART 005C           ??_lcd_write_byte 0042                 _lcd_putnum 0EDC  
                ?_lcd_init 0023                  ?_lcd_puts 0073                 ??_OpenPWM1 003E  
                  __Hparam 0000                    __Lparam 0000               _flag_newline 001B  
              ?_WriteUSART 0023            __size_of___wmul 0026                    ___lwdiv 0F46  
             __psmallconst 0800      lcd_write_byte@is_data 0041                    __pcinit 0FA6  
                  __ramtop 0800                    __ptext0 09F4                    __ptext1 0D62  
                  __ptext2 0EDC                    __ptext3 0E6C                    __ptext4 0F46  
                  __ptext5 0B1E                    __ptext6 115C                    __ptext7 0CC8  
                  __ptext8 10BE                    __ptext9 0DF2               __size_of_ISR 09EC  
                _T2CONbits 000FCA         lcd_write_byte@byte 0042                    _isdigit 111E  
     _lcd_upper_row_buffer 0200                 ??_lcd_init 0070             __pintcode_body 0840  
                  _strncpy 1004                 ??_lcd_puts 0043       end_of_initialization 0FFA  
         _cantidadLetrasUP 0013              __Lmediumconst 0000                    int_func 0840  
                _RCSTAbits 000FAB                    postinc0 000FEE          __end_of_putsUSART 10BE  
        ?_lcd_write_nibble 003E         ??_lcd_write_nibble 003F                  _TRISCbits 000F94  
              ?_lcd_gotoxy 0070                ?_lcd_putnum 0073        __size_of_WriteUSART 0012  
               main@config 007C                  _TXSTAbits 000FAC             __end_of___wmul 111E  
            __pidataCOMRAM 119A        start_initialization 0FA6                  _ReadUSART 113E  
              __end_of_ISR 09F4                  _SetDCPWM1 10BE            SetDCPWM1@DCycle 0070  
                _DutyCycle 0043   _lcd_lower_display_buffer 0001                  _OpenUSART 0DF2  
        __size_of_OpenPWM1 0012        __size_of_lcd_gotoxy 0070                   ??___wmul 0027  
      __size_of_lcd_putnum 006A                __pbssCOMRAM 0001                 ?_ReadUSART 0023  
            __pcstackBANK0 0070                 ?_SetDCPWM1 003E        __end_of__stringdata 083E  
             _isdigit$1314 0024                 ?_OpenUSART 003E          __size_of_lcd_init 00E0  
        __size_of_lcd_puts 0090           ___lwdiv@dividend 003E               ??_WriteUSART 0023  
                __pintcode 0008                   ?___lwdiv 003E                __smallconst 0800  
                 ?_isdigit 0023           ___lwdiv@quotient 0070            _LCD_ROW_ADDRESS 0801  
                 ?_strncpy 0023         __end_of_WriteUSART 119A             ___wmul@product 0027  
                 _LATDbits 000F8C                strncpy@from 0025                   _PIE1bits 000F9D  
              strncpy@size 0027                   _PIR1bits 000F9E   _lcd_upper_display_buffer 0060  
                _putsUSART 1062                __stringdata 0805          ___wmul@multiplier 0023  
              ??_ReadUSART 0023                  main@spbrg 007D               ??_lcd_gotoxy 0043  
              ??_SetDCPWM1 0040               ??_lcd_putnum 0043  __size_of_lcd_write_nibble 009A  
       _cantidadLetrasDOWN 0011                ??_OpenUSART 0040         SetDCPWM1@dutycycle 003E  
          OpenUSART@config 0070                   _OpenPWM1 1176    __size_of_lcd_write_byte 001A  
                 __Hrparam 0000    lcd_write_nibble@is_data 003E                   __Lrparam 0000  
       __end_of_lcd_gotoxy 0EDC           __size_of___lwdiv 0060         __end_of_lcd_putnum 0F46  
               ?_putsUSART 0024    __end_of_LCD_ROW_ADDRESS 0805             OpenPWM1@period 003E  
         __size_of_isdigit 0020            ___lwdiv@divisor 0040            ___lwdiv@counter 0072  
                 __ptext10 1176                   __ptext12 1004                   __ptext13 1062  
                 __ptext14 1188                   __ptext15 0BFE                   __ptext16 111E  
                 __ptext17 10F8                   __ptext18 113E                   _lcd_init 0B1E  
                 _lcd_puts 0D62           __size_of_strncpy 005E              __size_of_atoi 00CA  
            __size_of_main 012A                   atoi@sign 002D                 _INTCONbits 000FF2  
           OpenUSART@spbrg 003E     lcd_write_nibble@nibble 0040                   isdigit@c 0025  
                 intlevel2 0000                  strncpy@cp 0029                  strncpy@to 0023  
              ??_putsUSART 0026           _lcd_write_nibble 0CC8               _USART_Status 0019  
           _lcd_write_byte 115C  
