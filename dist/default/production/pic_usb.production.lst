

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Jan 03 18:58:39 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           	psect	idataCOMRAM
    41  0013BC                     __pidataCOMRAM:
    42                           	opt stack 0
    43                           
    44                           ;initializer for _DutyCycle
    45  0013BC  000A               	dw	10
    46                           
    47                           	psect	smallconst
    48  000800                     __psmallconst:
    49                           	opt stack 0
    50  000800  00                 	db	0
    51  000801                     _LCD_ROW_ADDRESS:
    52                           	opt stack 0
    53  000801  80                 	db	128
    54  000802  C0                 	db	192
    55  000803  94                 	db	148
    56  000804  D4                 	db	212
    57  000805                     __end_of_LCD_ROW_ADDRESS:
    58                           	opt stack 0
    59  0000                     _CCP1CON	set	4029
    60  0000                     _CCPR1L	set	4030
    61  0000                     _INTCONbits	set	4082
    62  0000                     _LATDbits	set	3980
    63  0000                     _PIE1	set	3997
    64  0000                     _PIE1bits	set	3997
    65  0000                     _PIR1bits	set	3998
    66  0000                     _PR2	set	4043
    67  0000                     _RCREG	set	4014
    68  0000                     _RCSTA	set	4011
    69  0000                     _RCSTAbits	set	4011
    70  0000                     _SPBRG	set	4015
    71  0000                     _SPBRGH	set	4016
    72  0000                     _T2CON	set	4042
    73  0000                     _T2CONbits	set	4042
    74  0000                     _TRISC	set	3988
    75  0000                     _TRISCbits	set	3988
    76  0000                     _TRISD	set	3989
    77  0000                     _TXREG	set	4013
    78  0000                     _TXSTA	set	4012
    79  0000                     _TXSTAbits	set	4012
    80  0000                     _PEIE	set	32662
    81  0000                     _RCIE	set	31981
    82  0000                     _RCIF	set	31989
    83  0000                     _RCIP	set	31997
    84                           
    85                           ; #config settings
    86  000805  00                 	db	0	; dummy byte at the end
    87  0000                     
    88                           	psect	cinit
    89  001202                     __pcinit:
    90                           	opt stack 0
    91  001202                     start_initialization:
    92                           	opt stack 0
    93  001202                     __initialization:
    94                           	opt stack 0
    95                           
    96                           ; Clear objects allocated to BANK3 (200 bytes)
    97  001202  EE03  F000         	lfsr	0,__pbssBANK3
    98  001206  0EC8               	movlw	200
    99  001208                     clear_0:
   100  001208  6AEE               	clrf	postinc0,c
   101  00120A  06E8               	decf	wreg,f,c
   102  00120C  E1FD               	bnz	clear_0
   103                           
   104                           ; Clear objects allocated to BANK2 (200 bytes)
   105  00120E  EE02  F000         	lfsr	0,__pbssBANK2
   106  001212  0EC8               	movlw	200
   107  001214                     clear_1:
   108  001214  6AEE               	clrf	postinc0,c
   109  001216  06E8               	decf	wreg,f,c
   110  001218  E1FD               	bnz	clear_1
   111                           
   112                           ; Clear objects allocated to BANK1 (200 bytes)
   113  00121A  EE01  F000         	lfsr	0,__pbssBANK1
   114  00121E  0EC8               	movlw	200
   115  001220                     clear_2:
   116  001220  6AEE               	clrf	postinc0,c
   117  001222  06E8               	decf	wreg,f,c
   118  001224  E1FD               	bnz	clear_2
   119                           
   120                           ; Clear objects allocated to COMRAM (45 bytes)
   121  001226  EE00  F001         	lfsr	0,__pbssCOMRAM
   122  00122A  0E2D               	movlw	45
   123  00122C                     clear_3:
   124  00122C  6AEE               	clrf	postinc0,c
   125  00122E  06E8               	decf	wreg,f,c
   126  001230  E1FD               	bnz	clear_3
   127                           
   128                           ; Initialize objects allocated to COMRAM (2 bytes)
   129                           ; load TBLPTR registers with __pidataCOMRAM
   130  001232  0EBC               	movlw	low __pidataCOMRAM
   131  001234  6EF6               	movwf	tblptrl,c
   132  001236  0E13               	movlw	high __pidataCOMRAM
   133  001238  6EF7               	movwf	tblptrh,c
   134  00123A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   135  00123C  6EF8               	movwf	tblptru,c
   136  00123E  0009               	tblrd		*+	;fetch initializer
   137  001240  CFF5 F04B          	movff	tablat,__pdataCOMRAM
   138  001244  0009               	tblrd		*+	;fetch initializer
   139  001246  CFF5 F04C          	movff	tablat,__pdataCOMRAM+1
   140  00124A                     end_of_initialization:
   141                           	opt stack 0
   142  00124A                     __end_of__initialization:
   143                           	opt stack 0
   144  00124A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   145  00124C  6EF8               	movwf	tblptru,c
   146  00124E  0100               	movlb	0
   147  001250  EF48  F005         	goto	_main	;jump to C main() function
   148                           tblptru	equ	0xFF8
   149                           tblptrh	equ	0xFF7
   150                           tblptrl	equ	0xFF6
   151                           tablat	equ	0xFF5
   152                           postinc0	equ	0xFEE
   153                           wreg	equ	0xFE8
   154                           
   155                           	psect	bssCOMRAM
   156  000001                     __pbssCOMRAM:
   157                           	opt stack 0
   158  000001                     _cantidadLetrasDOWN:
   159                           	opt stack 0
   160  000001                     	ds	2
   161  000003                     _cantidadLetrasUP:
   162                           	opt stack 0
   163  000003                     	ds	2
   164  000005                     _i:
   165                           	opt stack 0
   166  000005                     	ds	2
   167  000007                     _k:
   168                           	opt stack 0
   169  000007                     	ds	2
   170  000009                     _USART_Status:
   171                           	opt stack 0
   172  000009                     	ds	1
   173  00000A                     _c:
   174                           	opt stack 0
   175  00000A                     	ds	1
   176  00000B                     _flag_newline:
   177                           	opt stack 0
   178  00000B                     	ds	1
   179  00000C                     _lcd_x:
   180                           	opt stack 0
   181  00000C                     	ds	1
   182  00000D                     _lcd_y:
   183                           	opt stack 0
   184  00000D                     	ds	1
   185  00000E                     _lcd_lower_display_buffer:
   186                           	opt stack 0
   187  00000E                     	ds	16
   188  00001E                     _lcd_upper_display_buffer:
   189                           	opt stack 0
   190  00001E                     	ds	16
   191                           tblptru	equ	0xFF8
   192                           tblptrh	equ	0xFF7
   193                           tblptrl	equ	0xFF6
   194                           tablat	equ	0xFF5
   195                           postinc0	equ	0xFEE
   196                           wreg	equ	0xFE8
   197                           
   198                           	psect	dataCOMRAM
   199  00004B                     __pdataCOMRAM:
   200                           	opt stack 0
   201  00004B                     _DutyCycle:
   202                           	opt stack 0
   203  00004B                     	ds	2
   204                           tblptru	equ	0xFF8
   205                           tblptrh	equ	0xFF7
   206                           tblptrl	equ	0xFF6
   207                           tablat	equ	0xFF5
   208                           postinc0	equ	0xFEE
   209                           wreg	equ	0xFE8
   210                           
   211                           	psect	bssBANK1
   212  000100                     __pbssBANK1:
   213                           	opt stack 0
   214  000100                     _MessageBuffer:
   215                           	opt stack 0
   216  000100                     	ds	200
   217                           tblptru	equ	0xFF8
   218                           tblptrh	equ	0xFF7
   219                           tblptrl	equ	0xFF6
   220                           tablat	equ	0xFF5
   221                           postinc0	equ	0xFEE
   222                           wreg	equ	0xFE8
   223                           
   224                           	psect	bssBANK2
   225  000200                     __pbssBANK2:
   226                           	opt stack 0
   227  000200                     _lcd_upper_row_buffer:
   228                           	opt stack 0
   229  000200                     	ds	200
   230                           tblptru	equ	0xFF8
   231                           tblptrh	equ	0xFF7
   232                           tblptrl	equ	0xFF6
   233                           tablat	equ	0xFF5
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           
   237                           	psect	bssBANK3
   238  000300                     __pbssBANK3:
   239                           	opt stack 0
   240  000300                     _lcd_lower_row_buffer:
   241                           	opt stack 0
   242  000300                     	ds	200
   243                           tblptru	equ	0xFF8
   244                           tblptrh	equ	0xFF7
   245                           tblptrl	equ	0xFF6
   246                           tablat	equ	0xFF5
   247                           postinc0	equ	0xFEE
   248                           wreg	equ	0xFE8
   249                           
   250                           	psect	cstackBANK0
   251  000060                     __pcstackBANK0:
   252                           	opt stack 0
   253  000060                     lcd_write_nibble@is_data:
   254                           	opt stack 0
   255  000060                     OpenPWM1@period:
   256                           	opt stack 0
   257  000060                     rotarString@str:
   258                           	opt stack 0
   259  000060                     SetDCPWM1@dutycycle:
   260                           	opt stack 0
   261  000060                     OpenUSART@spbrg:
   262                           	opt stack 0
   263  000060                     strncpy@to:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x0
   267  000060                     	ds	1
   268  000061                     ??_lcd_write_nibble:
   269                           
   270                           ; 0 bytes @ 0x1
   271  000061                     	ds	1
   272  000062                     ??_OpenUSART:
   273  000062                     ??_SetDCPWM1:
   274  000062                     lcd_write_nibble@nibble:
   275                           	opt stack 0
   276  000062                     rotarString@length:
   277                           	opt stack 0
   278  000062                     strncpy@from:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x2
   282  000062                     	ds	1
   283  000063                     lcd_write_byte@is_data:
   284                           	opt stack 0
   285                           
   286                           ; 1 bytes @ 0x3
   287  000063                     	ds	1
   288  000064                     ??_rotarString:
   289  000064                     lcd_write_byte@byte:
   290                           	opt stack 0
   291  000064                     SetDCPWM1@DCycle:
   292                           	opt stack 0
   293  000064                     strncpy@size:
   294                           	opt stack 0
   295                           
   296                           ; 2 bytes @ 0x4
   297  000064                     	ds	1
   298  000065                     ??_lcd_init:
   299  000065                     lcd_gotoxy@y:
   300                           	opt stack 0
   301  000065                     OpenUSART@config:
   302                           	opt stack 0
   303                           
   304                           ; 1 bytes @ 0x5
   305  000065                     	ds	1
   306  000066                     lcd_gotoxy@addr:
   307                           	opt stack 0
   308  000066                     strncpy@cp:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x6
   312  000066                     	ds	1
   313  000067                     lcd_gotoxy@x:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0x7
   317  000067                     	ds	1
   318  000068                     lcd_puts@str:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x8
   322  000068                     	ds	1
   323  000069                     rotarString@aux:
   324                           	opt stack 0
   325                           
   326                           ; 1 bytes @ 0x9
   327  000069                     	ds	1
   328  00006A                     rotarString@j:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0xA
   332  00006A                     	ds	2
   333  00006C                     ??_main:
   334                           
   335                           ; 0 bytes @ 0xC
   336  00006C                     	ds	1
   337  00006D                     main@config:
   338                           	opt stack 0
   339                           
   340                           ; 1 bytes @ 0xD
   341  00006D                     	ds	1
   342  00006E                     main@spbrg:
   343                           	opt stack 0
   344                           
   345                           ; 1 bytes @ 0xE
   346  00006E                     	ds	1
   347                           tblptru	equ	0xFF8
   348                           tblptrh	equ	0xFF7
   349                           tblptrl	equ	0xFF6
   350                           tablat	equ	0xFF5
   351                           postinc0	equ	0xFEE
   352                           wreg	equ	0xFE8
   353                           
   354                           	psect	cstackCOMRAM
   355  00002E                     __pcstackCOMRAM:
   356                           	opt stack 0
   357  00002E                     ?_cuentaLetras:
   358                           	opt stack 0
   359  00002E                     ReadUSART@data:
   360                           	opt stack 0
   361  00002E                     WriteUSART@data:
   362                           	opt stack 0
   363  00002E                     i2lcd_write_nibble@is_data:
   364                           	opt stack 0
   365  00002E                     cuentaLetras@str:
   366                           	opt stack 0
   367  00002E                     strcpy@to:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0x0
   371  00002E                     	ds	1
   372  00002F                     ??i2_lcd_write_nibble:
   373  00002F                     putsUSART@data:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x1
   377  00002F                     	ds	1
   378  000030                     i2lcd_write_nibble@nibble:
   379                           	opt stack 0
   380  000030                     cuentaLetras@j:
   381                           	opt stack 0
   382  000030                     strcpy@from:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x2
   386  000030                     	ds	1
   387  000031                     i2lcd_write_byte@is_data:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x3
   391  000031                     	ds	1
   392  000032                     i2lcd_write_byte@byte:
   393                           	opt stack 0
   394  000032                     strcpy@cp:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x4
   398  000032                     	ds	1
   399  000033                     i2lcd_gotoxy@y:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x5
   403  000033                     	ds	1
   404  000034                     i2lcd_gotoxy@addr:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x6
   408  000034                     	ds	1
   409  000035                     i2lcd_gotoxy@x:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0x7
   413  000035                     	ds	1
   414  000036                     lcd_put_blank@y:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x8
   418  000036                     	ds	1
   419  000037                     lcd_put_blank@size:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x9
   423  000037                     	ds	1
   424  000038                     lcd_put_blank@x:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0xA
   428  000038                     	ds	1
   429  000039                     ??_ISR:
   430                           
   431                           ; 0 bytes @ 0xB
   432  000039                     	ds	18
   433                           tblptru	equ	0xFF8
   434                           tblptrh	equ	0xFF7
   435                           tblptrl	equ	0xFF6
   436                           tablat	equ	0xFF5
   437                           postinc0	equ	0xFEE
   438                           wreg	equ	0xFE8
   439                           
   440 ;;
   441 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   442 ;;
   443 ;; *************** function _main *****************
   444 ;; Defined at:
   445 ;;		line 42 in file "main.c"
   446 ;; Parameters:    Size  Location     Type
   447 ;;		None
   448 ;; Auto vars:     Size  Location     Type
   449 ;;  spbrg           1   14[BANK0 ] unsigned char 
   450 ;;  config          1   13[BANK0 ] unsigned char 
   451 ;; Return value:  Size  Location     Type
   452 ;;		None               void
   453 ;; Registers used:
   454 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   455 ;; Tracked objects:
   456 ;;		On entry : 0/0
   457 ;;		On exit  : 0/0
   458 ;;		Unchanged: 0/0
   459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   460 ;;      Params:         0       0       0       0       0       0       0       0       0
   461 ;;      Locals:         0       2       0       0       0       0       0       0       0
   462 ;;      Temps:          0       1       0       0       0       0       0       0       0
   463 ;;      Totals:         0       3       0       0       0       0       0       0       0
   464 ;;Total ram usage:        3 bytes
   465 ;; Hardware stack levels required when called:    9
   466 ;; This function calls:
   467 ;;		_OpenPWM1
   468 ;;		_OpenUSART
   469 ;;		_SetDCPWM1
   470 ;;		_lcd_gotoxy
   471 ;;		_lcd_init
   472 ;;		_lcd_puts
   473 ;;		_lcd_write_byte
   474 ;;		_rotarString
   475 ;;		_strncpy
   476 ;; This function is called by:
   477 ;;		Startup code after reset
   478 ;; This function uses a non-reentrant model
   479 ;;
   480                           
   481                           	psect	text0
   482  000A90                     __ptext0:
   483                           	opt stack 0
   484  000A90                     _main:
   485                           	opt stack 22
   486                           
   487                           ;main.c: 44: unsigned char config = 0, spbrg = 0;
   488                           
   489                           ;incstack = 0
   490  000A90  0E00               	movlw	0
   491  000A92  0100               	movlb	0	; () banked
   492  000A94  6F6D               	movwf	main@config& (0+255),b
   493  000A96  0E00               	movlw	0
   494  000A98  0100               	movlb	0	; () banked
   495  000A9A  6F6E               	movwf	main@spbrg& (0+255),b
   496                           
   497                           ;main.c: 46: TRISC = 0b10000000;
   498  000A9C  0E80               	movlw	128
   499  000A9E  6E94               	movwf	3988,c	;volatile
   500                           
   501                           ;main.c: 47: TRISD = 0b00000000;
   502  000AA0  0E00               	movlw	0
   503  000AA2  6E95               	movwf	3989,c	;volatile
   504                           
   505                           ; BSR set to: 0
   506                           ;main.c: 52: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
   507  000AA4  0E4F               	movlw	79
   508  000AA6  16AB               	andwf	4011,f,c	;volatile
   509                           
   510                           ; BSR set to: 0
   511  000AA8  9AAC               	bcf	4012,5,c	;volatile
   512                           
   513                           ; BSR set to: 0
   514  000AAA  0ECF               	movlw	207
   515  000AAC  169D               	andwf	3997,f,c	;volatile
   516                           
   517                           ;main.c: 53: config = 0b01111111& 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111;
   518  000AAE  0E7C               	movlw	124
   519  000AB0  0100               	movlb	0	; () banked
   520  000AB2  6F6D               	movwf	main@config& (0+255),b
   521                           
   522                           ;main.c: 54: spbrg = 77;
   523  000AB4  0E4D               	movlw	77
   524  000AB6  0100               	movlb	0	; () banked
   525  000AB8  6F6E               	movwf	main@spbrg& (0+255),b
   526                           
   527                           ; BSR set to: 0
   528                           ;main.c: 55: OpenUSART(config, spbrg);
   529  000ABA  0100               	movlb	0	; () banked
   530  000ABC  C06E  F060         	movff	main@spbrg,OpenUSART@spbrg
   531  000AC0  0100               	movlb	0	; () banked
   532  000AC2  6B61               	clrf	(OpenUSART@spbrg+1)& (0+255),b
   533  000AC4  0100               	movlb	0	; () banked
   534  000AC6  516D               	movf	main@config& (0+255),w,b
   535  000AC8  ECDF  F007         	call	_OpenUSART
   536                           
   537                           ;main.c: 56: RCIF = 0;
   538  000ACC  9A9E               	bcf	3998,5,c	;volatile
   539                           
   540                           ;main.c: 57: RCIP = 0;
   541  000ACE  9A9F               	bcf	3999,5,c	;volatile
   542                           
   543                           ;main.c: 58: RCIE = 1;
   544  000AD0  8A9D               	bsf	3997,5,c	;volatile
   545                           
   546                           ;main.c: 59: PEIE = 1;
   547  000AD2  8CF2               	bsf	intcon,6,c	;volatile
   548                           
   549                           ;main.c: 60: PIR1bits.RCIF = 0;
   550  000AD4  9A9E               	bcf	3998,5,c	;volatile
   551                           
   552                           ;main.c: 61: (INTCONbits.GIE = 1);
   553  000AD6  8EF2               	bsf	intcon,7,c	;volatile
   554                           
   555                           ;main.c: 65: T2CON = 0b00000111 ;
   556  000AD8  0E07               	movlw	7
   557  000ADA  6ECA               	movwf	4042,c	;volatile
   558                           
   559                           ;main.c: 66: OpenPWM1(0b10111011);
   560  000ADC  0EBB               	movlw	187
   561  000ADE  ECCB  F009         	call	_OpenPWM1
   562                           
   563                           ;main.c: 68: SetDCPWM1(DutyCycle);
   564  000AE2  C04B  F060         	movff	_DutyCycle,SetDCPWM1@dutycycle
   565  000AE6  C04C  F061         	movff	_DutyCycle+1,SetDCPWM1@dutycycle+1
   566  000AEA  EC2A  F009         	call	_SetDCPWM1	;wreg free
   567                           
   568                           ;main.c: 71: lcd_init();
   569  000AEE  EC45  F006         	call	_lcd_init	;wreg free
   570                           
   571                           ;main.c: 72: {lcd_write_byte(0x01, 0); { _delay((unsigned long)((5000)*(12000000/4000000
      +                          .0))); };};
   572  000AF2  0E00               	movlw	0
   573  000AF4  0100               	movlb	0	; () banked
   574  000AF6  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
   575  000AF8  0E01               	movlw	1
   576  000AFA  EC8F  F009         	call	_lcd_write_byte
   577  000AFE  0E14               	movlw	20
   578  000B00  0100               	movlb	0	; () banked
   579  000B02  6F6C               	movwf	??_main& (0+255),b
   580  000B04  0E7A               	movlw	122
   581  000B06                     u1487:
   582  000B06  2EE8               	decfsz	wreg,f,c
   583  000B08  D7FE               	goto	u1487
   584  000B0A  2F6C               	decfsz	??_main& (0+255),f,b
   585  000B0C  D7FC               	goto	u1487
   586                           
   587                           ;main.c: 73: lcd_gotoxy(0,0);
   588  000B0E  0E00               	movlw	0
   589  000B10  0100               	movlb	0	; () banked
   590  000B12  6F65               	movwf	lcd_gotoxy@y& (0+255),b
   591  000B14  0E00               	movlw	0
   592  000B16  EC96  F008         	call	_lcd_gotoxy
   593  000B1A                     l2044:
   594                           
   595                           ;main.c: 75: {
   596                           ;main.c: 77: lcd_gotoxy(0,0);
   597  000B1A  0E00               	movlw	0
   598  000B1C  0100               	movlb	0	; () banked
   599  000B1E  6F65               	movwf	lcd_gotoxy@y& (0+255),b
   600  000B20  0E00               	movlw	0
   601  000B22  EC96  F008         	call	_lcd_gotoxy
   602                           
   603                           ;main.c: 78: strncpy(lcd_upper_display_buffer, lcd_upper_row_buffer, 16);
   604  000B26  0E00               	movlw	high _lcd_upper_display_buffer
   605  000B28  0100               	movlb	0	; () banked
   606  000B2A  6F61               	movwf	(strncpy@to+1)& (0+255),b
   607  000B2C  0E1E               	movlw	low _lcd_upper_display_buffer
   608  000B2E  0100               	movlb	0	; () banked
   609  000B30  6F60               	movwf	strncpy@to& (0+255),b
   610  000B32  0102               	movlb	2	; () banked
   611  000B34  0E02               	movlw	high _lcd_upper_row_buffer
   612  000B36  0100               	movlb	0	; () banked
   613  000B38  6F63               	movwf	(strncpy@from+1)& (0+255),b
   614  000B3A  0102               	movlb	2	; () banked
   615  000B3C  0E00               	movlw	low _lcd_upper_row_buffer
   616  000B3E  0100               	movlb	0	; () banked
   617  000B40  6F62               	movwf	strncpy@from& (0+255),b
   618  000B42  0E00               	movlw	0
   619  000B44  0100               	movlb	0	; () banked
   620  000B46  6F65               	movwf	(strncpy@size+1)& (0+255),b
   621  000B48  0E10               	movlw	16
   622  000B4A  0100               	movlb	0	; () banked
   623  000B4C  6F64               	movwf	strncpy@size& (0+255),b
   624  000B4E  EC1F  F008         	call	_strncpy	;wreg free
   625                           
   626                           ;main.c: 79: lcd_puts(lcd_upper_display_buffer);
   627  000B52  0E00               	movlw	high _lcd_upper_display_buffer
   628  000B54  0100               	movlb	0	; () banked
   629  000B56  6F69               	movwf	(lcd_puts@str+1)& (0+255),b
   630  000B58  0E1E               	movlw	low _lcd_upper_display_buffer
   631  000B5A  0100               	movlb	0	; () banked
   632  000B5C  6F68               	movwf	lcd_puts@str& (0+255),b
   633  000B5E  EC5B  F008         	call	_lcd_puts	;wreg free
   634                           
   635                           ;main.c: 81: lcd_gotoxy(0,1);
   636  000B62  0E01               	movlw	1
   637  000B64  0100               	movlb	0	; () banked
   638  000B66  6F65               	movwf	lcd_gotoxy@y& (0+255),b
   639  000B68  0E00               	movlw	0
   640  000B6A  EC96  F008         	call	_lcd_gotoxy
   641                           
   642                           ;main.c: 82: strncpy(lcd_lower_display_buffer, lcd_lower_row_buffer, 16);
   643  000B6E  0E00               	movlw	high _lcd_lower_display_buffer
   644  000B70  0100               	movlb	0	; () banked
   645  000B72  6F61               	movwf	(strncpy@to+1)& (0+255),b
   646  000B74  0E0E               	movlw	low _lcd_lower_display_buffer
   647  000B76  0100               	movlb	0	; () banked
   648  000B78  6F60               	movwf	strncpy@to& (0+255),b
   649  000B7A  0103               	movlb	3	; () banked
   650  000B7C  0E03               	movlw	high _lcd_lower_row_buffer
   651  000B7E  0100               	movlb	0	; () banked
   652  000B80  6F63               	movwf	(strncpy@from+1)& (0+255),b
   653  000B82  0103               	movlb	3	; () banked
   654  000B84  0E00               	movlw	low _lcd_lower_row_buffer
   655  000B86  0100               	movlb	0	; () banked
   656  000B88  6F62               	movwf	strncpy@from& (0+255),b
   657  000B8A  0E00               	movlw	0
   658  000B8C  0100               	movlb	0	; () banked
   659  000B8E  6F65               	movwf	(strncpy@size+1)& (0+255),b
   660  000B90  0E10               	movlw	16
   661  000B92  0100               	movlb	0	; () banked
   662  000B94  6F64               	movwf	strncpy@size& (0+255),b
   663  000B96  EC1F  F008         	call	_strncpy	;wreg free
   664                           
   665                           ;main.c: 83: lcd_puts(lcd_lower_display_buffer);
   666  000B9A  0E00               	movlw	high _lcd_lower_display_buffer
   667  000B9C  0100               	movlb	0	; () banked
   668  000B9E  6F69               	movwf	(lcd_puts@str+1)& (0+255),b
   669  000BA0  0E0E               	movlw	low _lcd_lower_display_buffer
   670  000BA2  0100               	movlb	0	; () banked
   671  000BA4  6F68               	movwf	lcd_puts@str& (0+255),b
   672  000BA6  EC5B  F008         	call	_lcd_puts	;wreg free
   673                           
   674                           ;main.c: 84: if(cantidadLetrasUP > 16)
   675  000BAA  5004               	movf	_cantidadLetrasUP+1,w,c
   676  000BAC  0A80               	xorlw	128
   677  000BAE  0F80               	addlw	-128
   678  000BB0  0E11               	movlw	17
   679  000BB2  B4D8               	btfsc	status,2,c
   680  000BB4  5C03               	subwf	_cantidadLetrasUP,w,c
   681  000BB6  A0D8               	btfss	status,0,c
   682  000BB8  D00E               	goto	l2060
   683                           
   684                           ;main.c: 85: {
   685                           ;main.c: 86: rotarString(lcd_upper_row_buffer, cantidadLetrasUP);
   686  000BBA  0102               	movlb	2	; () banked
   687  000BBC  0E02               	movlw	high _lcd_upper_row_buffer
   688  000BBE  0100               	movlb	0	; () banked
   689  000BC0  6F61               	movwf	(rotarString@str+1)& (0+255),b
   690  000BC2  0102               	movlb	2	; () banked
   691  000BC4  0E00               	movlw	low _lcd_upper_row_buffer
   692  000BC6  0100               	movlb	0	; () banked
   693  000BC8  6F60               	movwf	rotarString@str& (0+255),b
   694  000BCA  C003  F062         	movff	_cantidadLetrasUP,rotarString@length
   695  000BCE  C004  F063         	movff	_cantidadLetrasUP+1,rotarString@length+1
   696  000BD2  ECBD  F006         	call	_rotarString	;wreg free
   697  000BD6                     l2060:
   698                           
   699                           ;main.c: 87: }
   700                           ;main.c: 88: if(cantidadLetrasDOWN > 16)
   701  000BD6  5002               	movf	_cantidadLetrasDOWN+1,w,c
   702  000BD8  0A80               	xorlw	128
   703  000BDA  0F80               	addlw	-128
   704  000BDC  0E11               	movlw	17
   705  000BDE  B4D8               	btfsc	status,2,c
   706  000BE0  5C01               	subwf	_cantidadLetrasDOWN,w,c
   707  000BE2  A0D8               	btfss	status,0,c
   708  000BE4  D00E               	goto	l2064
   709                           
   710                           ;main.c: 89: {
   711                           ;main.c: 90: rotarString(lcd_lower_row_buffer, cantidadLetrasDOWN);
   712  000BE6  0103               	movlb	3	; () banked
   713  000BE8  0E03               	movlw	high _lcd_lower_row_buffer
   714  000BEA  0100               	movlb	0	; () banked
   715  000BEC  6F61               	movwf	(rotarString@str+1)& (0+255),b
   716  000BEE  0103               	movlb	3	; () banked
   717  000BF0  0E00               	movlw	low _lcd_lower_row_buffer
   718  000BF2  0100               	movlb	0	; () banked
   719  000BF4  6F60               	movwf	rotarString@str& (0+255),b
   720  000BF6  C001  F062         	movff	_cantidadLetrasDOWN,rotarString@length
   721  000BFA  C002  F063         	movff	_cantidadLetrasDOWN+1,rotarString@length+1
   722  000BFE  ECBD  F006         	call	_rotarString	;wreg free
   723  000C02                     l2064:
   724                           
   725                           ;main.c: 91: }
   726                           ;main.c: 92: _delay((unsigned long)((50)*(12000000/4000.0)));
   727  000C02  0EC3               	movlw	195
   728  000C04  0100               	movlb	0	; () banked
   729  000C06  6F6C               	movwf	??_main& (0+255),b
   730  000C08  0ECD               	movlw	205
   731  000C0A                     u1497:
   732  000C0A  2EE8               	decfsz	wreg,f,c
   733  000C0C  D7FE               	goto	u1497
   734  000C0E  2F6C               	decfsz	??_main& (0+255),f,b
   735  000C10  D7FC               	goto	u1497
   736  000C12  F000               	nop	
   737                           
   738                           ;main.c: 93: _delay((unsigned long)((50)*(12000000/4000.0)));
   739  000C14  0EC3               	movlw	195
   740  000C16  0100               	movlb	0	; () banked
   741  000C18  6F6C               	movwf	??_main& (0+255),b
   742  000C1A  0ECD               	movlw	205
   743  000C1C                     u1507:
   744  000C1C  2EE8               	decfsz	wreg,f,c
   745  000C1E  D7FE               	goto	u1507
   746  000C20  2F6C               	decfsz	??_main& (0+255),f,b
   747  000C22  D7FC               	goto	u1507
   748  000C24  F000               	nop	
   749                           
   750                           ;main.c: 94: _delay((unsigned long)((50)*(12000000/4000.0)));
   751  000C26  0EC3               	movlw	195
   752  000C28  0100               	movlb	0	; () banked
   753  000C2A  6F6C               	movwf	??_main& (0+255),b
   754  000C2C  0ECD               	movlw	205
   755  000C2E                     u1517:
   756  000C2E  2EE8               	decfsz	wreg,f,c
   757  000C30  D7FE               	goto	u1517
   758  000C32  2F6C               	decfsz	??_main& (0+255),f,b
   759  000C34  D7FC               	goto	u1517
   760  000C36  F000               	nop	
   761                           
   762                           ;main.c: 95: _delay((unsigned long)((50)*(12000000/4000.0)));
   763  000C38  0EC3               	movlw	195
   764  000C3A  0100               	movlb	0	; () banked
   765  000C3C  6F6C               	movwf	??_main& (0+255),b
   766  000C3E  0ECD               	movlw	205
   767  000C40                     u1527:
   768  000C40  2EE8               	decfsz	wreg,f,c
   769  000C42  D7FE               	goto	u1527
   770  000C44  2F6C               	decfsz	??_main& (0+255),f,b
   771  000C46  D7FC               	goto	u1527
   772  000C48  F000               	nop	
   773                           
   774                           ;main.c: 96: _delay((unsigned long)((50)*(12000000/4000.0)));
   775  000C4A  0EC3               	movlw	195
   776  000C4C  0100               	movlb	0	; () banked
   777  000C4E  6F6C               	movwf	??_main& (0+255),b
   778  000C50  0ECD               	movlw	205
   779  000C52                     u1537:
   780  000C52  2EE8               	decfsz	wreg,f,c
   781  000C54  D7FE               	goto	u1537
   782  000C56  2F6C               	decfsz	??_main& (0+255),f,b
   783  000C58  D7FC               	goto	u1537
   784  000C5A  F000               	nop	
   785                           
   786                           ;main.c: 97: LATDbits.LATD0 =~ LATDbits.LATD0;
   787  000C5C  708C               	btg	3980,0,c	;volatile
   788                           
   789                           ;main.c: 98: if(DutyCycle < 1020)
   790  000C5E  0EFC               	movlw	252
   791  000C60  5C4B               	subwf	_DutyCycle,w,c
   792  000C62  0E03               	movlw	3
   793  000C64  584C               	subwfb	_DutyCycle+1,w,c
   794  000C66  B0D8               	btfsc	status,0,c
   795  000C68  D005               	goto	l2080
   796                           
   797                           ;main.c: 99: DutyCycle += 10;
   798  000C6A  0E0A               	movlw	10
   799  000C6C  264B               	addwf	_DutyCycle,f,c
   800  000C6E  0E00               	movlw	0
   801  000C70  224C               	addwfc	_DutyCycle+1,f,c
   802  000C72  D004               	goto	l2082
   803  000C74                     l2080:
   804                           
   805                           ;main.c: 100: else
   806                           ;main.c: 101: DutyCycle = 10;
   807  000C74  0E00               	movlw	0
   808  000C76  6E4C               	movwf	_DutyCycle+1,c
   809  000C78  0E0A               	movlw	10
   810  000C7A  6E4B               	movwf	_DutyCycle,c
   811  000C7C                     l2082:
   812                           
   813                           ;main.c: 103: SetDCPWM1(DutyCycle);
   814  000C7C  C04B  F060         	movff	_DutyCycle,SetDCPWM1@dutycycle
   815  000C80  C04C  F061         	movff	_DutyCycle+1,SetDCPWM1@dutycycle+1
   816  000C84  EC2A  F009         	call	_SetDCPWM1	;wreg free
   817  000C88  D748               	goto	l2044
   818  000C8A                     __end_of_main:
   819                           	opt stack 0
   820                           tblptru	equ	0xFF8
   821                           tblptrh	equ	0xFF7
   822                           tblptrl	equ	0xFF6
   823                           tablat	equ	0xFF5
   824                           intcon	equ	0xFF2
   825                           postinc0	equ	0xFEE
   826                           wreg	equ	0xFE8
   827                           status	equ	0xFD8
   828                           
   829 ;; *************** function _strncpy *****************
   830 ;; Defined at:
   831 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\strncpy.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;  to              2    0[BANK0 ] PTR unsigned char 
   834 ;;		 -> lcd_lower_display_buffer(16), lcd_upper_display_buffer(16), 
   835 ;;  from            2    2[BANK0 ] PTR const unsigned char 
   836 ;;		 -> lcd_lower_row_buffer(200), lcd_upper_row_buffer(200), 
   837 ;;  size            2    4[BANK0 ] unsigned int 
   838 ;; Auto vars:     Size  Location     Type
   839 ;;  cp              2    6[BANK0 ] PTR unsigned char 
   840 ;;		 -> lcd_lower_display_buffer(16), lcd_upper_display_buffer(16), 
   841 ;; Return value:  Size  Location     Type
   842 ;;                  2    0[BANK0 ] PTR unsigned char 
   843 ;; Registers used:
   844 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   845 ;; Tracked objects:
   846 ;;		On entry : 0/0
   847 ;;		On exit  : 0/0
   848 ;;		Unchanged: 0/0
   849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   850 ;;      Params:         0       6       0       0       0       0       0       0       0
   851 ;;      Locals:         0       2       0       0       0       0       0       0       0
   852 ;;      Temps:          0       0       0       0       0       0       0       0       0
   853 ;;      Totals:         0       8       0       0       0       0       0       0       0
   854 ;;Total ram usage:        8 bytes
   855 ;; Hardware stack levels used:    1
   856 ;; Hardware stack levels required when called:    5
   857 ;; This function calls:
   858 ;;		Nothing
   859 ;; This function is called by:
   860 ;;		_main
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864                           	psect	text1
   865  00103E                     __ptext1:
   866                           	opt stack 0
   867  00103E                     _strncpy:
   868                           	opt stack 25
   869                           
   870                           ;incstack = 0
   871  00103E  0100               	movlb	0	; () banked
   872  001040  C061  F067         	movff	strncpy@to+1,strncpy@cp+1
   873  001044  0100               	movlb	0	; () banked
   874  001046  C060  F066         	movff	strncpy@to,strncpy@cp
   875  00104A  D01B               	goto	l1968
   876  00104C                     l1962:
   877                           
   878                           ; BSR set to: 0
   879  00104C  0100               	movlb	0	; () banked
   880  00104E  0764               	decf	strncpy@size& (0+255),f,b
   881  001050  A0D8               	btfss	status,0,c
   882  001052  0765               	decf	(strncpy@size+1)& (0+255),f,b
   883                           
   884                           ; BSR set to: 0
   885  001054  0100               	movlb	0	; () banked
   886  001056  C062  FFD9         	movff	strncpy@from,fsr2l
   887  00105A  0100               	movlb	0	; () banked
   888  00105C  C063  FFDA         	movff	strncpy@from+1,fsr2h
   889  001060  0100               	movlb	0	; () banked
   890  001062  4B62               	infsnz	strncpy@from& (0+255),f,b
   891  001064  2B63               	incf	(strncpy@from+1)& (0+255),f,b
   892  001066  0100               	movlb	0	; () banked
   893  001068  C066  FFE1         	movff	strncpy@cp,fsr1l
   894  00106C  0100               	movlb	0	; () banked
   895  00106E  C067  FFE2         	movff	strncpy@cp+1,fsr1h
   896  001072  0100               	movlb	0	; () banked
   897  001074  4B66               	infsnz	strncpy@cp& (0+255),f,b
   898  001076  2B67               	incf	(strncpy@cp+1)& (0+255),f,b
   899  001078  CFDF FFE7          	movff	indf2,indf1
   900  00107C  50E7               	movf	indf1,w,c
   901  00107E  B4D8               	btfsc	status,2,c
   902  001080  D00F               	goto	l1974
   903  001082                     l1968:
   904                           
   905                           ; BSR set to: 0
   906  001082  0100               	movlb	0	; () banked
   907  001084  5165               	movf	(strncpy@size+1)& (0+255),w,b
   908  001086  1164               	iorwf	strncpy@size& (0+255),w,b
   909  001088  B4D8               	btfsc	status,2,c
   910  00108A  D00A               	goto	l1974
   911  00108C  D7DF               	goto	l1962
   912  00108E                     l1970:
   913                           
   914                           ; BSR set to: 0
   915  00108E  C066  FFD9         	movff	strncpy@cp,fsr2l
   916  001092  C067  FFDA         	movff	strncpy@cp+1,fsr2h
   917  001096  0E00               	movlw	0
   918  001098  6EDF               	movwf	indf2,c
   919                           
   920                           ; BSR set to: 0
   921  00109A  0100               	movlb	0	; () banked
   922  00109C  4B66               	infsnz	strncpy@cp& (0+255),f,b
   923  00109E  2B67               	incf	(strncpy@cp+1)& (0+255),f,b
   924  0010A0                     l1974:
   925                           
   926                           ; BSR set to: 0
   927  0010A0  0100               	movlb	0	; () banked
   928  0010A2  0764               	decf	strncpy@size& (0+255),f,b
   929  0010A4  A0D8               	btfss	status,0,c
   930  0010A6  0765               	decf	(strncpy@size+1)& (0+255),f,b
   931  0010A8  0100               	movlb	0	; () banked
   932  0010AA  2964               	incf	strncpy@size& (0+255),w,b
   933  0010AC  B4D8               	btfsc	status,2,c
   934  0010AE  2965               	incf	(strncpy@size+1)& (0+255),w,b
   935  0010B0  B4D8               	btfsc	status,2,c
   936                           
   937                           ; BSR set to: 0
   938                           
   939                           ; BSR set to: 0
   940                           ;	Return value of _strncpy is never used
   941  0010B2  0012               	return	
   942  0010B4  D7EC               	goto	l1970
   943  0010B6                     __end_of_strncpy:
   944                           	opt stack 0
   945                           tblptru	equ	0xFF8
   946                           tblptrh	equ	0xFF7
   947                           tblptrl	equ	0xFF6
   948                           tablat	equ	0xFF5
   949                           intcon	equ	0xFF2
   950                           postinc0	equ	0xFEE
   951                           wreg	equ	0xFE8
   952                           indf1	equ	0xFE7
   953                           fsr1h	equ	0xFE2
   954                           fsr1l	equ	0xFE1
   955                           indf2	equ	0xFDF
   956                           fsr2h	equ	0xFDA
   957                           fsr2l	equ	0xFD9
   958                           status	equ	0xFD8
   959                           
   960 ;; *************** function _rotarString *****************
   961 ;; Defined at:
   962 ;;		line 176 in file "main.c"
   963 ;; Parameters:    Size  Location     Type
   964 ;;  str             2    0[BANK0 ] PTR unsigned char 
   965 ;;		 -> lcd_lower_row_buffer(200), lcd_upper_row_buffer(200), 
   966 ;;  length          2    2[BANK0 ] int 
   967 ;; Auto vars:     Size  Location     Type
   968 ;;  j               2   10[BANK0 ] int 
   969 ;;  aux             1    9[BANK0 ] unsigned char 
   970 ;; Return value:  Size  Location     Type
   971 ;;		None               void
   972 ;; Registers used:
   973 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   974 ;; Tracked objects:
   975 ;;		On entry : 0/0
   976 ;;		On exit  : 0/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   979 ;;      Params:         0       4       0       0       0       0       0       0       0
   980 ;;      Locals:         0       3       0       0       0       0       0       0       0
   981 ;;      Temps:          0       5       0       0       0       0       0       0       0
   982 ;;      Totals:         0      12       0       0       0       0       0       0       0
   983 ;;Total ram usage:       12 bytes
   984 ;; Hardware stack levels used:    1
   985 ;; Hardware stack levels required when called:    5
   986 ;; This function calls:
   987 ;;		Nothing
   988 ;; This function is called by:
   989 ;;		_main
   990 ;; This function uses a non-reentrant model
   991 ;;
   992                           
   993                           	psect	text2
   994  000D7A                     __ptext2:
   995                           	opt stack 0
   996  000D7A                     _rotarString:
   997                           	opt stack 25
   998                           
   999                           ;main.c: 178: int j;
  1000                           ;main.c: 179: char aux;
  1001                           ;main.c: 180: aux = str[0];
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;incstack = 0
  1005  000D7A  C060  FFD9         	movff	rotarString@str,fsr2l
  1006  000D7E  C061  FFDA         	movff	rotarString@str+1,fsr2h
  1007  000D82  50DF               	movf	indf2,w,c
  1008  000D84  0100               	movlb	0	; () banked
  1009  000D86  6F69               	movwf	rotarString@aux& (0+255),b
  1010                           
  1011                           ; BSR set to: 0
  1012                           ;main.c: 181: for(j = 0; j<length - 1; j++)
  1013  000D88  0E00               	movlw	0
  1014  000D8A  0100               	movlb	0	; () banked
  1015  000D8C  6F6B               	movwf	(rotarString@j+1)& (0+255),b
  1016  000D8E  0E00               	movlw	0
  1017  000D90  0100               	movlb	0	; () banked
  1018  000D92  6F6A               	movwf	rotarString@j& (0+255),b
  1019  000D94  D023               	goto	l2004
  1020  000D96                     l2000:
  1021                           
  1022                           ; BSR set to: 0
  1023                           ;main.c: 182: {
  1024                           ;main.c: 183: str[j] = str[j+1];
  1025  000D96  0E01               	movlw	1
  1026  000D98  0100               	movlb	0	; () banked
  1027  000D9A  256A               	addwf	rotarString@j& (0+255),w,b
  1028  000D9C  0100               	movlb	0	; () banked
  1029  000D9E  6F64               	movwf	??_rotarString& (0+255),b
  1030  000DA0  0E00               	movlw	0
  1031  000DA2  0100               	movlb	0	; () banked
  1032  000DA4  216B               	addwfc	(rotarString@j+1)& (0+255),w,b
  1033  000DA6  0100               	movlb	0	; () banked
  1034  000DA8  6F65               	movwf	(??_rotarString+1)& (0+255),b
  1035  000DAA  0100               	movlb	0	; () banked
  1036  000DAC  5164               	movf	??_rotarString& (0+255),w,b
  1037  000DAE  0100               	movlb	0	; () banked
  1038  000DB0  2560               	addwf	rotarString@str& (0+255),w,b
  1039  000DB2  6ED9               	movwf	fsr2l,c
  1040  000DB4  0100               	movlb	0	; () banked
  1041  000DB6  5165               	movf	(??_rotarString+1)& (0+255),w,b
  1042  000DB8  0100               	movlb	0	; () banked
  1043  000DBA  2161               	addwfc	(rotarString@str+1)& (0+255),w,b
  1044  000DBC  6EDA               	movwf	fsr2h,c
  1045  000DBE  0100               	movlb	0	; () banked
  1046  000DC0  516A               	movf	rotarString@j& (0+255),w,b
  1047  000DC2  0100               	movlb	0	; () banked
  1048  000DC4  2560               	addwf	rotarString@str& (0+255),w,b
  1049  000DC6  6EE1               	movwf	fsr1l,c
  1050  000DC8  0100               	movlb	0	; () banked
  1051  000DCA  516B               	movf	(rotarString@j+1)& (0+255),w,b
  1052  000DCC  0100               	movlb	0	; () banked
  1053  000DCE  2161               	addwfc	(rotarString@str+1)& (0+255),w,b
  1054  000DD0  6EE2               	movwf	fsr1h,c
  1055  000DD2  CFDF FFE7          	movff	indf2,indf1
  1056                           
  1057                           ; BSR set to: 0
  1058  000DD6  0100               	movlb	0	; () banked
  1059  000DD8  4B6A               	infsnz	rotarString@j& (0+255),f,b
  1060  000DDA  2B6B               	incf	(rotarString@j+1)& (0+255),f,b
  1061  000DDC                     l2004:
  1062                           
  1063                           ; BSR set to: 0
  1064  000DDC  0EFF               	movlw	255
  1065  000DDE  0100               	movlb	0	; () banked
  1066  000DE0  6F64               	movwf	??_rotarString& (0+255),b
  1067  000DE2  0EFF               	movlw	255
  1068  000DE4  6F65               	movwf	(??_rotarString+1)& (0+255),b
  1069  000DE6  0100               	movlb	0	; () banked
  1070  000DE8  C062  F066         	movff	rotarString@length,??_rotarString+2
  1071  000DEC  0100               	movlb	0	; () banked
  1072  000DEE  C063  F067         	movff	rotarString@length+1,??_rotarString+3
  1073  000DF2  0100               	movlb	0	; () banked
  1074  000DF4  5164               	movf	??_rotarString& (0+255),w,b
  1075  000DF6  0100               	movlb	0	; () banked
  1076  000DF8  2766               	addwf	(??_rotarString+2)& (0+255),f,b
  1077  000DFA  0100               	movlb	0	; () banked
  1078  000DFC  5165               	movf	(??_rotarString+1)& (0+255),w,b
  1079  000DFE  0100               	movlb	0	; () banked
  1080  000E00  2367               	addwfc	(??_rotarString+3)& (0+255),f,b
  1081  000E02  0100               	movlb	0	; () banked
  1082  000E04  516B               	movf	(rotarString@j+1)& (0+255),w,b
  1083  000E06  0A80               	xorlw	128
  1084  000E08  0100               	movlb	0	; () banked
  1085  000E0A  6F68               	movwf	(??_rotarString+4)& (0+255),b
  1086  000E0C  5166               	movf	(??_rotarString+2)& (0+255),w,b
  1087  000E0E  0100               	movlb	0	; () banked
  1088  000E10  5D6A               	subwf	rotarString@j& (0+255),w,b
  1089  000E12  0100               	movlb	0	; () banked
  1090  000E14  5167               	movf	(??_rotarString+3)& (0+255),w,b
  1091  000E16  0A80               	xorlw	128
  1092  000E18  0100               	movlb	0	; () banked
  1093  000E1A  5968               	subwfb	(??_rotarString+4)& (0+255),w,b
  1094  000E1C  A0D8               	btfss	status,0,c
  1095  000E1E  D7BB               	goto	l2000
  1096                           
  1097                           ; BSR set to: 0
  1098                           ;main.c: 184: }
  1099                           ;main.c: 185: str[length - 1] = aux;
  1100                           
  1101                           ; BSR set to: 0
  1102  000E20  0EFF               	movlw	255
  1103  000E22  0100               	movlb	0	; () banked
  1104  000E24  6F64               	movwf	??_rotarString& (0+255),b
  1105  000E26  0EFF               	movlw	255
  1106  000E28  6F65               	movwf	(??_rotarString+1)& (0+255),b
  1107  000E2A  0100               	movlb	0	; () banked
  1108  000E2C  C062  F066         	movff	rotarString@length,??_rotarString+2
  1109  000E30  0100               	movlb	0	; () banked
  1110  000E32  C063  F067         	movff	rotarString@length+1,??_rotarString+3
  1111  000E36  0100               	movlb	0	; () banked
  1112  000E38  5164               	movf	??_rotarString& (0+255),w,b
  1113  000E3A  0100               	movlb	0	; () banked
  1114  000E3C  2766               	addwf	(??_rotarString+2)& (0+255),f,b
  1115  000E3E  0100               	movlb	0	; () banked
  1116  000E40  5165               	movf	(??_rotarString+1)& (0+255),w,b
  1117  000E42  0100               	movlb	0	; () banked
  1118  000E44  2367               	addwfc	(??_rotarString+3)& (0+255),f,b
  1119  000E46  0100               	movlb	0	; () banked
  1120  000E48  5166               	movf	(??_rotarString+2)& (0+255),w,b
  1121  000E4A  0100               	movlb	0	; () banked
  1122  000E4C  2560               	addwf	rotarString@str& (0+255),w,b
  1123  000E4E  6ED9               	movwf	fsr2l,c
  1124  000E50  0100               	movlb	0	; () banked
  1125  000E52  5167               	movf	(??_rotarString+3)& (0+255),w,b
  1126  000E54  0100               	movlb	0	; () banked
  1127  000E56  2161               	addwfc	(rotarString@str+1)& (0+255),w,b
  1128  000E58  6EDA               	movwf	fsr2h,c
  1129  000E5A  0100               	movlb	0	; () banked
  1130  000E5C  C069  FFDF         	movff	rotarString@aux,indf2
  1131                           
  1132                           ; BSR set to: 0
  1133  000E60  0012               	return	
  1134  000E62                     __end_of_rotarString:
  1135                           	opt stack 0
  1136                           tblptru	equ	0xFF8
  1137                           tblptrh	equ	0xFF7
  1138                           tblptrl	equ	0xFF6
  1139                           tablat	equ	0xFF5
  1140                           intcon	equ	0xFF2
  1141                           postinc0	equ	0xFEE
  1142                           wreg	equ	0xFE8
  1143                           indf1	equ	0xFE7
  1144                           fsr1h	equ	0xFE2
  1145                           fsr1l	equ	0xFE1
  1146                           indf2	equ	0xFDF
  1147                           fsr2h	equ	0xFDA
  1148                           fsr2l	equ	0xFD9
  1149                           status	equ	0xFD8
  1150                           
  1151 ;; *************** function _lcd_puts *****************
  1152 ;; Defined at:
  1153 ;;		line 108 in file "lcd_driver.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;  str             2    8[BANK0 ] PTR unsigned char 
  1156 ;;		 -> lcd_lower_display_buffer(16), lcd_upper_display_buffer(16), 
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;		None               void
  1161 ;; Registers used:
  1162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1168 ;;      Params:         0       2       0       0       0       0       0       0       0
  1169 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1170 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1171 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1172 ;;Total ram usage:        2 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:    8
  1175 ;; This function calls:
  1176 ;;		_lcd_gotoxy
  1177 ;;		_lcd_write_byte
  1178 ;; This function is called by:
  1179 ;;		_main
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           	psect	text3
  1184  0010B6                     __ptext3:
  1185                           	opt stack 0
  1186  0010B6                     _lcd_puts:
  1187                           	opt stack 22
  1188                           
  1189                           ;lcd_driver.c: 110: while (*str != 0)
  1190                           
  1191                           ; BSR set to: 0
  1192                           ;incstack = 0
  1193  0010B6  D032               	goto	l1994
  1194  0010B8                     l1978:
  1195                           
  1196                           ;lcd_driver.c: 111: {
  1197                           ;lcd_driver.c: 112: if (*str != '\n')
  1198  0010B8  C068  FFD9         	movff	lcd_puts@str,fsr2l
  1199  0010BC  C069  FFDA         	movff	lcd_puts@str+1,fsr2h
  1200  0010C0  50DF               	movf	indf2,w,c
  1201  0010C2  0A0A               	xorlw	10
  1202  0010C4  B4D8               	btfsc	status,2,c
  1203  0010C6  D00A               	goto	l1982
  1204                           
  1205                           ;lcd_driver.c: 113: {
  1206                           ;lcd_driver.c: 114: {lcd_write_byte(*str, 1);};
  1207  0010C8  0E01               	movlw	1
  1208  0010CA  0100               	movlb	0	; () banked
  1209  0010CC  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1210  0010CE  C068  FFD9         	movff	lcd_puts@str,fsr2l
  1211  0010D2  C069  FFDA         	movff	lcd_puts@str+1,fsr2h
  1212  0010D6  50DF               	movf	indf2,w,c
  1213  0010D8  EC8F  F009         	call	_lcd_write_byte
  1214  0010DC                     l1982:
  1215                           
  1216                           ;lcd_driver.c: 115: }
  1217                           ;lcd_driver.c: 117: if ((++lcd_x == 16) || (*str == '\n'))
  1218  0010DC  2A0C               	incf	_lcd_x,f,c
  1219  0010DE  500C               	movf	_lcd_x& (0+255),w,c
  1220  0010E0  0A10               	xorlw	16
  1221  0010E2  B4D8               	btfsc	status,2,c
  1222  0010E4  D007               	goto	l1986
  1223  0010E6  0E0A               	movlw	10
  1224  0010E8  C068  FFD9         	movff	lcd_puts@str,fsr2l
  1225  0010EC  C069  FFDA         	movff	lcd_puts@str+1,fsr2h
  1226  0010F0  62DF               	cpfseq	indf2,c
  1227  0010F2  D011               	goto	l1992
  1228  0010F4                     l1986:
  1229                           
  1230                           ;lcd_driver.c: 118: {
  1231                           ;lcd_driver.c: 119: if (++lcd_y == 2)
  1232  0010F4  2A0D               	incf	_lcd_y,f,c
  1233  0010F6  500D               	movf	_lcd_y& (0+255),w,c
  1234  0010F8  0A02               	xorlw	2
  1235  0010FA  A4D8               	btfss	status,2,c
  1236  0010FC  D007               	goto	l1990
  1237                           
  1238                           ;lcd_driver.c: 120: {
  1239                           ;lcd_driver.c: 121: lcd_gotoxy(0,0);
  1240  0010FE  0E00               	movlw	0
  1241  001100  0100               	movlb	0	; () banked
  1242  001102  6F65               	movwf	lcd_gotoxy@y& (0+255),b
  1243  001104  0E00               	movlw	0
  1244  001106  EC96  F008         	call	_lcd_gotoxy
  1245                           
  1246                           ;lcd_driver.c: 122: }
  1247  00110A  D005               	goto	l1992
  1248  00110C                     l1990:
  1249                           
  1250                           ;lcd_driver.c: 123: else
  1251                           ;lcd_driver.c: 124: {
  1252                           ;lcd_driver.c: 125: lcd_gotoxy(0, lcd_y);
  1253  00110C  C00D  F065         	movff	_lcd_y,lcd_gotoxy@y
  1254  001110  0E00               	movlw	0
  1255  001112  EC96  F008         	call	_lcd_gotoxy
  1256  001116                     l1992:
  1257                           
  1258                           ;lcd_driver.c: 126: }
  1259                           ;lcd_driver.c: 127: }
  1260                           ;lcd_driver.c: 128: str++;
  1261  001116  0100               	movlb	0	; () banked
  1262  001118  4B68               	infsnz	lcd_puts@str& (0+255),f,b
  1263  00111A  2B69               	incf	(lcd_puts@str+1)& (0+255),f,b
  1264  00111C                     l1994:
  1265  00111C  C068  FFD9         	movff	lcd_puts@str,fsr2l
  1266  001120  C069  FFDA         	movff	lcd_puts@str+1,fsr2h
  1267  001124  50DF               	movf	indf2,w,c
  1268  001126  B4D8               	btfsc	status,2,c
  1269  001128  0012               	return	
  1270  00112A  D7C6               	goto	l1978
  1271  00112C                     __end_of_lcd_puts:
  1272                           	opt stack 0
  1273                           tblptru	equ	0xFF8
  1274                           tblptrh	equ	0xFF7
  1275                           tblptrl	equ	0xFF6
  1276                           tablat	equ	0xFF5
  1277                           intcon	equ	0xFF2
  1278                           postinc0	equ	0xFEE
  1279                           wreg	equ	0xFE8
  1280                           indf1	equ	0xFE7
  1281                           fsr1h	equ	0xFE2
  1282                           fsr1l	equ	0xFE1
  1283                           indf2	equ	0xFDF
  1284                           fsr2h	equ	0xFDA
  1285                           fsr2l	equ	0xFD9
  1286                           status	equ	0xFD8
  1287                           
  1288 ;; *************** function _lcd_gotoxy *****************
  1289 ;; Defined at:
  1290 ;;		line 54 in file "lcd_driver.c"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;  x               1    wreg     unsigned char 
  1293 ;;  y               1    5[BANK0 ] unsigned char 
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;  x               1    7[BANK0 ] unsigned char 
  1296 ;;  addr            1    6[BANK0 ] unsigned char 
  1297 ;; Return value:  Size  Location     Type
  1298 ;;		None               void
  1299 ;; Registers used:
  1300 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1306 ;;      Params:         0       1       0       0       0       0       0       0       0
  1307 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1308 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1309 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1310 ;;Total ram usage:        3 bytes
  1311 ;; Hardware stack levels used:    1
  1312 ;; Hardware stack levels required when called:    7
  1313 ;; This function calls:
  1314 ;;		_lcd_write_byte
  1315 ;; This function is called by:
  1316 ;;		_main
  1317 ;;		_lcd_puts
  1318 ;;		_lcd_putnum
  1319 ;;		_lcd_puts_const
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           	psect	text4
  1324  00112C                     __ptext4:
  1325                           	opt stack 0
  1326  00112C                     _lcd_gotoxy:
  1327                           	opt stack 22
  1328                           
  1329                           ;incstack = 0
  1330                           ;lcd_gotoxy@x stored from wreg
  1331  00112C  0100               	movlb	0	; () banked
  1332  00112E  6F67               	movwf	lcd_gotoxy@x& (0+255),b
  1333                           
  1334                           ; BSR set to: 0
  1335                           ;lcd_driver.c: 57: uint8_t addr;
  1336                           ;lcd_driver.c: 59: if ((y > 3) || (x > 19))
  1337  001130  0E04               	movlw	4
  1338  001132  0100               	movlb	0	; () banked
  1339  001134  5D65               	subwf	lcd_gotoxy@y& (0+255),w,b
  1340  001136  B0D8               	btfsc	status,0,c
  1341  001138  D032               	goto	l148
  1342                           
  1343                           ; BSR set to: 0
  1344  00113A  0E13               	movlw	19
  1345  00113C  0100               	movlb	0	; () banked
  1346  00113E  6567               	cpfsgt	lcd_gotoxy@x& (0+255),b
  1347  001140  D001               	goto	l145
  1348  001142  D02D               	goto	l148
  1349  001144                     l145:
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;lcd_driver.c: 62: }
  1353                           ;lcd_driver.c: 63: lcd_x = x;
  1354  001144  C067  F00C         	movff	lcd_gotoxy@x,_lcd_x
  1355                           
  1356                           ;lcd_driver.c: 64: lcd_y = y;
  1357  001148  C065  F00D         	movff	lcd_gotoxy@y,_lcd_y
  1358                           
  1359                           ;lcd_driver.c: 65: addr = x;
  1360  00114C  C067  F066         	movff	lcd_gotoxy@x,lcd_gotoxy@addr
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;lcd_driver.c: 66: addr += LCD_ROW_ADDRESS[y];
  1364  001150  0100               	movlb	0	; () banked
  1365  001152  5165               	movf	lcd_gotoxy@y& (0+255),w,b
  1366  001154  0D01               	mullw	1
  1367  001156  0E01               	movlw	low _LCD_ROW_ADDRESS
  1368  001158  24F3               	addwf	prodl,w,c
  1369  00115A  6EF6               	movwf	tblptrl,c
  1370  00115C  0E08               	movlw	high _LCD_ROW_ADDRESS
  1371  00115E  20F4               	addwfc	prodh,w,c
  1372  001160  6EF7               	movwf	tblptrh,c
  1373  001162                     	if	0	;There are less than 3 active tblptr bytes
  1374  001162                     	endif
  1375  001162  0008               	tblrd		*
  1376  001164  50F5               	movf	tablat,w,c
  1377  001166  0100               	movlb	0	; () banked
  1378  001168  2766               	addwf	lcd_gotoxy@addr& (0+255),f,b
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;lcd_driver.c: 67: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1382  00116A  0EFA               	movlw	250
  1383  00116C                     u1547:
  1384  00116C  F000               	nop	
  1385  00116E  2EE8               	decfsz	wreg,f,c
  1386  001170  D7FD               	goto	u1547
  1387                           
  1388                           ;lcd_driver.c: 68: lcd_write_byte(addr, 0);
  1389  001172  0E00               	movlw	0
  1390  001174  0100               	movlb	0	; () banked
  1391  001176  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1392  001178  0100               	movlb	0	; () banked
  1393  00117A  5166               	movf	lcd_gotoxy@addr& (0+255),w,b
  1394  00117C  EC8F  F009         	call	_lcd_write_byte
  1395                           
  1396                           ;lcd_driver.c: 69: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1397  001180  0EFA               	movlw	250
  1398  001182                     u1557:
  1399  001182  F000               	nop	
  1400  001184  2EE8               	decfsz	wreg,f,c
  1401  001186  D7FD               	goto	u1557
  1402                           
  1403                           ;lcd_driver.c: 70: lcd_write_byte(addr, 0);
  1404  001188  0E00               	movlw	0
  1405  00118A  0100               	movlb	0	; () banked
  1406  00118C  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1407  00118E  0100               	movlb	0	; () banked
  1408  001190  5166               	movf	lcd_gotoxy@addr& (0+255),w,b
  1409  001192  EC8F  F009         	call	_lcd_write_byte
  1410                           
  1411                           ;lcd_driver.c: 71: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1412  001196  0EFA               	movlw	250
  1413  001198                     u1567:
  1414  001198  F000               	nop	
  1415  00119A  2EE8               	decfsz	wreg,f,c
  1416  00119C  D7FD               	goto	u1567
  1417  00119E                     l148:
  1418  00119E  0012               	return	
  1419  0011A0                     __end_of_lcd_gotoxy:
  1420                           	opt stack 0
  1421                           tblptru	equ	0xFF8
  1422                           tblptrh	equ	0xFF7
  1423                           tblptrl	equ	0xFF6
  1424                           tablat	equ	0xFF5
  1425                           prodh	equ	0xFF4
  1426                           prodl	equ	0xFF3
  1427                           intcon	equ	0xFF2
  1428                           postinc0	equ	0xFEE
  1429                           wreg	equ	0xFE8
  1430                           indf1	equ	0xFE7
  1431                           fsr1h	equ	0xFE2
  1432                           fsr1l	equ	0xFE1
  1433                           indf2	equ	0xFDF
  1434                           fsr2h	equ	0xFDA
  1435                           fsr2l	equ	0xFD9
  1436                           status	equ	0xFD8
  1437                           
  1438 ;; *************** function _lcd_init *****************
  1439 ;; Defined at:
  1440 ;;		line 11 in file "lcd_driver.c"
  1441 ;; Parameters:    Size  Location     Type
  1442 ;;		None
  1443 ;; Auto vars:     Size  Location     Type
  1444 ;;		None
  1445 ;; Return value:  Size  Location     Type
  1446 ;;		None               void
  1447 ;; Registers used:
  1448 ;;		wreg, status,2, status,0, cstack
  1449 ;; Tracked objects:
  1450 ;;		On entry : 0/0
  1451 ;;		On exit  : 0/0
  1452 ;;		Unchanged: 0/0
  1453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1454 ;;      Params:         0       0       0       0       0       0       0       0       0
  1455 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1456 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1457 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1458 ;;Total ram usage:        1 bytes
  1459 ;; Hardware stack levels used:    1
  1460 ;; Hardware stack levels required when called:    7
  1461 ;; This function calls:
  1462 ;;		_lcd_write_byte
  1463 ;;		_lcd_write_nibble
  1464 ;; This function is called by:
  1465 ;;		_main
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469                           	psect	text5
  1470  000C8A                     __ptext5:
  1471                           	opt stack 0
  1472  000C8A                     _lcd_init:
  1473                           	opt stack 23
  1474                           
  1475                           ;lcd_driver.c: 15: { _delay((unsigned long)((15000)*(4000000/4000000.0))); };
  1476                           
  1477                           ;incstack = 0
  1478  000C8A  0E14               	movlw	20
  1479  000C8C  0100               	movlb	0	; () banked
  1480  000C8E  6F65               	movwf	??_lcd_init& (0+255),b
  1481  000C90  0E7A               	movlw	122
  1482  000C92                     u1577:
  1483  000C92  2EE8               	decfsz	wreg,f,c
  1484  000C94  D7FE               	goto	u1577
  1485  000C96  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1486  000C98  D7FC               	goto	u1577
  1487                           
  1488                           ;lcd_driver.c: 18: lcd_write_nibble(0x3, 0);
  1489  000C9A  0E00               	movlw	0
  1490  000C9C  0100               	movlb	0	; () banked
  1491  000C9E  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1492  000CA0  0E03               	movlw	3
  1493  000CA2  EC31  F007         	call	_lcd_write_nibble
  1494                           
  1495                           ;lcd_driver.c: 20: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1496  000CA6  0E07               	movlw	7
  1497  000CA8  0100               	movlb	0	; () banked
  1498  000CAA  6F65               	movwf	??_lcd_init& (0+255),b
  1499  000CAC  0E7D               	movlw	125
  1500  000CAE                     u1587:
  1501  000CAE  2EE8               	decfsz	wreg,f,c
  1502  000CB0  D7FE               	goto	u1587
  1503  000CB2  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1504  000CB4  D7FC               	goto	u1587
  1505  000CB6  F000               	nop	
  1506                           
  1507                           ;lcd_driver.c: 22: lcd_write_nibble(0x3, 0);
  1508  000CB8  0E00               	movlw	0
  1509  000CBA  0100               	movlb	0	; () banked
  1510  000CBC  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1511  000CBE  0E03               	movlw	3
  1512  000CC0  EC31  F007         	call	_lcd_write_nibble
  1513                           
  1514                           ;lcd_driver.c: 24: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1515  000CC4  0E07               	movlw	7
  1516  000CC6  0100               	movlb	0	; () banked
  1517  000CC8  6F65               	movwf	??_lcd_init& (0+255),b
  1518  000CCA  0E7D               	movlw	125
  1519  000CCC                     u1597:
  1520  000CCC  2EE8               	decfsz	wreg,f,c
  1521  000CCE  D7FE               	goto	u1597
  1522  000CD0  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1523  000CD2  D7FC               	goto	u1597
  1524  000CD4  F000               	nop	
  1525                           
  1526                           ;lcd_driver.c: 26: lcd_write_nibble(0x3, 0);
  1527  000CD6  0E00               	movlw	0
  1528  000CD8  0100               	movlb	0	; () banked
  1529  000CDA  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1530  000CDC  0E03               	movlw	3
  1531  000CDE  EC31  F007         	call	_lcd_write_nibble
  1532                           
  1533                           ;lcd_driver.c: 28: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1534  000CE2  0E07               	movlw	7
  1535  000CE4  0100               	movlb	0	; () banked
  1536  000CE6  6F65               	movwf	??_lcd_init& (0+255),b
  1537  000CE8  0E7D               	movlw	125
  1538  000CEA                     u1607:
  1539  000CEA  2EE8               	decfsz	wreg,f,c
  1540  000CEC  D7FE               	goto	u1607
  1541  000CEE  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1542  000CF0  D7FC               	goto	u1607
  1543  000CF2  F000               	nop	
  1544                           
  1545                           ;lcd_driver.c: 30: lcd_write_nibble(0x2, 0);
  1546  000CF4  0E00               	movlw	0
  1547  000CF6  0100               	movlb	0	; () banked
  1548  000CF8  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1549  000CFA  0E02               	movlw	2
  1550  000CFC  EC31  F007         	call	_lcd_write_nibble
  1551                           
  1552                           ;lcd_driver.c: 39: lcd_write_byte(0x28, 0);
  1553  000D00  0E00               	movlw	0
  1554  000D02  0100               	movlb	0	; () banked
  1555  000D04  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1556  000D06  0E28               	movlw	40
  1557  000D08  EC8F  F009         	call	_lcd_write_byte
  1558                           
  1559                           ;lcd_driver.c: 40: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1560  000D0C  0E07               	movlw	7
  1561  000D0E  0100               	movlb	0	; () banked
  1562  000D10  6F65               	movwf	??_lcd_init& (0+255),b
  1563  000D12  0E7D               	movlw	125
  1564  000D14                     u1617:
  1565  000D14  2EE8               	decfsz	wreg,f,c
  1566  000D16  D7FE               	goto	u1617
  1567  000D18  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1568  000D1A  D7FC               	goto	u1617
  1569  000D1C  F000               	nop	
  1570                           
  1571                           ;lcd_driver.c: 42: lcd_write_byte(0x0c, 0);
  1572  000D1E  0E00               	movlw	0
  1573  000D20  0100               	movlb	0	; () banked
  1574  000D22  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1575  000D24  0E0C               	movlw	12
  1576  000D26  EC8F  F009         	call	_lcd_write_byte
  1577                           
  1578                           ;lcd_driver.c: 43: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1579  000D2A  0E07               	movlw	7
  1580  000D2C  0100               	movlb	0	; () banked
  1581  000D2E  6F65               	movwf	??_lcd_init& (0+255),b
  1582  000D30  0E7D               	movlw	125
  1583  000D32                     u1627:
  1584  000D32  2EE8               	decfsz	wreg,f,c
  1585  000D34  D7FE               	goto	u1627
  1586  000D36  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1587  000D38  D7FC               	goto	u1627
  1588  000D3A  F000               	nop	
  1589                           
  1590                           ;lcd_driver.c: 45: lcd_write_byte(0x01, 0);
  1591  000D3C  0E00               	movlw	0
  1592  000D3E  0100               	movlb	0	; () banked
  1593  000D40  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1594  000D42  0E01               	movlw	1
  1595  000D44  EC8F  F009         	call	_lcd_write_byte
  1596                           
  1597                           ;lcd_driver.c: 46: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1598  000D48  0E07               	movlw	7
  1599  000D4A  0100               	movlb	0	; () banked
  1600  000D4C  6F65               	movwf	??_lcd_init& (0+255),b
  1601  000D4E  0E7D               	movlw	125
  1602  000D50                     u1637:
  1603  000D50  2EE8               	decfsz	wreg,f,c
  1604  000D52  D7FE               	goto	u1637
  1605  000D54  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1606  000D56  D7FC               	goto	u1637
  1607  000D58  F000               	nop	
  1608                           
  1609                           ;lcd_driver.c: 48: lcd_write_byte(0x6, 0);
  1610  000D5A  0E00               	movlw	0
  1611  000D5C  0100               	movlb	0	; () banked
  1612  000D5E  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1613  000D60  0E06               	movlw	6
  1614  000D62  EC8F  F009         	call	_lcd_write_byte
  1615                           
  1616                           ;lcd_driver.c: 49: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1617  000D66  0E07               	movlw	7
  1618  000D68  0100               	movlb	0	; () banked
  1619  000D6A  6F65               	movwf	??_lcd_init& (0+255),b
  1620  000D6C  0E7D               	movlw	125
  1621  000D6E                     u1647:
  1622  000D6E  2EE8               	decfsz	wreg,f,c
  1623  000D70  D7FE               	goto	u1647
  1624  000D72  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1625  000D74  D7FC               	goto	u1647
  1626  000D76  F000               	nop	
  1627  000D78  0012               	return	
  1628  000D7A                     __end_of_lcd_init:
  1629                           	opt stack 0
  1630                           tblptru	equ	0xFF8
  1631                           tblptrh	equ	0xFF7
  1632                           tblptrl	equ	0xFF6
  1633                           tablat	equ	0xFF5
  1634                           prodh	equ	0xFF4
  1635                           prodl	equ	0xFF3
  1636                           intcon	equ	0xFF2
  1637                           postinc0	equ	0xFEE
  1638                           wreg	equ	0xFE8
  1639                           indf1	equ	0xFE7
  1640                           fsr1h	equ	0xFE2
  1641                           fsr1l	equ	0xFE1
  1642                           indf2	equ	0xFDF
  1643                           fsr2h	equ	0xFDA
  1644                           fsr2l	equ	0xFD9
  1645                           status	equ	0xFD8
  1646                           
  1647 ;; *************** function _lcd_write_byte *****************
  1648 ;; Defined at:
  1649 ;;		line 185 in file "lcd_driver.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  byte            1    wreg     unsigned char 
  1652 ;;  is_data         1    3[BANK0 ] unsigned char 
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  byte            1    4[BANK0 ] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;		None               void
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0, cstack
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1664 ;;      Params:         0       1       0       0       0       0       0       0       0
  1665 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1666 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1667 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1668 ;;Total ram usage:        2 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    6
  1671 ;; This function calls:
  1672 ;;		_lcd_write_nibble
  1673 ;; This function is called by:
  1674 ;;		_main
  1675 ;;		_lcd_init
  1676 ;;		_lcd_gotoxy
  1677 ;;		_lcd_puts
  1678 ;;		_lcd_putnum
  1679 ;;		_lcd_puts_const
  1680 ;;		_lcd_set_cgram
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           	psect	text6
  1685  00131E                     __ptext6:
  1686                           	opt stack 0
  1687  00131E                     _lcd_write_byte:
  1688                           	opt stack 24
  1689                           
  1690                           ;incstack = 0
  1691                           ;lcd_write_byte@byte stored from wreg
  1692  00131E  0100               	movlb	0	; () banked
  1693  001320  6F64               	movwf	lcd_write_byte@byte& (0+255),b
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;lcd_driver.c: 188: lcd_write_nibble(byte >> 4, is_data);
  1697  001322  C063  F060         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
  1698  001326  0100               	movlb	0	; () banked
  1699  001328  3964               	swapf	lcd_write_byte@byte& (0+255),w,b
  1700  00132A  0B0F               	andlw	15
  1701  00132C  EC31  F007         	call	_lcd_write_nibble
  1702                           
  1703                           ;lcd_driver.c: 189: lcd_write_nibble(byte, is_data);
  1704  001330  C063  F060         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
  1705  001334  0100               	movlb	0	; () banked
  1706  001336  5164               	movf	lcd_write_byte@byte& (0+255),w,b
  1707  001338  EC31  F007         	call	_lcd_write_nibble
  1708  00133C  0012               	return	
  1709  00133E                     __end_of_lcd_write_byte:
  1710                           	opt stack 0
  1711                           tblptru	equ	0xFF8
  1712                           tblptrh	equ	0xFF7
  1713                           tblptrl	equ	0xFF6
  1714                           tablat	equ	0xFF5
  1715                           prodh	equ	0xFF4
  1716                           prodl	equ	0xFF3
  1717                           intcon	equ	0xFF2
  1718                           postinc0	equ	0xFEE
  1719                           wreg	equ	0xFE8
  1720                           indf1	equ	0xFE7
  1721                           fsr1h	equ	0xFE2
  1722                           fsr1l	equ	0xFE1
  1723                           indf2	equ	0xFDF
  1724                           fsr2h	equ	0xFDA
  1725                           fsr2l	equ	0xFD9
  1726                           status	equ	0xFD8
  1727                           
  1728 ;; *************** function _lcd_write_nibble *****************
  1729 ;; Defined at:
  1730 ;;		line 176 in file "lcd_driver.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;  nibble          1    wreg     unsigned char 
  1733 ;;  is_data         1    0[BANK0 ] unsigned char 
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;  nibble          1    2[BANK0 ] unsigned char 
  1736 ;; Return value:  Size  Location     Type
  1737 ;;		None               void
  1738 ;; Registers used:
  1739 ;;		wreg, status,2, status,0, cstack
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1745 ;;      Params:         0       1       0       0       0       0       0       0       0
  1746 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1747 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1748 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1749 ;;Total ram usage:        3 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; Hardware stack levels required when called:    5
  1752 ;; This function calls:
  1753 ;;		Nothing
  1754 ;; This function is called by:
  1755 ;;		_lcd_init
  1756 ;;		_lcd_write_byte
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           	psect	text7
  1761  000E62                     __ptext7:
  1762                           	opt stack 0
  1763  000E62                     _lcd_write_nibble:
  1764                           	opt stack 24
  1765                           
  1766                           ;incstack = 0
  1767                           ;lcd_write_nibble@nibble stored from wreg
  1768  000E62  0100               	movlb	0	; () banked
  1769  000E64  6F62               	movwf	lcd_write_nibble@nibble& (0+255),b
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;lcd_driver.c: 179: { LATDbits.LATD2 = is_data; };
  1773  000E66  0100               	movlb	0	; () banked
  1774  000E68  B160               	btfsc	lcd_write_nibble@is_data& (0+255),0,b
  1775  000E6A  D002               	bra	u1135
  1776  000E6C  948C               	bcf	3980,2,c	;volatile
  1777  000E6E  D001               	bra	u1136
  1778  000E70                     u1135:
  1779  000E70  848C               	bsf	3980,2,c	;volatile
  1780  000E72                     u1136:
  1781                           
  1782                           ;lcd_driver.c: 180: { _delay((unsigned long)((100)*(4000000/4000000.0))); };
  1783  000E72  0E21               	movlw	33
  1784  000E74                     u1657:
  1785  000E74  2EE8               	decfsz	wreg,f,c
  1786  000E76  D7FE               	goto	u1657
  1787  000E78  F000               	nop	
  1788                           
  1789                           ;lcd_driver.c: 181: { LATDbits.LATD4 = nibble & 1; LATDbits.LATD5 = (nibble & 2) >> 1; L
      +                          ATDbits.LATD6 = (nibble & 4) >> 2; LATDbits.LATD7 = (nibble & 8) >> 3; };
  1790  000E7A  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1791  000E7E  0E01               	movlw	1
  1792  000E80  0100               	movlb	0	; () banked
  1793  000E82  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1794  000E84  0100               	movlb	0	; () banked
  1795  000E86  3B61               	swapf	??_lcd_write_nibble& (0+255),f,b
  1796  000E88  508C               	movf	3980,w,c	;volatile
  1797  000E8A  0100               	movlb	0	; () banked
  1798  000E8C  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1799  000E8E  0BEF               	andlw	-17
  1800  000E90  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1801  000E92  6E8C               	movwf	3980,c	;volatile
  1802                           
  1803                           ; BSR set to: 0
  1804  000E94  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1805  000E98  0100               	movlb	0	; () banked
  1806  000E9A  90D8               	bcf	status,0,c
  1807  000E9C  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1808  000E9E  0E01               	movlw	1
  1809  000EA0  0100               	movlb	0	; () banked
  1810  000EA2  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1811  000EA4  0100               	movlb	0	; () banked
  1812  000EA6  3B61               	swapf	??_lcd_write_nibble& (0+255),f,b
  1813  000EA8  4761               	rlncf	??_lcd_write_nibble& (0+255),f,b
  1814  000EAA  508C               	movf	3980,w,c	;volatile
  1815  000EAC  0100               	movlb	0	; () banked
  1816  000EAE  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1817  000EB0  0BDF               	andlw	-33
  1818  000EB2  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1819  000EB4  6E8C               	movwf	3980,c	;volatile
  1820                           
  1821                           ; BSR set to: 0
  1822  000EB6  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1823  000EBA  0100               	movlb	0	; () banked
  1824  000EBC  90D8               	bcf	status,0,c
  1825  000EBE  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1826  000EC0  0100               	movlb	0	; () banked
  1827  000EC2  90D8               	bcf	status,0,c
  1828  000EC4  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1829  000EC6  0E01               	movlw	1
  1830  000EC8  0100               	movlb	0	; () banked
  1831  000ECA  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1832  000ECC  0100               	movlb	0	; () banked
  1833  000ECE  3B61               	swapf	??_lcd_write_nibble& (0+255),f,b
  1834  000ED0  4761               	rlncf	??_lcd_write_nibble& (0+255),f,b
  1835  000ED2  4761               	rlncf	??_lcd_write_nibble& (0+255),f,b
  1836  000ED4  508C               	movf	3980,w,c	;volatile
  1837  000ED6  0100               	movlb	0	; () banked
  1838  000ED8  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1839  000EDA  0BBF               	andlw	-65
  1840  000EDC  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1841  000EDE  6E8C               	movwf	3980,c	;volatile
  1842                           
  1843                           ; BSR set to: 0
  1844  000EE0  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1845  000EE4  0100               	movlb	0	; () banked
  1846  000EE6  90D8               	bcf	status,0,c
  1847  000EE8  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1848  000EEA  0100               	movlb	0	; () banked
  1849  000EEC  90D8               	bcf	status,0,c
  1850  000EEE  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1851  000EF0  0100               	movlb	0	; () banked
  1852  000EF2  90D8               	bcf	status,0,c
  1853  000EF4  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1854  000EF6  0E01               	movlw	1
  1855  000EF8  0100               	movlb	0	; () banked
  1856  000EFA  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1857  000EFC  0100               	movlb	0	; () banked
  1858  000EFE  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1859  000F00  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1860  000F02  508C               	movf	3980,w,c	;volatile
  1861  000F04  0100               	movlb	0	; () banked
  1862  000F06  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1863  000F08  0B7F               	andlw	-129
  1864  000F0A  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1865  000F0C  6E8C               	movwf	3980,c	;volatile
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;lcd_driver.c: 182: { LATDbits.LATD3 = 1; { _delay((unsigned long)((200)*(4000000/400000
      +                          0.0))); }; LATDbits.LATD3 = 0; { _delay((unsigned long)((500)*(4000000/4000000.0))); }; 
      +                          };
  1869  000F0E  868C               	bsf	3980,3,c	;volatile
  1870                           
  1871                           ; BSR set to: 0
  1872  000F10  0E42               	movlw	66
  1873  000F12                     u1667:
  1874  000F12  2EE8               	decfsz	wreg,f,c
  1875  000F14  D7FE               	goto	u1667
  1876  000F16  D000               	nop2		;nop
  1877  000F18  968C               	bcf	3980,3,c	;volatile
  1878  000F1A  0EA6               	movlw	166
  1879  000F1C                     u1677:
  1880  000F1C  2EE8               	decfsz	wreg,f,c
  1881  000F1E  D7FE               	goto	u1677
  1882  000F20  D000               	nop2		;nop
  1883  000F22  0012               	return	
  1884  000F24                     __end_of_lcd_write_nibble:
  1885                           	opt stack 0
  1886                           tblptru	equ	0xFF8
  1887                           tblptrh	equ	0xFF7
  1888                           tblptrl	equ	0xFF6
  1889                           tablat	equ	0xFF5
  1890                           prodh	equ	0xFF4
  1891                           prodl	equ	0xFF3
  1892                           intcon	equ	0xFF2
  1893                           postinc0	equ	0xFEE
  1894                           wreg	equ	0xFE8
  1895                           indf1	equ	0xFE7
  1896                           fsr1h	equ	0xFE2
  1897                           fsr1l	equ	0xFE1
  1898                           indf2	equ	0xFDF
  1899                           fsr2h	equ	0xFDA
  1900                           fsr2l	equ	0xFD9
  1901                           status	equ	0xFD8
  1902                           
  1903 ;; *************** function _SetDCPWM1 *****************
  1904 ;; Defined at:
  1905 ;;		line 7 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;  dutycycle       2    0[BANK0 ] unsigned int 
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;  DCycle          2    4[BANK0 ] struct PWMDC
  1910 ;; Return value:  Size  Location     Type
  1911 ;;		None               void
  1912 ;; Registers used:
  1913 ;;		wreg, status,2, status,0
  1914 ;; Tracked objects:
  1915 ;;		On entry : 0/0
  1916 ;;		On exit  : 0/0
  1917 ;;		Unchanged: 0/0
  1918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1919 ;;      Params:         0       2       0       0       0       0       0       0       0
  1920 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1921 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1922 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1923 ;;Total ram usage:        6 bytes
  1924 ;; Hardware stack levels used:    1
  1925 ;; Hardware stack levels required when called:    5
  1926 ;; This function calls:
  1927 ;;		Nothing
  1928 ;; This function is called by:
  1929 ;;		_main
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           	psect	text8
  1934  001254                     __ptext8:
  1935                           	opt stack 0
  1936  001254                     _SetDCPWM1:
  1937                           	opt stack 25
  1938                           
  1939                           ;incstack = 0
  1940  001254  0100               	movlb	0	; () banked
  1941  001256  C060  F062         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  1942  00125A  0100               	movlb	0	; () banked
  1943  00125C  C061  F063         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  1944  001260  0E06               	movlw	6
  1945  001262                     u1265:
  1946  001262  90D8               	bcf	status,0,c
  1947  001264  0100               	movlb	0	; () banked
  1948  001266  3762               	rlcf	??_SetDCPWM1& (0+255),f,b
  1949  001268  3763               	rlcf	(??_SetDCPWM1+1)& (0+255),f,b
  1950  00126A  2EE8               	decfsz	wreg,f,c
  1951  00126C  D7FA               	goto	u1265
  1952  00126E  C062  F064         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  1953  001272  C063  F065         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  1954                           
  1955                           ; BSR set to: 0
  1956  001276  C065  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  1957  00127A  C064  F062         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  1958  00127E  0100               	movlb	0	; () banked
  1959  001280  90D8               	bcf	status,0,c
  1960  001282  3362               	rrcf	??_SetDCPWM1& (0+255),f,b
  1961  001284  0100               	movlb	0	; () banked
  1962  001286  90D8               	bcf	status,0,c
  1963  001288  3362               	rrcf	??_SetDCPWM1& (0+255),f,b
  1964  00128A  0E30               	movlw	48
  1965  00128C  0100               	movlb	0	; () banked
  1966  00128E  1762               	andwf	??_SetDCPWM1& (0+255),f,b
  1967  001290  50BD               	movf	4029,w,c	;volatile
  1968  001292  0BCF               	andlw	207
  1969  001294  0100               	movlb	0	; () banked
  1970  001296  1162               	iorwf	??_SetDCPWM1& (0+255),w,b
  1971  001298  6EBD               	movwf	4029,c	;volatile
  1972                           
  1973                           ; BSR set to: 0
  1974  00129A  0012               	return	
  1975  00129C                     __end_of_SetDCPWM1:
  1976                           	opt stack 0
  1977                           tblptru	equ	0xFF8
  1978                           tblptrh	equ	0xFF7
  1979                           tblptrl	equ	0xFF6
  1980                           tablat	equ	0xFF5
  1981                           prodh	equ	0xFF4
  1982                           prodl	equ	0xFF3
  1983                           intcon	equ	0xFF2
  1984                           postinc0	equ	0xFEE
  1985                           wreg	equ	0xFE8
  1986                           indf1	equ	0xFE7
  1987                           fsr1h	equ	0xFE2
  1988                           fsr1l	equ	0xFE1
  1989                           indf2	equ	0xFDF
  1990                           fsr2h	equ	0xFDA
  1991                           fsr2l	equ	0xFD9
  1992                           status	equ	0xFD8
  1993                           
  1994 ;; *************** function _OpenUSART *****************
  1995 ;; Defined at:
  1996 ;;		line 73 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;  config          1    wreg     unsigned char 
  1999 ;;  spbrg           2    0[BANK0 ] unsigned int 
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;  config          1    5[BANK0 ] unsigned char 
  2002 ;; Return value:  Size  Location     Type
  2003 ;;		None               void
  2004 ;; Registers used:
  2005 ;;		wreg, status,2
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2011 ;;      Params:         0       2       0       0       0       0       0       0       0
  2012 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2013 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2014 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2015 ;;Total ram usage:        6 bytes
  2016 ;; Hardware stack levels used:    1
  2017 ;; Hardware stack levels required when called:    5
  2018 ;; This function calls:
  2019 ;;		Nothing
  2020 ;; This function is called by:
  2021 ;;		_main
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text9
  2026  000FBE                     __ptext9:
  2027                           	opt stack 0
  2028  000FBE                     _OpenUSART:
  2029                           	opt stack 25
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;incstack = 0
  2033                           ;OpenUSART@config stored from wreg
  2034  000FBE  0100               	movlb	0	; () banked
  2035  000FC0  6F65               	movwf	OpenUSART@config& (0+255),b
  2036                           
  2037                           ; BSR set to: 0
  2038  000FC2  0E00               	movlw	0
  2039  000FC4  6EAC               	movwf	4012,c	;volatile
  2040  000FC6  0E00               	movlw	0
  2041  000FC8  6EAB               	movwf	4011,c	;volatile
  2042                           
  2043                           ; BSR set to: 0
  2044  000FCA  0100               	movlb	0	; () banked
  2045  000FCC  B165               	btfsc	OpenUSART@config& (0+255),0,b
  2046                           
  2047                           ; BSR set to: 0
  2048  000FCE  88AC               	bsf	4012,4,c	;volatile
  2049                           
  2050                           ; BSR set to: 0
  2051                           
  2052                           ; BSR set to: 0
  2053  000FD0  0100               	movlb	0	; () banked
  2054  000FD2  A365               	btfss	OpenUSART@config& (0+255),1,b
  2055  000FD4  D002               	goto	l1884
  2056                           
  2057                           ; BSR set to: 0
  2058  000FD6  8CAC               	bsf	4012,6,c	;volatile
  2059  000FD8  8CAB               	bsf	4011,6,c	;volatile
  2060  000FDA                     l1884:
  2061                           
  2062                           ; BSR set to: 0
  2063  000FDA  0100               	movlb	0	; () banked
  2064  000FDC  B565               	btfsc	OpenUSART@config& (0+255),2,b
  2065                           
  2066                           ; BSR set to: 0
  2067  000FDE  8EAC               	bsf	4012,7,c	;volatile
  2068                           
  2069                           ; BSR set to: 0
  2070                           
  2071                           ; BSR set to: 0
  2072  000FE0  0100               	movlb	0	; () banked
  2073  000FE2  A765               	btfss	OpenUSART@config& (0+255),3,b
  2074  000FE4  D002               	goto	l241
  2075                           
  2076                           ; BSR set to: 0
  2077  000FE6  88AB               	bsf	4011,4,c	;volatile
  2078  000FE8  D001               	goto	l1892
  2079  000FEA                     l241:
  2080                           
  2081                           ; BSR set to: 0
  2082  000FEA  8AAB               	bsf	4011,5,c	;volatile
  2083  000FEC                     l1892:
  2084                           
  2085                           ; BSR set to: 0
  2086  000FEC  0100               	movlb	0	; () banked
  2087  000FEE  B965               	btfsc	OpenUSART@config& (0+255),4,b
  2088                           
  2089                           ; BSR set to: 0
  2090  000FF0  84AC               	bsf	4012,2,c	;volatile
  2091                           
  2092                           ; BSR set to: 0
  2093  000FF2  989E               	bcf	3998,4,c	;volatile
  2094                           
  2095                           ; BSR set to: 0
  2096  000FF4  0100               	movlb	0	; () banked
  2097  000FF6  BB65               	btfsc	OpenUSART@config& (0+255),5,b
  2098                           
  2099                           ; BSR set to: 0
  2100  000FF8  86AB               	bsf	4011,3,c	;volatile
  2101                           
  2102                           ; BSR set to: 0
  2103                           
  2104                           ; BSR set to: 0
  2105  000FFA  0100               	movlb	0	; () banked
  2106  000FFC  AD65               	btfss	OpenUSART@config& (0+255),6,b
  2107  000FFE  D002               	goto	l245
  2108                           
  2109                           ; BSR set to: 0
  2110  001000  8A9D               	bsf	3997,5,c	;volatile
  2111  001002  D001               	goto	l246
  2112  001004                     l245:
  2113                           
  2114                           ; BSR set to: 0
  2115  001004  9A9D               	bcf	3997,5,c	;volatile
  2116  001006                     l246:
  2117                           
  2118                           ; BSR set to: 0
  2119  001006  9A9E               	bcf	3998,5,c	;volatile
  2120                           
  2121                           ; BSR set to: 0
  2122  001008  0100               	movlb	0	; () banked
  2123  00100A  AF65               	btfss	OpenUSART@config& (0+255),7,b
  2124  00100C  D002               	goto	l247
  2125                           
  2126                           ; BSR set to: 0
  2127  00100E  889D               	bsf	3997,4,c	;volatile
  2128  001010  D001               	goto	l248
  2129  001012                     l247:
  2130                           
  2131                           ; BSR set to: 0
  2132  001012  989D               	bcf	3997,4,c	;volatile
  2133  001014                     l248:
  2134                           
  2135                           ; BSR set to: 0
  2136  001014  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  2137                           
  2138                           ; BSR set to: 0
  2139  001018  0100               	movlb	0	; () banked
  2140  00101A  C061  F062         	movff	OpenUSART@spbrg+1,??_OpenUSART
  2141  00101E  C062  F063         	movff	??_OpenUSART,??_OpenUSART+1
  2142  001022  0100               	movlb	0	; () banked
  2143  001024  6B64               	clrf	(??_OpenUSART+2)& (0+255),b
  2144  001026  0100               	movlb	0	; () banked
  2145  001028  5163               	movf	(??_OpenUSART+1)& (0+255),w,b
  2146  00102A  6EB0               	movwf	4016,c	;volatile
  2147                           
  2148                           ; BSR set to: 0
  2149  00102C  8AAC               	bsf	4012,5,c	;volatile
  2150                           
  2151                           ; BSR set to: 0
  2152  00102E  8EAB               	bsf	4011,7,c	;volatile
  2153                           
  2154                           ; BSR set to: 0
  2155  001030  9C94               	bcf	3988,6,c	;volatile
  2156                           
  2157                           ; BSR set to: 0
  2158  001032  8E94               	bsf	3988,7,c	;volatile
  2159                           
  2160                           ; BSR set to: 0
  2161  001034  B8AC               	btfsc	4012,4,c	;volatile
  2162                           
  2163                           ; BSR set to: 0
  2164  001036  BEAC               	btfsc	4012,7,c	;volatile
  2165  001038  D001               	goto	l250
  2166                           
  2167                           ; BSR set to: 0
  2168  00103A  8C94               	bsf	3988,6,c	;volatile
  2169  00103C                     l250:
  2170                           
  2171                           ; BSR set to: 0
  2172  00103C  0012               	return	
  2173  00103E                     __end_of_OpenUSART:
  2174                           	opt stack 0
  2175                           tblptru	equ	0xFF8
  2176                           tblptrh	equ	0xFF7
  2177                           tblptrl	equ	0xFF6
  2178                           tablat	equ	0xFF5
  2179                           prodh	equ	0xFF4
  2180                           prodl	equ	0xFF3
  2181                           intcon	equ	0xFF2
  2182                           postinc0	equ	0xFEE
  2183                           wreg	equ	0xFE8
  2184                           indf1	equ	0xFE7
  2185                           fsr1h	equ	0xFE2
  2186                           fsr1l	equ	0xFE1
  2187                           indf2	equ	0xFDF
  2188                           fsr2h	equ	0xFDA
  2189                           fsr2l	equ	0xFD9
  2190                           status	equ	0xFD8
  2191                           
  2192 ;; *************** function _OpenPWM1 *****************
  2193 ;; Defined at:
  2194 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;  period          1    wreg     unsigned char 
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;  period          1    0[BANK0 ] unsigned char 
  2199 ;; Return value:  Size  Location     Type
  2200 ;;		None               void
  2201 ;; Registers used:
  2202 ;;		wreg, status,2, status,0
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2208 ;;      Params:         0       0       0       0       0       0       0       0       0
  2209 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2210 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2211 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2212 ;;Total ram usage:        1 bytes
  2213 ;; Hardware stack levels used:    1
  2214 ;; Hardware stack levels required when called:    5
  2215 ;; This function calls:
  2216 ;;		Nothing
  2217 ;; This function is called by:
  2218 ;;		_main
  2219 ;; This function uses a non-reentrant model
  2220 ;;
  2221                           
  2222                           	psect	text10
  2223  001396                     __ptext10:
  2224                           	opt stack 0
  2225  001396                     _OpenPWM1:
  2226                           	opt stack 25
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;incstack = 0
  2230                           ;OpenPWM1@period stored from wreg
  2231  001396  0100               	movlb	0	; () banked
  2232  001398  6F60               	movwf	OpenPWM1@period& (0+255),b
  2233                           
  2234                           ; BSR set to: 0
  2235  00139A  0E0C               	movlw	12
  2236  00139C  12BD               	iorwf	4029,f,c	;volatile
  2237                           
  2238                           ; BSR set to: 0
  2239  00139E  9494               	bcf	3988,2,c	;volatile
  2240                           
  2241                           ; BSR set to: 0
  2242  0013A0  94CA               	bcf	4042,2,c	;volatile
  2243                           
  2244                           ; BSR set to: 0
  2245  0013A2  C060  FFCB         	movff	OpenPWM1@period,4043	;volatile
  2246                           
  2247                           ; BSR set to: 0
  2248  0013A6  84CA               	bsf	4042,2,c	;volatile
  2249                           
  2250                           ; BSR set to: 0
  2251  0013A8  0012               	return	
  2252  0013AA                     __end_of_OpenPWM1:
  2253                           	opt stack 0
  2254                           tblptru	equ	0xFF8
  2255                           tblptrh	equ	0xFF7
  2256                           tblptrl	equ	0xFF6
  2257                           tablat	equ	0xFF5
  2258                           prodh	equ	0xFF4
  2259                           prodl	equ	0xFF3
  2260                           intcon	equ	0xFF2
  2261                           postinc0	equ	0xFEE
  2262                           wreg	equ	0xFE8
  2263                           indf1	equ	0xFE7
  2264                           fsr1h	equ	0xFE2
  2265                           fsr1l	equ	0xFE1
  2266                           indf2	equ	0xFDF
  2267                           fsr2h	equ	0xFDA
  2268                           fsr2l	equ	0xFD9
  2269                           status	equ	0xFD8
  2270                           
  2271 ;; *************** function _ISR *****************
  2272 ;; Defined at:
  2273 ;;		line 107 in file "main.c"
  2274 ;; Parameters:    Size  Location     Type
  2275 ;;		None
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;		None
  2278 ;; Return value:  Size  Location     Type
  2279 ;;		None               void
  2280 ;; Registers used:
  2281 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2287 ;;      Params:         0       0       0       0       0       0       0       0       0
  2288 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2289 ;;      Temps:         18       0       0       0       0       0       0       0       0
  2290 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2291 ;;Total ram usage:       18 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    4
  2294 ;; This function calls:
  2295 ;;		_ReadUSART
  2296 ;;		_cuentaLetras
  2297 ;;		_lcd_put_blank
  2298 ;;		_putsUSART
  2299 ;;		_strcpy
  2300 ;; This function is called by:
  2301 ;;		Interrupt level 2
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           	psect	intcode
  2306  000008                     __pintcode:
  2307                           	opt stack 0
  2308  000008                     _ISR:
  2309                           	opt stack 22
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;incstack = 0
  2313  000008  CFFA F03D          	movff	pclath,??_ISR+4
  2314  00000C  CFFB F03E          	movff	pclatu,??_ISR+5
  2315  000010  CFE9 F03F          	movff	fsr0l,??_ISR+6
  2316  000014  ED03  F004         	call	int_func,f	;refresh shadow registers
  2317                           pclatu	equ	0xFFB
  2318                           pclath	equ	0xFFA
  2319                           tblptru	equ	0xFF8
  2320                           tblptrh	equ	0xFF7
  2321                           tblptrl	equ	0xFF6
  2322                           tablat	equ	0xFF5
  2323                           prodh	equ	0xFF4
  2324                           prodl	equ	0xFF3
  2325                           intcon	equ	0xFF2
  2326                           postinc0	equ	0xFEE
  2327                           fsr0l	equ	0xFE9
  2328                           wreg	equ	0xFE8
  2329                           indf1	equ	0xFE7
  2330                           fsr1h	equ	0xFE2
  2331                           fsr1l	equ	0xFE1
  2332                           indf2	equ	0xFDF
  2333                           fsr2h	equ	0xFDA
  2334                           fsr2l	equ	0xFD9
  2335                           status	equ	0xFD8
  2336                           
  2337                           	psect	intcode_body
  2338  000806                     __pintcode_body:
  2339                           	opt stack 22
  2340  000806                     int_func:
  2341                           	opt stack 22
  2342  000806  0006               	pop		; remove dummy address from shadow register refresh
  2343  000808  CFEA F040          	movff	fsr0h,??_ISR+7
  2344  00080C  CFE1 F041          	movff	fsr1l,??_ISR+8
  2345  000810  CFE2 F042          	movff	fsr1h,??_ISR+9
  2346  000814  CFD9 F043          	movff	fsr2l,??_ISR+10
  2347  000818  CFDA F044          	movff	fsr2h,??_ISR+11
  2348  00081C  CFF3 F045          	movff	prodl,??_ISR+12
  2349  000820  CFF4 F046          	movff	prodh,??_ISR+13
  2350  000824  CFF6 F047          	movff	tblptrl,??_ISR+14
  2351  000828  CFF7 F048          	movff	tblptrh,??_ISR+15
  2352  00082C  CFF8 F049          	movff	tblptru,??_ISR+16
  2353  000830  CFF5 F04A          	movff	tablat,??_ISR+17
  2354                           
  2355                           ;main.c: 110: if(PIR1bits.RCIF == 1)
  2356  000834  AA9E               	btfss	3998,5,c	;volatile
  2357  000836  D10F               	goto	i2l109
  2358                           
  2359                           ;main.c: 111: {
  2360                           ;main.c: 112: if(i<200)
  2361  000838  5006               	movf	_i+1,w,c
  2362  00083A  0A80               	xorlw	128
  2363  00083C  6EF3               	movwf	prodl,c
  2364  00083E  0E80               	movlw	128
  2365  000840  5CF3               	subwf	prodl,w,c
  2366  000842  0EC8               	movlw	200
  2367  000844  B4D8               	btfsc	status,2,c
  2368  000846  5C05               	subwf	_i,w,c
  2369  000848  B0D8               	btfsc	status,0,c
  2370  00084A  D0E1               	goto	i2l1766
  2371                           
  2372                           ;main.c: 113: {
  2373                           ;main.c: 115: MessageBuffer[i] = ReadUSART();
  2374  00084C  0101               	movlb	1	; () banked
  2375  00084E  0E00               	movlw	low _MessageBuffer
  2376  000850  2405               	addwf	_i,w,c
  2377  000852  6ED9               	movwf	fsr2l,c
  2378  000854  0101               	movlb	1	; () banked
  2379  000856  0E01               	movlw	high _MessageBuffer
  2380  000858  2006               	addwfc	_i+1,w,c
  2381  00085A  6EDA               	movwf	fsr2h,c
  2382  00085C  ECAF  F009         	call	_ReadUSART	;wreg free
  2383  000860  6EDF               	movwf	indf2,c
  2384                           
  2385                           ;main.c: 116: if(MessageBuffer[i] == 0x0D)
  2386  000862  0101               	movlb	1	; () banked
  2387  000864  0E00               	movlw	low _MessageBuffer
  2388  000866  2405               	addwf	_i,w,c
  2389  000868  6ED9               	movwf	fsr2l,c
  2390  00086A  0101               	movlb	1	; () banked
  2391  00086C  0E01               	movlw	high _MessageBuffer
  2392  00086E  2006               	addwfc	_i+1,w,c
  2393  000870  6EDA               	movwf	fsr2h,c
  2394  000872  0E0D               	movlw	13
  2395  000874  62DF               	cpfseq	indf2,c
  2396  000876  D0C7               	goto	i2l1762
  2397                           
  2398                           ; BSR set to: 1
  2399                           ;main.c: 117: {
  2400                           ;main.c: 118: lcd_put_blank(0,flag_newline, 16);
  2401  000878  C00B  F036         	movff	_flag_newline,lcd_put_blank@y
  2402  00087C  0E10               	movlw	16
  2403  00087E  6E37               	movwf	lcd_put_blank@size,c
  2404  000880  0E00               	movlw	0
  2405  000882  EC9F  F009         	call	_lcd_put_blank
  2406                           
  2407                           ;main.c: 119: switch (flag_newline)
  2408  000886  D094               	goto	i2l1744
  2409  000888                     i2l1714:
  2410                           
  2411                           ;main.c: 123: lcd_upper_row_buffer[k] = 0x00;
  2412  000888  0102               	movlb	2	; () banked
  2413  00088A  0E00               	movlw	low _lcd_upper_row_buffer
  2414  00088C  2407               	addwf	_k,w,c
  2415  00088E  6ED9               	movwf	fsr2l,c
  2416  000890  0102               	movlb	2	; () banked
  2417  000892  0E02               	movlw	high _lcd_upper_row_buffer
  2418  000894  2008               	addwfc	_k+1,w,c
  2419  000896  6EDA               	movwf	fsr2h,c
  2420  000898  0E00               	movlw	0
  2421  00089A  6EDF               	movwf	indf2,c
  2422                           
  2423                           ; BSR set to: 2
  2424  00089C  0607               	decf	_k,f,c
  2425  00089E  A0D8               	btfss	status,0,c
  2426  0008A0  0608               	decf	_k+1,f,c
  2427  0008A2                     i2l1718:
  2428  0008A2  5008               	movf	_k+1,w,c
  2429  0008A4  0A80               	xorlw	128
  2430  0008A6  6EF3               	movwf	prodl,c
  2431  0008A8  0E80               	movlw	128
  2432  0008AA  5CF3               	subwf	prodl,w,c
  2433  0008AC  0E01               	movlw	1
  2434  0008AE  B4D8               	btfsc	status,2,c
  2435  0008B0  5C07               	subwf	_k,w,c
  2436  0008B2  B0D8               	btfsc	status,0,c
  2437  0008B4  D7E9               	goto	i2l1714
  2438                           
  2439                           ;main.c: 124: k = 0;
  2440  0008B6  0E00               	movlw	0
  2441  0008B8  6E08               	movwf	_k+1,c
  2442  0008BA  0E00               	movlw	0
  2443  0008BC  6E07               	movwf	_k,c
  2444                           
  2445                           ;main.c: 125: strcpy(lcd_upper_row_buffer, MessageBuffer);
  2446  0008BE  0102               	movlb	2	; () banked
  2447  0008C0  0E02               	movlw	high _lcd_upper_row_buffer
  2448  0008C2  6E2F               	movwf	strcpy@to+1,c
  2449  0008C4  0102               	movlb	2	; () banked
  2450  0008C6  0E00               	movlw	low _lcd_upper_row_buffer
  2451  0008C8  6E2E               	movwf	strcpy@to,c
  2452  0008CA  0101               	movlb	1	; () banked
  2453  0008CC  0E01               	movlw	high _MessageBuffer
  2454  0008CE  6E31               	movwf	strcpy@from+1,c
  2455  0008D0  0101               	movlb	1	; () banked
  2456  0008D2  0E00               	movlw	low _MessageBuffer
  2457  0008D4  6E30               	movwf	strcpy@from,c
  2458  0008D6  EC4E  F009         	call	_strcpy	;wreg free
  2459                           
  2460                           ;main.c: 126: cantidadLetrasUP = cuentaLetras(MessageBuffer);
  2461  0008DA  0101               	movlb	1	; () banked
  2462  0008DC  0E01               	movlw	high _MessageBuffer
  2463  0008DE  6E2F               	movwf	cuentaLetras@str+1,c
  2464  0008E0  0101               	movlb	1	; () banked
  2465  0008E2  0E00               	movlw	low _MessageBuffer
  2466  0008E4  6E2E               	movwf	cuentaLetras@str,c
  2467  0008E6  EC65  F009         	call	_cuentaLetras	;wreg free
  2468  0008EA  C02E  F003         	movff	?_cuentaLetras,_cantidadLetrasUP
  2469  0008EE  C02F  F004         	movff	?_cuentaLetras+1,_cantidadLetrasUP+1
  2470                           
  2471                           ;main.c: 127: lcd_upper_row_buffer[cantidadLetrasUP - 1] = ' ';
  2472  0008F2  0EFF               	movlw	255
  2473  0008F4  6E39               	movwf	??_ISR& (0+255),c
  2474  0008F6  0EFF               	movlw	255
  2475  0008F8  6E3A               	movwf	(??_ISR+1)& (0+255),c
  2476  0008FA  C003  F03B         	movff	_cantidadLetrasUP,??_ISR+2
  2477  0008FE  C004  F03C         	movff	_cantidadLetrasUP+1,??_ISR+3
  2478  000902  5039               	movf	??_ISR,w,c
  2479  000904  263B               	addwf	??_ISR+2,f,c
  2480  000906  503A               	movf	??_ISR+1,w,c
  2481  000908  223C               	addwfc	??_ISR+3,f,c
  2482  00090A  0102               	movlb	2	; () banked
  2483  00090C  0E00               	movlw	low _lcd_upper_row_buffer
  2484  00090E  243B               	addwf	??_ISR+2,w,c
  2485  000910  6ED9               	movwf	fsr2l,c
  2486  000912  0102               	movlb	2	; () banked
  2487  000914  0E02               	movlw	high _lcd_upper_row_buffer
  2488  000916  D047               	goto	L1
  2489  000918                     i2l1728:
  2490                           
  2491                           ;main.c: 132: lcd_lower_row_buffer[k] = 0x00;
  2492  000918  0103               	movlb	3	; () banked
  2493  00091A  0E00               	movlw	low _lcd_lower_row_buffer
  2494  00091C  2407               	addwf	_k,w,c
  2495  00091E  6ED9               	movwf	fsr2l,c
  2496  000920  0103               	movlb	3	; () banked
  2497  000922  0E03               	movlw	high _lcd_lower_row_buffer
  2498  000924  2008               	addwfc	_k+1,w,c
  2499  000926  6EDA               	movwf	fsr2h,c
  2500  000928  0E00               	movlw	0
  2501  00092A  6EDF               	movwf	indf2,c
  2502                           
  2503                           ; BSR set to: 3
  2504  00092C  0607               	decf	_k,f,c
  2505  00092E  A0D8               	btfss	status,0,c
  2506  000930  0608               	decf	_k+1,f,c
  2507  000932                     i2l1732:
  2508  000932  5008               	movf	_k+1,w,c
  2509  000934  0A80               	xorlw	128
  2510  000936  6EF3               	movwf	prodl,c
  2511  000938  0E80               	movlw	128
  2512  00093A  5CF3               	subwf	prodl,w,c
  2513  00093C  0E01               	movlw	1
  2514  00093E  B4D8               	btfsc	status,2,c
  2515  000940  5C07               	subwf	_k,w,c
  2516  000942  B0D8               	btfsc	status,0,c
  2517  000944  D7E9               	goto	i2l1728
  2518                           
  2519                           ;main.c: 133: k = 0;
  2520  000946  0E00               	movlw	0
  2521  000948  6E08               	movwf	_k+1,c
  2522  00094A  0E00               	movlw	0
  2523  00094C  6E07               	movwf	_k,c
  2524                           
  2525                           ;main.c: 134: strcpy(lcd_lower_row_buffer, MessageBuffer);
  2526  00094E  0103               	movlb	3	; () banked
  2527  000950  0E03               	movlw	high _lcd_lower_row_buffer
  2528  000952  6E2F               	movwf	strcpy@to+1,c
  2529  000954  0103               	movlb	3	; () banked
  2530  000956  0E00               	movlw	low _lcd_lower_row_buffer
  2531  000958  6E2E               	movwf	strcpy@to,c
  2532  00095A  0101               	movlb	1	; () banked
  2533  00095C  0E01               	movlw	high _MessageBuffer
  2534  00095E  6E31               	movwf	strcpy@from+1,c
  2535  000960  0101               	movlb	1	; () banked
  2536  000962  0E00               	movlw	low _MessageBuffer
  2537  000964  6E30               	movwf	strcpy@from,c
  2538  000966  EC4E  F009         	call	_strcpy	;wreg free
  2539                           
  2540                           ;main.c: 135: cantidadLetrasDOWN = cuentaLetras(MessageBuffer);
  2541  00096A  0101               	movlb	1	; () banked
  2542  00096C  0E01               	movlw	high _MessageBuffer
  2543  00096E  6E2F               	movwf	cuentaLetras@str+1,c
  2544  000970  0101               	movlb	1	; () banked
  2545  000972  0E00               	movlw	low _MessageBuffer
  2546  000974  6E2E               	movwf	cuentaLetras@str,c
  2547  000976  EC65  F009         	call	_cuentaLetras	;wreg free
  2548  00097A  C02E  F001         	movff	?_cuentaLetras,_cantidadLetrasDOWN
  2549  00097E  C02F  F002         	movff	?_cuentaLetras+1,_cantidadLetrasDOWN+1
  2550                           
  2551                           ;main.c: 136: lcd_lower_row_buffer[cantidadLetrasDOWN - 1] = ' ';
  2552  000982  0EFF               	movlw	255
  2553  000984  6E39               	movwf	??_ISR& (0+255),c
  2554  000986  0EFF               	movlw	255
  2555  000988  6E3A               	movwf	(??_ISR+1)& (0+255),c
  2556  00098A  C001  F03B         	movff	_cantidadLetrasDOWN,??_ISR+2
  2557  00098E  C002  F03C         	movff	_cantidadLetrasDOWN+1,??_ISR+3
  2558  000992  5039               	movf	??_ISR,w,c
  2559  000994  263B               	addwf	??_ISR+2,f,c
  2560  000996  503A               	movf	??_ISR+1,w,c
  2561  000998  223C               	addwfc	??_ISR+3,f,c
  2562  00099A  0103               	movlb	3	; () banked
  2563  00099C  0E00               	movlw	low _lcd_lower_row_buffer
  2564  00099E  243B               	addwf	??_ISR+2,w,c
  2565  0009A0  6ED9               	movwf	fsr2l,c
  2566  0009A2  0103               	movlb	3	; () banked
  2567  0009A4  0E03               	movlw	high _lcd_lower_row_buffer
  2568  0009A6                     L1:
  2569  0009A6  203C               	addwfc	??_ISR+3,w,c
  2570  0009A8  6EDA               	movwf	fsr2h,c
  2571  0009AA  0E20               	movlw	32
  2572  0009AC  6EDF               	movwf	indf2,c
  2573                           
  2574                           ;main.c: 137: break;
  2575  0009AE  D007               	goto	i2l1746
  2576  0009B0                     i2l1744:
  2577  0009B0  500B               	movf	_flag_newline,w,c
  2578                           
  2579                           ; Switch size 1, requested type "space"
  2580                           ; Number of cases is 2, Range of values is 0 to 1
  2581                           ; switch strategies available:
  2582                           ; Name         Instructions Cycles
  2583                           ; simple_byte            7     4 (average)
  2584                           ;	Chosen strategy is simple_byte
  2585  0009B2  0A00               	xorlw	0	; case 0
  2586  0009B4  B4D8               	btfsc	status,2,c
  2587  0009B6  D775               	goto	i2l1718
  2588  0009B8  0A01               	xorlw	1	; case 1
  2589  0009BA  B4D8               	btfsc	status,2,c
  2590  0009BC  D7BA               	goto	i2l1732
  2591  0009BE                     i2l1746:
  2592                           
  2593                           ;main.c: 139: putsUSART(MessageBuffer);
  2594  0009BE  0101               	movlb	1	; () banked
  2595  0009C0  0E01               	movlw	high _MessageBuffer
  2596  0009C2  6E30               	movwf	putsUSART@data+1,c
  2597  0009C4  0101               	movlb	1	; () banked
  2598  0009C6  0E00               	movlw	low _MessageBuffer
  2599  0009C8  6E2F               	movwf	putsUSART@data,c
  2600  0009CA  EC7C  F009         	call	_putsUSART	;wreg free
  2601                           
  2602                           ;main.c: 141: LATDbits.LATD1 =~ LATDbits.LATD1;
  2603  0009CE  728C               	btg	3980,1,c	;volatile
  2604                           
  2605                           ;main.c: 144: flag_newline^=1;
  2606  0009D0  0E01               	movlw	1
  2607  0009D2  1A0B               	xorwf	_flag_newline,f,c
  2608                           
  2609                           ;main.c: 145: for(;i>0;i--)
  2610  0009D4  D00D               	goto	i2l1756
  2611  0009D6                     i2l1752:
  2612                           
  2613                           ;main.c: 146: MessageBuffer[i] = 0x00;
  2614  0009D6  0101               	movlb	1	; () banked
  2615  0009D8  0E00               	movlw	low _MessageBuffer
  2616  0009DA  2405               	addwf	_i,w,c
  2617  0009DC  6ED9               	movwf	fsr2l,c
  2618  0009DE  0101               	movlb	1	; () banked
  2619  0009E0  0E01               	movlw	high _MessageBuffer
  2620  0009E2  2006               	addwfc	_i+1,w,c
  2621  0009E4  6EDA               	movwf	fsr2h,c
  2622  0009E6  0E00               	movlw	0
  2623  0009E8  6EDF               	movwf	indf2,c
  2624                           
  2625                           ; BSR set to: 1
  2626  0009EA  0605               	decf	_i,f,c
  2627  0009EC  A0D8               	btfss	status,0,c
  2628  0009EE  0606               	decf	_i+1,f,c
  2629  0009F0                     i2l1756:
  2630  0009F0  5006               	movf	_i+1,w,c
  2631  0009F2  0A80               	xorlw	128
  2632  0009F4  6EF3               	movwf	prodl,c
  2633  0009F6  0E80               	movlw	128
  2634  0009F8  5CF3               	subwf	prodl,w,c
  2635  0009FA  0E01               	movlw	1
  2636  0009FC  B4D8               	btfsc	status,2,c
  2637  0009FE  5C05               	subwf	_i,w,c
  2638  000A00  B0D8               	btfsc	status,0,c
  2639  000A02  D7E9               	goto	i2l1752
  2640  000A04  D024               	goto	i2l1774
  2641  000A06                     i2l1762:
  2642                           
  2643                           ;main.c: 149: }
  2644                           ;main.c: 150: i++;
  2645  000A06  4A05               	infsnz	_i,f,c
  2646  000A08  2A06               	incf	_i+1,f,c
  2647                           
  2648                           ;main.c: 151: PIR1bits.RCIF = 0;
  2649  000A0A  9A9E               	bcf	3998,5,c	;volatile
  2650                           
  2651                           ;main.c: 152: }
  2652  000A0C  D024               	goto	i2l109
  2653  000A0E                     i2l1766:
  2654                           
  2655                           ;main.c: 153: else
  2656                           ;main.c: 154: {
  2657                           ;main.c: 156: putsUSART(MessageBuffer);
  2658  000A0E  0101               	movlb	1	; () banked
  2659  000A10  0E01               	movlw	high _MessageBuffer
  2660  000A12  6E30               	movwf	putsUSART@data+1,c
  2661  000A14  0101               	movlb	1	; () banked
  2662  000A16  0E00               	movlw	low _MessageBuffer
  2663  000A18  6E2F               	movwf	putsUSART@data,c
  2664  000A1A  EC7C  F009         	call	_putsUSART	;wreg free
  2665                           
  2666                           ;main.c: 157: for(;i>0;i--)
  2667  000A1E  D00D               	goto	i2l1772
  2668  000A20                     i2l1768:
  2669                           
  2670                           ;main.c: 158: MessageBuffer[i] = 0x00;
  2671  000A20  0101               	movlb	1	; () banked
  2672  000A22  0E00               	movlw	low _MessageBuffer
  2673  000A24  2405               	addwf	_i,w,c
  2674  000A26  6ED9               	movwf	fsr2l,c
  2675  000A28  0101               	movlb	1	; () banked
  2676  000A2A  0E01               	movlw	high _MessageBuffer
  2677  000A2C  2006               	addwfc	_i+1,w,c
  2678  000A2E  6EDA               	movwf	fsr2h,c
  2679  000A30  0E00               	movlw	0
  2680  000A32  6EDF               	movwf	indf2,c
  2681                           
  2682                           ; BSR set to: 1
  2683  000A34  0605               	decf	_i,f,c
  2684  000A36  A0D8               	btfss	status,0,c
  2685  000A38  0606               	decf	_i+1,f,c
  2686  000A3A                     i2l1772:
  2687  000A3A  5006               	movf	_i+1,w,c
  2688  000A3C  0A80               	xorlw	128
  2689  000A3E  6EF3               	movwf	prodl,c
  2690  000A40  0E80               	movlw	128
  2691  000A42  5CF3               	subwf	prodl,w,c
  2692  000A44  0E01               	movlw	1
  2693  000A46  B4D8               	btfsc	status,2,c
  2694  000A48  5C05               	subwf	_i,w,c
  2695  000A4A  B0D8               	btfsc	status,0,c
  2696  000A4C  D7E9               	goto	i2l1768
  2697  000A4E                     i2l1774:
  2698                           
  2699                           ;main.c: 159: i=0;
  2700  000A4E  0E00               	movlw	0
  2701  000A50  6E06               	movwf	_i+1,c
  2702  000A52  0E00               	movlw	0
  2703  000A54  6E05               	movwf	_i,c
  2704  000A56                     i2l109:
  2705  000A56  C04A  FFF5         	movff	??_ISR+17,tablat
  2706  000A5A  C049  FFF8         	movff	??_ISR+16,tblptru
  2707  000A5E  C048  FFF7         	movff	??_ISR+15,tblptrh
  2708  000A62  C047  FFF6         	movff	??_ISR+14,tblptrl
  2709  000A66  C046  FFF4         	movff	??_ISR+13,prodh
  2710  000A6A  C045  FFF3         	movff	??_ISR+12,prodl
  2711  000A6E  C044  FFDA         	movff	??_ISR+11,fsr2h
  2712  000A72  C043  FFD9         	movff	??_ISR+10,fsr2l
  2713  000A76  C042  FFE2         	movff	??_ISR+9,fsr1h
  2714  000A7A  C041  FFE1         	movff	??_ISR+8,fsr1l
  2715  000A7E  C040  FFEA         	movff	??_ISR+7,fsr0h
  2716  000A82  C03F  FFE9         	movff	??_ISR+6,fsr0l
  2717  000A86  C03E  FFFB         	movff	??_ISR+5,pclatu
  2718  000A8A  C03D  FFFA         	movff	??_ISR+4,pclath
  2719  000A8E  0011               	retfie		f
  2720  000A90                     __end_of_ISR:
  2721                           	opt stack 0
  2722                           pclatu	equ	0xFFB
  2723                           pclath	equ	0xFFA
  2724                           tblptru	equ	0xFF8
  2725                           tblptrh	equ	0xFF7
  2726                           tblptrl	equ	0xFF6
  2727                           tablat	equ	0xFF5
  2728                           prodh	equ	0xFF4
  2729                           prodl	equ	0xFF3
  2730                           intcon	equ	0xFF2
  2731                           postinc0	equ	0xFEE
  2732                           fsr0h	equ	0xFEA
  2733                           fsr0l	equ	0xFE9
  2734                           wreg	equ	0xFE8
  2735                           indf1	equ	0xFE7
  2736                           fsr1h	equ	0xFE2
  2737                           fsr1l	equ	0xFE1
  2738                           indf2	equ	0xFDF
  2739                           fsr2h	equ	0xFDA
  2740                           fsr2l	equ	0xFD9
  2741                           status	equ	0xFD8
  2742                           
  2743 ;; *************** function _strcpy *****************
  2744 ;; Defined at:
  2745 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\strcpy.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;  to              2    0[COMRAM] PTR unsigned char 
  2748 ;;		 -> lcd_lower_row_buffer(200), lcd_upper_row_buffer(200), 
  2749 ;;  from            2    2[COMRAM] PTR const unsigned char 
  2750 ;;		 -> MessageBuffer(200), 
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  cp              2    4[COMRAM] PTR unsigned char 
  2753 ;;		 -> lcd_lower_row_buffer(200), lcd_upper_row_buffer(200), 
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  2    0[COMRAM] PTR unsigned char 
  2756 ;; Registers used:
  2757 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2763 ;;      Params:         4       0       0       0       0       0       0       0       0
  2764 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2765 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2766 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2767 ;;Total ram usage:        6 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; This function calls:
  2770 ;;		Nothing
  2771 ;; This function is called by:
  2772 ;;		_ISR
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           	psect	text12
  2777  00129C                     __ptext12:
  2778                           	opt stack 0
  2779  00129C                     _strcpy:
  2780                           	opt stack 25
  2781                           
  2782                           ;incstack = 0
  2783  00129C  C02F  F033         	movff	strcpy@to+1,strcpy@cp+1
  2784  0012A0  C02E  F032         	movff	strcpy@to,strcpy@cp
  2785  0012A4  D004               	goto	i2l1612
  2786  0012A6                     i2l1610:
  2787  0012A6  4A32               	infsnz	strcpy@cp,f,c
  2788  0012A8  2A33               	incf	strcpy@cp+1,f,c
  2789  0012AA  4A30               	infsnz	strcpy@from,f,c
  2790  0012AC  2A31               	incf	strcpy@from+1,f,c
  2791  0012AE                     i2l1612:
  2792  0012AE  C030  FFD9         	movff	strcpy@from,fsr2l
  2793  0012B2  C031  FFDA         	movff	strcpy@from+1,fsr2h
  2794  0012B6  C032  FFE1         	movff	strcpy@cp,fsr1l
  2795  0012BA  C033  FFE2         	movff	strcpy@cp+1,fsr1h
  2796  0012BE  CFDF FFE7          	movff	indf2,indf1
  2797  0012C2  50E7               	movf	indf1,w,c
  2798  0012C4  B4D8               	btfsc	status,2,c
  2799                           
  2800                           ;	Return value of _strcpy is never used
  2801  0012C6  0012               	return	
  2802  0012C8  D7EE               	goto	i2l1610
  2803  0012CA                     __end_of_strcpy:
  2804                           	opt stack 0
  2805                           pclatu	equ	0xFFB
  2806                           pclath	equ	0xFFA
  2807                           tblptru	equ	0xFF8
  2808                           tblptrh	equ	0xFF7
  2809                           tblptrl	equ	0xFF6
  2810                           tablat	equ	0xFF5
  2811                           prodh	equ	0xFF4
  2812                           prodl	equ	0xFF3
  2813                           intcon	equ	0xFF2
  2814                           postinc0	equ	0xFEE
  2815                           fsr0h	equ	0xFEA
  2816                           fsr0l	equ	0xFE9
  2817                           wreg	equ	0xFE8
  2818                           indf1	equ	0xFE7
  2819                           fsr1h	equ	0xFE2
  2820                           fsr1l	equ	0xFE1
  2821                           indf2	equ	0xFDF
  2822                           fsr2h	equ	0xFDA
  2823                           fsr2l	equ	0xFD9
  2824                           status	equ	0xFD8
  2825                           
  2826 ;; *************** function _putsUSART *****************
  2827 ;; Defined at:
  2828 ;;		line 14 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uputs.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;  data            2    1[COMRAM] PTR unsigned char 
  2831 ;;		 -> MessageBuffer(200), 
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;		None
  2834 ;; Return value:  Size  Location     Type
  2835 ;;		None               void
  2836 ;; Registers used:
  2837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2843 ;;      Params:         2       0       0       0       0       0       0       0       0
  2844 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2845 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2846 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2847 ;;Total ram usage:        2 bytes
  2848 ;; Hardware stack levels used:    1
  2849 ;; Hardware stack levels required when called:    1
  2850 ;; This function calls:
  2851 ;;		_WriteUSART
  2852 ;; This function is called by:
  2853 ;;		_ISR
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text13
  2858  0012F8                     __ptext13:
  2859                           	opt stack 0
  2860  0012F8                     _putsUSART:
  2861                           	opt stack 24
  2862  0012F8                     i2l258:
  2863  0012F8  A2AC               	btfss	4012,1,c	;volatile
  2864  0012FA  D7FE               	goto	i2l258
  2865  0012FC  C02F  FFD9         	movff	putsUSART@data,fsr2l
  2866  001300  C030  FFDA         	movff	putsUSART@data+1,fsr2h
  2867  001304  50DF               	movf	indf2,w,c
  2868  001306  ECD5  F009         	call	_WriteUSART
  2869  00130A  C02F  FFD9         	movff	putsUSART@data,fsr2l
  2870  00130E  C030  FFDA         	movff	putsUSART@data+1,fsr2h
  2871  001312  4A2F               	infsnz	putsUSART@data,f,c
  2872  001314  2A30               	incf	putsUSART@data+1,f,c
  2873  001316  50DF               	movf	indf2,w,c
  2874  001318  B4D8               	btfsc	status,2,c
  2875  00131A  0012               	return	
  2876  00131C  D7ED               	goto	i2l258
  2877  00131E                     __end_of_putsUSART:
  2878                           	opt stack 0
  2879                           pclatu	equ	0xFFB
  2880                           pclath	equ	0xFFA
  2881                           tblptru	equ	0xFF8
  2882                           tblptrh	equ	0xFF7
  2883                           tblptrl	equ	0xFF6
  2884                           tablat	equ	0xFF5
  2885                           prodh	equ	0xFF4
  2886                           prodl	equ	0xFF3
  2887                           intcon	equ	0xFF2
  2888                           postinc0	equ	0xFEE
  2889                           fsr0h	equ	0xFEA
  2890                           fsr0l	equ	0xFE9
  2891                           wreg	equ	0xFE8
  2892                           indf1	equ	0xFE7
  2893                           fsr1h	equ	0xFE2
  2894                           fsr1l	equ	0xFE1
  2895                           indf2	equ	0xFDF
  2896                           fsr2h	equ	0xFDA
  2897                           fsr2l	equ	0xFD9
  2898                           status	equ	0xFD8
  2899                           
  2900 ;; *************** function _WriteUSART *****************
  2901 ;; Defined at:
  2902 ;;		line 13 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;  data            1    wreg     unsigned char 
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;  data            1    0[COMRAM] unsigned char 
  2907 ;; Return value:  Size  Location     Type
  2908 ;;		None               void
  2909 ;; Registers used:
  2910 ;;		wreg
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2916 ;;      Params:         0       0       0       0       0       0       0       0       0
  2917 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2918 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2919 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2920 ;;Total ram usage:        1 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; This function calls:
  2923 ;;		Nothing
  2924 ;; This function is called by:
  2925 ;;		_putsUSART
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text14
  2930  0013AA                     __ptext14:
  2931                           	opt stack 0
  2932  0013AA                     _WriteUSART:
  2933                           	opt stack 24
  2934                           
  2935                           ;incstack = 0
  2936                           ;WriteUSART@data stored from wreg
  2937  0013AA  6E2E               	movwf	WriteUSART@data,c
  2938  0013AC  ACAC               	btfss	4012,6,c	;volatile
  2939  0013AE  D003               	goto	i2l1432
  2940  0013B0  90AC               	bcf	4012,0,c	;volatile
  2941  0013B2  B209               	btfsc	_USART_Status,1,c
  2942  0013B4  80AC               	bsf	4012,0,c	;volatile
  2943  0013B6                     i2l1432:
  2944  0013B6  C02E  FFAD         	movff	WriteUSART@data,4013	;volatile
  2945  0013BA  0012               	return	
  2946  0013BC                     __end_of_WriteUSART:
  2947                           	opt stack 0
  2948                           pclatu	equ	0xFFB
  2949                           pclath	equ	0xFFA
  2950                           tblptru	equ	0xFF8
  2951                           tblptrh	equ	0xFF7
  2952                           tblptrl	equ	0xFF6
  2953                           tablat	equ	0xFF5
  2954                           prodh	equ	0xFF4
  2955                           prodl	equ	0xFF3
  2956                           intcon	equ	0xFF2
  2957                           postinc0	equ	0xFEE
  2958                           fsr0h	equ	0xFEA
  2959                           fsr0l	equ	0xFE9
  2960                           wreg	equ	0xFE8
  2961                           indf1	equ	0xFE7
  2962                           fsr1h	equ	0xFE2
  2963                           fsr1l	equ	0xFE1
  2964                           indf2	equ	0xFDF
  2965                           fsr2h	equ	0xFDA
  2966                           fsr2l	equ	0xFD9
  2967                           status	equ	0xFD8
  2968                           
  2969 ;; *************** function _lcd_put_blank *****************
  2970 ;; Defined at:
  2971 ;;		line 74 in file "lcd_driver.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  x               1    wreg     unsigned char 
  2974 ;;  y               1    8[COMRAM] unsigned char 
  2975 ;;  size            1    9[COMRAM] unsigned char 
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;  x               1   10[COMRAM] unsigned char 
  2978 ;; Return value:  Size  Location     Type
  2979 ;;		None               void
  2980 ;; Registers used:
  2981 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2987 ;;      Params:         2       0       0       0       0       0       0       0       0
  2988 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2989 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2990 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2991 ;;Total ram usage:        3 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:    3
  2994 ;; This function calls:
  2995 ;;		i2_lcd_gotoxy
  2996 ;;		i2_lcd_write_byte
  2997 ;; This function is called by:
  2998 ;;		_ISR
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           	psect	text15
  3003  00133E                     __ptext15:
  3004                           	opt stack 0
  3005  00133E                     _lcd_put_blank:
  3006                           	opt stack 22
  3007                           
  3008                           ;incstack = 0
  3009                           ;lcd_put_blank@x stored from wreg
  3010  00133E  6E38               	movwf	lcd_put_blank@x,c
  3011                           
  3012                           ;lcd_driver.c: 78: lcd_gotoxy(x,y);
  3013  001340  C036  F033         	movff	lcd_put_blank@y,i2lcd_gotoxy@y
  3014  001344  5038               	movf	lcd_put_blank@x,w,c
  3015  001346  ECD0  F008         	call	i2_lcd_gotoxy
  3016                           
  3017                           ;lcd_driver.c: 80: while (size)
  3018  00134A  D006               	goto	i2l1606
  3019  00134C                     i2l1602:
  3020                           
  3021                           ;lcd_driver.c: 81: {
  3022                           ;lcd_driver.c: 82: {lcd_write_byte(' ', 1);};
  3023  00134C  0E01               	movlw	1
  3024  00134E  6E31               	movwf	i2lcd_write_byte@is_data,c
  3025  001350  0E20               	movlw	32
  3026  001352  ECBE  F009         	call	i2_lcd_write_byte
  3027                           
  3028                           ;lcd_driver.c: 83: size--;
  3029  001356  0637               	decf	lcd_put_blank@size,f,c
  3030  001358                     i2l1606:
  3031  001358  6637               	tstfsz	lcd_put_blank@size,c
  3032  00135A  D7F8               	goto	i2l1602
  3033  00135C  0012               	return	
  3034  00135E                     __end_of_lcd_put_blank:
  3035                           	opt stack 0
  3036                           pclatu	equ	0xFFB
  3037                           pclath	equ	0xFFA
  3038                           tblptru	equ	0xFF8
  3039                           tblptrh	equ	0xFF7
  3040                           tblptrl	equ	0xFF6
  3041                           tablat	equ	0xFF5
  3042                           prodh	equ	0xFF4
  3043                           prodl	equ	0xFF3
  3044                           intcon	equ	0xFF2
  3045                           postinc0	equ	0xFEE
  3046                           fsr0h	equ	0xFEA
  3047                           fsr0l	equ	0xFE9
  3048                           wreg	equ	0xFE8
  3049                           indf1	equ	0xFE7
  3050                           fsr1h	equ	0xFE2
  3051                           fsr1l	equ	0xFE1
  3052                           indf2	equ	0xFDF
  3053                           fsr2h	equ	0xFDA
  3054                           fsr2l	equ	0xFD9
  3055                           status	equ	0xFD8
  3056                           
  3057 ;; *************** function i2_lcd_gotoxy *****************
  3058 ;; Defined at:
  3059 ;;		line 54 in file "lcd_driver.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;  x               1    wreg     unsigned char 
  3062 ;;  y               1    5[COMRAM] unsigned char 
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  x               1    7[COMRAM] unsigned char 
  3065 ;;  lcd_gotoxy      1    6[COMRAM] unsigned char 
  3066 ;; Return value:  Size  Location     Type
  3067 ;;		None               void
  3068 ;; Registers used:
  3069 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3075 ;;      Params:         1       0       0       0       0       0       0       0       0
  3076 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3077 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3078 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3079 ;;Total ram usage:        3 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    2
  3082 ;; This function calls:
  3083 ;;		i2_lcd_write_byte
  3084 ;; This function is called by:
  3085 ;;		_lcd_put_blank
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           	psect	text16
  3090  0011A0                     __ptext16:
  3091                           	opt stack 0
  3092  0011A0                     i2_lcd_gotoxy:
  3093                           	opt stack 22
  3094                           
  3095                           ;incstack = 0
  3096                           ;i2lcd_gotoxy@x stored from wreg
  3097  0011A0  6E35               	movwf	i2lcd_gotoxy@x,c
  3098                           
  3099                           ;lcd_driver.c: 57: uint8_t addr;
  3100                           ;lcd_driver.c: 59: if ((y > 3) || (x > 19))
  3101  0011A2  0E04               	movlw	4
  3102  0011A4  5C33               	subwf	i2lcd_gotoxy@y,w,c
  3103  0011A6  B0D8               	btfsc	status,0,c
  3104  0011A8  D02B               	goto	i2l148
  3105  0011AA  0E13               	movlw	19
  3106  0011AC  6435               	cpfsgt	i2lcd_gotoxy@x,c
  3107  0011AE  D001               	goto	i2l145
  3108  0011B0  D027               	goto	i2l148
  3109  0011B2                     i2l145:
  3110                           
  3111                           ;lcd_driver.c: 62: }
  3112                           ;lcd_driver.c: 63: lcd_x = x;
  3113  0011B2  C035  F00C         	movff	i2lcd_gotoxy@x,_lcd_x
  3114                           
  3115                           ;lcd_driver.c: 64: lcd_y = y;
  3116  0011B6  C033  F00D         	movff	i2lcd_gotoxy@y,_lcd_y
  3117                           
  3118                           ;lcd_driver.c: 65: addr = x;
  3119  0011BA  C035  F034         	movff	i2lcd_gotoxy@x,i2lcd_gotoxy@addr
  3120                           
  3121                           ;lcd_driver.c: 66: addr += LCD_ROW_ADDRESS[y];
  3122  0011BE  5033               	movf	i2lcd_gotoxy@y,w,c
  3123  0011C0  0D01               	mullw	1
  3124  0011C2  0E01               	movlw	low _LCD_ROW_ADDRESS
  3125  0011C4  24F3               	addwf	prodl,w,c
  3126  0011C6  6EF6               	movwf	tblptrl,c
  3127  0011C8  0E08               	movlw	high _LCD_ROW_ADDRESS
  3128  0011CA  20F4               	addwfc	prodh,w,c
  3129  0011CC  6EF7               	movwf	tblptrh,c
  3130  0011CE                     	if	0	;There are less than 3 active tblptr bytes
  3131  0011CE                     	endif
  3132  0011CE  0008               	tblrd		*
  3133  0011D0  50F5               	movf	tablat,w,c
  3134  0011D2  2634               	addwf	i2lcd_gotoxy@addr,f,c
  3135                           
  3136                           ;lcd_driver.c: 67: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  3137  0011D4  0EFA               	movlw	250
  3138  0011D6                     i2u168_47:
  3139  0011D6  F000               	nop	
  3140  0011D8  2EE8               	decfsz	wreg,f,c
  3141  0011DA  D7FD               	goto	i2u168_47
  3142                           
  3143                           ;lcd_driver.c: 68: lcd_write_byte(addr, 0);
  3144  0011DC  0E00               	movlw	0
  3145  0011DE  6E31               	movwf	i2lcd_write_byte@is_data,c
  3146  0011E0  5034               	movf	i2lcd_gotoxy@addr,w,c
  3147  0011E2  ECBE  F009         	call	i2_lcd_write_byte
  3148                           
  3149                           ;lcd_driver.c: 69: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  3150  0011E6  0EFA               	movlw	250
  3151  0011E8                     i2u169_47:
  3152  0011E8  F000               	nop	
  3153  0011EA  2EE8               	decfsz	wreg,f,c
  3154  0011EC  D7FD               	goto	i2u169_47
  3155                           
  3156                           ;lcd_driver.c: 70: lcd_write_byte(addr, 0);
  3157  0011EE  0E00               	movlw	0
  3158  0011F0  6E31               	movwf	i2lcd_write_byte@is_data,c
  3159  0011F2  5034               	movf	i2lcd_gotoxy@addr,w,c
  3160  0011F4  ECBE  F009         	call	i2_lcd_write_byte
  3161                           
  3162                           ;lcd_driver.c: 71: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  3163  0011F8  0EFA               	movlw	250
  3164  0011FA                     i2u170_47:
  3165  0011FA  F000               	nop	
  3166  0011FC  2EE8               	decfsz	wreg,f,c
  3167  0011FE  D7FD               	goto	i2u170_47
  3168  001200                     i2l148:
  3169  001200  0012               	return	
  3170  001202                     __end_ofi2_lcd_gotoxy:
  3171                           	opt stack 0
  3172                           pclatu	equ	0xFFB
  3173                           pclath	equ	0xFFA
  3174                           tblptru	equ	0xFF8
  3175                           tblptrh	equ	0xFF7
  3176                           tblptrl	equ	0xFF6
  3177                           tablat	equ	0xFF5
  3178                           prodh	equ	0xFF4
  3179                           prodl	equ	0xFF3
  3180                           intcon	equ	0xFF2
  3181                           postinc0	equ	0xFEE
  3182                           fsr0h	equ	0xFEA
  3183                           fsr0l	equ	0xFE9
  3184                           wreg	equ	0xFE8
  3185                           indf1	equ	0xFE7
  3186                           fsr1h	equ	0xFE2
  3187                           fsr1l	equ	0xFE1
  3188                           indf2	equ	0xFDF
  3189                           fsr2h	equ	0xFDA
  3190                           fsr2l	equ	0xFD9
  3191                           status	equ	0xFD8
  3192                           
  3193 ;; *************** function i2_lcd_write_byte *****************
  3194 ;; Defined at:
  3195 ;;		line 185 in file "lcd_driver.c"
  3196 ;; Parameters:    Size  Location     Type
  3197 ;;  byte            1    wreg     unsigned char 
  3198 ;;  is_data         1    3[COMRAM] unsigned char 
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;  byte            1    4[COMRAM] unsigned char 
  3201 ;; Return value:  Size  Location     Type
  3202 ;;		None               void
  3203 ;; Registers used:
  3204 ;;		wreg, status,2, status,0, cstack
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3210 ;;      Params:         1       0       0       0       0       0       0       0       0
  3211 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3212 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3213 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3214 ;;Total ram usage:        2 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    1
  3217 ;; This function calls:
  3218 ;;		i2_lcd_write_nibble
  3219 ;; This function is called by:
  3220 ;;		_lcd_put_blank
  3221 ;;		i2_lcd_gotoxy
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           	psect	text17
  3226  00137C                     __ptext17:
  3227                           	opt stack 0
  3228  00137C                     i2_lcd_write_byte:
  3229                           	opt stack 23
  3230                           
  3231                           ;incstack = 0
  3232                           ;i2lcd_write_byte@byte stored from wreg
  3233  00137C  6E32               	movwf	i2lcd_write_byte@byte,c
  3234                           
  3235                           ;lcd_driver.c: 188: lcd_write_nibble(byte >> 4, is_data);
  3236  00137E  C031  F02E         	movff	i2lcd_write_byte@is_data,i2lcd_write_nibble@is_data
  3237  001382  3832               	swapf	i2lcd_write_byte@byte,w,c
  3238  001384  0B0F               	andlw	15
  3239  001386  EC92  F007         	call	i2_lcd_write_nibble
  3240                           
  3241                           ;lcd_driver.c: 189: lcd_write_nibble(byte, is_data);
  3242  00138A  C031  F02E         	movff	i2lcd_write_byte@is_data,i2lcd_write_nibble@is_data
  3243  00138E  5032               	movf	i2lcd_write_byte@byte,w,c
  3244  001390  EC92  F007         	call	i2_lcd_write_nibble
  3245  001394  0012               	return	
  3246  001396                     __end_ofi2_lcd_write_byte:
  3247                           	opt stack 0
  3248                           pclatu	equ	0xFFB
  3249                           pclath	equ	0xFFA
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           intcon	equ	0xFF2
  3257                           postinc0	equ	0xFEE
  3258                           fsr0h	equ	0xFEA
  3259                           fsr0l	equ	0xFE9
  3260                           wreg	equ	0xFE8
  3261                           indf1	equ	0xFE7
  3262                           fsr1h	equ	0xFE2
  3263                           fsr1l	equ	0xFE1
  3264                           indf2	equ	0xFDF
  3265                           fsr2h	equ	0xFDA
  3266                           fsr2l	equ	0xFD9
  3267                           status	equ	0xFD8
  3268                           
  3269 ;; *************** function i2_lcd_write_nibble *****************
  3270 ;; Defined at:
  3271 ;;		line 176 in file "lcd_driver.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;  nibble          1    wreg     unsigned char 
  3274 ;;  is_data         1    0[COMRAM] unsigned char 
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  nibble          1    2[COMRAM] unsigned char 
  3277 ;; Return value:  Size  Location     Type
  3278 ;;		None               void
  3279 ;; Registers used:
  3280 ;;		wreg, status,2, status,0, cstack
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3286 ;;      Params:         1       0       0       0       0       0       0       0       0
  3287 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3288 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3289 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3290 ;;Total ram usage:        3 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; This function calls:
  3293 ;;		Nothing
  3294 ;; This function is called by:
  3295 ;;		i2_lcd_write_byte
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           	psect	text18
  3300  000F24                     __ptext18:
  3301                           	opt stack 0
  3302  000F24                     i2_lcd_write_nibble:
  3303                           	opt stack 23
  3304                           
  3305                           ;incstack = 0
  3306                           ;i2lcd_write_nibble@nibble stored from wreg
  3307  000F24  6E30               	movwf	i2lcd_write_nibble@nibble,c
  3308                           
  3309                           ;lcd_driver.c: 179: { LATDbits.LATD2 = is_data; };
  3310  000F26  B02E               	btfsc	i2lcd_write_nibble@is_data,0,c
  3311  000F28  D002               	bra	i2u58_45
  3312  000F2A  948C               	bcf	3980,2,c	;volatile
  3313  000F2C  D001               	bra	i2u58_46
  3314  000F2E                     i2u58_45:
  3315  000F2E  848C               	bsf	3980,2,c	;volatile
  3316  000F30                     i2u58_46:
  3317                           
  3318                           ;lcd_driver.c: 180: { _delay((unsigned long)((100)*(4000000/4000000.0))); };
  3319  000F30  0E21               	movlw	33
  3320  000F32                     i2u171_47:
  3321  000F32  2EE8               	decfsz	wreg,f,c
  3322  000F34  D7FE               	goto	i2u171_47
  3323  000F36  F000               	nop	
  3324                           
  3325                           ;lcd_driver.c: 181: { LATDbits.LATD4 = nibble & 1; LATDbits.LATD5 = (nibble & 2) >> 1; L
      +                          ATDbits.LATD6 = (nibble & 4) >> 2; LATDbits.LATD7 = (nibble & 8) >> 3; };
  3326  000F38  C030  F02F         	movff	i2lcd_write_nibble@nibble,??i2_lcd_write_nibble
  3327  000F3C  0E01               	movlw	1
  3328  000F3E  162F               	andwf	??i2_lcd_write_nibble,f,c
  3329  000F40  3A2F               	swapf	??i2_lcd_write_nibble,f,c
  3330  000F42  508C               	movf	3980,w,c	;volatile
  3331  000F44  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3332  000F46  0BEF               	andlw	-17
  3333  000F48  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3334  000F4A  6E8C               	movwf	3980,c	;volatile
  3335  000F4C  C030  F02F         	movff	i2lcd_write_nibble@nibble,??i2_lcd_write_nibble
  3336  000F50  90D8               	bcf	status,0,c
  3337  000F52  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3338  000F54  0E01               	movlw	1
  3339  000F56  162F               	andwf	??i2_lcd_write_nibble,f,c
  3340  000F58  3A2F               	swapf	??i2_lcd_write_nibble,f,c
  3341  000F5A  462F               	rlncf	??i2_lcd_write_nibble,f,c
  3342  000F5C  508C               	movf	3980,w,c	;volatile
  3343  000F5E  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3344  000F60  0BDF               	andlw	-33
  3345  000F62  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3346  000F64  6E8C               	movwf	3980,c	;volatile
  3347  000F66  C030  F02F         	movff	i2lcd_write_nibble@nibble,??i2_lcd_write_nibble
  3348  000F6A  90D8               	bcf	status,0,c
  3349  000F6C  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3350  000F6E  90D8               	bcf	status,0,c
  3351  000F70  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3352  000F72  0E01               	movlw	1
  3353  000F74  162F               	andwf	??i2_lcd_write_nibble,f,c
  3354  000F76  3A2F               	swapf	??i2_lcd_write_nibble,f,c
  3355  000F78  462F               	rlncf	??i2_lcd_write_nibble,f,c
  3356  000F7A  462F               	rlncf	??i2_lcd_write_nibble,f,c
  3357  000F7C  508C               	movf	3980,w,c	;volatile
  3358  000F7E  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3359  000F80  0BBF               	andlw	-65
  3360  000F82  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3361  000F84  6E8C               	movwf	3980,c	;volatile
  3362  000F86  C030  F02F         	movff	i2lcd_write_nibble@nibble,??i2_lcd_write_nibble
  3363  000F8A  90D8               	bcf	status,0,c
  3364  000F8C  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3365  000F8E  90D8               	bcf	status,0,c
  3366  000F90  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3367  000F92  90D8               	bcf	status,0,c
  3368  000F94  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3369  000F96  0E01               	movlw	1
  3370  000F98  162F               	andwf	??i2_lcd_write_nibble,f,c
  3371  000F9A  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3372  000F9C  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3373  000F9E  508C               	movf	3980,w,c	;volatile
  3374  000FA0  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3375  000FA2  0B7F               	andlw	-129
  3376  000FA4  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3377  000FA6  6E8C               	movwf	3980,c	;volatile
  3378                           
  3379                           ;lcd_driver.c: 182: { LATDbits.LATD3 = 1; { _delay((unsigned long)((200)*(4000000/400000
      +                          0.0))); }; LATDbits.LATD3 = 0; { _delay((unsigned long)((500)*(4000000/4000000.0))); }; 
      +                          };
  3380  000FA8  868C               	bsf	3980,3,c	;volatile
  3381  000FAA  0E42               	movlw	66
  3382  000FAC                     i2u172_47:
  3383  000FAC  2EE8               	decfsz	wreg,f,c
  3384  000FAE  D7FE               	goto	i2u172_47
  3385  000FB0  D000               	nop2		;nop
  3386  000FB2  968C               	bcf	3980,3,c	;volatile
  3387  000FB4  0EA6               	movlw	166
  3388  000FB6                     i2u173_47:
  3389  000FB6  2EE8               	decfsz	wreg,f,c
  3390  000FB8  D7FE               	goto	i2u173_47
  3391  000FBA  D000               	nop2		;nop
  3392  000FBC  0012               	return	
  3393  000FBE                     __end_ofi2_lcd_write_nibble:
  3394                           	opt stack 0
  3395                           pclatu	equ	0xFFB
  3396                           pclath	equ	0xFFA
  3397                           tblptru	equ	0xFF8
  3398                           tblptrh	equ	0xFF7
  3399                           tblptrl	equ	0xFF6
  3400                           tablat	equ	0xFF5
  3401                           prodh	equ	0xFF4
  3402                           prodl	equ	0xFF3
  3403                           intcon	equ	0xFF2
  3404                           postinc0	equ	0xFEE
  3405                           fsr0h	equ	0xFEA
  3406                           fsr0l	equ	0xFE9
  3407                           wreg	equ	0xFE8
  3408                           indf1	equ	0xFE7
  3409                           fsr1h	equ	0xFE2
  3410                           fsr1l	equ	0xFE1
  3411                           indf2	equ	0xFDF
  3412                           fsr2h	equ	0xFDA
  3413                           fsr2l	equ	0xFD9
  3414                           status	equ	0xFD8
  3415                           
  3416 ;; *************** function _cuentaLetras *****************
  3417 ;; Defined at:
  3418 ;;		line 166 in file "main.c"
  3419 ;; Parameters:    Size  Location     Type
  3420 ;;  str             2    0[COMRAM] PTR unsigned char 
  3421 ;;		 -> MessageBuffer(200), 
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;  j               2    2[COMRAM] int 
  3424 ;; Return value:  Size  Location     Type
  3425 ;;                  2    0[COMRAM] int 
  3426 ;; Registers used:
  3427 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3433 ;;      Params:         2       0       0       0       0       0       0       0       0
  3434 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3435 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3436 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3437 ;;Total ram usage:        4 bytes
  3438 ;; Hardware stack levels used:    1
  3439 ;; This function calls:
  3440 ;;		Nothing
  3441 ;; This function is called by:
  3442 ;;		_ISR
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           	psect	text19
  3447  0012CA                     __ptext19:
  3448                           	opt stack 0
  3449  0012CA                     _cuentaLetras:
  3450                           	opt stack 25
  3451                           
  3452                           ;main.c: 168: int j=0;
  3453                           
  3454                           ;incstack = 0
  3455  0012CA  0E00               	movlw	0
  3456  0012CC  6E31               	movwf	cuentaLetras@j+1,c
  3457  0012CE  0E00               	movlw	0
  3458  0012D0  6E30               	movwf	cuentaLetras@j,c
  3459                           
  3460                           ;main.c: 169: while(str[j]!= 0x0D)
  3461  0012D2  D002               	goto	i2l1618
  3462  0012D4                     i2l1616:
  3463                           
  3464                           ;main.c: 170: {
  3465                           ;main.c: 171: j++;
  3466  0012D4  4A30               	infsnz	cuentaLetras@j,f,c
  3467  0012D6  2A31               	incf	cuentaLetras@j+1,f,c
  3468  0012D8                     i2l1618:
  3469  0012D8  5030               	movf	cuentaLetras@j,w,c
  3470  0012DA  242E               	addwf	cuentaLetras@str,w,c
  3471  0012DC  6ED9               	movwf	fsr2l,c
  3472  0012DE  5031               	movf	cuentaLetras@j+1,w,c
  3473  0012E0  202F               	addwfc	cuentaLetras@str+1,w,c
  3474  0012E2  6EDA               	movwf	fsr2h,c
  3475  0012E4  0E0D               	movlw	13
  3476  0012E6  62DF               	cpfseq	indf2,c
  3477  0012E8  D7F5               	goto	i2l1616
  3478                           
  3479                           ;main.c: 172: }
  3480                           ;main.c: 173: return j+1;
  3481  0012EA  0E01               	movlw	1
  3482  0012EC  2430               	addwf	cuentaLetras@j,w,c
  3483  0012EE  6E2E               	movwf	?_cuentaLetras,c
  3484  0012F0  0E00               	movlw	0
  3485  0012F2  2031               	addwfc	cuentaLetras@j+1,w,c
  3486  0012F4  6E2F               	movwf	?_cuentaLetras+1,c
  3487  0012F6  0012               	return	
  3488  0012F8                     __end_of_cuentaLetras:
  3489                           	opt stack 0
  3490                           pclatu	equ	0xFFB
  3491                           pclath	equ	0xFFA
  3492                           tblptru	equ	0xFF8
  3493                           tblptrh	equ	0xFF7
  3494                           tblptrl	equ	0xFF6
  3495                           tablat	equ	0xFF5
  3496                           prodh	equ	0xFF4
  3497                           prodl	equ	0xFF3
  3498                           intcon	equ	0xFF2
  3499                           postinc0	equ	0xFEE
  3500                           fsr0h	equ	0xFEA
  3501                           fsr0l	equ	0xFE9
  3502                           wreg	equ	0xFE8
  3503                           indf1	equ	0xFE7
  3504                           fsr1h	equ	0xFE2
  3505                           fsr1l	equ	0xFE1
  3506                           indf2	equ	0xFDF
  3507                           fsr2h	equ	0xFDA
  3508                           fsr2l	equ	0xFD9
  3509                           status	equ	0xFD8
  3510                           
  3511 ;; *************** function _ReadUSART *****************
  3512 ;; Defined at:
  3513 ;;		line 15 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;		None
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  data            1    0[COMRAM] unsigned char 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  1    wreg      unsigned char 
  3520 ;; Registers used:
  3521 ;;		wreg, status,2, status,0
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3527 ;;      Params:         0       0       0       0       0       0       0       0       0
  3528 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3529 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3530 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3531 ;;Total ram usage:        1 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; This function calls:
  3534 ;;		Nothing
  3535 ;; This function is called by:
  3536 ;;		_ISR
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text20
  3541  00135E                     __ptext20:
  3542                           	opt stack 0
  3543  00135E                     _ReadUSART:
  3544                           	opt stack 25
  3545                           
  3546                           ;incstack = 0
  3547  00135E  0EF2               	movlw	242
  3548  001360  1609               	andwf	_USART_Status,f,c
  3549  001362  ACAB               	btfss	4011,6,c	;volatile
  3550  001364  D003               	goto	i2l271
  3551  001366  9009               	bcf	_USART_Status,0,c
  3552  001368  B0AB               	btfsc	4011,0,c	;volatile
  3553  00136A  8009               	bsf	_USART_Status,0,c
  3554  00136C                     i2l271:
  3555  00136C  B4AB               	btfsc	4011,2,c	;volatile
  3556  00136E  8409               	bsf	_USART_Status,2,c
  3557  001370  B2AB               	btfsc	4011,1,c	;volatile
  3558  001372  8609               	bsf	_USART_Status,3,c
  3559  001374  CFAE F02E          	movff	4014,ReadUSART@data	;volatile
  3560  001378  502E               	movf	ReadUSART@data,w,c
  3561  00137A  0012               	return	
  3562  00137C                     __end_of_ReadUSART:
  3563                           	opt stack 0
  3564                           pclatu	equ	0xFFB
  3565                           pclath	equ	0xFFA
  3566                           tblptru	equ	0xFF8
  3567                           tblptrh	equ	0xFF7
  3568                           tblptrl	equ	0xFF6
  3569                           tablat	equ	0xFF5
  3570                           prodh	equ	0xFF4
  3571                           prodl	equ	0xFF3
  3572                           intcon	equ	0xFF2
  3573                           postinc0	equ	0xFEE
  3574                           fsr0h	equ	0xFEA
  3575                           fsr0l	equ	0xFE9
  3576                           wreg	equ	0xFE8
  3577                           indf1	equ	0xFE7
  3578                           fsr1h	equ	0xFE2
  3579                           fsr1l	equ	0xFE1
  3580                           indf2	equ	0xFDF
  3581                           fsr2h	equ	0xFDA
  3582                           fsr2l	equ	0xFD9
  3583                           status	equ	0xFD8
  3584                           pclatu	equ	0xFFB
  3585                           pclath	equ	0xFFA
  3586                           tblptru	equ	0xFF8
  3587                           tblptrh	equ	0xFF7
  3588                           tblptrl	equ	0xFF6
  3589                           tablat	equ	0xFF5
  3590                           prodh	equ	0xFF4
  3591                           prodl	equ	0xFF3
  3592                           intcon	equ	0xFF2
  3593                           postinc0	equ	0xFEE
  3594                           fsr0h	equ	0xFEA
  3595                           fsr0l	equ	0xFE9
  3596                           wreg	equ	0xFE8
  3597                           indf1	equ	0xFE7
  3598                           fsr1h	equ	0xFE2
  3599                           fsr1l	equ	0xFE1
  3600                           indf2	equ	0xFDF
  3601                           fsr2h	equ	0xFDA
  3602                           fsr2l	equ	0xFD9
  3603                           status	equ	0xFD8
  3604                           
  3605                           	psect	rparam
  3606  0000                     pclatu	equ	0xFFB
  3607                           pclath	equ	0xFFA
  3608                           tblptru	equ	0xFF8
  3609                           tblptrh	equ	0xFF7
  3610                           tblptrl	equ	0xFF6
  3611                           tablat	equ	0xFF5
  3612                           prodh	equ	0xFF4
  3613                           prodl	equ	0xFF3
  3614                           intcon	equ	0xFF2
  3615                           postinc0	equ	0xFEE
  3616                           fsr0h	equ	0xFEA
  3617                           fsr0l	equ	0xFE9
  3618                           wreg	equ	0xFE8
  3619                           indf1	equ	0xFE7
  3620                           fsr1h	equ	0xFE2
  3621                           fsr1l	equ	0xFE1
  3622                           indf2	equ	0xFDF
  3623                           fsr2h	equ	0xFDA
  3624                           fsr2l	equ	0xFD9
  3625                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        2
    BSS         645
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     29      76
    BANK0           160     15      15
    BANK1           256      0     200
    BANK2           256      0     200
    BANK3           256      0     200
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strncpy@from	PTR const unsigned char  size(2) Largest target is 200
		 -> lcd_lower_row_buffer(BANK3[200]), lcd_upper_row_buffer(BANK2[200]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 16
		 -> lcd_lower_display_buffer(COMRAM[16]), lcd_upper_display_buffer(COMRAM[16]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 16
		 -> lcd_lower_display_buffer(COMRAM[16]), lcd_upper_display_buffer(COMRAM[16]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 200
		 -> MessageBuffer(BANK1[200]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 200
		 -> lcd_lower_row_buffer(BANK3[200]), lcd_upper_row_buffer(BANK2[200]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 200
		 -> lcd_lower_row_buffer(BANK3[200]), lcd_upper_row_buffer(BANK2[200]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 200
		 -> MessageBuffer(BANK1[200]), 

    lcd_puts@str	PTR unsigned char  size(2) Largest target is 16
		 -> lcd_lower_display_buffer(COMRAM[16]), lcd_upper_display_buffer(COMRAM[16]), 

    rotarString@str	PTR unsigned char  size(2) Largest target is 200
		 -> lcd_lower_row_buffer(BANK3[200]), lcd_upper_row_buffer(BANK2[200]), 

    cuentaLetras@str	PTR unsigned char  size(2) Largest target is 200
		 -> MessageBuffer(BANK1[200]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 200
		 -> lcd_lower_row_buffer(BANK3[200]), lcd_upper_row_buffer(BANK2[200]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 16
		 -> lcd_lower_display_buffer(COMRAM[16]), lcd_upper_display_buffer(COMRAM[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_lcd_put_blank
    _putsUSART->_WriteUSART
    _lcd_put_blank->i2_lcd_gotoxy
    i2_lcd_gotoxy->i2_lcd_write_byte
    i2_lcd_write_byte->i2_lcd_write_nibble

Critical Paths under _main in BANK0

    _main->_rotarString
    _lcd_puts->_lcd_gotoxy
    _lcd_gotoxy->_lcd_write_byte
    _lcd_init->_lcd_write_byte
    _lcd_write_byte->_lcd_write_nibble

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   13293
                                             12 BANK0      3     3      0
                           _OpenPWM1
                          _OpenUSART
                          _SetDCPWM1
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                     _lcd_write_byte
                        _rotarString
                            _strncpy
 ---------------------------------------------------------------------------------
 (1) _strncpy                                              8     2      6     664
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _rotarString                                         12     8      4     627
                                              0 BANK0     12     8      4
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    4607
                                              8 BANK0      2     0      2
                         _lcd_gotoxy
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    2619
                                              5 BANK0      3     2      1
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    2324
                                              5 BANK0      1     1      0
                     _lcd_write_byte
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (1) _lcd_write_byte                                       2     1      1    1707
                                              3 BANK0      2     1      1
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (2) _lcd_write_nibble                                     3     2      1     617
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _SetDCPWM1                                            6     4      2     253
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _OpenUSART                                            6     4      2     387
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _OpenPWM1                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 18    18      0    1799
                                             11 COMRAM    18    18      0
                          _ReadUSART
                       _cuentaLetras
                      _lcd_put_blank
                          _putsUSART
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4     331
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _putsUSART                                            2     0      2     194
                                              1 COMRAM     2     0      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (7) _WriteUSART                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _lcd_put_blank                                        3     1      2    1055
                                              8 COMRAM     3     1      2
                       i2_lcd_gotoxy
                   i2_lcd_write_byte
 ---------------------------------------------------------------------------------
 (7) i2_lcd_gotoxy                                         3     2      1     532
                                              5 COMRAM     3     2      1
                   i2_lcd_write_byte
 ---------------------------------------------------------------------------------
 (7) i2_lcd_write_byte                                     2     1      1     328
                                              3 COMRAM     2     1      1
                 i2_lcd_write_nibble
 ---------------------------------------------------------------------------------
 (8) i2_lcd_write_nibble                                   3     2      1     162
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (6) _cuentaLetras                                         4     2      2     196
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OpenPWM1
   _OpenUSART
   _SetDCPWM1
   _lcd_gotoxy
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_init
     _lcd_write_byte
       _lcd_write_nibble
     _lcd_write_nibble
   _lcd_puts
     _lcd_gotoxy
       _lcd_write_byte
         _lcd_write_nibble
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_write_byte
     _lcd_write_nibble
   _rotarString
   _strncpy

 _ISR (ROOT)
   _ReadUSART
   _cuentaLetras
   _lcd_put_blank
     i2_lcd_gotoxy
       i2_lcd_write_byte
         i2_lcd_write_nibble
     i2_lcd_write_byte
       i2_lcd_write_nibble
   _putsUSART
     _WriteUSART
   _strcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      F       F       5        9.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1D      4C       1       80.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B3      20        0.0%
DATA                 0      0     2B3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Jan 03 18:58:39 2017

                _rotarString 0D7A                            _c 000A                            _i 0005  
                          _k 0007                          l241 0FEA                          l145 1144  
                        l250 103C                          l148 119E                          l245 1004  
                        l246 1006                          l247 1012                          l248 1014  
                        _PR2 000FCB                          _ISR 0008                          wreg 000FE8  
 __end_ofi2_lcd_write_nibble 0FBE                 __CFG_FOSC$HS 000000            rotarString@length 0062  
                lcd_gotoxy@x 0067                  lcd_gotoxy@y 0065               ?_lcd_put_blank 0036  
               __CFG_LVP$OFF 000000                         ?_ISR 002E                 __CFG_WDT$OFF 000000  
                       l2000 0D96                         l2004 0DDC                         l2060 0BD6  
                       l2044 0B1A                         l2080 0C74                         l2064 0C02  
                       l2082 0C7C                         l1970 108E                         l1962 104C  
                       l1892 0FEC                         l1884 0FDA                         l1990 110C  
                       l1982 10DC                         l1974 10A0                         l1992 1116  
                       l1968 1082                         l1986 10F4                         l1978 10B8  
                       l1994 111C                         u1135 0E70                         u1136 0E72  
                       u1265 1262                         u1507 0C1C                         u1517 0C2E  
                       u1607 0CEA                         u1527 0C40                         u1617 0D14  
                       u1537 0C52                         u1627 0D32                         u1547 116C  
                       u1637 0D50                         u1557 1182                         u1647 0D6E  
                       u1567 1198                         u1487 0B06                         _PIE1 000F9D  
                       u1657 0E74                         u1577 0C92                         u1497 0C0A  
                       u1667 0F12                         u1587 0CAE                         u1677 0F1C  
                       u1597 0CCC                         _PEIE 007F96                         _RCIE 007CED  
                       _RCIF 007CF5                         _RCIP 007CFD       __end_of_lcd_write_byte 133E  
                       _main 0A90                         fsr0h 000FEA                         fsr1h 000FE2  
                       fsr0l 000FE9                         fsr2h 000FDA                         indf1 000FE7  
                       fsr1l 000FE1                         indf2 000FDF                         fsr2l 000FD9  
                lcd_puts@str 0068                         pclat 000FFA                         prodh 000FF4  
                       prodl 000FF3                         start 0018                ?_cuentaLetras 002E  
   __end_ofi2_lcd_write_byte 1396                __CFG_MCLRE$ON 000000                        ??_ISR 0039  
                      ?_main 002E                        _T2CON 000FCA                        i2l109 0A56  
                      i2l145 11B2                        i2l148 1200                        i2l271 136C  
                      i2l258 12F8                        _RCREG 000FAE                        _RCSTA 000FAB  
                      _SPBRG 000FAF                        _TRISC 000F94                        _TRISD 000F95  
                      _TXREG 000FAD                        _TXSTA 000FAC                        _lcd_x 000C  
                      _lcd_y 000D                        tablat 000FF5                        status 000FD8  
            ?_lcd_write_byte 0063        __size_ofi2_lcd_gotoxy 0062              __end_of_strncpy 10B6  
             ??_cuentaLetras 0030             i2lcd_gotoxy@addr 0034               WriteUSART@data 002E  
            __initialization 1202                 __end_of_main 0C8A             __end_of_OpenPWM1 13AA  
                     ??_main 006C                __activetblptr 000002                 rotarString@j 006A  
            ??_lcd_put_blank 0038    i2lcd_write_nibble@is_data 002E                 i2_lcd_gotoxy 11A0  
                     _CCPR1L 000FBE                       i2l1432 13B6                       i2l1602 134C  
                     i2l1610 12A6                       i2l1612 12AE                       i2l1606 1358  
                     i2l1616 12D4                       i2l1618 12D8                       i2l1714 0888  
                     i2l1732 0932                       i2l1718 08A2                       i2l1752 09D6  
                     i2l1728 0918                       i2l1744 09B0                       i2l1746 09BE  
                     i2l1762 0A06                       i2l1772 0A3A                       i2l1756 09F0  
                     i2l1774 0A4E                       i2l1766 0A0E                       i2l1768 0A20  
         __size_of_ReadUSART 001E                       _SPBRGH 000FB0           __size_of_SetDCPWM1 0048  
           __end_of_lcd_init 0D7A           __size_of_OpenUSART 0080             __end_of_lcd_puts 112C  
   __end_of_lcd_write_nibble 0F24                       clear_0 1208                       clear_1 1214  
                     clear_2 1220                       clear_3 122C                       _strcpy 129C  
               __pdataCOMRAM 004B         _lcd_lower_row_buffer 0300                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                  ??_strncpy 0066                _MessageBuffer 0100                   __accesstop 0060  
    __end_of__initialization 124A                   _WriteUSART 13AA               __pcstackCOMRAM 002E  
               ?_rotarString 0060            __end_of_ReadUSART 137C            __end_of_SetDCPWM1 129C  
             lcd_gotoxy@addr 0066     i2lcd_write_nibble@nibble 0030         __end_of_cuentaLetras 12F8  
              ReadUSART@data 002E            __end_of_OpenUSART 103E                   __pbssBANK1 0100  
                 __pbssBANK2 0200                   __pbssBANK3 0300           i2_lcd_write_nibble 0F24  
                  ?_OpenPWM1 002E            ?i2_lcd_write_byte 0031          ?i2_lcd_write_nibble 002E  
         ??i2_lcd_write_byte 0032                      _CCP1CON 000FBD                putsUSART@data 002F  
                    ?_strcpy 002E                   _lcd_gotoxy 112C                      i2u58_45 0F2E  
                    i2u58_46 0F30           __size_of_putsUSART 0026             ??_lcd_write_byte 0064  
       ??i2_lcd_write_nibble 002F                    ?_lcd_init 002E                    ?_lcd_puts 0068  
              cuentaLetras@j 0030                   ??_OpenPWM1 0060                      __Hparam 0000  
                    __Lparam 0000                 _flag_newline 000B                  ?_WriteUSART 002E  
               __psmallconst 0800        lcd_write_byte@is_data 0063                      __pcinit 1202  
                    __ramtop 0800                      __ptext0 0A90                      __ptext1 103E  
                    __ptext2 0D7A                      __ptext3 10B6                      __ptext4 112C  
                    __ptext5 0C8A                      __ptext6 131E                      __ptext7 0E62  
                    __ptext8 1254                      __ptext9 0FBE              __size_of_strcpy 002E  
               __size_of_ISR 0A88                    _T2CONbits 000FCA           lcd_write_byte@byte 0064  
       _lcd_upper_row_buffer 0200               lcd_put_blank@x 0038               lcd_put_blank@y 0036  
                 ??_lcd_init 0065               __pintcode_body 0806                      _strncpy 103E  
                 ??_lcd_puts 006A         end_of_initialization 124A             _cantidadLetrasUP 0003  
              __Lmediumconst 0000                      int_func 0806                    _RCSTAbits 000FAB  
                    postinc0 000FEE            __end_of_putsUSART 131E            ?_lcd_write_nibble 0060  
      __size_of_cuentaLetras 002E         __size_of_rotarString 00E8           ??_lcd_write_nibble 0061  
          lcd_put_blank@size 0037                    _TRISCbits 000F94                  ?_lcd_gotoxy 0065  
      __end_of_lcd_put_blank 135E          __size_of_WriteUSART 0012                   main@config 006D  
                  _TXSTAbits 000FAC                 _cuentaLetras 12CA                __pidataCOMRAM 13BC  
            cuentaLetras@str 002E               __end_of_strcpy 12CA          start_initialization 1202  
                  _ReadUSART 135E                  __end_of_ISR 0A90                    _SetDCPWM1 1254  
            SetDCPWM1@DCycle 0064                    _DutyCycle 004B     _lcd_lower_display_buffer 000E  
                  _OpenUSART 0FBE            __size_of_OpenPWM1 0014          __size_of_lcd_gotoxy 0074  
    i2lcd_write_byte@is_data 0031                     ??_strcpy 0032                  __pbssCOMRAM 0001  
             rotarString@aux 0069                   ?_ReadUSART 002E               rotarString@str 0060  
  __size_ofi2_lcd_write_byte 001A                __pcstackBANK0 0060                   ?_SetDCPWM1 0060  
              i2lcd_gotoxy@x 0035                i2lcd_gotoxy@y 0033                   ?_OpenUSART 0060  
          __size_of_lcd_init 00F0            __size_of_lcd_puts 0076                 ??_WriteUSART 002E  
                  __pintcode 0008                  __smallconst 0800                ?i2_lcd_gotoxy 0033  
__size_ofi2_lcd_write_nibble 009A              _LCD_ROW_ADDRESS 0801                     ?_strncpy 0060  
         __end_of_WriteUSART 13BC                     _LATDbits 000F8C                  strncpy@from 0062  
                   _PIE1bits 000F9D                  strncpy@size 0064                     i2u170_47 11FA  
                   i2u171_47 0F32                     i2u172_47 0FAC                     i2u173_47 0FB6  
                   i2u168_47 11D6                     _PIR1bits 000F9E                     i2u169_47 11E8  
   _lcd_upper_display_buffer 001E                    _putsUSART 12F8                  ??_ReadUSART 002E  
             ??i2_lcd_gotoxy 0034                    main@spbrg 006E                 ??_lcd_gotoxy 0066  
                ??_SetDCPWM1 0062    __size_of_lcd_write_nibble 00C2           _cantidadLetrasDOWN 0001  
                ??_OpenUSART 0062           SetDCPWM1@dutycycle 0060              OpenUSART@config 0065  
                   _OpenPWM1 1396      __size_of_lcd_write_byte 0020                     __Hrparam 0000  
    lcd_write_nibble@is_data 0060                     __Lrparam 0000                ??_rotarString 0064  
         __end_of_lcd_gotoxy 11A0                   ?_putsUSART 002F      __end_of_LCD_ROW_ADDRESS 0805  
       i2lcd_write_byte@byte 0032               OpenPWM1@period 0060             i2_lcd_write_byte 137C  
                   __ptext10 1396                     __ptext20 135E                     __ptext12 129C  
                   __ptext13 12F8                     __ptext14 13AA                     __ptext15 133E  
                   __ptext16 11A0                     __ptext17 137C                     __ptext18 0F24  
                   __ptext19 12CA                     _lcd_init 0C8A                     _lcd_puts 10B6  
           __size_of_strncpy 0078                   strcpy@from 0030                __size_of_main 01FA  
     __size_of_lcd_put_blank 0020          __end_of_rotarString 0E62                   _INTCONbits 000FF2  
             OpenUSART@spbrg 0060       lcd_write_nibble@nibble 0062                     intlevel2 0000  
                  strncpy@cp 0066                    strncpy@to 0060         __end_ofi2_lcd_gotoxy 1202  
                ??_putsUSART 0031                     strcpy@cp 0032                     strcpy@to 002E  
           _lcd_write_nibble 0E62                _lcd_put_blank 133E                 _USART_Status 0009  
             _lcd_write_byte 131E  
