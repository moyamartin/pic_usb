

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Jan 04 16:01:47 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           	psect	idataCOMRAM
    45  001466                     __pidataCOMRAM:
    46                           	opt stack 0
    47                           
    48                           ;initializer for _DutyCycle
    49  001466  000A               	dw	10
    50                           
    51                           	psect	smallconst
    52  000800                     __psmallconst:
    53                           	opt stack 0
    54  000800  00                 	db	0
    55  000801                     _LCD_ROW_ADDRESS:
    56                           	opt stack 0
    57  000801  80                 	db	128
    58  000802  C0                 	db	192
    59  000803  94                 	db	148
    60  000804  D4                 	db	212
    61  000805                     __end_of_LCD_ROW_ADDRESS:
    62                           	opt stack 0
    63  0000                     _CCP1CON	set	4029
    64  0000                     _CCPR1L	set	4030
    65  0000                     _INTCONbits	set	4082
    66  0000                     _LATDbits	set	3980
    67  0000                     _PIE1	set	3997
    68  0000                     _PIE1bits	set	3997
    69  0000                     _PIR1bits	set	3998
    70  0000                     _PR2	set	4043
    71  0000                     _RCREG	set	4014
    72  0000                     _RCSTA	set	4011
    73  0000                     _RCSTAbits	set	4011
    74  0000                     _SPBRG	set	4015
    75  0000                     _SPBRGH	set	4016
    76  0000                     _T2CON	set	4042
    77  0000                     _T2CONbits	set	4042
    78  0000                     _TRISC	set	3988
    79  0000                     _TRISCbits	set	3988
    80  0000                     _TRISD	set	3989
    81  0000                     _TXREG	set	4013
    82  0000                     _TXSTA	set	4012
    83  0000                     _TXSTAbits	set	4012
    84  0000                     _PEIE	set	32662
    85  0000                     _RCIE	set	31981
    86  0000                     _RCIF	set	31989
    87  0000                     _RCIP	set	31997
    88  000805                     __stringdata:
    89                           	opt stack 0
    90  000805                     STR_2:
    91  000805  4D                 	db	77	;'M'
    92  000806  6F                 	db	111	;'o'
    93  000807  64                 	db	100	;'d'
    94  000808  69                 	db	105	;'i'
    95  000809  66                 	db	102	;'f'
    96  00080A  69                 	db	105	;'i'
    97  00080B  63                 	db	99	;'c'
    98  00080C  61                 	db	97	;'a'
    99  00080D  64                 	db	100	;'d'
   100  00080E  6F                 	db	111	;'o'
   101  00080F  20                 	db	32
   102  000810  65                 	db	101	;'e'
   103  000811  6C                 	db	108	;'l'
   104  000812  20                 	db	32
   105  000813  53                 	db	83	;'S'
   106  000814  65                 	db	101	;'e'
   107  000815  74                 	db	116	;'t'
   108  000816  50                 	db	80	;'P'
   109  000817  6F                 	db	111	;'o'
   110  000818  69                 	db	105	;'i'
   111  000819  6E                 	db	110	;'n'
   112  00081A  74                 	db	116	;'t'
   113  00081B  20                 	db	32
   114  00081C  61                 	db	97	;'a'
   115  00081D  3A                 	db	58	;':'
   116  00081E  20                 	db	32
   117  00081F  00                 	db	0
   118  000820                     STR_3:
   119  000820  45                 	db	69	;'E'
   120  000821  72                 	db	114	;'r'
   121  000822  72                 	db	114	;'r'
   122  000823  6F                 	db	111	;'o'
   123  000824  72                 	db	114	;'r'
   124  000825  20                 	db	32
   125  000826  6D                 	db	109	;'m'
   126  000827  61                 	db	97	;'a'
   127  000828  71                 	db	113	;'q'
   128  000829  75                 	db	117	;'u'
   129  00082A  69                 	db	105	;'i'
   130  00082B  6E                 	db	110	;'n'
   131  00082C  6F                 	db	111	;'o'
   132  00082D  6C                 	db	108	;'l'
   133  00082E  61                 	db	97	;'a'
   134  00082F  00                 	db	0
   135  000830                     STR_1:
   136  000830  44                 	db	68	;'D'
   137  000831  75                 	db	117	;'u'
   138  000832  74                 	db	116	;'t'
   139  000833  79                 	db	121	;'y'
   140  000834  20                 	db	32
   141  000835  43                 	db	67	;'C'
   142  000836  79                 	db	121	;'y'
   143  000837  63                 	db	99	;'c'
   144  000838  6C                 	db	108	;'l'
   145  000839  65                 	db	101	;'e'
   146  00083A  3A                 	db	58	;':'
   147  00083B  20                 	db	32
   148  00083C  00                 	db	0
   149  00083D                     __end_of__stringdata:
   150                           	opt stack 0
   151                           
   152                           ; #config settings
   153  00083D  00                 	db	0	; dummy byte at the end
   154  0000                     
   155                           	psect	cinit
   156  001148                     __pcinit:
   157                           	opt stack 0
   158  001148                     start_initialization:
   159                           	opt stack 0
   160  001148                     __initialization:
   161                           	opt stack 0
   162                           
   163                           ; Clear objects allocated to BANK3 (200 bytes)
   164  001148  EE03  F000         	lfsr	0,__pbssBANK3
   165  00114C  0EC8               	movlw	200
   166  00114E                     clear_0:
   167  00114E  6AEE               	clrf	postinc0,c
   168  001150  06E8               	decf	wreg,f,c
   169  001152  E1FD               	bnz	clear_0
   170                           
   171                           ; Clear objects allocated to BANK2 (200 bytes)
   172  001154  EE02  F000         	lfsr	0,__pbssBANK2
   173  001158  0EC8               	movlw	200
   174  00115A                     clear_1:
   175  00115A  6AEE               	clrf	postinc0,c
   176  00115C  06E8               	decf	wreg,f,c
   177  00115E  E1FD               	bnz	clear_1
   178                           
   179                           ; Clear objects allocated to BANK1 (200 bytes)
   180  001160  EE01  F000         	lfsr	0,__pbssBANK1
   181  001164  0EC8               	movlw	200
   182  001166                     clear_2:
   183  001166  6AEE               	clrf	postinc0,c
   184  001168  06E8               	decf	wreg,f,c
   185  00116A  E1FD               	bnz	clear_2
   186                           
   187                           ; Clear objects allocated to BANK0 (16 bytes)
   188  00116C  EE00  F073         	lfsr	0,__pbssBANK0
   189  001170  0E10               	movlw	16
   190  001172                     clear_3:
   191  001172  6AEE               	clrf	postinc0,c
   192  001174  06E8               	decf	wreg,f,c
   193  001176  E1FD               	bnz	clear_3
   194                           
   195                           ; Clear objects allocated to COMRAM (34 bytes)
   196  001178  EE00  F027         	lfsr	0,__pbssCOMRAM
   197  00117C  0E22               	movlw	34
   198  00117E                     clear_4:
   199  00117E  6AEE               	clrf	postinc0,c
   200  001180  06E8               	decf	wreg,f,c
   201  001182  E1FD               	bnz	clear_4
   202                           
   203                           ; Initialize objects allocated to COMRAM (2 bytes)
   204                           ; load TBLPTR registers with __pidataCOMRAM
   205  001184  0E66               	movlw	low __pidataCOMRAM
   206  001186  6EF6               	movwf	tblptrl,c
   207  001188  0E14               	movlw	high __pidataCOMRAM
   208  00118A  6EF7               	movwf	tblptrh,c
   209  00118C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   210  00118E  6EF8               	movwf	tblptru,c
   211  001190  0009               	tblrd		*+	;fetch initializer
   212  001192  CFF5 F049          	movff	tablat,__pdataCOMRAM
   213  001196  0009               	tblrd		*+	;fetch initializer
   214  001198  CFF5 F04A          	movff	tablat,__pdataCOMRAM+1
   215  00119C                     end_of_initialization:
   216                           	opt stack 0
   217  00119C                     __end_of__initialization:
   218                           	opt stack 0
   219  00119C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   220  00119E  6EF8               	movwf	tblptru,c
   221  0011A0  0100               	movlb	0
   222  0011A2  EF44  F005         	goto	_main	;jump to C main() function
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           tblptrl	equ	0xFF6
   226                           tablat	equ	0xFF5
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           
   230                           	psect	bssCOMRAM
   231  000027                     __pbssCOMRAM:
   232                           	opt stack 0
   233  000027                     _lcd_lower_display_buffer:
   234                           	opt stack 0
   235  000027                     	ds	16
   236  000037                     _cantidadLetrasDOWN:
   237                           	opt stack 0
   238  000037                     	ds	2
   239  000039                     _cantidadLetrasUP:
   240                           	opt stack 0
   241  000039                     	ds	2
   242  00003B                     _i:
   243                           	opt stack 0
   244  00003B                     	ds	2
   245  00003D                     _k:
   246                           	opt stack 0
   247  00003D                     	ds	2
   248  00003F                     _USART_Status:
   249                           	opt stack 0
   250  00003F                     	ds	1
   251  000040                     _c:
   252                           	opt stack 0
   253  000040                     	ds	1
   254  000041                     _flag_newline:
   255                           	opt stack 0
   256  000041                     	ds	1
   257  000042                     _lcd_x:
   258                           	opt stack 0
   259  000042                     	ds	1
   260  000043                     _lcd_y:
   261                           	opt stack 0
   262  000043                     	ds	1
   263  000044                     _DC_str:
   264                           	opt stack 0
   265  000044                     	ds	5
   266                           tblptru	equ	0xFF8
   267                           tblptrh	equ	0xFF7
   268                           tblptrl	equ	0xFF6
   269                           tablat	equ	0xFF5
   270                           postinc0	equ	0xFEE
   271                           wreg	equ	0xFE8
   272                           
   273                           	psect	dataCOMRAM
   274  000049                     __pdataCOMRAM:
   275                           	opt stack 0
   276  000049                     _DutyCycle:
   277                           	opt stack 0
   278  000049                     	ds	2
   279                           tblptru	equ	0xFF8
   280                           tblptrh	equ	0xFF7
   281                           tblptrl	equ	0xFF6
   282                           tablat	equ	0xFF5
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           
   286                           	psect	bssBANK0
   287  000073                     __pbssBANK0:
   288                           	opt stack 0
   289  000073                     _lcd_upper_display_buffer:
   290                           	opt stack 0
   291  000073                     	ds	16
   292                           tblptru	equ	0xFF8
   293                           tblptrh	equ	0xFF7
   294                           tblptrl	equ	0xFF6
   295                           tablat	equ	0xFF5
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           
   299                           	psect	bssBANK1
   300  000100                     __pbssBANK1:
   301                           	opt stack 0
   302  000100                     _MessageBuffer:
   303                           	opt stack 0
   304  000100                     	ds	200
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           
   312                           	psect	bssBANK2
   313  000200                     __pbssBANK2:
   314                           	opt stack 0
   315  000200                     _lcd_upper_row_buffer:
   316                           	opt stack 0
   317  000200                     	ds	200
   318                           tblptru	equ	0xFF8
   319                           tblptrh	equ	0xFF7
   320                           tblptrl	equ	0xFF6
   321                           tablat	equ	0xFF5
   322                           postinc0	equ	0xFEE
   323                           wreg	equ	0xFE8
   324                           
   325                           	psect	bssBANK3
   326  000300                     __pbssBANK3:
   327                           	opt stack 0
   328  000300                     _lcd_lower_row_buffer:
   329                           	opt stack 0
   330  000300                     	ds	200
   331                           tblptru	equ	0xFF8
   332                           tblptrh	equ	0xFF7
   333                           tblptrl	equ	0xFF6
   334                           tablat	equ	0xFF5
   335                           postinc0	equ	0xFEE
   336                           wreg	equ	0xFE8
   337                           
   338                           	psect	cstackBANK0
   339  000060                     __pcstackBANK0:
   340                           	opt stack 0
   341  000060                     ?___lwdiv:
   342                           	opt stack 0
   343  000060                     lcd_write_nibble@is_data:
   344                           	opt stack 0
   345  000060                     OpenPWM1@period:
   346                           	opt stack 0
   347  000060                     SetDCPWM1@dutycycle:
   348                           	opt stack 0
   349  000060                     OpenUSART@spbrg:
   350                           	opt stack 0
   351  000060                     ___lwdiv@dividend:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0x0
   355  000060                     	ds	1
   356  000061                     ??_lcd_write_nibble:
   357                           
   358                           ; 0 bytes @ 0x1
   359  000061                     	ds	1
   360  000062                     ??_OpenUSART:
   361  000062                     ??_SetDCPWM1:
   362  000062                     lcd_write_nibble@nibble:
   363                           	opt stack 0
   364  000062                     ___lwdiv@divisor:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x2
   368  000062                     	ds	1
   369  000063                     lcd_write_byte@is_data:
   370                           	opt stack 0
   371                           
   372                           ; 1 bytes @ 0x3
   373  000063                     	ds	1
   374  000064                     lcd_write_byte@byte:
   375                           	opt stack 0
   376  000064                     SetDCPWM1@DCycle:
   377                           	opt stack 0
   378  000064                     ___lwdiv@quotient:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x4
   382  000064                     	ds	1
   383  000065                     ??_lcd_init:
   384  000065                     lcd_gotoxy@y:
   385                           	opt stack 0
   386  000065                     OpenUSART@config:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x5
   390  000065                     	ds	1
   391  000066                     lcd_gotoxy@addr:
   392                           	opt stack 0
   393  000066                     ___lwdiv@counter:
   394                           	opt stack 0
   395                           
   396                           ; 1 bytes @ 0x6
   397  000066                     	ds	1
   398  000067                     lcd_gotoxy@x:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x7
   402  000067                     	ds	1
   403  000068                     lcd_putnum@num:
   404                           	opt stack 0
   405  000068                     lcd_puts@str:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x8
   409  000068                     	ds	2
   410  00006A                     lcd_putnum@len:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0xA
   414  00006A                     	ds	1
   415  00006B                     lcd_putnum@x:
   416                           	opt stack 0
   417                           
   418                           ; 1 bytes @ 0xB
   419  00006B                     	ds	1
   420  00006C                     lcd_putnum@y:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0xC
   424  00006C                     	ds	1
   425  00006D                     lcd_putnum@dec:
   426                           	opt stack 0
   427                           
   428                           ; 1 bytes @ 0xD
   429  00006D                     	ds	1
   430  00006E                     lcd_putnum@r:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0xE
   434  00006E                     	ds	2
   435  000070                     ??_main:
   436                           
   437                           ; 0 bytes @ 0x10
   438  000070                     	ds	1
   439  000071                     main@config:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x11
   443  000071                     	ds	1
   444  000072                     main@spbrg:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x12
   448  000072                     	ds	1
   449                           tblptru	equ	0xFF8
   450                           tblptrh	equ	0xFF7
   451                           tblptrl	equ	0xFF6
   452                           tablat	equ	0xFF5
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           
   456                           	psect	cstackCOMRAM
   457  000001                     __pcstackCOMRAM:
   458                           	opt stack 0
   459  000001                     ??_isdigit:
   460  000001                     ?___wmul:
   461                           	opt stack 0
   462  000001                     ?___lwmod:
   463                           	opt stack 0
   464  000001                     ?i2___lwdiv:
   465                           	opt stack 0
   466  000001                     ReadUSART@data:
   467                           	opt stack 0
   468  000001                     WriteUSART@data:
   469                           	opt stack 0
   470  000001                     ___wmul@multiplier:
   471                           	opt stack 0
   472  000001                     ___lwmod@dividend:
   473                           	opt stack 0
   474  000001                     strncpy@to:
   475                           	opt stack 0
   476  000001                     i2___lwdiv@dividend:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x0
   480  000001                     	ds	1
   481  000002                     _isdigit$1330:
   482                           	opt stack 0
   483  000002                     putsUSART@data:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x1
   487  000002                     	ds	1
   488  000003                     isdigit@c:
   489                           	opt stack 0
   490  000003                     ___wmul@multiplicand:
   491                           	opt stack 0
   492  000003                     ___lwmod@divisor:
   493                           	opt stack 0
   494  000003                     strncpy@from:
   495                           	opt stack 0
   496  000003                     i2___lwdiv@divisor:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x2
   500  000003                     	ds	1
   501  000004                     ??_putsUSART:
   502                           
   503                           ; 0 bytes @ 0x3
   504  000004                     	ds	1
   505  000005                     ___lwmod@counter:
   506                           	opt stack 0
   507  000005                     ___wmul@product:
   508                           	opt stack 0
   509  000005                     strncpy@size:
   510                           	opt stack 0
   511  000005                     i2___lwdiv@quotient:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x4
   515  000005                     	ds	2
   516  000007                     ?_atoi:
   517                           	opt stack 0
   518  000007                     i2___lwdiv@counter:
   519                           	opt stack 0
   520  000007                     atoi@s:
   521                           	opt stack 0
   522  000007                     strncpy@cp:
   523                           	opt stack 0
   524                           
   525                           ; 2 bytes @ 0x6
   526  000007                     	ds	1
   527  000008                     utoa@buf:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x7
   531  000008                     	ds	1
   532  000009                     ??_atoi:
   533                           
   534                           ; 0 bytes @ 0x8
   535  000009                     	ds	1
   536  00000A                     utoa@val:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x9
   540  00000A                     	ds	1
   541  00000B                     atoi@sign:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0xA
   545  00000B                     	ds	1
   546  00000C                     atoi@a:
   547                           	opt stack 0
   548  00000C                     utoa@base:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0xB
   552  00000C                     	ds	2
   553  00000E                     utoa@v:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0xD
   557  00000E                     	ds	2
   558  000010                     utoa@c:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0xF
   562  000010                     	ds	1
   563  000011                     itoa@buf:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x10
   567  000011                     	ds	2
   568  000013                     itoa@val:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x12
   572  000013                     	ds	2
   573  000015                     itoa@base:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x14
   577  000015                     	ds	2
   578  000017                     itoa@cp:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x16
   582  000017                     	ds	2
   583  000019                     ??_ISR:
   584                           
   585                           ; 0 bytes @ 0x18
   586  000019                     	ds	14
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           tblptrl	equ	0xFF6
   590                           tablat	equ	0xFF5
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           
   594 ;;
   595 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   596 ;;
   597 ;; *************** function _main *****************
   598 ;; Defined at:
   599 ;;		line 47 in file "main.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;		None
   602 ;; Auto vars:     Size  Location     Type
   603 ;;  spbrg           1   18[BANK0 ] unsigned char 
   604 ;;  config          1   17[BANK0 ] unsigned char 
   605 ;; Return value:  Size  Location     Type
   606 ;;		None               void
   607 ;; Registers used:
   608 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   614 ;;      Params:         0       0       0       0       0       0       0       0       0
   615 ;;      Locals:         0       2       0       0       0       0       0       0       0
   616 ;;      Temps:          0       1       0       0       0       0       0       0       0
   617 ;;      Totals:         0       3       0       0       0       0       0       0       0
   618 ;;Total ram usage:        3 bytes
   619 ;; Hardware stack levels required when called:    8
   620 ;; This function calls:
   621 ;;		_OpenPWM1
   622 ;;		_OpenUSART
   623 ;;		_SetDCPWM1
   624 ;;		_lcd_gotoxy
   625 ;;		_lcd_init
   626 ;;		_lcd_putnum
   627 ;;		_lcd_puts
   628 ;;		_lcd_write_byte
   629 ;; This function is called by:
   630 ;;		Startup code after reset
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           	psect	text0
   635  000A88                     __ptext0:
   636                           	opt stack 0
   637  000A88                     _main:
   638                           	opt stack 23
   639                           
   640                           ;main.c: 49: unsigned char config = 0, spbrg = 0;
   641                           
   642                           ;incstack = 0
   643  000A88  0E00               	movlw	0
   644  000A8A  0100               	movlb	0	; () banked
   645  000A8C  6F71               	movwf	main@config& (0+255),b
   646  000A8E  0E00               	movlw	0
   647  000A90  0100               	movlb	0	; () banked
   648  000A92  6F72               	movwf	main@spbrg& (0+255),b
   649                           
   650                           ;main.c: 51: TRISC = 0b10000000;
   651  000A94  0E80               	movlw	128
   652  000A96  6E94               	movwf	3988,c	;volatile
   653                           
   654                           ;main.c: 52: TRISD = 0b00000000;
   655  000A98  0E00               	movlw	0
   656  000A9A  6E95               	movwf	3989,c	;volatile
   657                           
   658                           ; BSR set to: 0
   659                           ;main.c: 57: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
   660  000A9C  0E4F               	movlw	79
   661  000A9E  16AB               	andwf	4011,f,c	;volatile
   662                           
   663                           ; BSR set to: 0
   664  000AA0  9AAC               	bcf	4012,5,c	;volatile
   665                           
   666                           ; BSR set to: 0
   667  000AA2  0ECF               	movlw	207
   668  000AA4  169D               	andwf	3997,f,c	;volatile
   669                           
   670                           ;main.c: 58: config = 0b01111111& 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111;
   671  000AA6  0E7C               	movlw	124
   672  000AA8  0100               	movlb	0	; () banked
   673  000AAA  6F71               	movwf	main@config& (0+255),b
   674                           
   675                           ;main.c: 59: spbrg = 77;
   676  000AAC  0E4D               	movlw	77
   677  000AAE  0100               	movlb	0	; () banked
   678  000AB0  6F72               	movwf	main@spbrg& (0+255),b
   679                           
   680                           ; BSR set to: 0
   681                           ;main.c: 60: OpenUSART(config, spbrg);
   682  000AB2  0100               	movlb	0	; () banked
   683  000AB4  C072  F060         	movff	main@spbrg,OpenUSART@spbrg
   684  000AB8  0100               	movlb	0	; () banked
   685  000ABA  6B61               	clrf	(OpenUSART@spbrg+1)& (0+255),b
   686  000ABC  0100               	movlb	0	; () banked
   687  000ABE  5171               	movf	main@config& (0+255),w,b
   688  000AC0  ECB4  F007         	call	_OpenUSART
   689                           
   690                           ;main.c: 61: RCIF = 0;
   691  000AC4  9A9E               	bcf	3998,5,c	;volatile
   692                           
   693                           ;main.c: 62: RCIP = 0;
   694  000AC6  9A9F               	bcf	3999,5,c	;volatile
   695                           
   696                           ;main.c: 63: RCIE = 1;
   697  000AC8  8A9D               	bsf	3997,5,c	;volatile
   698                           
   699                           ;main.c: 64: PEIE = 1;
   700  000ACA  8CF2               	bsf	intcon,6,c	;volatile
   701                           
   702                           ;main.c: 65: PIR1bits.RCIF = 0;
   703  000ACC  9A9E               	bcf	3998,5,c	;volatile
   704                           
   705                           ;main.c: 66: (INTCONbits.GIE = 1);
   706  000ACE  8EF2               	bsf	intcon,7,c	;volatile
   707                           
   708                           ;main.c: 70: T2CON = 0b00000111 ;
   709  000AD0  0E07               	movlw	7
   710  000AD2  6ECA               	movwf	4042,c	;volatile
   711                           
   712                           ;main.c: 71: OpenPWM1(0b10111011);
   713  000AD4  0EBB               	movlw	187
   714  000AD6  EC20  F00A         	call	_OpenPWM1
   715                           
   716                           ;main.c: 73: SetDCPWM1(DutyCycle);
   717  000ADA  C049  F060         	movff	_DutyCycle,SetDCPWM1@dutycycle
   718  000ADE  C04A  F061         	movff	_DutyCycle+1,SetDCPWM1@dutycycle+1
   719  000AE2  EC82  F009         	call	_SetDCPWM1	;wreg free
   720                           
   721                           ;main.c: 76: lcd_init();
   722  000AE6  ECDB  F005         	call	_lcd_init	;wreg free
   723                           
   724                           ;main.c: 77: {lcd_write_byte(0x01, 0); { _delay((unsigned long)((5000)*(12000000/4000000
      +                          .0))); };};
   725  000AEA  0E00               	movlw	0
   726  000AEC  0100               	movlb	0	; () banked
   727  000AEE  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
   728  000AF0  0E01               	movlw	1
   729  000AF2  ECF1  F009         	call	_lcd_write_byte
   730  000AF6  0E14               	movlw	20
   731  000AF8  0100               	movlb	0	; () banked
   732  000AFA  6F70               	movwf	??_main& (0+255),b
   733  000AFC  0E7A               	movlw	122
   734  000AFE                     u1197:
   735  000AFE  2EE8               	decfsz	wreg,f,c
   736  000B00  D7FE               	goto	u1197
   737  000B02  2F70               	decfsz	??_main& (0+255),f,b
   738  000B04  D7FC               	goto	u1197
   739                           
   740                           ;main.c: 78: lcd_gotoxy(0,0);
   741  000B06  0E00               	movlw	0
   742  000B08  0100               	movlb	0	; () banked
   743  000B0A  6F65               	movwf	lcd_gotoxy@y& (0+255),b
   744  000B0C  0E00               	movlw	0
   745  000B0E  EC6A  F008         	call	_lcd_gotoxy
   746  000B12                     l1795:
   747                           
   748                           ;main.c: 80: {
   749                           ;main.c: 81: SetDCPWM1(DutyCycle);
   750  000B12  C049  F060         	movff	_DutyCycle,SetDCPWM1@dutycycle
   751  000B16  C04A  F061         	movff	_DutyCycle+1,SetDCPWM1@dutycycle+1
   752  000B1A  EC82  F009         	call	_SetDCPWM1	;wreg free
   753                           
   754                           ;main.c: 83: lcd_gotoxy(0,0);
   755  000B1E  0E00               	movlw	0
   756  000B20  0100               	movlb	0	; () banked
   757  000B22  6F65               	movwf	lcd_gotoxy@y& (0+255),b
   758  000B24  0E00               	movlw	0
   759  000B26  EC6A  F008         	call	_lcd_gotoxy
   760                           
   761                           ;main.c: 84: lcd_puts("Duty Cycle: ");
   762  000B2A  0E08               	movlw	high STR_1
   763  000B2C  0100               	movlb	0	; () banked
   764  000B2E  6F69               	movwf	(lcd_puts@str+1)& (0+255),b
   765  000B30  0E30               	movlw	low STR_1
   766  000B32  0100               	movlb	0	; () banked
   767  000B34  6F68               	movwf	lcd_puts@str& (0+255),b
   768  000B36  EC6B  F007         	call	_lcd_puts	;wreg free
   769                           
   770                           ;main.c: 85: lcd_putnum(DutyCycle, 4, 0, 1);
   771  000B3A  C049  F068         	movff	_DutyCycle,lcd_putnum@num
   772  000B3E  C04A  F069         	movff	_DutyCycle+1,lcd_putnum@num+1
   773  000B42  0E04               	movlw	4
   774  000B44  0100               	movlb	0	; () banked
   775  000B46  6F6A               	movwf	lcd_putnum@len& (0+255),b
   776  000B48  0E00               	movlw	0
   777  000B4A  0100               	movlb	0	; () banked
   778  000B4C  6F6B               	movwf	lcd_putnum@x& (0+255),b
   779  000B4E  0E01               	movlw	1
   780  000B50  0100               	movlb	0	; () banked
   781  000B52  6F6C               	movwf	lcd_putnum@y& (0+255),b
   782  000B54  EC30  F008         	call	_lcd_putnum	;wreg free
   783                           
   784                           ;main.c: 86: _delay((unsigned long)((50)*(12000000/4000.0)));
   785  000B58  0EC3               	movlw	195
   786  000B5A  0100               	movlb	0	; () banked
   787  000B5C  6F70               	movwf	??_main& (0+255),b
   788  000B5E  0ECD               	movlw	205
   789  000B60                     u1207:
   790  000B60  2EE8               	decfsz	wreg,f,c
   791  000B62  D7FE               	goto	u1207
   792  000B64  2F70               	decfsz	??_main& (0+255),f,b
   793  000B66  D7FC               	goto	u1207
   794  000B68  F000               	nop	
   795                           
   796                           ;main.c: 87: _delay((unsigned long)((50)*(12000000/4000.0)));
   797  000B6A  0EC3               	movlw	195
   798  000B6C  0100               	movlb	0	; () banked
   799  000B6E  6F70               	movwf	??_main& (0+255),b
   800  000B70  0ECD               	movlw	205
   801  000B72                     u1217:
   802  000B72  2EE8               	decfsz	wreg,f,c
   803  000B74  D7FE               	goto	u1217
   804  000B76  2F70               	decfsz	??_main& (0+255),f,b
   805  000B78  D7FC               	goto	u1217
   806  000B7A  F000               	nop	
   807                           
   808                           ;main.c: 88: _delay((unsigned long)((50)*(12000000/4000.0)));
   809  000B7C  0EC3               	movlw	195
   810  000B7E  0100               	movlb	0	; () banked
   811  000B80  6F70               	movwf	??_main& (0+255),b
   812  000B82  0ECD               	movlw	205
   813  000B84                     u1227:
   814  000B84  2EE8               	decfsz	wreg,f,c
   815  000B86  D7FE               	goto	u1227
   816  000B88  2F70               	decfsz	??_main& (0+255),f,b
   817  000B8A  D7FC               	goto	u1227
   818  000B8C  F000               	nop	
   819                           
   820                           ;main.c: 89: _delay((unsigned long)((50)*(12000000/4000.0)));
   821  000B8E  0EC3               	movlw	195
   822  000B90  0100               	movlb	0	; () banked
   823  000B92  6F70               	movwf	??_main& (0+255),b
   824  000B94  0ECD               	movlw	205
   825  000B96                     u1237:
   826  000B96  2EE8               	decfsz	wreg,f,c
   827  000B98  D7FE               	goto	u1237
   828  000B9A  2F70               	decfsz	??_main& (0+255),f,b
   829  000B9C  D7FC               	goto	u1237
   830  000B9E  F000               	nop	
   831                           
   832                           ;main.c: 90: _delay((unsigned long)((50)*(12000000/4000.0)));
   833  000BA0  0EC3               	movlw	195
   834  000BA2  0100               	movlb	0	; () banked
   835  000BA4  6F70               	movwf	??_main& (0+255),b
   836  000BA6  0ECD               	movlw	205
   837  000BA8                     u1247:
   838  000BA8  2EE8               	decfsz	wreg,f,c
   839  000BAA  D7FE               	goto	u1247
   840  000BAC  2F70               	decfsz	??_main& (0+255),f,b
   841  000BAE  D7FC               	goto	u1247
   842  000BB0  F000               	nop	
   843                           
   844                           ;main.c: 91: LATDbits.LATD0 =~ LATDbits.LATD0;
   845  000BB2  708C               	btg	3980,0,c	;volatile
   846  000BB4  D7AE               	goto	l1795
   847  000BB6                     __end_of_main:
   848                           	opt stack 0
   849                           tblptru	equ	0xFF8
   850                           tblptrh	equ	0xFF7
   851                           tblptrl	equ	0xFF6
   852                           tablat	equ	0xFF5
   853                           intcon	equ	0xFF2
   854                           postinc0	equ	0xFEE
   855                           wreg	equ	0xFE8
   856                           
   857 ;; *************** function _lcd_puts *****************
   858 ;; Defined at:
   859 ;;		line 108 in file "lcd_driver.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;  str             2    8[BANK0 ] PTR unsigned char 
   862 ;;		 -> STR_1(13), 
   863 ;; Auto vars:     Size  Location     Type
   864 ;;		None
   865 ;; Return value:  Size  Location     Type
   866 ;;		None               void
   867 ;; Registers used:
   868 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   874 ;;      Params:         0       2       0       0       0       0       0       0       0
   875 ;;      Locals:         0       0       0       0       0       0       0       0       0
   876 ;;      Temps:          0       0       0       0       0       0       0       0       0
   877 ;;      Totals:         0       2       0       0       0       0       0       0       0
   878 ;;Total ram usage:        2 bytes
   879 ;; Hardware stack levels used:    1
   880 ;; Hardware stack levels required when called:    7
   881 ;; This function calls:
   882 ;;		_lcd_gotoxy
   883 ;;		_lcd_write_byte
   884 ;; This function is called by:
   885 ;;		_main
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           	psect	text1
   890  000ED6                     __ptext1:
   891                           	opt stack 0
   892  000ED6                     _lcd_puts:
   893                           	opt stack 23
   894                           
   895                           ;lcd_driver.c: 110: while (*str != 0)
   896                           
   897                           ;incstack = 0
   898  000ED6  D03C               	goto	l1739
   899  000ED8                     l1723:
   900                           
   901                           ;lcd_driver.c: 111: {
   902                           ;lcd_driver.c: 112: if (*str != '\n')
   903  000ED8  0100               	movlb	0	; () banked
   904  000EDA  C068  FFF6         	movff	lcd_puts@str,tblptrl
   905  000EDE  0100               	movlb	0	; () banked
   906  000EE0  C069  FFF7         	movff	lcd_puts@str+1,tblptrh
   907  000EE4                     	if	0	;tblptru may be non-zero
   908  000EE4                     	endif
   909  000EE4                     	if	0	;tblptru may be non-zero
   910  000EE4                     	endif
   911  000EE4  0008               	tblrd		*
   912  000EE6  50F5               	movf	tablat,w,c
   913  000EE8  0A0A               	xorlw	10
   914  000EEA  B4D8               	btfsc	status,2,c
   915  000EEC  D00D               	goto	l1727
   916                           
   917                           ; BSR set to: 0
   918                           ;lcd_driver.c: 113: {
   919                           ;lcd_driver.c: 114: {lcd_write_byte(*str, 1);};
   920  000EEE  0E01               	movlw	1
   921  000EF0  0100               	movlb	0	; () banked
   922  000EF2  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
   923  000EF4  0100               	movlb	0	; () banked
   924  000EF6  C068  FFF6         	movff	lcd_puts@str,tblptrl
   925  000EFA  0100               	movlb	0	; () banked
   926  000EFC  C069  FFF7         	movff	lcd_puts@str+1,tblptrh
   927  000F00                     	if	0	;tblptru may be non-zero
   928  000F00                     	endif
   929  000F00                     	if	0	;tblptru may be non-zero
   930  000F00                     	endif
   931  000F00  0008               	tblrd		*
   932  000F02  50F5               	movf	tablat,w,c
   933  000F04  ECF1  F009         	call	_lcd_write_byte
   934  000F08                     l1727:
   935                           
   936                           ;lcd_driver.c: 115: }
   937                           ;lcd_driver.c: 117: if ((++lcd_x == 16) || (*str == '\n'))
   938  000F08  2A42               	incf	_lcd_x,f,c
   939  000F0A  5042               	movf	_lcd_x& (0+255),w,c
   940  000F0C  0A10               	xorlw	16
   941  000F0E  B4D8               	btfsc	status,2,c
   942  000F10  D00B               	goto	l1731
   943  000F12  0100               	movlb	0	; () banked
   944  000F14  C068  FFF6         	movff	lcd_puts@str,tblptrl
   945  000F18  0100               	movlb	0	; () banked
   946  000F1A  C069  FFF7         	movff	lcd_puts@str+1,tblptrh
   947  000F1E                     	if	0	;tblptru may be non-zero
   948  000F1E                     	endif
   949  000F1E                     	if	0	;tblptru may be non-zero
   950  000F1E                     	endif
   951  000F1E  0008               	tblrd		*
   952  000F20  50F5               	movf	tablat,w,c
   953  000F22  0A0A               	xorlw	10
   954  000F24  A4D8               	btfss	status,2,c
   955  000F26  D011               	goto	l1737
   956  000F28                     l1731:
   957                           
   958                           ;lcd_driver.c: 118: {
   959                           ;lcd_driver.c: 119: if (++lcd_y == 2)
   960  000F28  2A43               	incf	_lcd_y,f,c
   961  000F2A  5043               	movf	_lcd_y& (0+255),w,c
   962  000F2C  0A02               	xorlw	2
   963  000F2E  A4D8               	btfss	status,2,c
   964  000F30  D007               	goto	l1735
   965                           
   966                           ;lcd_driver.c: 120: {
   967                           ;lcd_driver.c: 121: lcd_gotoxy(0,0);
   968  000F32  0E00               	movlw	0
   969  000F34  0100               	movlb	0	; () banked
   970  000F36  6F65               	movwf	lcd_gotoxy@y& (0+255),b
   971  000F38  0E00               	movlw	0
   972  000F3A  EC6A  F008         	call	_lcd_gotoxy
   973                           
   974                           ;lcd_driver.c: 122: }
   975  000F3E  D005               	goto	l1737
   976  000F40                     l1735:
   977                           
   978                           ;lcd_driver.c: 123: else
   979                           ;lcd_driver.c: 124: {
   980                           ;lcd_driver.c: 125: lcd_gotoxy(0, lcd_y);
   981  000F40  C043  F065         	movff	_lcd_y,lcd_gotoxy@y
   982  000F44  0E00               	movlw	0
   983  000F46  EC6A  F008         	call	_lcd_gotoxy
   984  000F4A                     l1737:
   985                           
   986                           ;lcd_driver.c: 126: }
   987                           ;lcd_driver.c: 127: }
   988                           ;lcd_driver.c: 128: str++;
   989  000F4A  0100               	movlb	0	; () banked
   990  000F4C  4B68               	infsnz	lcd_puts@str& (0+255),f,b
   991  000F4E  2B69               	incf	(lcd_puts@str+1)& (0+255),f,b
   992  000F50                     l1739:
   993  000F50  0100               	movlb	0	; () banked
   994  000F52  C068  FFF6         	movff	lcd_puts@str,tblptrl
   995  000F56  0100               	movlb	0	; () banked
   996  000F58  C069  FFF7         	movff	lcd_puts@str+1,tblptrh
   997  000F5C                     	if	0	;tblptru may be non-zero
   998  000F5C                     	endif
   999  000F5C                     	if	0	;tblptru may be non-zero
  1000  000F5C                     	endif
  1001  000F5C  0008               	tblrd		*
  1002  000F5E  50F5               	movf	tablat,w,c
  1003  000F60  0900               	iorlw	0
  1004  000F62  B4D8               	btfsc	status,2,c
  1005                           
  1006                           ; BSR set to: 0
  1007                           
  1008                           ; BSR set to: 0
  1009  000F64  0012               	return	
  1010  000F66  D7B8               	goto	l1723
  1011  000F68                     __end_of_lcd_puts:
  1012                           	opt stack 0
  1013                           tblptru	equ	0xFF8
  1014                           tblptrh	equ	0xFF7
  1015                           tblptrl	equ	0xFF6
  1016                           tablat	equ	0xFF5
  1017                           intcon	equ	0xFF2
  1018                           postinc0	equ	0xFEE
  1019                           wreg	equ	0xFE8
  1020                           status	equ	0xFD8
  1021                           
  1022 ;; *************** function _lcd_putnum *****************
  1023 ;; Defined at:
  1024 ;;		line 87 in file "lcd_driver.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;  num             2    8[BANK0 ] unsigned int 
  1027 ;;  len             1   10[BANK0 ] unsigned char 
  1028 ;;  x               1   11[BANK0 ] unsigned char 
  1029 ;;  y               1   12[BANK0 ] unsigned char 
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;  r               2   14[BANK0 ] unsigned int 
  1032 ;;  dec             1   13[BANK0 ] unsigned char 
  1033 ;; Return value:  Size  Location     Type
  1034 ;;		None               void
  1035 ;; Registers used:
  1036 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1037 ;; Tracked objects:
  1038 ;;		On entry : 0/0
  1039 ;;		On exit  : 0/0
  1040 ;;		Unchanged: 0/0
  1041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1042 ;;      Params:         0       5       0       0       0       0       0       0       0
  1043 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1044 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1045 ;;      Totals:         0       8       0       0       0       0       0       0       0
  1046 ;;Total ram usage:        8 bytes
  1047 ;; Hardware stack levels used:    1
  1048 ;; Hardware stack levels required when called:    7
  1049 ;; This function calls:
  1050 ;;		___lwdiv
  1051 ;;		_lcd_gotoxy
  1052 ;;		_lcd_write_byte
  1053 ;; This function is called by:
  1054 ;;		_main
  1055 ;; This function uses a non-reentrant model
  1056 ;;
  1057                           
  1058                           	psect	text2
  1059  001060                     __ptext2:
  1060                           	opt stack 0
  1061  001060                     _lcd_putnum:
  1062                           	opt stack 23
  1063                           
  1064                           ;lcd_driver.c: 92: uint16_t r;
  1065                           ;lcd_driver.c: 93: uint8_t dec;
  1066                           ;lcd_driver.c: 95: x+=len;
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;incstack = 0
  1070  001060  0100               	movlb	0	; () banked
  1071  001062  516A               	movf	lcd_putnum@len& (0+255),w,b
  1072  001064  0100               	movlb	0	; () banked
  1073  001066  276B               	addwf	lcd_putnum@x& (0+255),f,b
  1074                           
  1075                           ;lcd_driver.c: 96: while (len)
  1076  001068  D031               	goto	l1757
  1077  00106A                     l1743:
  1078                           
  1079                           ; BSR set to: 0
  1080                           ;lcd_driver.c: 97: {
  1081                           ;lcd_driver.c: 98: r = num/10;
  1082  00106A  C068  F060         	movff	lcd_putnum@num,___lwdiv@dividend
  1083  00106E  C069  F061         	movff	lcd_putnum@num+1,___lwdiv@dividend+1
  1084  001072  0E00               	movlw	0
  1085  001074  0100               	movlb	0	; () banked
  1086  001076  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1087  001078  0E0A               	movlw	10
  1088  00107A  0100               	movlb	0	; () banked
  1089  00107C  6F62               	movwf	___lwdiv@divisor& (0+255),b
  1090  00107E  ECF4  F007         	call	___lwdiv	;wreg free
  1091  001082  0100               	movlb	0	; () banked
  1092  001084  C060  F06E         	movff	?___lwdiv,lcd_putnum@r
  1093  001088  0100               	movlb	0	; () banked
  1094  00108A  C061  F06F         	movff	?___lwdiv+1,lcd_putnum@r+1
  1095                           
  1096                           ; BSR set to: 0
  1097                           ;lcd_driver.c: 99: dec = num - r*10;
  1098  00108E  0100               	movlb	0	; () banked
  1099  001090  516E               	movf	lcd_putnum@r& (0+255),w,b
  1100  001092  0D0A               	mullw	10
  1101  001094  50F3               	movf	prodl,w,c
  1102  001096  0800               	sublw	0
  1103  001098  0100               	movlb	0	; () banked
  1104  00109A  2568               	addwf	lcd_putnum@num& (0+255),w,b
  1105  00109C  0100               	movlb	0	; () banked
  1106  00109E  6F6D               	movwf	lcd_putnum@dec& (0+255),b
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;lcd_driver.c: 100: x--;
  1110  0010A0  0100               	movlb	0	; () banked
  1111  0010A2  076B               	decf	lcd_putnum@x& (0+255),f,b
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;lcd_driver.c: 101: len--;
  1115  0010A4  0100               	movlb	0	; () banked
  1116  0010A6  076A               	decf	lcd_putnum@len& (0+255),f,b
  1117                           
  1118                           ; BSR set to: 0
  1119                           ;lcd_driver.c: 102: lcd_gotoxy(x,y);
  1120  0010A8  C06C  F065         	movff	lcd_putnum@y,lcd_gotoxy@y
  1121  0010AC  0100               	movlb	0	; () banked
  1122  0010AE  516B               	movf	lcd_putnum@x& (0+255),w,b
  1123  0010B0  EC6A  F008         	call	_lcd_gotoxy
  1124                           
  1125                           ;lcd_driver.c: 103: {lcd_write_byte(dec + 0x30, 1);};
  1126  0010B4  0E01               	movlw	1
  1127  0010B6  0100               	movlb	0	; () banked
  1128  0010B8  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1129  0010BA  0100               	movlb	0	; () banked
  1130  0010BC  516D               	movf	lcd_putnum@dec& (0+255),w,b
  1131  0010BE  0F30               	addlw	48
  1132  0010C0  ECF1  F009         	call	_lcd_write_byte
  1133                           
  1134                           ;lcd_driver.c: 104: num = r;
  1135  0010C4  C06E  F068         	movff	lcd_putnum@r,lcd_putnum@num
  1136  0010C8  C06F  F069         	movff	lcd_putnum@r+1,lcd_putnum@num+1
  1137  0010CC                     l1757:
  1138  0010CC  0100               	movlb	0	; () banked
  1139  0010CE  676A               	tstfsz	lcd_putnum@len& (0+255),b
  1140  0010D0  D7CC               	goto	l1743
  1141                           
  1142                           ; BSR set to: 0
  1143                           
  1144                           ; BSR set to: 0
  1145  0010D2  0012               	return	
  1146  0010D4                     __end_of_lcd_putnum:
  1147                           	opt stack 0
  1148                           tblptru	equ	0xFF8
  1149                           tblptrh	equ	0xFF7
  1150                           tblptrl	equ	0xFF6
  1151                           tablat	equ	0xFF5
  1152                           prodl	equ	0xFF3
  1153                           intcon	equ	0xFF2
  1154                           postinc0	equ	0xFEE
  1155                           wreg	equ	0xFE8
  1156                           status	equ	0xFD8
  1157                           
  1158 ;; *************** function _lcd_gotoxy *****************
  1159 ;; Defined at:
  1160 ;;		line 54 in file "lcd_driver.c"
  1161 ;; Parameters:    Size  Location     Type
  1162 ;;  x               1    wreg     unsigned char 
  1163 ;;  y               1    5[BANK0 ] unsigned char 
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  x               1    7[BANK0 ] unsigned char 
  1166 ;;  addr            1    6[BANK0 ] unsigned char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;		None               void
  1169 ;; Registers used:
  1170 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1176 ;;      Params:         0       1       0       0       0       0       0       0       0
  1177 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1178 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1179 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1180 ;;Total ram usage:        3 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; Hardware stack levels required when called:    6
  1183 ;; This function calls:
  1184 ;;		_lcd_write_byte
  1185 ;; This function is called by:
  1186 ;;		_main
  1187 ;;		_lcd_putnum
  1188 ;;		_lcd_puts
  1189 ;;		_lcd_put_blank
  1190 ;;		_lcd_puts_const
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           	psect	text3
  1195  0010D4                     __ptext3:
  1196                           	opt stack 0
  1197  0010D4                     _lcd_gotoxy:
  1198                           	opt stack 23
  1199                           
  1200                           ; BSR set to: 0
  1201                           ;incstack = 0
  1202                           ;lcd_gotoxy@x stored from wreg
  1203  0010D4  0100               	movlb	0	; () banked
  1204  0010D6  6F67               	movwf	lcd_gotoxy@x& (0+255),b
  1205                           
  1206                           ; BSR set to: 0
  1207                           ;lcd_driver.c: 57: uint8_t addr;
  1208                           ;lcd_driver.c: 59: if ((y > 3) || (x > 19))
  1209  0010D8  0E04               	movlw	4
  1210  0010DA  0100               	movlb	0	; () banked
  1211  0010DC  5D65               	subwf	lcd_gotoxy@y& (0+255),w,b
  1212  0010DE  B0D8               	btfsc	status,0,c
  1213  0010E0  D032               	goto	l147
  1214                           
  1215                           ; BSR set to: 0
  1216  0010E2  0E13               	movlw	19
  1217  0010E4  0100               	movlb	0	; () banked
  1218  0010E6  6567               	cpfsgt	lcd_gotoxy@x& (0+255),b
  1219  0010E8  D001               	goto	l144
  1220  0010EA  D02D               	goto	l147
  1221  0010EC                     l144:
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;lcd_driver.c: 62: }
  1225                           ;lcd_driver.c: 63: lcd_x = x;
  1226  0010EC  C067  F042         	movff	lcd_gotoxy@x,_lcd_x
  1227                           
  1228                           ;lcd_driver.c: 64: lcd_y = y;
  1229  0010F0  C065  F043         	movff	lcd_gotoxy@y,_lcd_y
  1230                           
  1231                           ;lcd_driver.c: 65: addr = x;
  1232  0010F4  C067  F066         	movff	lcd_gotoxy@x,lcd_gotoxy@addr
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;lcd_driver.c: 66: addr += LCD_ROW_ADDRESS[y];
  1236  0010F8  0100               	movlb	0	; () banked
  1237  0010FA  5165               	movf	lcd_gotoxy@y& (0+255),w,b
  1238  0010FC  0D01               	mullw	1
  1239  0010FE  0E01               	movlw	low _LCD_ROW_ADDRESS
  1240  001100  24F3               	addwf	prodl,w,c
  1241  001102  6EF6               	movwf	tblptrl,c
  1242  001104  0E08               	movlw	high _LCD_ROW_ADDRESS
  1243  001106  20F4               	addwfc	prodh,w,c
  1244  001108  6EF7               	movwf	tblptrh,c
  1245  00110A                     	if	0	;There are less than 3 active tblptr bytes
  1246  00110A                     	endif
  1247  00110A  0008               	tblrd		*
  1248  00110C  50F5               	movf	tablat,w,c
  1249  00110E  0100               	movlb	0	; () banked
  1250  001110  2766               	addwf	lcd_gotoxy@addr& (0+255),f,b
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;lcd_driver.c: 67: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1254  001112  0EFA               	movlw	250
  1255  001114                     u1257:
  1256  001114  F000               	nop	
  1257  001116  2EE8               	decfsz	wreg,f,c
  1258  001118  D7FD               	goto	u1257
  1259                           
  1260                           ;lcd_driver.c: 68: lcd_write_byte(addr, 0);
  1261  00111A  0E00               	movlw	0
  1262  00111C  0100               	movlb	0	; () banked
  1263  00111E  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1264  001120  0100               	movlb	0	; () banked
  1265  001122  5166               	movf	lcd_gotoxy@addr& (0+255),w,b
  1266  001124  ECF1  F009         	call	_lcd_write_byte
  1267                           
  1268                           ;lcd_driver.c: 69: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1269  001128  0EFA               	movlw	250
  1270  00112A                     u1267:
  1271  00112A  F000               	nop	
  1272  00112C  2EE8               	decfsz	wreg,f,c
  1273  00112E  D7FD               	goto	u1267
  1274                           
  1275                           ;lcd_driver.c: 70: lcd_write_byte(addr, 0);
  1276  001130  0E00               	movlw	0
  1277  001132  0100               	movlb	0	; () banked
  1278  001134  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1279  001136  0100               	movlb	0	; () banked
  1280  001138  5166               	movf	lcd_gotoxy@addr& (0+255),w,b
  1281  00113A  ECF1  F009         	call	_lcd_write_byte
  1282                           
  1283                           ;lcd_driver.c: 71: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1284  00113E  0EFA               	movlw	250
  1285  001140                     u1277:
  1286  001140  F000               	nop	
  1287  001142  2EE8               	decfsz	wreg,f,c
  1288  001144  D7FD               	goto	u1277
  1289  001146                     l147:
  1290  001146  0012               	return	
  1291  001148                     __end_of_lcd_gotoxy:
  1292                           	opt stack 0
  1293                           tblptru	equ	0xFF8
  1294                           tblptrh	equ	0xFF7
  1295                           tblptrl	equ	0xFF6
  1296                           tablat	equ	0xFF5
  1297                           prodh	equ	0xFF4
  1298                           prodl	equ	0xFF3
  1299                           intcon	equ	0xFF2
  1300                           postinc0	equ	0xFEE
  1301                           wreg	equ	0xFE8
  1302                           status	equ	0xFD8
  1303                           
  1304 ;; *************** function ___lwdiv *****************
  1305 ;; Defined at:
  1306 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1307 ;; Parameters:    Size  Location     Type
  1308 ;;  dividend        2    0[BANK0 ] unsigned int 
  1309 ;;  divisor         2    2[BANK0 ] unsigned int 
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;  quotient        2    4[BANK0 ] unsigned int 
  1312 ;;  counter         1    6[BANK0 ] unsigned char 
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  2    0[BANK0 ] unsigned int 
  1315 ;; Registers used:
  1316 ;;		wreg, status,2, status,0
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1322 ;;      Params:         0       4       0       0       0       0       0       0       0
  1323 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1325 ;;      Totals:         0       7       0       0       0       0       0       0       0
  1326 ;;Total ram usage:        7 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    4
  1329 ;; This function calls:
  1330 ;;		Nothing
  1331 ;; This function is called by:
  1332 ;;		_lcd_putnum
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text4
  1337  000FE8                     __ptext4:
  1338                           	opt stack 0
  1339  000FE8                     ___lwdiv:
  1340                           	opt stack 25
  1341                           
  1342                           ;incstack = 0
  1343  000FE8  0E00               	movlw	0
  1344  000FEA  0100               	movlb	0	; () banked
  1345  000FEC  6F65               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1346  000FEE  0E00               	movlw	0
  1347  000FF0  0100               	movlb	0	; () banked
  1348  000FF2  6F64               	movwf	___lwdiv@quotient& (0+255),b
  1349                           
  1350                           ; BSR set to: 0
  1351  000FF4  0100               	movlb	0	; () banked
  1352  000FF6  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1353  000FF8  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
  1354  000FFA  B4D8               	btfsc	status,2,c
  1355  000FFC  D02C               	goto	l834
  1356                           
  1357                           ; BSR set to: 0
  1358  000FFE  0E01               	movlw	1
  1359  001000  0100               	movlb	0	; () banked
  1360  001002  6F66               	movwf	___lwdiv@counter& (0+255),b
  1361  001004  D006               	goto	l1621
  1362  001006                     l1619:
  1363                           
  1364                           ; BSR set to: 0
  1365  001006  0100               	movlb	0	; () banked
  1366  001008  90D8               	bcf	status,0,c
  1367  00100A  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  1368  00100C  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1369  00100E  0100               	movlb	0	; () banked
  1370  001010  2B66               	incf	___lwdiv@counter& (0+255),f,b
  1371  001012                     l1621:
  1372                           
  1373                           ; BSR set to: 0
  1374  001012  0100               	movlb	0	; () banked
  1375  001014  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  1376  001016  D7F7               	goto	l1619
  1377  001018                     l1623:
  1378                           
  1379                           ; BSR set to: 0
  1380  001018  0100               	movlb	0	; () banked
  1381  00101A  90D8               	bcf	status,0,c
  1382  00101C  3764               	rlcf	___lwdiv@quotient& (0+255),f,b
  1383  00101E  3765               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1384                           
  1385                           ; BSR set to: 0
  1386  001020  0100               	movlb	0	; () banked
  1387  001022  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1388  001024  0100               	movlb	0	; () banked
  1389  001026  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  1390  001028  0100               	movlb	0	; () banked
  1391  00102A  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1392  00102C  0100               	movlb	0	; () banked
  1393  00102E  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  1394  001030  A0D8               	btfss	status,0,c
  1395  001032  D00A               	goto	l1631
  1396                           
  1397                           ; BSR set to: 0
  1398  001034  0100               	movlb	0	; () banked
  1399  001036  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1400  001038  0100               	movlb	0	; () banked
  1401  00103A  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  1402  00103C  0100               	movlb	0	; () banked
  1403  00103E  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1404  001040  0100               	movlb	0	; () banked
  1405  001042  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  1406                           
  1407                           ; BSR set to: 0
  1408  001044  0100               	movlb	0	; () banked
  1409  001046  8164               	bsf	___lwdiv@quotient& (0+255),0,b
  1410  001048                     l1631:
  1411                           
  1412                           ; BSR set to: 0
  1413  001048  0100               	movlb	0	; () banked
  1414  00104A  90D8               	bcf	status,0,c
  1415  00104C  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  1416  00104E  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  1417                           
  1418                           ; BSR set to: 0
  1419  001050  0100               	movlb	0	; () banked
  1420  001052  2F66               	decfsz	___lwdiv@counter& (0+255),f,b
  1421  001054  D7E1               	goto	l1623
  1422  001056                     l834:
  1423                           
  1424                           ; BSR set to: 0
  1425  001056  C064  F060         	movff	___lwdiv@quotient,?___lwdiv
  1426  00105A  C065  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1427                           
  1428                           ; BSR set to: 0
  1429  00105E  0012               	return	
  1430  001060                     __end_of___lwdiv:
  1431                           	opt stack 0
  1432                           tblptru	equ	0xFF8
  1433                           tblptrh	equ	0xFF7
  1434                           tblptrl	equ	0xFF6
  1435                           tablat	equ	0xFF5
  1436                           prodh	equ	0xFF4
  1437                           prodl	equ	0xFF3
  1438                           intcon	equ	0xFF2
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           status	equ	0xFD8
  1442                           
  1443 ;; *************** function _lcd_init *****************
  1444 ;; Defined at:
  1445 ;;		line 11 in file "lcd_driver.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;		None
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;		None
  1450 ;; Return value:  Size  Location     Type
  1451 ;;		None               void
  1452 ;; Registers used:
  1453 ;;		wreg, status,2, status,0, cstack
  1454 ;; Tracked objects:
  1455 ;;		On entry : 0/0
  1456 ;;		On exit  : 0/0
  1457 ;;		Unchanged: 0/0
  1458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1459 ;;      Params:         0       0       0       0       0       0       0       0       0
  1460 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1461 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1462 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1463 ;;Total ram usage:        1 bytes
  1464 ;; Hardware stack levels used:    1
  1465 ;; Hardware stack levels required when called:    6
  1466 ;; This function calls:
  1467 ;;		_lcd_write_byte
  1468 ;;		_lcd_write_nibble
  1469 ;; This function is called by:
  1470 ;;		_main
  1471 ;; This function uses a non-reentrant model
  1472 ;;
  1473                           
  1474                           	psect	text5
  1475  000BB6                     __ptext5:
  1476                           	opt stack 0
  1477  000BB6                     _lcd_init:
  1478                           	opt stack 24
  1479                           
  1480                           ;lcd_driver.c: 15: { _delay((unsigned long)((15000)*(4000000/4000000.0))); };
  1481                           
  1482                           ; BSR set to: 0
  1483                           ;incstack = 0
  1484  000BB6  0E14               	movlw	20
  1485  000BB8  0100               	movlb	0	; () banked
  1486  000BBA  6F65               	movwf	??_lcd_init& (0+255),b
  1487  000BBC  0E7A               	movlw	122
  1488  000BBE                     u1287:
  1489  000BBE  2EE8               	decfsz	wreg,f,c
  1490  000BC0  D7FE               	goto	u1287
  1491  000BC2  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1492  000BC4  D7FC               	goto	u1287
  1493                           
  1494                           ;lcd_driver.c: 18: lcd_write_nibble(0x3, 0);
  1495  000BC6  0E00               	movlw	0
  1496  000BC8  0100               	movlb	0	; () banked
  1497  000BCA  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1498  000BCC  0E03               	movlw	3
  1499  000BCE  ECB8  F006         	call	_lcd_write_nibble
  1500                           
  1501                           ;lcd_driver.c: 20: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1502  000BD2  0E07               	movlw	7
  1503  000BD4  0100               	movlb	0	; () banked
  1504  000BD6  6F65               	movwf	??_lcd_init& (0+255),b
  1505  000BD8  0E7D               	movlw	125
  1506  000BDA                     u1297:
  1507  000BDA  2EE8               	decfsz	wreg,f,c
  1508  000BDC  D7FE               	goto	u1297
  1509  000BDE  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1510  000BE0  D7FC               	goto	u1297
  1511  000BE2  F000               	nop	
  1512                           
  1513                           ;lcd_driver.c: 22: lcd_write_nibble(0x3, 0);
  1514  000BE4  0E00               	movlw	0
  1515  000BE6  0100               	movlb	0	; () banked
  1516  000BE8  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1517  000BEA  0E03               	movlw	3
  1518  000BEC  ECB8  F006         	call	_lcd_write_nibble
  1519                           
  1520                           ;lcd_driver.c: 24: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1521  000BF0  0E07               	movlw	7
  1522  000BF2  0100               	movlb	0	; () banked
  1523  000BF4  6F65               	movwf	??_lcd_init& (0+255),b
  1524  000BF6  0E7D               	movlw	125
  1525  000BF8                     u1307:
  1526  000BF8  2EE8               	decfsz	wreg,f,c
  1527  000BFA  D7FE               	goto	u1307
  1528  000BFC  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1529  000BFE  D7FC               	goto	u1307
  1530  000C00  F000               	nop	
  1531                           
  1532                           ;lcd_driver.c: 26: lcd_write_nibble(0x3, 0);
  1533  000C02  0E00               	movlw	0
  1534  000C04  0100               	movlb	0	; () banked
  1535  000C06  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1536  000C08  0E03               	movlw	3
  1537  000C0A  ECB8  F006         	call	_lcd_write_nibble
  1538                           
  1539                           ;lcd_driver.c: 28: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1540  000C0E  0E07               	movlw	7
  1541  000C10  0100               	movlb	0	; () banked
  1542  000C12  6F65               	movwf	??_lcd_init& (0+255),b
  1543  000C14  0E7D               	movlw	125
  1544  000C16                     u1317:
  1545  000C16  2EE8               	decfsz	wreg,f,c
  1546  000C18  D7FE               	goto	u1317
  1547  000C1A  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1548  000C1C  D7FC               	goto	u1317
  1549  000C1E  F000               	nop	
  1550                           
  1551                           ;lcd_driver.c: 30: lcd_write_nibble(0x2, 0);
  1552  000C20  0E00               	movlw	0
  1553  000C22  0100               	movlb	0	; () banked
  1554  000C24  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1555  000C26  0E02               	movlw	2
  1556  000C28  ECB8  F006         	call	_lcd_write_nibble
  1557                           
  1558                           ;lcd_driver.c: 39: lcd_write_byte(0x28, 0);
  1559  000C2C  0E00               	movlw	0
  1560  000C2E  0100               	movlb	0	; () banked
  1561  000C30  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1562  000C32  0E28               	movlw	40
  1563  000C34  ECF1  F009         	call	_lcd_write_byte
  1564                           
  1565                           ;lcd_driver.c: 40: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1566  000C38  0E07               	movlw	7
  1567  000C3A  0100               	movlb	0	; () banked
  1568  000C3C  6F65               	movwf	??_lcd_init& (0+255),b
  1569  000C3E  0E7D               	movlw	125
  1570  000C40                     u1327:
  1571  000C40  2EE8               	decfsz	wreg,f,c
  1572  000C42  D7FE               	goto	u1327
  1573  000C44  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1574  000C46  D7FC               	goto	u1327
  1575  000C48  F000               	nop	
  1576                           
  1577                           ;lcd_driver.c: 42: lcd_write_byte(0x0c, 0);
  1578  000C4A  0E00               	movlw	0
  1579  000C4C  0100               	movlb	0	; () banked
  1580  000C4E  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1581  000C50  0E0C               	movlw	12
  1582  000C52  ECF1  F009         	call	_lcd_write_byte
  1583                           
  1584                           ;lcd_driver.c: 43: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1585  000C56  0E07               	movlw	7
  1586  000C58  0100               	movlb	0	; () banked
  1587  000C5A  6F65               	movwf	??_lcd_init& (0+255),b
  1588  000C5C  0E7D               	movlw	125
  1589  000C5E                     u1337:
  1590  000C5E  2EE8               	decfsz	wreg,f,c
  1591  000C60  D7FE               	goto	u1337
  1592  000C62  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1593  000C64  D7FC               	goto	u1337
  1594  000C66  F000               	nop	
  1595                           
  1596                           ;lcd_driver.c: 45: lcd_write_byte(0x01, 0);
  1597  000C68  0E00               	movlw	0
  1598  000C6A  0100               	movlb	0	; () banked
  1599  000C6C  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1600  000C6E  0E01               	movlw	1
  1601  000C70  ECF1  F009         	call	_lcd_write_byte
  1602                           
  1603                           ;lcd_driver.c: 46: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1604  000C74  0E07               	movlw	7
  1605  000C76  0100               	movlb	0	; () banked
  1606  000C78  6F65               	movwf	??_lcd_init& (0+255),b
  1607  000C7A  0E7D               	movlw	125
  1608  000C7C                     u1347:
  1609  000C7C  2EE8               	decfsz	wreg,f,c
  1610  000C7E  D7FE               	goto	u1347
  1611  000C80  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1612  000C82  D7FC               	goto	u1347
  1613  000C84  F000               	nop	
  1614                           
  1615                           ;lcd_driver.c: 48: lcd_write_byte(0x6, 0);
  1616  000C86  0E00               	movlw	0
  1617  000C88  0100               	movlb	0	; () banked
  1618  000C8A  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1619  000C8C  0E06               	movlw	6
  1620  000C8E  ECF1  F009         	call	_lcd_write_byte
  1621                           
  1622                           ;lcd_driver.c: 49: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1623  000C92  0E07               	movlw	7
  1624  000C94  0100               	movlb	0	; () banked
  1625  000C96  6F65               	movwf	??_lcd_init& (0+255),b
  1626  000C98  0E7D               	movlw	125
  1627  000C9A                     u1357:
  1628  000C9A  2EE8               	decfsz	wreg,f,c
  1629  000C9C  D7FE               	goto	u1357
  1630  000C9E  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1631  000CA0  D7FC               	goto	u1357
  1632  000CA2  F000               	nop	
  1633  000CA4  0012               	return	
  1634  000CA6                     __end_of_lcd_init:
  1635                           	opt stack 0
  1636                           tblptru	equ	0xFF8
  1637                           tblptrh	equ	0xFF7
  1638                           tblptrl	equ	0xFF6
  1639                           tablat	equ	0xFF5
  1640                           prodh	equ	0xFF4
  1641                           prodl	equ	0xFF3
  1642                           intcon	equ	0xFF2
  1643                           postinc0	equ	0xFEE
  1644                           wreg	equ	0xFE8
  1645                           status	equ	0xFD8
  1646                           
  1647 ;; *************** function _lcd_write_byte *****************
  1648 ;; Defined at:
  1649 ;;		line 185 in file "lcd_driver.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  byte            1    wreg     unsigned char 
  1652 ;;  is_data         1    3[BANK0 ] unsigned char 
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  byte            1    4[BANK0 ] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;		None               void
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0, cstack
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1664 ;;      Params:         0       1       0       0       0       0       0       0       0
  1665 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1666 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1667 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1668 ;;Total ram usage:        2 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    5
  1671 ;; This function calls:
  1672 ;;		_lcd_write_nibble
  1673 ;; This function is called by:
  1674 ;;		_main
  1675 ;;		_lcd_init
  1676 ;;		_lcd_gotoxy
  1677 ;;		_lcd_putnum
  1678 ;;		_lcd_puts
  1679 ;;		_lcd_put_blank
  1680 ;;		_lcd_puts_const
  1681 ;;		_lcd_set_cgram
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           	psect	text6
  1686  0013E2                     __ptext6:
  1687                           	opt stack 0
  1688  0013E2                     _lcd_write_byte:
  1689                           	opt stack 25
  1690                           
  1691                           ;incstack = 0
  1692                           ;lcd_write_byte@byte stored from wreg
  1693  0013E2  0100               	movlb	0	; () banked
  1694  0013E4  6F64               	movwf	lcd_write_byte@byte& (0+255),b
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;lcd_driver.c: 188: lcd_write_nibble(byte >> 4, is_data);
  1698  0013E6  C063  F060         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
  1699  0013EA  0100               	movlb	0	; () banked
  1700  0013EC  3964               	swapf	lcd_write_byte@byte& (0+255),w,b
  1701  0013EE  0B0F               	andlw	15
  1702  0013F0  ECB8  F006         	call	_lcd_write_nibble
  1703                           
  1704                           ;lcd_driver.c: 189: lcd_write_nibble(byte, is_data);
  1705  0013F4  C063  F060         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
  1706  0013F8  0100               	movlb	0	; () banked
  1707  0013FA  5164               	movf	lcd_write_byte@byte& (0+255),w,b
  1708  0013FC  ECB8  F006         	call	_lcd_write_nibble
  1709  001400  0012               	return	
  1710  001402                     __end_of_lcd_write_byte:
  1711                           	opt stack 0
  1712                           tblptru	equ	0xFF8
  1713                           tblptrh	equ	0xFF7
  1714                           tblptrl	equ	0xFF6
  1715                           tablat	equ	0xFF5
  1716                           prodh	equ	0xFF4
  1717                           prodl	equ	0xFF3
  1718                           intcon	equ	0xFF2
  1719                           postinc0	equ	0xFEE
  1720                           wreg	equ	0xFE8
  1721                           status	equ	0xFD8
  1722                           
  1723 ;; *************** function _lcd_write_nibble *****************
  1724 ;; Defined at:
  1725 ;;		line 176 in file "lcd_driver.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;  nibble          1    wreg     unsigned char 
  1728 ;;  is_data         1    0[BANK0 ] unsigned char 
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;  nibble          1    2[BANK0 ] unsigned char 
  1731 ;; Return value:  Size  Location     Type
  1732 ;;		None               void
  1733 ;; Registers used:
  1734 ;;		wreg, status,2, status,0, cstack
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1740 ;;      Params:         0       1       0       0       0       0       0       0       0
  1741 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1742 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1743 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1744 ;;Total ram usage:        3 bytes
  1745 ;; Hardware stack levels used:    1
  1746 ;; Hardware stack levels required when called:    4
  1747 ;; This function calls:
  1748 ;;		Nothing
  1749 ;; This function is called by:
  1750 ;;		_lcd_init
  1751 ;;		_lcd_write_byte
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           	psect	text7
  1756  000D70                     __ptext7:
  1757                           	opt stack 0
  1758  000D70                     _lcd_write_nibble:
  1759                           	opt stack 25
  1760                           
  1761                           ;incstack = 0
  1762                           ;lcd_write_nibble@nibble stored from wreg
  1763  000D70  0100               	movlb	0	; () banked
  1764  000D72  6F62               	movwf	lcd_write_nibble@nibble& (0+255),b
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;lcd_driver.c: 179: { LATDbits.LATD2 = is_data; };
  1768  000D74  0100               	movlb	0	; () banked
  1769  000D76  B160               	btfsc	lcd_write_nibble@is_data& (0+255),0,b
  1770  000D78  D002               	bra	u875
  1771  000D7A  948C               	bcf	3980,2,c	;volatile
  1772  000D7C  D001               	bra	u876
  1773  000D7E                     u875:
  1774  000D7E  848C               	bsf	3980,2,c	;volatile
  1775  000D80                     u876:
  1776                           
  1777                           ;lcd_driver.c: 180: { _delay((unsigned long)((100)*(4000000/4000000.0))); };
  1778  000D80  0E21               	movlw	33
  1779  000D82                     u1367:
  1780  000D82  2EE8               	decfsz	wreg,f,c
  1781  000D84  D7FE               	goto	u1367
  1782  000D86  F000               	nop	
  1783                           
  1784                           ;lcd_driver.c: 181: { LATDbits.LATD4 = nibble & 1; LATDbits.LATD5 = (nibble & 2) >> 1; L
      +                          ATDbits.LATD6 = (nibble & 4) >> 2; LATDbits.LATD7 = (nibble & 8) >> 3; };
  1785  000D88  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1786  000D8C  0E01               	movlw	1
  1787  000D8E  0100               	movlb	0	; () banked
  1788  000D90  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1789  000D92  0100               	movlb	0	; () banked
  1790  000D94  3B61               	swapf	??_lcd_write_nibble& (0+255),f,b
  1791  000D96  508C               	movf	3980,w,c	;volatile
  1792  000D98  0100               	movlb	0	; () banked
  1793  000D9A  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1794  000D9C  0BEF               	andlw	-17
  1795  000D9E  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1796  000DA0  6E8C               	movwf	3980,c	;volatile
  1797                           
  1798                           ; BSR set to: 0
  1799  000DA2  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1800  000DA6  0100               	movlb	0	; () banked
  1801  000DA8  90D8               	bcf	status,0,c
  1802  000DAA  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1803  000DAC  0E01               	movlw	1
  1804  000DAE  0100               	movlb	0	; () banked
  1805  000DB0  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1806  000DB2  0100               	movlb	0	; () banked
  1807  000DB4  3B61               	swapf	??_lcd_write_nibble& (0+255),f,b
  1808  000DB6  4761               	rlncf	??_lcd_write_nibble& (0+255),f,b
  1809  000DB8  508C               	movf	3980,w,c	;volatile
  1810  000DBA  0100               	movlb	0	; () banked
  1811  000DBC  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1812  000DBE  0BDF               	andlw	-33
  1813  000DC0  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1814  000DC2  6E8C               	movwf	3980,c	;volatile
  1815                           
  1816                           ; BSR set to: 0
  1817  000DC4  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1818  000DC8  0100               	movlb	0	; () banked
  1819  000DCA  90D8               	bcf	status,0,c
  1820  000DCC  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1821  000DCE  0100               	movlb	0	; () banked
  1822  000DD0  90D8               	bcf	status,0,c
  1823  000DD2  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1824  000DD4  0E01               	movlw	1
  1825  000DD6  0100               	movlb	0	; () banked
  1826  000DD8  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1827  000DDA  0100               	movlb	0	; () banked
  1828  000DDC  3B61               	swapf	??_lcd_write_nibble& (0+255),f,b
  1829  000DDE  4761               	rlncf	??_lcd_write_nibble& (0+255),f,b
  1830  000DE0  4761               	rlncf	??_lcd_write_nibble& (0+255),f,b
  1831  000DE2  508C               	movf	3980,w,c	;volatile
  1832  000DE4  0100               	movlb	0	; () banked
  1833  000DE6  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1834  000DE8  0BBF               	andlw	-65
  1835  000DEA  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1836  000DEC  6E8C               	movwf	3980,c	;volatile
  1837                           
  1838                           ; BSR set to: 0
  1839  000DEE  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1840  000DF2  0100               	movlb	0	; () banked
  1841  000DF4  90D8               	bcf	status,0,c
  1842  000DF6  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1843  000DF8  0100               	movlb	0	; () banked
  1844  000DFA  90D8               	bcf	status,0,c
  1845  000DFC  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1846  000DFE  0100               	movlb	0	; () banked
  1847  000E00  90D8               	bcf	status,0,c
  1848  000E02  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1849  000E04  0E01               	movlw	1
  1850  000E06  0100               	movlb	0	; () banked
  1851  000E08  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1852  000E0A  0100               	movlb	0	; () banked
  1853  000E0C  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1854  000E0E  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1855  000E10  508C               	movf	3980,w,c	;volatile
  1856  000E12  0100               	movlb	0	; () banked
  1857  000E14  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1858  000E16  0B7F               	andlw	-129
  1859  000E18  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1860  000E1A  6E8C               	movwf	3980,c	;volatile
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;lcd_driver.c: 182: { LATDbits.LATD3 = 1; { _delay((unsigned long)((200)*(4000000/400000
      +                          0.0))); }; LATDbits.LATD3 = 0; { _delay((unsigned long)((500)*(4000000/4000000.0))); }; 
      +                          };
  1864  000E1C  868C               	bsf	3980,3,c	;volatile
  1865                           
  1866                           ; BSR set to: 0
  1867  000E1E  0E42               	movlw	66
  1868  000E20                     u1377:
  1869  000E20  2EE8               	decfsz	wreg,f,c
  1870  000E22  D7FE               	goto	u1377
  1871  000E24  D000               	nop2		;nop
  1872  000E26  968C               	bcf	3980,3,c	;volatile
  1873  000E28  0EA6               	movlw	166
  1874  000E2A                     u1387:
  1875  000E2A  2EE8               	decfsz	wreg,f,c
  1876  000E2C  D7FE               	goto	u1387
  1877  000E2E  D000               	nop2		;nop
  1878  000E30  0012               	return	
  1879  000E32                     __end_of_lcd_write_nibble:
  1880                           	opt stack 0
  1881                           tblptru	equ	0xFF8
  1882                           tblptrh	equ	0xFF7
  1883                           tblptrl	equ	0xFF6
  1884                           tablat	equ	0xFF5
  1885                           prodh	equ	0xFF4
  1886                           prodl	equ	0xFF3
  1887                           intcon	equ	0xFF2
  1888                           postinc0	equ	0xFEE
  1889                           wreg	equ	0xFE8
  1890                           status	equ	0xFD8
  1891                           
  1892 ;; *************** function _SetDCPWM1 *****************
  1893 ;; Defined at:
  1894 ;;		line 7 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;  dutycycle       2    0[BANK0 ] unsigned int 
  1897 ;; Auto vars:     Size  Location     Type
  1898 ;;  DCycle          2    4[BANK0 ] struct PWMDC
  1899 ;; Return value:  Size  Location     Type
  1900 ;;		None               void
  1901 ;; Registers used:
  1902 ;;		wreg, status,2, status,0
  1903 ;; Tracked objects:
  1904 ;;		On entry : 0/0
  1905 ;;		On exit  : 0/0
  1906 ;;		Unchanged: 0/0
  1907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1908 ;;      Params:         0       2       0       0       0       0       0       0       0
  1909 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1910 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1911 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1912 ;;Total ram usage:        6 bytes
  1913 ;; Hardware stack levels used:    1
  1914 ;; Hardware stack levels required when called:    4
  1915 ;; This function calls:
  1916 ;;		Nothing
  1917 ;; This function is called by:
  1918 ;;		_main
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text8
  1923  001304                     __ptext8:
  1924                           	opt stack 0
  1925  001304                     _SetDCPWM1:
  1926                           	opt stack 26
  1927                           
  1928                           ;incstack = 0
  1929  001304  0100               	movlb	0	; () banked
  1930  001306  C060  F062         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  1931  00130A  0100               	movlb	0	; () banked
  1932  00130C  C061  F063         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  1933  001310  0E06               	movlw	6
  1934  001312                     u1035:
  1935  001312  90D8               	bcf	status,0,c
  1936  001314  0100               	movlb	0	; () banked
  1937  001316  3762               	rlcf	??_SetDCPWM1& (0+255),f,b
  1938  001318  3763               	rlcf	(??_SetDCPWM1+1)& (0+255),f,b
  1939  00131A  2EE8               	decfsz	wreg,f,c
  1940  00131C  D7FA               	goto	u1035
  1941  00131E  C062  F064         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  1942  001322  C063  F065         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  1943                           
  1944                           ; BSR set to: 0
  1945  001326  C065  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  1946  00132A  C064  F062         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  1947  00132E  0100               	movlb	0	; () banked
  1948  001330  90D8               	bcf	status,0,c
  1949  001332  3362               	rrcf	??_SetDCPWM1& (0+255),f,b
  1950  001334  0100               	movlb	0	; () banked
  1951  001336  90D8               	bcf	status,0,c
  1952  001338  3362               	rrcf	??_SetDCPWM1& (0+255),f,b
  1953  00133A  0E30               	movlw	48
  1954  00133C  0100               	movlb	0	; () banked
  1955  00133E  1762               	andwf	??_SetDCPWM1& (0+255),f,b
  1956  001340  50BD               	movf	4029,w,c	;volatile
  1957  001342  0BCF               	andlw	207
  1958  001344  0100               	movlb	0	; () banked
  1959  001346  1162               	iorwf	??_SetDCPWM1& (0+255),w,b
  1960  001348  6EBD               	movwf	4029,c	;volatile
  1961                           
  1962                           ; BSR set to: 0
  1963  00134A  0012               	return	
  1964  00134C                     __end_of_SetDCPWM1:
  1965                           	opt stack 0
  1966                           tblptru	equ	0xFF8
  1967                           tblptrh	equ	0xFF7
  1968                           tblptrl	equ	0xFF6
  1969                           tablat	equ	0xFF5
  1970                           prodh	equ	0xFF4
  1971                           prodl	equ	0xFF3
  1972                           intcon	equ	0xFF2
  1973                           postinc0	equ	0xFEE
  1974                           wreg	equ	0xFE8
  1975                           status	equ	0xFD8
  1976                           
  1977 ;; *************** function _OpenUSART *****************
  1978 ;; Defined at:
  1979 ;;		line 73 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;  config          1    wreg     unsigned char 
  1982 ;;  spbrg           2    0[BANK0 ] unsigned int 
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;  config          1    5[BANK0 ] unsigned char 
  1985 ;; Return value:  Size  Location     Type
  1986 ;;		None               void
  1987 ;; Registers used:
  1988 ;;		wreg, status,2
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1994 ;;      Params:         0       2       0       0       0       0       0       0       0
  1995 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1996 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1997 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1998 ;;Total ram usage:        6 bytes
  1999 ;; Hardware stack levels used:    1
  2000 ;; Hardware stack levels required when called:    4
  2001 ;; This function calls:
  2002 ;;		Nothing
  2003 ;; This function is called by:
  2004 ;;		_main
  2005 ;; This function uses a non-reentrant model
  2006 ;;
  2007                           
  2008                           	psect	text9
  2009  000F68                     __ptext9:
  2010                           	opt stack 0
  2011  000F68                     _OpenUSART:
  2012                           	opt stack 26
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;incstack = 0
  2016                           ;OpenUSART@config stored from wreg
  2017  000F68  0100               	movlb	0	; () banked
  2018  000F6A  6F65               	movwf	OpenUSART@config& (0+255),b
  2019                           
  2020                           ; BSR set to: 0
  2021  000F6C  0E00               	movlw	0
  2022  000F6E  6EAC               	movwf	4012,c	;volatile
  2023  000F70  0E00               	movlw	0
  2024  000F72  6EAB               	movwf	4011,c	;volatile
  2025                           
  2026                           ; BSR set to: 0
  2027  000F74  0100               	movlb	0	; () banked
  2028  000F76  B165               	btfsc	OpenUSART@config& (0+255),0,b
  2029                           
  2030                           ; BSR set to: 0
  2031  000F78  88AC               	bsf	4012,4,c	;volatile
  2032                           
  2033                           ; BSR set to: 0
  2034                           
  2035                           ; BSR set to: 0
  2036  000F7A  0100               	movlb	0	; () banked
  2037  000F7C  A365               	btfss	OpenUSART@config& (0+255),1,b
  2038  000F7E  D002               	goto	l1645
  2039                           
  2040                           ; BSR set to: 0
  2041  000F80  8CAC               	bsf	4012,6,c	;volatile
  2042  000F82  8CAB               	bsf	4011,6,c	;volatile
  2043  000F84                     l1645:
  2044                           
  2045                           ; BSR set to: 0
  2046  000F84  0100               	movlb	0	; () banked
  2047  000F86  B565               	btfsc	OpenUSART@config& (0+255),2,b
  2048                           
  2049                           ; BSR set to: 0
  2050  000F88  8EAC               	bsf	4012,7,c	;volatile
  2051                           
  2052                           ; BSR set to: 0
  2053                           
  2054                           ; BSR set to: 0
  2055  000F8A  0100               	movlb	0	; () banked
  2056  000F8C  A765               	btfss	OpenUSART@config& (0+255),3,b
  2057  000F8E  D002               	goto	l240
  2058                           
  2059                           ; BSR set to: 0
  2060  000F90  88AB               	bsf	4011,4,c	;volatile
  2061  000F92  D001               	goto	l1653
  2062  000F94                     l240:
  2063                           
  2064                           ; BSR set to: 0
  2065  000F94  8AAB               	bsf	4011,5,c	;volatile
  2066  000F96                     l1653:
  2067                           
  2068                           ; BSR set to: 0
  2069  000F96  0100               	movlb	0	; () banked
  2070  000F98  B965               	btfsc	OpenUSART@config& (0+255),4,b
  2071                           
  2072                           ; BSR set to: 0
  2073  000F9A  84AC               	bsf	4012,2,c	;volatile
  2074                           
  2075                           ; BSR set to: 0
  2076  000F9C  989E               	bcf	3998,4,c	;volatile
  2077                           
  2078                           ; BSR set to: 0
  2079  000F9E  0100               	movlb	0	; () banked
  2080  000FA0  BB65               	btfsc	OpenUSART@config& (0+255),5,b
  2081                           
  2082                           ; BSR set to: 0
  2083  000FA2  86AB               	bsf	4011,3,c	;volatile
  2084                           
  2085                           ; BSR set to: 0
  2086                           
  2087                           ; BSR set to: 0
  2088  000FA4  0100               	movlb	0	; () banked
  2089  000FA6  AD65               	btfss	OpenUSART@config& (0+255),6,b
  2090  000FA8  D002               	goto	l244
  2091                           
  2092                           ; BSR set to: 0
  2093  000FAA  8A9D               	bsf	3997,5,c	;volatile
  2094  000FAC  D001               	goto	l245
  2095  000FAE                     l244:
  2096                           
  2097                           ; BSR set to: 0
  2098  000FAE  9A9D               	bcf	3997,5,c	;volatile
  2099  000FB0                     l245:
  2100                           
  2101                           ; BSR set to: 0
  2102  000FB0  9A9E               	bcf	3998,5,c	;volatile
  2103                           
  2104                           ; BSR set to: 0
  2105  000FB2  0100               	movlb	0	; () banked
  2106  000FB4  AF65               	btfss	OpenUSART@config& (0+255),7,b
  2107  000FB6  D002               	goto	l246
  2108                           
  2109                           ; BSR set to: 0
  2110  000FB8  889D               	bsf	3997,4,c	;volatile
  2111  000FBA  D001               	goto	l247
  2112  000FBC                     l246:
  2113                           
  2114                           ; BSR set to: 0
  2115  000FBC  989D               	bcf	3997,4,c	;volatile
  2116  000FBE                     l247:
  2117                           
  2118                           ; BSR set to: 0
  2119  000FBE  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  2120                           
  2121                           ; BSR set to: 0
  2122  000FC2  0100               	movlb	0	; () banked
  2123  000FC4  C061  F062         	movff	OpenUSART@spbrg+1,??_OpenUSART
  2124  000FC8  C062  F063         	movff	??_OpenUSART,??_OpenUSART+1
  2125  000FCC  0100               	movlb	0	; () banked
  2126  000FCE  6B64               	clrf	(??_OpenUSART+2)& (0+255),b
  2127  000FD0  0100               	movlb	0	; () banked
  2128  000FD2  5163               	movf	(??_OpenUSART+1)& (0+255),w,b
  2129  000FD4  6EB0               	movwf	4016,c	;volatile
  2130                           
  2131                           ; BSR set to: 0
  2132  000FD6  8AAC               	bsf	4012,5,c	;volatile
  2133                           
  2134                           ; BSR set to: 0
  2135  000FD8  8EAB               	bsf	4011,7,c	;volatile
  2136                           
  2137                           ; BSR set to: 0
  2138  000FDA  9C94               	bcf	3988,6,c	;volatile
  2139                           
  2140                           ; BSR set to: 0
  2141  000FDC  8E94               	bsf	3988,7,c	;volatile
  2142                           
  2143                           ; BSR set to: 0
  2144  000FDE  B8AC               	btfsc	4012,4,c	;volatile
  2145                           
  2146                           ; BSR set to: 0
  2147  000FE0  BEAC               	btfsc	4012,7,c	;volatile
  2148  000FE2  D001               	goto	l249
  2149                           
  2150                           ; BSR set to: 0
  2151  000FE4  8C94               	bsf	3988,6,c	;volatile
  2152  000FE6                     l249:
  2153                           
  2154                           ; BSR set to: 0
  2155  000FE6  0012               	return	
  2156  000FE8                     __end_of_OpenUSART:
  2157                           	opt stack 0
  2158                           tblptru	equ	0xFF8
  2159                           tblptrh	equ	0xFF7
  2160                           tblptrl	equ	0xFF6
  2161                           tablat	equ	0xFF5
  2162                           prodh	equ	0xFF4
  2163                           prodl	equ	0xFF3
  2164                           intcon	equ	0xFF2
  2165                           postinc0	equ	0xFEE
  2166                           wreg	equ	0xFE8
  2167                           status	equ	0xFD8
  2168                           
  2169 ;; *************** function _OpenPWM1 *****************
  2170 ;; Defined at:
  2171 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;  period          1    wreg     unsigned char 
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;  period          1    0[BANK0 ] unsigned char 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;		None               void
  2178 ;; Registers used:
  2179 ;;		wreg, status,2, status,0
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2185 ;;      Params:         0       0       0       0       0       0       0       0       0
  2186 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2188 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2189 ;;Total ram usage:        1 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    4
  2192 ;; This function calls:
  2193 ;;		Nothing
  2194 ;; This function is called by:
  2195 ;;		_main
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text10
  2200  001440                     __ptext10:
  2201                           	opt stack 0
  2202  001440                     _OpenPWM1:
  2203                           	opt stack 26
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;incstack = 0
  2207                           ;OpenPWM1@period stored from wreg
  2208  001440  0100               	movlb	0	; () banked
  2209  001442  6F60               	movwf	OpenPWM1@period& (0+255),b
  2210                           
  2211                           ; BSR set to: 0
  2212  001444  0E0C               	movlw	12
  2213  001446  12BD               	iorwf	4029,f,c	;volatile
  2214                           
  2215                           ; BSR set to: 0
  2216  001448  9494               	bcf	3988,2,c	;volatile
  2217                           
  2218                           ; BSR set to: 0
  2219  00144A  94CA               	bcf	4042,2,c	;volatile
  2220                           
  2221                           ; BSR set to: 0
  2222  00144C  C060  FFCB         	movff	OpenPWM1@period,4043	;volatile
  2223                           
  2224                           ; BSR set to: 0
  2225  001450  84CA               	bsf	4042,2,c	;volatile
  2226                           
  2227                           ; BSR set to: 0
  2228  001452  0012               	return	
  2229  001454                     __end_of_OpenPWM1:
  2230                           	opt stack 0
  2231                           tblptru	equ	0xFF8
  2232                           tblptrh	equ	0xFF7
  2233                           tblptrl	equ	0xFF6
  2234                           tablat	equ	0xFF5
  2235                           prodh	equ	0xFF4
  2236                           prodl	equ	0xFF3
  2237                           intcon	equ	0xFF2
  2238                           postinc0	equ	0xFEE
  2239                           wreg	equ	0xFE8
  2240                           status	equ	0xFD8
  2241                           
  2242 ;; *************** function _ISR *****************
  2243 ;; Defined at:
  2244 ;;		line 97 in file "main.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;		None
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;		None
  2249 ;; Return value:  Size  Location     Type
  2250 ;;		None               void
  2251 ;; Registers used:
  2252 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2258 ;;      Params:         0       0       0       0       0       0       0       0       0
  2259 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2260 ;;      Temps:         14       0       0       0       0       0       0       0       0
  2261 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2262 ;;Total ram usage:       14 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    3
  2265 ;; This function calls:
  2266 ;;		_ReadUSART
  2267 ;;		_atoi
  2268 ;;		_cleanMessageBuffer
  2269 ;;		_itoa
  2270 ;;		_putsUSART
  2271 ;;		_strncpy
  2272 ;; This function is called by:
  2273 ;;		Interrupt level 2
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	intcode
  2278  000008                     __pintcode:
  2279                           	opt stack 0
  2280  000008                     _ISR:
  2281                           	opt stack 23
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;incstack = 0
  2285  000008  CFFA F019          	movff	pclath,??_ISR
  2286  00000C  CFFB F01A          	movff	pclatu,??_ISR+1
  2287  000010  CFE9 F01B          	movff	fsr0l,??_ISR+2
  2288  000014  ED1F  F004         	call	int_func,f	;refresh shadow registers
  2289                           pclatu	equ	0xFFB
  2290                           pclath	equ	0xFFA
  2291                           tblptru	equ	0xFF8
  2292                           tblptrh	equ	0xFF7
  2293                           tblptrl	equ	0xFF6
  2294                           tablat	equ	0xFF5
  2295                           prodh	equ	0xFF4
  2296                           prodl	equ	0xFF3
  2297                           intcon	equ	0xFF2
  2298                           postinc0	equ	0xFEE
  2299                           fsr0l	equ	0xFE9
  2300                           wreg	equ	0xFE8
  2301                           status	equ	0xFD8
  2302                           
  2303                           	psect	intcode_body
  2304  00083E                     __pintcode_body:
  2305                           	opt stack 23
  2306  00083E                     int_func:
  2307                           	opt stack 23
  2308  00083E  0006               	pop		; remove dummy address from shadow register refresh
  2309  000840  CFEA F01C          	movff	fsr0h,??_ISR+3
  2310  000844  CFE1 F01D          	movff	fsr1l,??_ISR+4
  2311  000848  CFE2 F01E          	movff	fsr1h,??_ISR+5
  2312  00084C  CFD9 F01F          	movff	fsr2l,??_ISR+6
  2313  000850  CFDA F020          	movff	fsr2h,??_ISR+7
  2314  000854  CFF3 F021          	movff	prodl,??_ISR+8
  2315  000858  CFF4 F022          	movff	prodh,??_ISR+9
  2316  00085C  CFF6 F023          	movff	tblptrl,??_ISR+10
  2317  000860  CFF7 F024          	movff	tblptrh,??_ISR+11
  2318  000864  CFF8 F025          	movff	tblptru,??_ISR+12
  2319  000868  CFF5 F026          	movff	tablat,??_ISR+13
  2320                           
  2321                           ;main.c: 100: if(PIR1bits.RCIF == 1)
  2322  00086C  AA9E               	btfss	3998,5,c	;volatile
  2323  00086E  D0EF               	goto	i2l106
  2324                           
  2325                           ;main.c: 101: {
  2326                           ;main.c: 102: if(i<200)
  2327  000870  0EC8               	movlw	200
  2328  000872  5C3B               	subwf	_i,w,c
  2329  000874  0E00               	movlw	0
  2330  000876  583C               	subwfb	_i+1,w,c
  2331  000878  B0D8               	btfsc	status,0,c
  2332  00087A  D0DF               	goto	i2l1569
  2333                           
  2334                           ;main.c: 103: {
  2335                           ;main.c: 104: MessageBuffer[i] = ReadUSART();
  2336  00087C  0101               	movlb	1	; () banked
  2337  00087E  0E00               	movlw	low _MessageBuffer
  2338  000880  243B               	addwf	_i,w,c
  2339  000882  6ED9               	movwf	fsr2l,c
  2340  000884  0101               	movlb	1	; () banked
  2341  000886  0E01               	movlw	high _MessageBuffer
  2342  000888  203C               	addwfc	_i+1,w,c
  2343  00088A  6EDA               	movwf	fsr2h,c
  2344  00088C  EC11  F00A         	call	_ReadUSART	;wreg free
  2345  000890  6EDF               	movwf	indf2,c
  2346                           
  2347                           ;main.c: 106: switch(MessageBuffer[i])
  2348  000892  D0BE               	goto	i2l1567
  2349  000894                     i2l1517:
  2350                           
  2351                           ;main.c: 109: strncpy(DC_str, MessageBuffer,4);
  2352  000894  0E00               	movlw	high _DC_str
  2353  000896  6E02               	movwf	strncpy@to+1,c
  2354  000898  0E44               	movlw	low _DC_str
  2355  00089A  6E01               	movwf	strncpy@to,c
  2356  00089C  0101               	movlb	1	; () banked
  2357  00089E  0E01               	movlw	high _MessageBuffer
  2358  0008A0  6E04               	movwf	strncpy@from+1,c
  2359  0008A2  0101               	movlb	1	; () banked
  2360  0008A4  0E00               	movlw	low _MessageBuffer
  2361  0008A6  6E03               	movwf	strncpy@from,c
  2362  0008A8  0E00               	movlw	0
  2363  0008AA  6E06               	movwf	strncpy@size+1,c
  2364  0008AC  0E04               	movlw	4
  2365  0008AE  6E05               	movwf	strncpy@size,c
  2366  0008B0  ECD3  F008         	call	_strncpy	;wreg free
  2367                           
  2368                           ;main.c: 110: k = atoi(DC_str);
  2369  0008B4  0E00               	movlw	high _DC_str
  2370  0008B6  6E08               	movwf	atoi@s+1,c
  2371  0008B8  0E44               	movlw	low _DC_str
  2372  0008BA  6E07               	movwf	atoi@s,c
  2373  0008BC  EC53  F006         	call	_atoi	;wreg free
  2374  0008C0  C007  F03D         	movff	?_atoi,_k
  2375  0008C4  C008  F03E         	movff	?_atoi+1,_k+1
  2376                           
  2377                           ;main.c: 111: if(k >= 0 && k <= 1023)
  2378  0008C8  0E00               	movlw	0
  2379  0008CA  5C3D               	subwf	_k,w,c
  2380  0008CC  0E04               	movlw	4
  2381  0008CE  583E               	subwfb	_k+1,w,c
  2382  0008D0  B0D8               	btfsc	status,0,c
  2383  0008D2  D017               	goto	i2l1527
  2384                           
  2385                           ;main.c: 112: {
  2386                           ;main.c: 113: DutyCycle = k;
  2387  0008D4  C03D  F049         	movff	_k,_DutyCycle
  2388  0008D8  C03E  F04A         	movff	_k+1,_DutyCycle+1
  2389                           
  2390                           ;main.c: 114: putsUSART("Modificado el SetPoint a: ");
  2391  0008DC  0E08               	movlw	high STR_2
  2392  0008DE  6E03               	movwf	putsUSART@data+1,c
  2393  0008E0  0E05               	movlw	low STR_2
  2394  0008E2  6E02               	movwf	putsUSART@data,c
  2395  0008E4  EC02  F009         	call	_putsUSART	;wreg free
  2396                           
  2397                           ;main.c: 115: putsUSART(DC_str);
  2398  0008E8  0E00               	movlw	high _DC_str
  2399  0008EA  6E03               	movwf	putsUSART@data+1,c
  2400  0008EC  0E44               	movlw	low _DC_str
  2401  0008EE  6E02               	movwf	putsUSART@data,c
  2402  0008F0  EC02  F009         	call	_putsUSART	;wreg free
  2403                           
  2404                           ;main.c: 116: putsUSART('\n');
  2405  0008F4  0E00               	movlw	0
  2406  0008F6  6E03               	movwf	putsUSART@data+1,c
  2407  0008F8  0E0A               	movlw	10
  2408  0008FA  6E02               	movwf	putsUSART@data,c
  2409  0008FC  EC02  F009         	call	_putsUSART	;wreg free
  2410                           
  2411                           ;main.c: 117: }
  2412  000900  D00C               	goto	i2l1529
  2413  000902                     i2l1527:
  2414                           
  2415                           ;main.c: 118: else
  2416                           ;main.c: 119: {
  2417                           ;main.c: 120: putsUSART("Error maquinola");
  2418  000902  0E08               	movlw	high STR_3
  2419  000904  6E03               	movwf	putsUSART@data+1,c
  2420  000906  0E20               	movlw	low STR_3
  2421  000908  6E02               	movwf	putsUSART@data,c
  2422  00090A  EC02  F009         	call	_putsUSART	;wreg free
  2423                           
  2424                           ;main.c: 121: putsUSART('\n');
  2425  00090E  0E00               	movlw	0
  2426  000910  6E03               	movwf	putsUSART@data+1,c
  2427  000912  0E0A               	movlw	10
  2428  000914  6E02               	movwf	putsUSART@data,c
  2429  000916  EC02  F009         	call	_putsUSART	;wreg free
  2430  00091A                     i2l1529:
  2431                           
  2432                           ;main.c: 122: }
  2433                           ;main.c: 123: cleanMessageBuffer();
  2434  00091A  ECC7  F009         	call	_cleanMessageBuffer	;wreg free
  2435                           
  2436                           ;main.c: 124: break;
  2437  00091E  D08B               	goto	i2l97
  2438  000920                     i2l1531:
  2439                           
  2440                           ;main.c: 126: if(DutyCycle >= 0 && DutyCycle < 1023)
  2441  000920  0EFF               	movlw	255
  2442  000922  5C49               	subwf	_DutyCycle,w,c
  2443  000924  0E03               	movlw	3
  2444  000926  584A               	subwfb	_DutyCycle+1,w,c
  2445  000928  B0D8               	btfsc	status,0,c
  2446  00092A  D023               	goto	i2l1543
  2447                           
  2448                           ;main.c: 127: {
  2449                           ;main.c: 128: DutyCycle++;
  2450  00092C  4A49               	infsnz	_DutyCycle,f,c
  2451  00092E  2A4A               	incf	_DutyCycle+1,f,c
  2452                           
  2453                           ;main.c: 129: itoa(DC_str, DutyCycle, 10);
  2454  000930  0E00               	movlw	high _DC_str
  2455  000932  6E12               	movwf	itoa@buf+1,c
  2456  000934  0E44               	movlw	low _DC_str
  2457  000936  6E11               	movwf	itoa@buf,c
  2458  000938  C049  F013         	movff	_DutyCycle,itoa@val
  2459  00093C  C04A  F014         	movff	_DutyCycle+1,itoa@val+1
  2460  000940  0E00               	movlw	0
  2461  000942  6E16               	movwf	itoa@base+1,c
  2462  000944  0E0A               	movlw	10
  2463  000946  6E15               	movwf	itoa@base,c
  2464  000948  EC30  F009         	call	_itoa	;wreg free
  2465                           
  2466                           ;main.c: 130: putsUSART("Modificado el SetPoint a: ");
  2467  00094C  0E08               	movlw	high STR_2
  2468  00094E  6E03               	movwf	putsUSART@data+1,c
  2469  000950  0E05               	movlw	low STR_2
  2470  000952  6E02               	movwf	putsUSART@data,c
  2471  000954  EC02  F009         	call	_putsUSART	;wreg free
  2472                           
  2473                           ;main.c: 131: putsUSART(DC_str);
  2474  000958  0E00               	movlw	high _DC_str
  2475  00095A  6E03               	movwf	putsUSART@data+1,c
  2476  00095C  0E44               	movlw	low _DC_str
  2477  00095E  6E02               	movwf	putsUSART@data,c
  2478  000960  EC02  F009         	call	_putsUSART	;wreg free
  2479                           
  2480                           ;main.c: 132: putsUSART('\n');
  2481  000964  0E00               	movlw	0
  2482  000966  6E03               	movwf	putsUSART@data+1,c
  2483  000968  0E0A               	movlw	10
  2484  00096A  6E02               	movwf	putsUSART@data,c
  2485  00096C  EC02  F009         	call	_putsUSART	;wreg free
  2486                           
  2487                           ;main.c: 133: }
  2488  000970  D00C               	goto	i2l1545
  2489  000972                     i2l1543:
  2490                           
  2491                           ;main.c: 134: else
  2492                           ;main.c: 135: {
  2493                           ;main.c: 136: putsUSART("Error maquinola");
  2494  000972  0E08               	movlw	high STR_3
  2495  000974  6E03               	movwf	putsUSART@data+1,c
  2496  000976  0E20               	movlw	low STR_3
  2497  000978  6E02               	movwf	putsUSART@data,c
  2498  00097A  EC02  F009         	call	_putsUSART	;wreg free
  2499                           
  2500                           ;main.c: 137: putsUSART('\n');
  2501  00097E  0E00               	movlw	0
  2502  000980  6E03               	movwf	putsUSART@data+1,c
  2503  000982  0E0A               	movlw	10
  2504  000984  6E02               	movwf	putsUSART@data,c
  2505  000986  EC02  F009         	call	_putsUSART	;wreg free
  2506  00098A                     i2l1545:
  2507                           
  2508                           ;main.c: 138: }
  2509                           ;main.c: 139: cleanMessageBuffer();
  2510  00098A  ECC7  F009         	call	_cleanMessageBuffer	;wreg free
  2511                           
  2512                           ;main.c: 140: break;
  2513  00098E  D053               	goto	i2l97
  2514  000990                     i2l1547:
  2515                           
  2516                           ;main.c: 142: if(DutyCycle > 0 && DutyCycle <= 1023)
  2517  000990  504A               	movf	_DutyCycle+1,w,c
  2518  000992  1049               	iorwf	_DutyCycle,w,c
  2519  000994  B4D8               	btfsc	status,2,c
  2520  000996  D02A               	goto	i2l1561
  2521  000998  0E00               	movlw	0
  2522  00099A  5C49               	subwf	_DutyCycle,w,c
  2523  00099C  0E04               	movlw	4
  2524  00099E  584A               	subwfb	_DutyCycle+1,w,c
  2525  0009A0  B0D8               	btfsc	status,0,c
  2526  0009A2  D024               	goto	i2l1561
  2527                           
  2528                           ;main.c: 143: {
  2529                           ;main.c: 144: DutyCycle--;
  2530  0009A4  0649               	decf	_DutyCycle,f,c
  2531  0009A6  A0D8               	btfss	status,0,c
  2532  0009A8  064A               	decf	_DutyCycle+1,f,c
  2533                           
  2534                           ;main.c: 145: putsUSART("Modificado el SetPoint a: ");
  2535  0009AA  0E08               	movlw	high STR_2
  2536  0009AC  6E03               	movwf	putsUSART@data+1,c
  2537  0009AE  0E05               	movlw	low STR_2
  2538  0009B0  6E02               	movwf	putsUSART@data,c
  2539  0009B2  EC02  F009         	call	_putsUSART	;wreg free
  2540                           
  2541                           ;main.c: 146: itoa(DC_str, DutyCycle, 10);
  2542  0009B6  0E00               	movlw	high _DC_str
  2543  0009B8  6E12               	movwf	itoa@buf+1,c
  2544  0009BA  0E44               	movlw	low _DC_str
  2545  0009BC  6E11               	movwf	itoa@buf,c
  2546  0009BE  C049  F013         	movff	_DutyCycle,itoa@val
  2547  0009C2  C04A  F014         	movff	_DutyCycle+1,itoa@val+1
  2548  0009C6  0E00               	movlw	0
  2549  0009C8  6E16               	movwf	itoa@base+1,c
  2550  0009CA  0E0A               	movlw	10
  2551  0009CC  6E15               	movwf	itoa@base,c
  2552  0009CE  EC30  F009         	call	_itoa	;wreg free
  2553                           
  2554                           ;main.c: 147: putsUSART(DC_str);
  2555  0009D2  0E00               	movlw	high _DC_str
  2556  0009D4  6E03               	movwf	putsUSART@data+1,c
  2557  0009D6  0E44               	movlw	low _DC_str
  2558  0009D8  6E02               	movwf	putsUSART@data,c
  2559  0009DA  EC02  F009         	call	_putsUSART	;wreg free
  2560                           
  2561                           ;main.c: 148: putsUSART('\n');
  2562  0009DE  0E00               	movlw	0
  2563  0009E0  6E03               	movwf	putsUSART@data+1,c
  2564  0009E2  0E0A               	movlw	10
  2565  0009E4  6E02               	movwf	putsUSART@data,c
  2566  0009E6  EC02  F009         	call	_putsUSART	;wreg free
  2567                           
  2568                           ;main.c: 149: }
  2569  0009EA  D00C               	goto	i2l1563
  2570  0009EC                     i2l1561:
  2571                           
  2572                           ;main.c: 150: else
  2573                           ;main.c: 151: {
  2574                           ;main.c: 152: putsUSART("Error maquinola");
  2575  0009EC  0E08               	movlw	high STR_3
  2576  0009EE  6E03               	movwf	putsUSART@data+1,c
  2577  0009F0  0E20               	movlw	low STR_3
  2578  0009F2  6E02               	movwf	putsUSART@data,c
  2579  0009F4  EC02  F009         	call	_putsUSART	;wreg free
  2580                           
  2581                           ;main.c: 153: putsUSART('\n');
  2582  0009F8  0E00               	movlw	0
  2583  0009FA  6E03               	movwf	putsUSART@data+1,c
  2584  0009FC  0E0A               	movlw	10
  2585  0009FE  6E02               	movwf	putsUSART@data,c
  2586  000A00  EC02  F009         	call	_putsUSART	;wreg free
  2587  000A04                     i2l1563:
  2588                           
  2589                           ;main.c: 154: }
  2590                           ;main.c: 155: cleanMessageBuffer();
  2591  000A04  ECC7  F009         	call	_cleanMessageBuffer	;wreg free
  2592                           
  2593                           ;main.c: 156: break;
  2594  000A08  D016               	goto	i2l97
  2595  000A0A                     i2l1565:
  2596                           
  2597                           ;main.c: 158: i++;
  2598  000A0A  4A3B               	infsnz	_i,f,c
  2599  000A0C  2A3C               	incf	_i+1,f,c
  2600                           
  2601                           ;main.c: 160: }
  2602  000A0E  D013               	goto	i2l97
  2603  000A10                     i2l1567:
  2604  000A10  0101               	movlb	1	; () banked
  2605  000A12  0E00               	movlw	low _MessageBuffer
  2606  000A14  243B               	addwf	_i,w,c
  2607  000A16  6ED9               	movwf	fsr2l,c
  2608  000A18  0101               	movlb	1	; () banked
  2609  000A1A  0E01               	movlw	high _MessageBuffer
  2610  000A1C  203C               	addwfc	_i+1,w,c
  2611  000A1E  6EDA               	movwf	fsr2h,c
  2612  000A20  50DF               	movf	indf2,w,c
  2613                           
  2614                           ; Switch size 1, requested type "space"
  2615                           ; Number of cases is 3, Range of values is 13 to 45
  2616                           ; switch strategies available:
  2617                           ; Name         Instructions Cycles
  2618                           ; simple_byte           10     6 (average)
  2619                           ;	Chosen strategy is simple_byte
  2620  000A22  0A0D               	xorlw	13	; case 13
  2621  000A24  B4D8               	btfsc	status,2,c
  2622  000A26  D736               	goto	i2l1517
  2623  000A28  0A26               	xorlw	38	; case 43
  2624  000A2A  B4D8               	btfsc	status,2,c
  2625  000A2C  D779               	goto	i2l1531
  2626  000A2E  0A06               	xorlw	6	; case 45
  2627  000A30  B4D8               	btfsc	status,2,c
  2628  000A32  D7AE               	goto	i2l1547
  2629  000A34  D7EA               	goto	i2l1565
  2630  000A36                     i2l97:
  2631                           
  2632                           ;main.c: 161: PIR1bits.RCIF = 0;
  2633  000A36  9A9E               	bcf	3998,5,c	;volatile
  2634                           
  2635                           ;main.c: 162: }
  2636  000A38  D00A               	goto	i2l106
  2637  000A3A                     i2l1569:
  2638                           
  2639                           ;main.c: 163: else
  2640                           ;main.c: 164: {
  2641                           ;main.c: 165: putsUSART(MessageBuffer);
  2642  000A3A  0101               	movlb	1	; () banked
  2643  000A3C  0E01               	movlw	high _MessageBuffer
  2644  000A3E  6E03               	movwf	putsUSART@data+1,c
  2645  000A40  0101               	movlb	1	; () banked
  2646  000A42  0E00               	movlw	low _MessageBuffer
  2647  000A44  6E02               	movwf	putsUSART@data,c
  2648  000A46  EC02  F009         	call	_putsUSART	;wreg free
  2649                           
  2650                           ;main.c: 166: cleanMessageBuffer();
  2651  000A4A  ECC7  F009         	call	_cleanMessageBuffer	;wreg free
  2652  000A4E                     i2l106:
  2653  000A4E  C026  FFF5         	movff	??_ISR+13,tablat
  2654  000A52  C025  FFF8         	movff	??_ISR+12,tblptru
  2655  000A56  C024  FFF7         	movff	??_ISR+11,tblptrh
  2656  000A5A  C023  FFF6         	movff	??_ISR+10,tblptrl
  2657  000A5E  C022  FFF4         	movff	??_ISR+9,prodh
  2658  000A62  C021  FFF3         	movff	??_ISR+8,prodl
  2659  000A66  C020  FFDA         	movff	??_ISR+7,fsr2h
  2660  000A6A  C01F  FFD9         	movff	??_ISR+6,fsr2l
  2661  000A6E  C01E  FFE2         	movff	??_ISR+5,fsr1h
  2662  000A72  C01D  FFE1         	movff	??_ISR+4,fsr1l
  2663  000A76  C01C  FFEA         	movff	??_ISR+3,fsr0h
  2664  000A7A  C01B  FFE9         	movff	??_ISR+2,fsr0l
  2665  000A7E  C01A  FFFB         	movff	??_ISR+1,pclatu
  2666  000A82  C019  FFFA         	movff	??_ISR,pclath
  2667  000A86  0011               	retfie		f
  2668  000A88                     __end_of_ISR:
  2669                           	opt stack 0
  2670                           pclatu	equ	0xFFB
  2671                           pclath	equ	0xFFA
  2672                           tblptru	equ	0xFF8
  2673                           tblptrh	equ	0xFF7
  2674                           tblptrl	equ	0xFF6
  2675                           tablat	equ	0xFF5
  2676                           prodh	equ	0xFF4
  2677                           prodl	equ	0xFF3
  2678                           intcon	equ	0xFF2
  2679                           postinc0	equ	0xFEE
  2680                           fsr0h	equ	0xFEA
  2681                           fsr0l	equ	0xFE9
  2682                           wreg	equ	0xFE8
  2683                           fsr1h	equ	0xFE2
  2684                           fsr1l	equ	0xFE1
  2685                           indf2	equ	0xFDF
  2686                           fsr2h	equ	0xFDA
  2687                           fsr2l	equ	0xFD9
  2688                           status	equ	0xFD8
  2689                           
  2690 ;; *************** function _strncpy *****************
  2691 ;; Defined at:
  2692 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\strncpy.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;  to              2    0[COMRAM] PTR unsigned char 
  2695 ;;		 -> DC_str(5), 
  2696 ;;  from            2    2[COMRAM] PTR const unsigned char 
  2697 ;;		 -> MessageBuffer(200), 
  2698 ;;  size            2    4[COMRAM] unsigned int 
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;  cp              2    6[COMRAM] PTR unsigned char 
  2701 ;;		 -> DC_str(5), 
  2702 ;; Return value:  Size  Location     Type
  2703 ;;                  2    0[COMRAM] PTR unsigned char 
  2704 ;; Registers used:
  2705 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2706 ;; Tracked objects:
  2707 ;;		On entry : 0/0
  2708 ;;		On exit  : 0/0
  2709 ;;		Unchanged: 0/0
  2710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2711 ;;      Params:         6       0       0       0       0       0       0       0       0
  2712 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2713 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2714 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2715 ;;Total ram usage:        8 bytes
  2716 ;; Hardware stack levels used:    1
  2717 ;; This function calls:
  2718 ;;		Nothing
  2719 ;; This function is called by:
  2720 ;;		_ISR
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text12
  2725  0011A6                     __ptext12:
  2726                           	opt stack 0
  2727  0011A6                     _strncpy:
  2728                           	opt stack 25
  2729                           
  2730                           ;incstack = 0
  2731  0011A6  C002  F008         	movff	strncpy@to+1,strncpy@cp+1
  2732  0011AA  C001  F007         	movff	strncpy@to,strncpy@cp
  2733  0011AE  D014               	goto	i2l1225
  2734  0011B0                     i2l1219:
  2735  0011B0  0605               	decf	strncpy@size,f,c
  2736  0011B2  A0D8               	btfss	status,0,c
  2737  0011B4  0606               	decf	strncpy@size+1,f,c
  2738  0011B6  C003  FFD9         	movff	strncpy@from,fsr2l
  2739  0011BA  C004  FFDA         	movff	strncpy@from+1,fsr2h
  2740  0011BE  4A03               	infsnz	strncpy@from,f,c
  2741  0011C0  2A04               	incf	strncpy@from+1,f,c
  2742  0011C2  C007  FFE1         	movff	strncpy@cp,fsr1l
  2743  0011C6  C008  FFE2         	movff	strncpy@cp+1,fsr1h
  2744  0011CA  4A07               	infsnz	strncpy@cp,f,c
  2745  0011CC  2A08               	incf	strncpy@cp+1,f,c
  2746  0011CE  CFDF FFE7          	movff	indf2,indf1
  2747  0011D2  50E7               	movf	indf1,w,c
  2748  0011D4  B4D8               	btfsc	status,2,c
  2749  0011D6  D00D               	goto	i2l1231
  2750  0011D8                     i2l1225:
  2751  0011D8  5006               	movf	strncpy@size+1,w,c
  2752  0011DA  1005               	iorwf	strncpy@size,w,c
  2753  0011DC  B4D8               	btfsc	status,2,c
  2754  0011DE  D009               	goto	i2l1231
  2755  0011E0  D7E7               	goto	i2l1219
  2756  0011E2                     i2l1227:
  2757  0011E2  C007  FFD9         	movff	strncpy@cp,fsr2l
  2758  0011E6  C008  FFDA         	movff	strncpy@cp+1,fsr2h
  2759  0011EA  0E00               	movlw	0
  2760  0011EC  6EDF               	movwf	indf2,c
  2761  0011EE  4A07               	infsnz	strncpy@cp,f,c
  2762  0011F0  2A08               	incf	strncpy@cp+1,f,c
  2763  0011F2                     i2l1231:
  2764  0011F2  0605               	decf	strncpy@size,f,c
  2765  0011F4  A0D8               	btfss	status,0,c
  2766  0011F6  0606               	decf	strncpy@size+1,f,c
  2767  0011F8  2805               	incf	strncpy@size& (0+255),w,c
  2768  0011FA  B4D8               	btfsc	status,2,c
  2769  0011FC  2806               	incf	(strncpy@size+1)& (0+255),w,c
  2770  0011FE  B4D8               	btfsc	status,2,c
  2771                           
  2772                           ;	Return value of _strncpy is never used
  2773  001200  0012               	return	
  2774  001202  D7EF               	goto	i2l1227
  2775  001204                     __end_of_strncpy:
  2776                           	opt stack 0
  2777                           pclatu	equ	0xFFB
  2778                           pclath	equ	0xFFA
  2779                           tblptru	equ	0xFF8
  2780                           tblptrh	equ	0xFF7
  2781                           tblptrl	equ	0xFF6
  2782                           tablat	equ	0xFF5
  2783                           prodh	equ	0xFF4
  2784                           prodl	equ	0xFF3
  2785                           intcon	equ	0xFF2
  2786                           postinc0	equ	0xFEE
  2787                           fsr0h	equ	0xFEA
  2788                           fsr0l	equ	0xFE9
  2789                           wreg	equ	0xFE8
  2790                           indf1	equ	0xFE7
  2791                           fsr1h	equ	0xFE2
  2792                           fsr1l	equ	0xFE1
  2793                           indf2	equ	0xFDF
  2794                           fsr2h	equ	0xFDA
  2795                           fsr2l	equ	0xFD9
  2796                           status	equ	0xFD8
  2797                           
  2798 ;; *************** function _putsUSART *****************
  2799 ;; Defined at:
  2800 ;;		line 14 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uputs.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;  data            2    1[COMRAM] PTR unsigned char 
  2803 ;;		 -> STR_7(16), STR_6(27), STR_5(16), STR_4(27), 
  2804 ;;		 -> STR_3(16), RAM(2047), STR_2(27), DC_str(5), 
  2805 ;;		 -> MessageBuffer(200), 
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;		None
  2808 ;; Return value:  Size  Location     Type
  2809 ;;		None               void
  2810 ;; Registers used:
  2811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 0/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2817 ;;      Params:         2       0       0       0       0       0       0       0       0
  2818 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2819 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2820 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2821 ;;Total ram usage:        4 bytes
  2822 ;; Hardware stack levels used:    1
  2823 ;; Hardware stack levels required when called:    1
  2824 ;; This function calls:
  2825 ;;		_WriteUSART
  2826 ;; This function is called by:
  2827 ;;		_ISR
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           	psect	text13
  2832  001204                     __ptext13:
  2833                           	opt stack 0
  2834  001204                     _putsUSART:
  2835                           	opt stack 24
  2836  001204                     i2l257:
  2837  001204  A2AC               	btfss	4012,1,c	;volatile
  2838  001206  D7FE               	goto	i2l257
  2839  001208  C002  FFF6         	movff	putsUSART@data,tblptrl
  2840  00120C  C003  FFF7         	movff	putsUSART@data+1,tblptrh
  2841  001210  6AF8               	clrf	tblptru,c
  2842  001212  0E07               	movlw	(high __ramtop+-1)
  2843  001214  64F7               	cpfsgt	tblptrh,c
  2844  001216  D003               	bra	i2u51_47
  2845  001218  0008               	tblrd		*
  2846  00121A  50F5               	movf	tablat,w,c
  2847  00121C  D005               	bra	i2u51_40
  2848  00121E                     i2u51_47:
  2849  00121E  CFF6 FFE1          	movff	tblptrl,fsr1l
  2850  001222  CFF7 FFE2          	movff	tblptrh,fsr1h
  2851  001226  50E7               	movf	indf1,w,c
  2852  001228                     i2u51_40:
  2853  001228  EC2A  F00A         	call	_WriteUSART
  2854  00122C  5002               	movf	putsUSART@data,w,c
  2855  00122E  6E04               	movwf	??_putsUSART& (0+255),c
  2856  001230  5003               	movf	putsUSART@data+1,w,c
  2857  001232  6E05               	movwf	(??_putsUSART+1)& (0+255),c
  2858  001234  4A02               	infsnz	putsUSART@data,f,c
  2859  001236  2A03               	incf	putsUSART@data+1,f,c
  2860  001238  C004  FFF6         	movff	??_putsUSART,tblptrl
  2861  00123C  C005  FFF7         	movff	??_putsUSART+1,tblptrh
  2862  001240  6AF8               	clrf	tblptru,c
  2863  001242  0E07               	movlw	(high __ramtop+-1)
  2864  001244  64F7               	cpfsgt	tblptrh,c
  2865  001246  D003               	bra	i2u52_47
  2866  001248  0008               	tblrd		*
  2867  00124A  50F5               	movf	tablat,w,c
  2868  00124C  D005               	bra	i2u52_40
  2869  00124E                     i2u52_47:
  2870  00124E  CFF6 FFE1          	movff	tblptrl,fsr1l
  2871  001252  CFF7 FFE2          	movff	tblptrh,fsr1h
  2872  001256  50E7               	movf	indf1,w,c
  2873  001258                     i2u52_40:
  2874  001258  0900               	iorlw	0
  2875  00125A  B4D8               	btfsc	status,2,c
  2876  00125C  0012               	return	
  2877  00125E  D7D2               	goto	i2l257
  2878  001260                     __end_of_putsUSART:
  2879                           	opt stack 0
  2880                           pclatu	equ	0xFFB
  2881                           pclath	equ	0xFFA
  2882                           tblptru	equ	0xFF8
  2883                           tblptrh	equ	0xFF7
  2884                           tblptrl	equ	0xFF6
  2885                           tablat	equ	0xFF5
  2886                           prodh	equ	0xFF4
  2887                           prodl	equ	0xFF3
  2888                           intcon	equ	0xFF2
  2889                           postinc0	equ	0xFEE
  2890                           fsr0h	equ	0xFEA
  2891                           fsr0l	equ	0xFE9
  2892                           wreg	equ	0xFE8
  2893                           indf1	equ	0xFE7
  2894                           fsr1h	equ	0xFE2
  2895                           fsr1l	equ	0xFE1
  2896                           indf2	equ	0xFDF
  2897                           fsr2h	equ	0xFDA
  2898                           fsr2l	equ	0xFD9
  2899                           status	equ	0xFD8
  2900                           
  2901 ;; *************** function _WriteUSART *****************
  2902 ;; Defined at:
  2903 ;;		line 13 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;  data            1    wreg     unsigned char 
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;  data            1    0[COMRAM] unsigned char 
  2908 ;; Return value:  Size  Location     Type
  2909 ;;		None               void
  2910 ;; Registers used:
  2911 ;;		wreg
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2917 ;;      Params:         0       0       0       0       0       0       0       0       0
  2918 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2919 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2920 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2921 ;;Total ram usage:        1 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; This function calls:
  2924 ;;		Nothing
  2925 ;; This function is called by:
  2926 ;;		_putsUSART
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           	psect	text14
  2931  001454                     __ptext14:
  2932                           	opt stack 0
  2933  001454                     _WriteUSART:
  2934                           	opt stack 24
  2935                           
  2936                           ;incstack = 0
  2937                           ;WriteUSART@data stored from wreg
  2938  001454  6E01               	movwf	WriteUSART@data,c
  2939  001456  ACAC               	btfss	4012,6,c	;volatile
  2940  001458  D003               	goto	i2l1005
  2941  00145A  90AC               	bcf	4012,0,c	;volatile
  2942  00145C  B23F               	btfsc	_USART_Status,1,c
  2943  00145E  80AC               	bsf	4012,0,c	;volatile
  2944  001460                     i2l1005:
  2945  001460  C001  FFAD         	movff	WriteUSART@data,4013	;volatile
  2946  001464  0012               	return	
  2947  001466                     __end_of_WriteUSART:
  2948                           	opt stack 0
  2949                           pclatu	equ	0xFFB
  2950                           pclath	equ	0xFFA
  2951                           tblptru	equ	0xFF8
  2952                           tblptrh	equ	0xFF7
  2953                           tblptrl	equ	0xFF6
  2954                           tablat	equ	0xFF5
  2955                           prodh	equ	0xFF4
  2956                           prodl	equ	0xFF3
  2957                           intcon	equ	0xFF2
  2958                           postinc0	equ	0xFEE
  2959                           fsr0h	equ	0xFEA
  2960                           fsr0l	equ	0xFE9
  2961                           wreg	equ	0xFE8
  2962                           indf1	equ	0xFE7
  2963                           fsr1h	equ	0xFE2
  2964                           fsr1l	equ	0xFE1
  2965                           indf2	equ	0xFDF
  2966                           fsr2h	equ	0xFDA
  2967                           fsr2l	equ	0xFD9
  2968                           status	equ	0xFD8
  2969                           
  2970 ;; *************** function _itoa *****************
  2971 ;; Defined at:
  2972 ;;		line 4 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\itoa.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;  buf             2   16[COMRAM] PTR unsigned char 
  2975 ;;		 -> DC_str(5), 
  2976 ;;  val             2   18[COMRAM] int 
  2977 ;;  base            2   20[COMRAM] int 
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;  cp              2   22[COMRAM] PTR unsigned char 
  2980 ;;		 -> DC_str(5), 
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  2   16[COMRAM] PTR unsigned char 
  2983 ;; Registers used:
  2984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2990 ;;      Params:         6       0       0       0       0       0       0       0       0
  2991 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2993 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2994 ;;Total ram usage:        8 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    2
  2997 ;; This function calls:
  2998 ;;		_utoa
  2999 ;; This function is called by:
  3000 ;;		_ISR
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           	psect	text15
  3005  001260                     __ptext15:
  3006                           	opt stack 0
  3007  001260                     _itoa:
  3008                           	opt stack 23
  3009                           
  3010                           ;incstack = 0
  3011  001260  C012  F018         	movff	itoa@buf+1,itoa@cp+1
  3012  001264  C011  F017         	movff	itoa@buf,itoa@cp
  3013  001268  5014               	movf	itoa@val+1,w,c
  3014  00126A  0A80               	xorlw	128
  3015  00126C  6EF3               	movwf	prodl,c
  3016  00126E  0E80               	movlw	128
  3017  001270  5CF3               	subwf	prodl,w,c
  3018  001272  0E00               	movlw	0
  3019  001274  B4D8               	btfsc	status,2,c
  3020  001276  5C13               	subwf	itoa@val,w,c
  3021  001278  B0D8               	btfsc	status,0,c
  3022  00127A  D00C               	goto	i2l1285
  3023  00127C  C011  FFD9         	movff	itoa@buf,fsr2l
  3024  001280  C012  FFDA         	movff	itoa@buf+1,fsr2h
  3025  001284  0E2D               	movlw	45
  3026  001286  6EDF               	movwf	indf2,c
  3027  001288  4A11               	infsnz	itoa@buf,f,c
  3028  00128A  2A12               	incf	itoa@buf+1,f,c
  3029  00128C  6C13               	negf	itoa@val,c
  3030  00128E  1E14               	comf	itoa@val+1,f,c
  3031  001290  B0D8               	btfsc	status,0,c
  3032  001292  2A14               	incf	itoa@val+1,f,c
  3033  001294                     i2l1285:
  3034  001294  C012  F009         	movff	itoa@buf+1,utoa@buf+1
  3035  001298  C011  F008         	movff	itoa@buf,utoa@buf
  3036  00129C  C013  F00A         	movff	itoa@val,utoa@val
  3037  0012A0  C014  F00B         	movff	itoa@val+1,utoa@val+1
  3038  0012A4  C015  F00C         	movff	itoa@base,utoa@base
  3039  0012A8  C016  F00D         	movff	itoa@base+1,utoa@base+1
  3040  0012AC  EC19  F007         	call	_utoa	;wreg free
  3041                           
  3042                           ;	Return value of _itoa is never used
  3043  0012B0  0012               	return	
  3044  0012B2                     __end_of_itoa:
  3045                           	opt stack 0
  3046                           pclatu	equ	0xFFB
  3047                           pclath	equ	0xFFA
  3048                           tblptru	equ	0xFF8
  3049                           tblptrh	equ	0xFF7
  3050                           tblptrl	equ	0xFF6
  3051                           tablat	equ	0xFF5
  3052                           prodh	equ	0xFF4
  3053                           prodl	equ	0xFF3
  3054                           intcon	equ	0xFF2
  3055                           postinc0	equ	0xFEE
  3056                           fsr0h	equ	0xFEA
  3057                           fsr0l	equ	0xFE9
  3058                           wreg	equ	0xFE8
  3059                           indf1	equ	0xFE7
  3060                           fsr1h	equ	0xFE2
  3061                           fsr1l	equ	0xFE1
  3062                           indf2	equ	0xFDF
  3063                           fsr2h	equ	0xFDA
  3064                           fsr2l	equ	0xFD9
  3065                           status	equ	0xFD8
  3066                           
  3067 ;; *************** function _utoa *****************
  3068 ;; Defined at:
  3069 ;;		line 17 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\itoa.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;  buf             2    7[COMRAM] PTR unsigned char 
  3072 ;;		 -> DC_str(5), 
  3073 ;;  val             2    9[COMRAM] unsigned int 
  3074 ;;  base            2   11[COMRAM] int 
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;  v               2   13[COMRAM] unsigned int 
  3077 ;;  c               1   15[COMRAM] unsigned char 
  3078 ;; Return value:  Size  Location     Type
  3079 ;;                  2    7[COMRAM] PTR unsigned char 
  3080 ;; Registers used:
  3081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3082 ;; Tracked objects:
  3083 ;;		On entry : 0/0
  3084 ;;		On exit  : 0/0
  3085 ;;		Unchanged: 0/0
  3086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3087 ;;      Params:         6       0       0       0       0       0       0       0       0
  3088 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3089 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3090 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3091 ;;Total ram usage:        9 bytes
  3092 ;; Hardware stack levels used:    1
  3093 ;; Hardware stack levels required when called:    1
  3094 ;; This function calls:
  3095 ;;		___lwmod
  3096 ;;		i2___lwdiv
  3097 ;; This function is called by:
  3098 ;;		_itoa
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           	psect	text16
  3103  000E32                     __ptext16:
  3104                           	opt stack 0
  3105  000E32                     _utoa:
  3106                           	opt stack 23
  3107                           
  3108                           ;incstack = 0
  3109  000E32  C00A  F00E         	movff	utoa@val,utoa@v
  3110  000E36  C00B  F00F         	movff	utoa@val+1,utoa@v+1
  3111  000E3A                     i2l1027:
  3112  000E3A  C00E  F001         	movff	utoa@v,i2___lwdiv@dividend
  3113  000E3E  C00F  F002         	movff	utoa@v+1,i2___lwdiv@dividend+1
  3114  000E42  C00C  F003         	movff	utoa@base,i2___lwdiv@divisor
  3115  000E46  C00D  F004         	movff	utoa@base+1,i2___lwdiv@divisor+1
  3116  000E4A  EC59  F009         	call	i2___lwdiv	;wreg free
  3117  000E4E  C001  F00E         	movff	?i2___lwdiv,utoa@v
  3118  000E52  C002  F00F         	movff	?i2___lwdiv+1,utoa@v+1
  3119  000E56  4A08               	infsnz	utoa@buf,f,c
  3120  000E58  2A09               	incf	utoa@buf+1,f,c
  3121  000E5A  500F               	movf	utoa@v+1,w,c
  3122  000E5C  100E               	iorwf	utoa@v,w,c
  3123  000E5E  A4D8               	btfss	status,2,c
  3124  000E60  D7EC               	goto	i2l1027
  3125  000E62  C008  FFD9         	movff	utoa@buf,fsr2l
  3126  000E66  C009  FFDA         	movff	utoa@buf+1,fsr2h
  3127  000E6A  0E00               	movlw	0
  3128  000E6C  6EDF               	movwf	indf2,c
  3129  000E6E  0608               	decf	utoa@buf,f,c
  3130  000E70  A0D8               	btfss	status,0,c
  3131  000E72  0609               	decf	utoa@buf+1,f,c
  3132  000E74                     i2l1037:
  3133  000E74  C00A  F001         	movff	utoa@val,___lwmod@dividend
  3134  000E78  C00B  F002         	movff	utoa@val+1,___lwmod@dividend+1
  3135  000E7C  C00C  F003         	movff	utoa@base,___lwmod@divisor
  3136  000E80  C00D  F004         	movff	utoa@base+1,___lwmod@divisor+1
  3137  000E84  ECA6  F009         	call	___lwmod	;wreg free
  3138  000E88  5001               	movf	?___lwmod,w,c
  3139  000E8A  6E10               	movwf	utoa@c,c
  3140  000E8C  C00A  F001         	movff	utoa@val,i2___lwdiv@dividend
  3141  000E90  C00B  F002         	movff	utoa@val+1,i2___lwdiv@dividend+1
  3142  000E94  C00C  F003         	movff	utoa@base,i2___lwdiv@divisor
  3143  000E98  C00D  F004         	movff	utoa@base+1,i2___lwdiv@divisor+1
  3144  000E9C  EC59  F009         	call	i2___lwdiv	;wreg free
  3145  000EA0  C001  F00A         	movff	?i2___lwdiv,utoa@val
  3146  000EA4  C002  F00B         	movff	?i2___lwdiv+1,utoa@val+1
  3147  000EA8  0E09               	movlw	9
  3148  000EAA  6410               	cpfsgt	utoa@c,c
  3149  000EAC  D002               	goto	i2l740
  3150  000EAE  0E07               	movlw	7
  3151  000EB0  2610               	addwf	utoa@c,f,c
  3152  000EB2                     i2l740:
  3153  000EB2  0E30               	movlw	48
  3154  000EB4  2610               	addwf	utoa@c,f,c
  3155  000EB6  C008  FFD9         	movff	utoa@buf,fsr2l
  3156  000EBA  C009  FFDA         	movff	utoa@buf+1,fsr2h
  3157  000EBE  C010  FFDF         	movff	utoa@c,indf2
  3158  000EC2  0608               	decf	utoa@buf,f,c
  3159  000EC4  A0D8               	btfss	status,0,c
  3160  000EC6  0609               	decf	utoa@buf+1,f,c
  3161  000EC8  500B               	movf	utoa@val+1,w,c
  3162  000ECA  100A               	iorwf	utoa@val,w,c
  3163  000ECC  A4D8               	btfss	status,2,c
  3164  000ECE  D7D2               	goto	i2l1037
  3165                           
  3166                           ;	Return value of _utoa is never used
  3167  000ED0  4A08               	infsnz	utoa@buf,f,c
  3168  000ED2  2A09               	incf	utoa@buf+1,f,c
  3169  000ED4  0012               	return	
  3170  000ED6                     __end_of_utoa:
  3171                           	opt stack 0
  3172                           pclatu	equ	0xFFB
  3173                           pclath	equ	0xFFA
  3174                           tblptru	equ	0xFF8
  3175                           tblptrh	equ	0xFF7
  3176                           tblptrl	equ	0xFF6
  3177                           tablat	equ	0xFF5
  3178                           prodh	equ	0xFF4
  3179                           prodl	equ	0xFF3
  3180                           intcon	equ	0xFF2
  3181                           postinc0	equ	0xFEE
  3182                           fsr0h	equ	0xFEA
  3183                           fsr0l	equ	0xFE9
  3184                           wreg	equ	0xFE8
  3185                           indf1	equ	0xFE7
  3186                           fsr1h	equ	0xFE2
  3187                           fsr1l	equ	0xFE1
  3188                           indf2	equ	0xFDF
  3189                           fsr2h	equ	0xFDA
  3190                           fsr2l	equ	0xFD9
  3191                           status	equ	0xFD8
  3192                           
  3193 ;; *************** function i2___lwdiv *****************
  3194 ;; Defined at:
  3195 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  3196 ;; Parameters:    Size  Location     Type
  3197 ;;  dividend        2    0[COMRAM] unsigned int 
  3198 ;;  divisor         2    2[COMRAM] unsigned int 
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  3201 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  2    0[COMRAM] unsigned int 
  3204 ;; Registers used:
  3205 ;;		wreg, status,2, status,0
  3206 ;; Tracked objects:
  3207 ;;		On entry : 0/0
  3208 ;;		On exit  : 0/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3211 ;;      Params:         4       0       0       0       0       0       0       0       0
  3212 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3213 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3214 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3215 ;;Total ram usage:        7 bytes
  3216 ;; Hardware stack levels used:    1
  3217 ;; This function calls:
  3218 ;;		Nothing
  3219 ;; This function is called by:
  3220 ;;		_utoa
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	text17
  3225  0012B2                     __ptext17:
  3226                           	opt stack 0
  3227  0012B2                     i2___lwdiv:
  3228                           	opt stack 23
  3229                           
  3230                           ;incstack = 0
  3231  0012B2  0E00               	movlw	0
  3232  0012B4  6E06               	movwf	i2___lwdiv@quotient+1,c
  3233  0012B6  0E00               	movlw	0
  3234  0012B8  6E05               	movwf	i2___lwdiv@quotient,c
  3235  0012BA  5004               	movf	i2___lwdiv@divisor+1,w,c
  3236  0012BC  1003               	iorwf	i2___lwdiv@divisor,w,c
  3237  0012BE  B4D8               	btfsc	status,2,c
  3238  0012C0  D01C               	goto	i2l834
  3239  0012C2  0E01               	movlw	1
  3240  0012C4  6E07               	movwf	i2___lwdiv@counter,c
  3241  0012C6  D004               	goto	i2l969
  3242  0012C8                     i2l967:
  3243  0012C8  90D8               	bcf	status,0,c
  3244  0012CA  3603               	rlcf	i2___lwdiv@divisor,f,c
  3245  0012CC  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  3246  0012CE  2A07               	incf	i2___lwdiv@counter,f,c
  3247  0012D0                     i2l969:
  3248  0012D0  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  3249  0012D2  D7FA               	goto	i2l967
  3250  0012D4                     i2l971:
  3251  0012D4  90D8               	bcf	status,0,c
  3252  0012D6  3605               	rlcf	i2___lwdiv@quotient,f,c
  3253  0012D8  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  3254  0012DA  5003               	movf	i2___lwdiv@divisor,w,c
  3255  0012DC  5C01               	subwf	i2___lwdiv@dividend,w,c
  3256  0012DE  5004               	movf	i2___lwdiv@divisor+1,w,c
  3257  0012E0  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  3258  0012E2  A0D8               	btfss	status,0,c
  3259  0012E4  D005               	goto	i2l979
  3260  0012E6  5003               	movf	i2___lwdiv@divisor,w,c
  3261  0012E8  5E01               	subwf	i2___lwdiv@dividend,f,c
  3262  0012EA  5004               	movf	i2___lwdiv@divisor+1,w,c
  3263  0012EC  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  3264  0012EE  8005               	bsf	i2___lwdiv@quotient,0,c
  3265  0012F0                     i2l979:
  3266  0012F0  90D8               	bcf	status,0,c
  3267  0012F2  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  3268  0012F4  3203               	rrcf	i2___lwdiv@divisor,f,c
  3269  0012F6  2E07               	decfsz	i2___lwdiv@counter,f,c
  3270  0012F8  D7ED               	goto	i2l971
  3271  0012FA                     i2l834:
  3272  0012FA  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  3273  0012FE  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  3274  001302  0012               	return	
  3275  001304                     __end_ofi2___lwdiv:
  3276                           	opt stack 0
  3277                           pclatu	equ	0xFFB
  3278                           pclath	equ	0xFFA
  3279                           tblptru	equ	0xFF8
  3280                           tblptrh	equ	0xFF7
  3281                           tblptrl	equ	0xFF6
  3282                           tablat	equ	0xFF5
  3283                           prodh	equ	0xFF4
  3284                           prodl	equ	0xFF3
  3285                           intcon	equ	0xFF2
  3286                           postinc0	equ	0xFEE
  3287                           fsr0h	equ	0xFEA
  3288                           fsr0l	equ	0xFE9
  3289                           wreg	equ	0xFE8
  3290                           indf1	equ	0xFE7
  3291                           fsr1h	equ	0xFE2
  3292                           fsr1l	equ	0xFE1
  3293                           indf2	equ	0xFDF
  3294                           fsr2h	equ	0xFDA
  3295                           fsr2l	equ	0xFD9
  3296                           status	equ	0xFD8
  3297                           
  3298 ;; *************** function ___lwmod *****************
  3299 ;; Defined at:
  3300 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\lwmod.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;  dividend        2    0[COMRAM] unsigned int 
  3303 ;;  divisor         2    2[COMRAM] unsigned int 
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;  counter         1    4[COMRAM] unsigned char 
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  2    0[COMRAM] unsigned int 
  3308 ;; Registers used:
  3309 ;;		wreg, status,2, status,0
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3315 ;;      Params:         4       0       0       0       0       0       0       0       0
  3316 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3317 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3318 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3319 ;;Total ram usage:        5 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; This function calls:
  3322 ;;		Nothing
  3323 ;; This function is called by:
  3324 ;;		_utoa
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           	psect	text18
  3329  00134C                     __ptext18:
  3330                           	opt stack 0
  3331  00134C                     ___lwmod:
  3332                           	opt stack 23
  3333                           
  3334                           ;incstack = 0
  3335  00134C  5004               	movf	___lwmod@divisor+1,w,c
  3336  00134E  1003               	iorwf	___lwmod@divisor,w,c
  3337  001350  B4D8               	btfsc	status,2,c
  3338  001352  D018               	goto	i2l844
  3339  001354  0E01               	movlw	1
  3340  001356  6E05               	movwf	___lwmod@counter,c
  3341  001358  D004               	goto	i2l951
  3342  00135A                     i2l949:
  3343  00135A  90D8               	bcf	status,0,c
  3344  00135C  3603               	rlcf	___lwmod@divisor,f,c
  3345  00135E  3604               	rlcf	___lwmod@divisor+1,f,c
  3346  001360  2A05               	incf	___lwmod@counter,f,c
  3347  001362                     i2l951:
  3348  001362  AE04               	btfss	___lwmod@divisor+1,7,c
  3349  001364  D7FA               	goto	i2l949
  3350  001366                     i2l953:
  3351  001366  5003               	movf	___lwmod@divisor,w,c
  3352  001368  5C01               	subwf	___lwmod@dividend,w,c
  3353  00136A  5004               	movf	___lwmod@divisor+1,w,c
  3354  00136C  5802               	subwfb	___lwmod@dividend+1,w,c
  3355  00136E  A0D8               	btfss	status,0,c
  3356  001370  D004               	goto	i2l957
  3357  001372  5003               	movf	___lwmod@divisor,w,c
  3358  001374  5E01               	subwf	___lwmod@dividend,f,c
  3359  001376  5004               	movf	___lwmod@divisor+1,w,c
  3360  001378  5A02               	subwfb	___lwmod@dividend+1,f,c
  3361  00137A                     i2l957:
  3362  00137A  90D8               	bcf	status,0,c
  3363  00137C  3204               	rrcf	___lwmod@divisor+1,f,c
  3364  00137E  3203               	rrcf	___lwmod@divisor,f,c
  3365  001380  2E05               	decfsz	___lwmod@counter,f,c
  3366  001382  D7F1               	goto	i2l953
  3367  001384                     i2l844:
  3368  001384  C001  F001         	movff	___lwmod@dividend,?___lwmod
  3369  001388  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  3370  00138C  0012               	return	
  3371  00138E                     __end_of___lwmod:
  3372                           	opt stack 0
  3373                           pclatu	equ	0xFFB
  3374                           pclath	equ	0xFFA
  3375                           tblptru	equ	0xFF8
  3376                           tblptrh	equ	0xFF7
  3377                           tblptrl	equ	0xFF6
  3378                           tablat	equ	0xFF5
  3379                           prodh	equ	0xFF4
  3380                           prodl	equ	0xFF3
  3381                           intcon	equ	0xFF2
  3382                           postinc0	equ	0xFEE
  3383                           fsr0h	equ	0xFEA
  3384                           fsr0l	equ	0xFE9
  3385                           wreg	equ	0xFE8
  3386                           indf1	equ	0xFE7
  3387                           fsr1h	equ	0xFE2
  3388                           fsr1l	equ	0xFE1
  3389                           indf2	equ	0xFDF
  3390                           fsr2h	equ	0xFDA
  3391                           fsr2l	equ	0xFD9
  3392                           status	equ	0xFD8
  3393                           
  3394 ;; *************** function _cleanMessageBuffer *****************
  3395 ;; Defined at:
  3396 ;;		line 172 in file "main.c"
  3397 ;; Parameters:    Size  Location     Type
  3398 ;;		None
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;		None
  3401 ;; Return value:  Size  Location     Type
  3402 ;;		None               void
  3403 ;; Registers used:
  3404 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3405 ;; Tracked objects:
  3406 ;;		On entry : 0/0
  3407 ;;		On exit  : 0/0
  3408 ;;		Unchanged: 0/0
  3409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3410 ;;      Params:         0       0       0       0       0       0       0       0       0
  3411 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3412 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3413 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3414 ;;Total ram usage:        0 bytes
  3415 ;; Hardware stack levels used:    1
  3416 ;; This function calls:
  3417 ;;		Nothing
  3418 ;; This function is called by:
  3419 ;;		_ISR
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text19
  3424  00138E                     __ptext19:
  3425                           	opt stack 0
  3426  00138E                     _cleanMessageBuffer:
  3427                           	opt stack 25
  3428                           
  3429                           ;main.c: 174: for(;i>0;i--){
  3430                           
  3431                           ;incstack = 0
  3432  00138E  D00D               	goto	i2l1271
  3433  001390                     i2l1267:
  3434                           
  3435                           ;main.c: 175: MessageBuffer[i] = 0x00;
  3436  001390  0101               	movlb	1	; () banked
  3437  001392  0E00               	movlw	low _MessageBuffer
  3438  001394  243B               	addwf	_i,w,c
  3439  001396  6ED9               	movwf	fsr2l,c
  3440  001398  0101               	movlb	1	; () banked
  3441  00139A  0E01               	movlw	high _MessageBuffer
  3442  00139C  203C               	addwfc	_i+1,w,c
  3443  00139E  6EDA               	movwf	fsr2h,c
  3444  0013A0  0E00               	movlw	0
  3445  0013A2  6EDF               	movwf	indf2,c
  3446                           
  3447                           ; BSR set to: 1
  3448  0013A4  063B               	decf	_i,f,c
  3449  0013A6  A0D8               	btfss	status,0,c
  3450  0013A8  063C               	decf	_i+1,f,c
  3451  0013AA                     i2l1271:
  3452  0013AA  503C               	movf	_i+1,w,c
  3453  0013AC  103B               	iorwf	_i,w,c
  3454  0013AE  A4D8               	btfss	status,2,c
  3455  0013B0  D7EF               	goto	i2l1267
  3456                           
  3457                           ;main.c: 176: }
  3458                           ;main.c: 177: i=0;
  3459  0013B2  0E00               	movlw	0
  3460  0013B4  6E3C               	movwf	_i+1,c
  3461  0013B6  0E00               	movlw	0
  3462  0013B8  6E3B               	movwf	_i,c
  3463  0013BA  0012               	return	
  3464  0013BC                     __end_of_cleanMessageBuffer:
  3465                           	opt stack 0
  3466                           pclatu	equ	0xFFB
  3467                           pclath	equ	0xFFA
  3468                           tblptru	equ	0xFF8
  3469                           tblptrh	equ	0xFF7
  3470                           tblptrl	equ	0xFF6
  3471                           tablat	equ	0xFF5
  3472                           prodh	equ	0xFF4
  3473                           prodl	equ	0xFF3
  3474                           intcon	equ	0xFF2
  3475                           postinc0	equ	0xFEE
  3476                           fsr0h	equ	0xFEA
  3477                           fsr0l	equ	0xFE9
  3478                           wreg	equ	0xFE8
  3479                           indf1	equ	0xFE7
  3480                           fsr1h	equ	0xFE2
  3481                           fsr1l	equ	0xFE1
  3482                           indf2	equ	0xFDF
  3483                           fsr2h	equ	0xFDA
  3484                           fsr2l	equ	0xFD9
  3485                           status	equ	0xFD8
  3486                           
  3487 ;; *************** function _atoi *****************
  3488 ;; Defined at:
  3489 ;;		line 5 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\atoi.c"
  3490 ;; Parameters:    Size  Location     Type
  3491 ;;  s               2    6[COMRAM] PTR const unsigned char 
  3492 ;;		 -> DC_str(5), 
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;  a               2   11[COMRAM] int 
  3495 ;;  sign            1   10[COMRAM] unsigned char 
  3496 ;; Return value:  Size  Location     Type
  3497 ;;                  2    6[COMRAM] int 
  3498 ;; Registers used:
  3499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/0
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3505 ;;      Params:         2       0       0       0       0       0       0       0       0
  3506 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3507 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3508 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3509 ;;Total ram usage:        7 bytes
  3510 ;; Hardware stack levels used:    1
  3511 ;; Hardware stack levels required when called:    1
  3512 ;; This function calls:
  3513 ;;		___wmul
  3514 ;;		_isdigit
  3515 ;; This function is called by:
  3516 ;;		_ISR
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text20
  3521  000CA6                     __ptext20:
  3522                           	opt stack 0
  3523  000CA6                     _atoi:
  3524                           	opt stack 24
  3525                           
  3526                           ;incstack = 0
  3527  000CA6  D002               	goto	i2l1487
  3528  000CA8                     i2l1485:
  3529  000CA8  4A07               	infsnz	atoi@s,f,c
  3530  000CAA  2A08               	incf	atoi@s+1,f,c
  3531  000CAC                     i2l1487:
  3532  000CAC  C007  FFD9         	movff	atoi@s,fsr2l
  3533  000CB0  C008  FFDA         	movff	atoi@s+1,fsr2h
  3534  000CB4  50DF               	movf	indf2,w,c
  3535  000CB6  0A20               	xorlw	32
  3536  000CB8  B4D8               	btfsc	status,2,c
  3537  000CBA  D7F6               	goto	i2l1485
  3538  000CBC  C007  FFD9         	movff	atoi@s,fsr2l
  3539  000CC0  C008  FFDA         	movff	atoi@s+1,fsr2h
  3540  000CC4  50DF               	movf	indf2,w,c
  3541  000CC6  0A09               	xorlw	9
  3542  000CC8  B4D8               	btfsc	status,2,c
  3543  000CCA  D7EE               	goto	i2l1485
  3544  000CCC  0E00               	movlw	0
  3545  000CCE  6E0D               	movwf	atoi@a+1,c
  3546  000CD0  0E00               	movlw	0
  3547  000CD2  6E0C               	movwf	atoi@a,c
  3548  000CD4  0E00               	movlw	0
  3549  000CD6  6E0B               	movwf	atoi@sign,c
  3550  000CD8  0E2D               	movlw	45
  3551  000CDA  C007  FFD9         	movff	atoi@s,fsr2l
  3552  000CDE  C008  FFDA         	movff	atoi@s+1,fsr2h
  3553  000CE2  62DF               	cpfseq	indf2,c
  3554  000CE4  D002               	goto	i2l1497
  3555  000CE6  2A0B               	incf	atoi@sign,f,c
  3556  000CE8  D023               	goto	L1
  3557  000CEA                     i2l1497:
  3558  000CEA  0E2B               	movlw	43
  3559  000CEC  C007  FFD9         	movff	atoi@s,fsr2l
  3560  000CF0  C008  FFDA         	movff	atoi@s+1,fsr2h
  3561  000CF4  62DF               	cpfseq	indf2,c
  3562  000CF6  D01E               	goto	i2l1505
  3563  000CF8  D01B               	goto	L1
  3564  000CFA                     i2l1501:
  3565  000CFA  C00C  F001         	movff	atoi@a,___wmul@multiplier
  3566  000CFE  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  3567  000D02  0E00               	movlw	0
  3568  000D04  6E04               	movwf	___wmul@multiplicand+1,c
  3569  000D06  0E0A               	movlw	10
  3570  000D08  6E03               	movwf	___wmul@multiplicand,c
  3571  000D0A  ECDE  F009         	call	___wmul	;wreg free
  3572  000D0E  C007  FFD9         	movff	atoi@s,fsr2l
  3573  000D12  C008  FFDA         	movff	atoi@s+1,fsr2h
  3574  000D16  50DF               	movf	indf2,w,c
  3575  000D18  6E09               	movwf	??_atoi& (0+255),c
  3576  000D1A  6A0A               	clrf	(??_atoi+1)& (0+255),c
  3577  000D1C  5001               	movf	?___wmul,w,c
  3578  000D1E  2609               	addwf	??_atoi,f,c
  3579  000D20  5002               	movf	?___wmul+1,w,c
  3580  000D22  220A               	addwfc	??_atoi+1,f,c
  3581  000D24  0ED0               	movlw	208
  3582  000D26  2409               	addwf	??_atoi,w,c
  3583  000D28  6E0C               	movwf	atoi@a,c
  3584  000D2A  0EFF               	movlw	255
  3585  000D2C  200A               	addwfc	??_atoi+1,w,c
  3586  000D2E  6E0D               	movwf	atoi@a+1,c
  3587  000D30                     L1:
  3588  000D30  4A07               	infsnz	atoi@s,f,c
  3589  000D32  2A08               	incf	atoi@s+1,f,c
  3590  000D34                     i2l1505:
  3591  000D34  C007  FFD9         	movff	atoi@s,fsr2l
  3592  000D38  C008  FFDA         	movff	atoi@s+1,fsr2h
  3593  000D3C  50DF               	movf	indf2,w,c
  3594  000D3E  EC01  F00A         	call	_isdigit
  3595  000D42  B0D8               	btfsc	status,0,c
  3596  000D44  D7DA               	goto	i2l1501
  3597  000D46  500B               	movf	atoi@sign,w,c
  3598  000D48  B4D8               	btfsc	status,2,c
  3599  000D4A  D00D               	goto	i2l470
  3600  000D4C  C00C  F009         	movff	atoi@a,??_atoi
  3601  000D50  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  3602  000D54  1E09               	comf	??_atoi,f,c
  3603  000D56  1E0A               	comf	??_atoi+1,f,c
  3604  000D58  4A09               	infsnz	??_atoi,f,c
  3605  000D5A  2A0A               	incf	??_atoi+1,f,c
  3606  000D5C  C009  F007         	movff	??_atoi,?_atoi
  3607  000D60  C00A  F008         	movff	??_atoi+1,?_atoi+1
  3608  000D64  D004               	goto	i2l471
  3609  000D66                     i2l470:
  3610  000D66  C00C  F007         	movff	atoi@a,?_atoi
  3611  000D6A  C00D  F008         	movff	atoi@a+1,?_atoi+1
  3612  000D6E                     i2l471:
  3613  000D6E  0012               	return	
  3614  000D70                     __end_of_atoi:
  3615                           	opt stack 0
  3616                           pclatu	equ	0xFFB
  3617                           pclath	equ	0xFFA
  3618                           tblptru	equ	0xFF8
  3619                           tblptrh	equ	0xFF7
  3620                           tblptrl	equ	0xFF6
  3621                           tablat	equ	0xFF5
  3622                           prodh	equ	0xFF4
  3623                           prodl	equ	0xFF3
  3624                           intcon	equ	0xFF2
  3625                           postinc0	equ	0xFEE
  3626                           fsr0h	equ	0xFEA
  3627                           fsr0l	equ	0xFE9
  3628                           wreg	equ	0xFE8
  3629                           indf1	equ	0xFE7
  3630                           fsr1h	equ	0xFE2
  3631                           fsr1l	equ	0xFE1
  3632                           indf2	equ	0xFDF
  3633                           fsr2h	equ	0xFDA
  3634                           fsr2l	equ	0xFD9
  3635                           status	equ	0xFD8
  3636                           
  3637 ;; *************** function _isdigit *****************
  3638 ;; Defined at:
  3639 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\isdigit.c"
  3640 ;; Parameters:    Size  Location     Type
  3641 ;;  c               1    wreg     unsigned char 
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;  c               1    2[COMRAM] unsigned char 
  3644 ;; Return value:  Size  Location     Type
  3645 ;;		None               void
  3646 ;; Registers used:
  3647 ;;		wreg, status,2, status,0
  3648 ;; Tracked objects:
  3649 ;;		On entry : 0/0
  3650 ;;		On exit  : 0/0
  3651 ;;		Unchanged: 0/0
  3652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3653 ;;      Params:         0       0       0       0       0       0       0       0       0
  3654 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3655 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3656 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3657 ;;Total ram usage:        3 bytes
  3658 ;; Hardware stack levels used:    1
  3659 ;; This function calls:
  3660 ;;		Nothing
  3661 ;; This function is called by:
  3662 ;;		_atoi
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           	psect	text21
  3667  001402                     __ptext21:
  3668                           	opt stack 0
  3669  001402                     _isdigit:
  3670                           	opt stack 24
  3671                           
  3672                           ;incstack = 0
  3673                           ;isdigit@c stored from wreg
  3674  001402  6E03               	movwf	isdigit@c,c
  3675  001404  0E00               	movlw	0
  3676  001406  6E02               	movwf	_isdigit$1330,c
  3677  001408  0E3A               	movlw	58
  3678  00140A  5C03               	subwf	isdigit@c,w,c
  3679  00140C  B0D8               	btfsc	status,0,c
  3680  00140E  D005               	goto	i2l1479
  3681  001410  0E2F               	movlw	47
  3682  001412  6403               	cpfsgt	isdigit@c,c
  3683  001414  D002               	goto	i2l1479
  3684  001416  0E01               	movlw	1
  3685  001418  6E02               	movwf	_isdigit$1330,c
  3686  00141A                     i2l1479:
  3687  00141A  C002  F001         	movff	_isdigit$1330,??_isdigit
  3688  00141E  3001               	rrcf	??_isdigit,w,c
  3689  001420  0012               	return	
  3690  001422                     __end_of_isdigit:
  3691                           	opt stack 0
  3692                           pclatu	equ	0xFFB
  3693                           pclath	equ	0xFFA
  3694                           tblptru	equ	0xFF8
  3695                           tblptrh	equ	0xFF7
  3696                           tblptrl	equ	0xFF6
  3697                           tablat	equ	0xFF5
  3698                           prodh	equ	0xFF4
  3699                           prodl	equ	0xFF3
  3700                           intcon	equ	0xFF2
  3701                           postinc0	equ	0xFEE
  3702                           fsr0h	equ	0xFEA
  3703                           fsr0l	equ	0xFE9
  3704                           wreg	equ	0xFE8
  3705                           indf1	equ	0xFE7
  3706                           fsr1h	equ	0xFE2
  3707                           fsr1l	equ	0xFE1
  3708                           indf2	equ	0xFDF
  3709                           fsr2h	equ	0xFDA
  3710                           fsr2l	equ	0xFD9
  3711                           status	equ	0xFD8
  3712                           
  3713 ;; *************** function ___wmul *****************
  3714 ;; Defined at:
  3715 ;;		line 15 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\Umul16.c"
  3716 ;; Parameters:    Size  Location     Type
  3717 ;;  multiplier      2    0[COMRAM] unsigned int 
  3718 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3719 ;; Auto vars:     Size  Location     Type
  3720 ;;  product         2    4[COMRAM] unsigned int 
  3721 ;; Return value:  Size  Location     Type
  3722 ;;                  2    0[COMRAM] unsigned int 
  3723 ;; Registers used:
  3724 ;;		wreg, status,2, status,0, prodl, prodh
  3725 ;; Tracked objects:
  3726 ;;		On entry : 0/0
  3727 ;;		On exit  : 0/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3730 ;;      Params:         4       0       0       0       0       0       0       0       0
  3731 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3732 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3733 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3734 ;;Total ram usage:        6 bytes
  3735 ;; Hardware stack levels used:    1
  3736 ;; This function calls:
  3737 ;;		Nothing
  3738 ;; This function is called by:
  3739 ;;		_atoi
  3740 ;; This function uses a non-reentrant model
  3741 ;;
  3742                           
  3743                           	psect	text22
  3744  0013BC                     __ptext22:
  3745                           	opt stack 0
  3746  0013BC                     ___wmul:
  3747                           	opt stack 24
  3748                           
  3749                           ;incstack = 0
  3750  0013BC  5001               	movf	___wmul@multiplier,w,c
  3751  0013BE  0203               	mulwf	___wmul@multiplicand,c
  3752  0013C0  CFF3 F005          	movff	prodl,___wmul@product
  3753  0013C4  CFF4 F006          	movff	prodh,___wmul@product+1
  3754  0013C8  5001               	movf	___wmul@multiplier,w,c
  3755  0013CA  0204               	mulwf	___wmul@multiplicand+1,c
  3756  0013CC  50F3               	movf	prodl,w,c
  3757  0013CE  2606               	addwf	___wmul@product+1,f,c
  3758  0013D0  5002               	movf	___wmul@multiplier+1,w,c
  3759  0013D2  0203               	mulwf	___wmul@multiplicand,c
  3760  0013D4  50F3               	movf	prodl,w,c
  3761  0013D6  2606               	addwf	___wmul@product+1,f,c
  3762  0013D8  C005  F001         	movff	___wmul@product,?___wmul
  3763  0013DC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3764  0013E0  0012               	return	
  3765  0013E2                     __end_of___wmul:
  3766                           	opt stack 0
  3767                           pclatu	equ	0xFFB
  3768                           pclath	equ	0xFFA
  3769                           tblptru	equ	0xFF8
  3770                           tblptrh	equ	0xFF7
  3771                           tblptrl	equ	0xFF6
  3772                           tablat	equ	0xFF5
  3773                           prodh	equ	0xFF4
  3774                           prodl	equ	0xFF3
  3775                           intcon	equ	0xFF2
  3776                           postinc0	equ	0xFEE
  3777                           fsr0h	equ	0xFEA
  3778                           fsr0l	equ	0xFE9
  3779                           wreg	equ	0xFE8
  3780                           indf1	equ	0xFE7
  3781                           fsr1h	equ	0xFE2
  3782                           fsr1l	equ	0xFE1
  3783                           indf2	equ	0xFDF
  3784                           fsr2h	equ	0xFDA
  3785                           fsr2l	equ	0xFD9
  3786                           status	equ	0xFD8
  3787                           
  3788 ;; *************** function _ReadUSART *****************
  3789 ;; Defined at:
  3790 ;;		line 15 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;		None
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;  data            1    0[COMRAM] unsigned char 
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  1    wreg      unsigned char 
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3804 ;;      Params:         0       0       0       0       0       0       0       0       0
  3805 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3806 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3807 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3808 ;;Total ram usage:        1 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; This function calls:
  3811 ;;		Nothing
  3812 ;; This function is called by:
  3813 ;;		_ISR
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           	psect	text23
  3818  001422                     __ptext23:
  3819                           	opt stack 0
  3820  001422                     _ReadUSART:
  3821                           	opt stack 25
  3822                           
  3823                           ;incstack = 0
  3824  001422  0EF2               	movlw	242
  3825  001424  163F               	andwf	_USART_Status,f,c
  3826  001426  ACAB               	btfss	4011,6,c	;volatile
  3827  001428  D003               	goto	i2l270
  3828  00142A  903F               	bcf	_USART_Status,0,c
  3829  00142C  B0AB               	btfsc	4011,0,c	;volatile
  3830  00142E  803F               	bsf	_USART_Status,0,c
  3831  001430                     i2l270:
  3832  001430  B4AB               	btfsc	4011,2,c	;volatile
  3833  001432  843F               	bsf	_USART_Status,2,c
  3834  001434  B2AB               	btfsc	4011,1,c	;volatile
  3835  001436  863F               	bsf	_USART_Status,3,c
  3836  001438  CFAE F001          	movff	4014,ReadUSART@data	;volatile
  3837  00143C  5001               	movf	ReadUSART@data,w,c
  3838  00143E  0012               	return	
  3839  001440                     __end_of_ReadUSART:
  3840                           	opt stack 0
  3841                           pclatu	equ	0xFFB
  3842                           pclath	equ	0xFFA
  3843                           tblptru	equ	0xFF8
  3844                           tblptrh	equ	0xFF7
  3845                           tblptrl	equ	0xFF6
  3846                           tablat	equ	0xFF5
  3847                           prodh	equ	0xFF4
  3848                           prodl	equ	0xFF3
  3849                           intcon	equ	0xFF2
  3850                           postinc0	equ	0xFEE
  3851                           fsr0h	equ	0xFEA
  3852                           fsr0l	equ	0xFE9
  3853                           wreg	equ	0xFE8
  3854                           indf1	equ	0xFE7
  3855                           fsr1h	equ	0xFE2
  3856                           fsr1l	equ	0xFE1
  3857                           indf2	equ	0xFDF
  3858                           fsr2h	equ	0xFDA
  3859                           fsr2l	equ	0xFD9
  3860                           status	equ	0xFD8
  3861                           pclatu	equ	0xFFB
  3862                           pclath	equ	0xFFA
  3863                           tblptru	equ	0xFF8
  3864                           tblptrh	equ	0xFF7
  3865                           tblptrl	equ	0xFF6
  3866                           tablat	equ	0xFF5
  3867                           prodh	equ	0xFF4
  3868                           prodl	equ	0xFF3
  3869                           intcon	equ	0xFF2
  3870                           postinc0	equ	0xFEE
  3871                           fsr0h	equ	0xFEA
  3872                           fsr0l	equ	0xFE9
  3873                           wreg	equ	0xFE8
  3874                           indf1	equ	0xFE7
  3875                           fsr1h	equ	0xFE2
  3876                           fsr1l	equ	0xFE1
  3877                           indf2	equ	0xFDF
  3878                           fsr2h	equ	0xFDA
  3879                           fsr2l	equ	0xFD9
  3880                           status	equ	0xFD8
  3881                           
  3882                           	psect	rparam
  3883  0000                     pclatu	equ	0xFFB
  3884                           pclath	equ	0xFFA
  3885                           tblptru	equ	0xFF8
  3886                           tblptrh	equ	0xFF7
  3887                           tblptrl	equ	0xFF6
  3888                           tablat	equ	0xFF5
  3889                           prodh	equ	0xFF4
  3890                           prodl	equ	0xFF3
  3891                           intcon	equ	0xFF2
  3892                           postinc0	equ	0xFEE
  3893                           fsr0h	equ	0xFEA
  3894                           fsr0l	equ	0xFE9
  3895                           wreg	equ	0xFE8
  3896                           indf1	equ	0xFE7
  3897                           fsr1h	equ	0xFE2
  3898                           fsr1l	equ	0xFE1
  3899                           indf2	equ	0xFDF
  3900                           fsr2h	equ	0xFDA
  3901                           fsr2l	equ	0xFD9
  3902                           status	equ	0xFD8


Data Sizes:
    Strings     56
    Constant    4
    Data        2
    BSS         650
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      74
    BANK0           160     19      35
    BANK1           256      0     200
    BANK2           256      0     200
    BANK3           256      0     200
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strncpy@from	PTR const unsigned char  size(2) Largest target is 200
		 -> MessageBuffer(BANK1[200]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 2047
		 -> STR_7(CODE[16]), STR_6(CODE[27]), STR_5(CODE[16]), STR_4(CODE[27]), 
		 -> STR_3(CODE[16]), RAM(DATA[2047]), STR_2(CODE[27]), DC_str(COMRAM[5]), 
		 -> MessageBuffer(BANK1[200]), 

    lcd_puts@str	PTR unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_itoa
    _putsUSART->_WriteUSART
    _itoa->_utoa
    _utoa->i2___lwdiv
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_lcd_putnum
    _lcd_puts->_lcd_gotoxy
    _lcd_putnum->_lcd_gotoxy
    _lcd_gotoxy->_lcd_write_byte
    _lcd_init->_lcd_write_byte
    _lcd_write_byte->_lcd_write_nibble

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   14067
                                             16 BANK0      3     3      0
                           _OpenPWM1
                          _OpenUSART
                          _SetDCPWM1
                         _lcd_gotoxy
                           _lcd_init
                         _lcd_putnum
                           _lcd_puts
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    3671
                                              8 BANK0      2     0      2
                         _lcd_gotoxy
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_putnum                                           8     3      5    4420
                                              8 BANK0      8     3      5
                            ___lwdiv
                         _lcd_gotoxy
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    2104
                                              5 BANK0      3     2      1
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1908
                                              5 BANK0      1     1      0
                     _lcd_write_byte
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (1) _lcd_write_byte                                       2     1      1    1414
                                              3 BANK0      2     1      1
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (2) _lcd_write_nibble                                     3     2      1     494
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _SetDCPWM1                                            6     4      2     196
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _OpenUSART                                            6     4      2     284
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _OpenPWM1                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 14    14      0    2912
                                             24 COMRAM    14    14      0
                          _ReadUSART
                               _atoi
                 _cleanMessageBuffer
                               _itoa
                          _putsUSART
                            _strncpy
 ---------------------------------------------------------------------------------
 (6) _strncpy                                              8     2      6     254
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _putsUSART                                            4     2      2     893
                                              1 COMRAM     4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (7) _WriteUSART                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _itoa                                                 8     2      6    1179
                                             16 COMRAM     8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (7) _utoa                                                 9     3      6     751
                                              7 COMRAM     9     3      6
                            ___lwmod
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     181
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4     211
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) _cleanMessageBuffer                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _atoi                                                 7     5      2     571
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     211
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _ReadUSART                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OpenPWM1
   _OpenUSART
   _SetDCPWM1
   _lcd_gotoxy
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_init
     _lcd_write_byte
       _lcd_write_nibble
     _lcd_write_nibble
   _lcd_putnum
     ___lwdiv
     _lcd_gotoxy
       _lcd_write_byte
         _lcd_write_nibble
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_puts
     _lcd_gotoxy
       _lcd_write_byte
         _lcd_write_nibble
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_write_byte
     _lcd_write_nibble

 _ISR (ROOT)
   _ReadUSART
   _atoi
     ___wmul
     _isdigit
   _cleanMessageBuffer
   _itoa
     _utoa
       ___lwmod
       i2___lwdiv
   _putsUSART
     _WriteUSART
   _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      23       5       21.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     26      4A       1       77.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2C5      20        0.0%
DATA                 0      0     2C5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Jan 04 16:01:47 2017

                          _c 0040                            _i 003B                            _k 003D  
        ___wmul@multiplicand 0003           i2___lwdiv@dividend 0001                          l240 0F94  
                        l144 10EC                          l147 1146                          l244 0FAE  
                        l245 0FB0                          l246 0FBC                          l247 0FBE  
                        l249 0FE6                          l834 1056                          _PR2 000FCB  
                        _ISR 0008                          u875 0D7E                          u876 0D80  
                        wreg 000FE8                 __CFG_FOSC$HS 000000                  lcd_gotoxy@x 0067  
                lcd_gotoxy@y 0065                 __CFG_LVP$OFF 000000                         ?_ISR 0001  
               __CFG_WDT$OFF 000000                         l1621 1012                         l1631 1048  
                       l1623 1018                         l1619 1006                         l1731 0F28  
                       l1723 0ED8                         l1653 0F96                         l1645 0F84  
                       l1743 106A                         l1735 0F40                         l1727 0F08  
                       l1737 0F4A                         l1739 0F50                         l1757 10CC  
                       l1795 0B12                         STR_1 0830                         STR_2 0805  
                       STR_3 0820                         STR_4 0805                         STR_5 0820  
                       STR_6 0805                         STR_7 0820                         u1035 1312  
                       u1207 0B60                         u1217 0B72                         u1307 0BF8  
                       u1227 0B84                         u1317 0C16                         u1237 0B96  
                       u1327 0C40                         u1247 0BA8                         u1337 0C5E  
                       u1257 1114                         u1347 0C7C                         u1267 112A  
                       u1357 0C9A                         u1277 1140                         u1197 0AFE  
                       u1367 0D82                         u1287 0BBE                         u1377 0E20  
                       u1297 0BDA                         u1387 0E2A                         _PIE1 000F9D  
                       _PEIE 007F96                         _RCIE 007CED                         _RCIF 007CF5  
                       _RCIP 007CFD                         i2l97 0A36       __end_of_lcd_write_byte 1402  
                       _atoi 0CA6                         _main 0A88                         _itoa 1260  
                       fsr0h 000FEA                         fsr1h 000FE2           i2___lwdiv@quotient 0005  
                       fsr0l 000FE9                         fsr2h 000FDA                         indf1 000FE7  
                       fsr1l 000FE1                         indf2 000FDF                         fsr2l 000FD9  
                       _utoa 0E32                  lcd_puts@str 0068                         pclat 000FFA  
                       prodh 000FF4                         prodl 000FF3                         start 0018  
                lcd_putnum@r 006E                  lcd_putnum@x 006B                  lcd_putnum@y 006C  
              __CFG_MCLRE$ON 000000                        ??_ISR 0019                        ?_atoi 0007  
                      ?_main 0001                        ?_itoa 0011                        ?_utoa 0008  
                      _T2CON 000FCA              __end_of___lwdiv 1060              __end_of___lwmod 138E  
                      i2l106 0A4E                        i2l270 1430                        i2l257 1204  
                      i2l470 0D66                        i2l471 0D6E                        i2l740 0EB2  
                      i2l834 12FA                        i2l844 1384                        i2l951 1362  
                      i2l953 1366                        i2l971 12D4                        i2l957 137A  
                      i2l949 135A                        i2l967 12C8                        i2l969 12D0  
                      i2l979 12F0                        _RCREG 000FAE                        _RCSTA 000FAB  
                      _SPBRG 000FAF                        _TRISC 000F94                        _TRISD 000F95  
                      _TXREG 000FAD                        _TXSTA 000FAC                        _lcd_x 0042  
                      _lcd_y 0043              __end_of_isdigit 1422                        atoi@a 000C  
                      atoi@s 0007                        tablat 000FF5                        utoa@c 0010  
                      utoa@v 000E                        status 000FD8              ?_lcd_write_byte 0063  
            __end_of_strncpy 1204           __size_ofi2___lwdiv 0052               WriteUSART@data 0001  
            __initialization 1148                 __end_of_atoi 0D70                 __end_of_main 0BB6  
               __end_of_itoa 12B2                 __end_of_utoa 0ED6             __end_of_OpenPWM1 1454  
                     ??_atoi 0009                       ??_main 0070                       ??_itoa 0017  
 __end_of_cleanMessageBuffer 13BC                       ??_utoa 000E                __activetblptr 000002  
                     _CCPR1L 000FBE                       i2l1005 1460                       i2l1027 0E3A  
                     i2l1037 0E74                       i2l1231 11F2                       i2l1225 11D8  
                     i2l1227 11E2                       i2l1219 11B0                       i2l1501 0CFA  
                     i2l1271 13AA                       i2l1505 0D34                       i2l1267 1390  
                     i2l1531 0920                       i2l1285 1294                       i2l1517 0894  
                     i2l1543 0972                       i2l1527 0902                       i2l1561 09EC  
                     i2l1545 098A                       i2l1529 091A                       i2l1563 0A04  
                     i2l1547 0990                       i2l1485 0CA8                       i2l1565 0A0A  
                     i2l1479 141A                       i2l1487 0CAC                       i2l1567 0A10  
                     i2l1497 0CEA                       i2l1569 0A3A                       _DC_str 0044  
         __size_of_ReadUSART 001E                       _SPBRGH 000FB0           __size_of_SetDCPWM1 0048  
           __end_of_lcd_init 0CA6           __size_of_OpenUSART 0080             __end_of_lcd_puts 0F68  
                     ___wmul 13BC     __end_of_lcd_write_nibble 0E32                    ??___lwdiv 0064  
                  ??___lwmod 0005                       clear_0 114E                       clear_1 115A  
                     clear_2 1166                       clear_3 1172                       clear_4 117E  
                     itoa@cp 0017                 __pdataCOMRAM 0049                    ??_isdigit 0001  
          __end_ofi2___lwdiv 1304         _lcd_lower_row_buffer 0300                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
              lcd_putnum@dec 006D                lcd_putnum@len 006A                lcd_putnum@num 0068  
                  ??_strncpy 0007                _MessageBuffer 0100                   __accesstop 0060  
    __end_of__initialization 119C                   _WriteUSART 1454               __pcstackCOMRAM 0001  
          __end_of_ReadUSART 1440            __end_of_SetDCPWM1 134C               lcd_gotoxy@addr 0066  
              ReadUSART@data 0001            __end_of_OpenUSART 0FE8                   __pbssBANK0 0073  
                 __pbssBANK1 0100                   __pbssBANK2 0200                   __pbssBANK3 0300  
                  ?_OpenPWM1 0001                      ?___wmul 0001                      _CCP1CON 000FBD  
              putsUSART@data 0002                   _lcd_gotoxy 10D4                      i2u51_40 1228  
                    i2u51_47 121E                      i2u52_40 1258                      i2u52_47 124E  
         __size_of_putsUSART 005C             ??_lcd_write_byte 0064                   _lcd_putnum 1060  
                  ?_lcd_init 0001                    ?_lcd_puts 0068                   ??_OpenPWM1 0060  
                    __Hparam 0000                      __Lparam 0000                 _flag_newline 0041  
                ?_WriteUSART 0001              __size_of___wmul 0026                      ___lwdiv 0FE8  
                    ___lwmod 134C                 __psmallconst 0800        lcd_write_byte@is_data 0063  
                    __pcinit 1148                      __ramtop 0800                      __ptext0 0A88  
                    __ptext1 0ED6                      __ptext2 1060                      __ptext3 10D4  
                    __ptext4 0FE8                      __ptext5 0BB6                      __ptext6 13E2  
                    __ptext7 0D70                      __ptext8 1304                      __ptext9 0F68  
               __size_of_ISR 0A80                    _T2CONbits 000FCA           lcd_write_byte@byte 0064  
                    _isdigit 1402         _lcd_upper_row_buffer 0200                   ??_lcd_init 0065  
             __pintcode_body 083E                      _strncpy 11A6                   ??_lcd_puts 006A  
       end_of_initialization 119C             _cantidadLetrasUP 0039           _cleanMessageBuffer 138E  
                    itoa@buf 0011                      itoa@val 0013                __Lmediumconst 0000  
                    int_func 083E          ?_cleanMessageBuffer 0001                    _RCSTAbits 000FAB  
                    postinc0 000FEE            __end_of_putsUSART 1260                      utoa@buf 0008  
                    utoa@val 000A            ?_lcd_write_nibble 0060           ??_lcd_write_nibble 0061  
       ??_cleanMessageBuffer 0001                    _TRISCbits 000F94                  ?_lcd_gotoxy 0065  
                ?_lcd_putnum 0068          __size_of_WriteUSART 0012            i2___lwdiv@divisor 0003  
                  i2___lwdiv 12B2            i2___lwdiv@counter 0007                   main@config 0071  
                  _TXSTAbits 000FAC               __end_of___wmul 13E2                __pidataCOMRAM 1466  
        start_initialization 1148                    _ReadUSART 1422                  __end_of_ISR 0A88  
                  _SetDCPWM1 1304              SetDCPWM1@DCycle 0064                    _DutyCycle 0049  
   _lcd_lower_display_buffer 0027                   ?i2___lwdiv 0001                    _OpenUSART 0F68  
          __size_of_OpenPWM1 0014          __size_of_lcd_gotoxy 0074                     ??___wmul 0005  
        __size_of_lcd_putnum 0074                  __pbssCOMRAM 0027                   ?_ReadUSART 0001  
              __pcstackBANK0 0060                   ?_SetDCPWM1 0060          __end_of__stringdata 083D  
               _isdigit$1330 0002                   ?_OpenUSART 0060            __size_of_lcd_init 00F0  
          __size_of_lcd_puts 0092             ___lwdiv@dividend 0060                 ??_WriteUSART 0001  
                  __pintcode 0008                     ?___lwdiv 0060                     ?___lwmod 0001  
                __smallconst 0800                     ?_isdigit 0001             ___lwdiv@quotient 0064  
            _LCD_ROW_ADDRESS 0801                     ?_strncpy 0001                  ??i2___lwdiv 0005  
         __end_of_WriteUSART 1466               ___wmul@product 0005                     _LATDbits 000F8C  
                strncpy@from 0003                     _PIE1bits 000F9D                  strncpy@size 0005  
                   _PIR1bits 000F9E     _lcd_upper_display_buffer 0073                    _putsUSART 1204  
                __stringdata 0805            ___wmul@multiplier 0001                  ??_ReadUSART 0001  
                  main@spbrg 0072                 ??_lcd_gotoxy 0066                  ??_SetDCPWM1 0062  
               ??_lcd_putnum 006D    __size_of_lcd_write_nibble 00C2           _cantidadLetrasDOWN 0037  
                ??_OpenUSART 0062           SetDCPWM1@dutycycle 0060              OpenUSART@config 0065  
                   _OpenPWM1 1440      __size_of_lcd_write_byte 0020                     __Hrparam 0000  
    lcd_write_nibble@is_data 0060                     __Lrparam 0000           __end_of_lcd_gotoxy 1148  
           __size_of___lwdiv 0078           __end_of_lcd_putnum 10D4             __size_of___lwmod 0042  
                 ?_putsUSART 0002      __end_of_LCD_ROW_ADDRESS 0805               OpenPWM1@period 0060  
__size_of_cleanMessageBuffer 002E             __size_of_isdigit 0020              ___lwdiv@divisor 0062  
            ___lwdiv@counter 0066                     __ptext10 1440                     __ptext20 0CA6  
                   __ptext12 11A6                     __ptext21 1402                     __ptext13 1204  
                   __ptext22 13BC                     __ptext14 1454                     __ptext23 1422  
                   __ptext15 1260                     __ptext16 0E32                     __ptext17 12B2  
                   __ptext18 134C                     __ptext19 138E                     _lcd_init 0BB6  
                   _lcd_puts 0ED6             __size_of_strncpy 005E                __size_of_atoi 00CA  
              __size_of_main 012E                __size_of_itoa 0052                __size_of_utoa 00A4  
                   atoi@sign 000B                   _INTCONbits 000FF2               OpenUSART@spbrg 0060  
     lcd_write_nibble@nibble 0062                     itoa@base 0015                     isdigit@c 0003  
                   intlevel2 0000             ___lwmod@dividend 0001                    strncpy@cp 0007  
                  strncpy@to 0001                  ??_putsUSART 0004                     utoa@base 000C  
            ___lwmod@divisor 0003              ___lwmod@counter 0005             _lcd_write_nibble 0D70  
               _USART_Status 003F               _lcd_write_byte 13E2  
