

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Jan 04 00:42:55 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           	psect	idataCOMRAM
    45  00147C                     __pidataCOMRAM:
    46                           	opt stack 0
    47                           
    48                           ;initializer for _DutyCycle
    49  00147C  000A               	dw	10
    50                           
    51                           	psect	smallconst
    52  000800                     __psmallconst:
    53                           	opt stack 0
    54  000800  00                 	db	0
    55  000801                     _LCD_ROW_ADDRESS:
    56                           	opt stack 0
    57  000801  80                 	db	128
    58  000802  C0                 	db	192
    59  000803  94                 	db	148
    60  000804  D4                 	db	212
    61  000805                     __end_of_LCD_ROW_ADDRESS:
    62                           	opt stack 0
    63  0000                     _CCP1CON	set	4029
    64  0000                     _CCPR1L	set	4030
    65  0000                     _INTCONbits	set	4082
    66  0000                     _LATDbits	set	3980
    67  0000                     _PIE1	set	3997
    68  0000                     _PIE1bits	set	3997
    69  0000                     _PIR1bits	set	3998
    70  0000                     _PR2	set	4043
    71  0000                     _RCREG	set	4014
    72  0000                     _RCSTA	set	4011
    73  0000                     _RCSTAbits	set	4011
    74  0000                     _SPBRG	set	4015
    75  0000                     _SPBRGH	set	4016
    76  0000                     _T2CON	set	4042
    77  0000                     _T2CONbits	set	4042
    78  0000                     _TRISC	set	3988
    79  0000                     _TRISCbits	set	3988
    80  0000                     _TRISD	set	3989
    81  0000                     _TXREG	set	4013
    82  0000                     _TXSTA	set	4012
    83  0000                     _TXSTAbits	set	4012
    84  0000                     _PEIE	set	32662
    85  0000                     _RCIE	set	31981
    86  0000                     _RCIF	set	31989
    87  0000                     _RCIP	set	31997
    88  000805                     __stringdata:
    89                           	opt stack 0
    90  000805                     STR_2:
    91  000805  4D                 	db	77	;'M'
    92  000806  6F                 	db	111	;'o'
    93  000807  64                 	db	100	;'d'
    94  000808  69                 	db	105	;'i'
    95  000809  66                 	db	102	;'f'
    96  00080A  69                 	db	105	;'i'
    97  00080B  63                 	db	99	;'c'
    98  00080C  61                 	db	97	;'a'
    99  00080D  64                 	db	100	;'d'
   100  00080E  6F                 	db	111	;'o'
   101  00080F  20                 	db	32
   102  000810  65                 	db	101	;'e'
   103  000811  6C                 	db	108	;'l'
   104  000812  20                 	db	32
   105  000813  53                 	db	83	;'S'
   106  000814  65                 	db	101	;'e'
   107  000815  74                 	db	116	;'t'
   108  000816  50                 	db	80	;'P'
   109  000817  6F                 	db	111	;'o'
   110  000818  69                 	db	105	;'i'
   111  000819  6E                 	db	110	;'n'
   112  00081A  74                 	db	116	;'t'
   113  00081B  20                 	db	32
   114  00081C  61                 	db	97	;'a'
   115  00081D  3A                 	db	58	;':'
   116  00081E  20                 	db	32
   117  00081F  00                 	db	0
   118  000820                     STR_3:
   119  000820  45                 	db	69	;'E'
   120  000821  72                 	db	114	;'r'
   121  000822  72                 	db	114	;'r'
   122  000823  6F                 	db	111	;'o'
   123  000824  72                 	db	114	;'r'
   124  000825  20                 	db	32
   125  000826  6D                 	db	109	;'m'
   126  000827  61                 	db	97	;'a'
   127  000828  71                 	db	113	;'q'
   128  000829  75                 	db	117	;'u'
   129  00082A  69                 	db	105	;'i'
   130  00082B  6E                 	db	110	;'n'
   131  00082C  6F                 	db	111	;'o'
   132  00082D  6C                 	db	108	;'l'
   133  00082E  61                 	db	97	;'a'
   134  00082F  00                 	db	0
   135  000830                     STR_1:
   136  000830  44                 	db	68	;'D'
   137  000831  75                 	db	117	;'u'
   138  000832  74                 	db	116	;'t'
   139  000833  79                 	db	121	;'y'
   140  000834  20                 	db	32
   141  000835  43                 	db	67	;'C'
   142  000836  79                 	db	121	;'y'
   143  000837  63                 	db	99	;'c'
   144  000838  6C                 	db	108	;'l'
   145  000839  65                 	db	101	;'e'
   146  00083A  3A                 	db	58	;':'
   147  00083B  20                 	db	32
   148  00083C  00                 	db	0
   149  00083D                     __end_of__stringdata:
   150                           	opt stack 0
   151                           
   152                           ; #config settings
   153  00083D  00                 	db	0	; dummy byte at the end
   154  0000                     
   155                           	psect	cinit
   156  001152                     __pcinit:
   157                           	opt stack 0
   158  001152                     start_initialization:
   159                           	opt stack 0
   160  001152                     __initialization:
   161                           	opt stack 0
   162                           
   163                           ; Clear objects allocated to BANK3 (200 bytes)
   164  001152  EE03  F000         	lfsr	0,__pbssBANK3
   165  001156  0EC8               	movlw	200
   166  001158                     clear_0:
   167  001158  6AEE               	clrf	postinc0,c
   168  00115A  06E8               	decf	wreg,f,c
   169  00115C  E1FD               	bnz	clear_0
   170                           
   171                           ; Clear objects allocated to BANK2 (200 bytes)
   172  00115E  EE02  F000         	lfsr	0,__pbssBANK2
   173  001162  0EC8               	movlw	200
   174  001164                     clear_1:
   175  001164  6AEE               	clrf	postinc0,c
   176  001166  06E8               	decf	wreg,f,c
   177  001168  E1FD               	bnz	clear_1
   178                           
   179                           ; Clear objects allocated to BANK1 (200 bytes)
   180  00116A  EE01  F000         	lfsr	0,__pbssBANK1
   181  00116E  0EC8               	movlw	200
   182  001170                     clear_2:
   183  001170  6AEE               	clrf	postinc0,c
   184  001172  06E8               	decf	wreg,f,c
   185  001174  E1FD               	bnz	clear_2
   186                           
   187                           ; Clear objects allocated to BANK0 (16 bytes)
   188  001176  EE00  F073         	lfsr	0,__pbssBANK0
   189  00117A  0E10               	movlw	16
   190  00117C                     clear_3:
   191  00117C  6AEE               	clrf	postinc0,c
   192  00117E  06E8               	decf	wreg,f,c
   193  001180  E1FD               	bnz	clear_3
   194                           
   195                           ; Clear objects allocated to COMRAM (34 bytes)
   196  001182  EE00  F027         	lfsr	0,__pbssCOMRAM
   197  001186  0E22               	movlw	34
   198  001188                     clear_4:
   199  001188  6AEE               	clrf	postinc0,c
   200  00118A  06E8               	decf	wreg,f,c
   201  00118C  E1FD               	bnz	clear_4
   202                           
   203                           ; Initialize objects allocated to COMRAM (2 bytes)
   204                           ; load TBLPTR registers with __pidataCOMRAM
   205  00118E  0E7C               	movlw	low __pidataCOMRAM
   206  001190  6EF6               	movwf	tblptrl,c
   207  001192  0E14               	movlw	high __pidataCOMRAM
   208  001194  6EF7               	movwf	tblptrh,c
   209  001196  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   210  001198  6EF8               	movwf	tblptru,c
   211  00119A  0009               	tblrd		*+	;fetch initializer
   212  00119C  CFF5 F049          	movff	tablat,__pdataCOMRAM
   213  0011A0  0009               	tblrd		*+	;fetch initializer
   214  0011A2  CFF5 F04A          	movff	tablat,__pdataCOMRAM+1
   215  0011A6                     end_of_initialization:
   216                           	opt stack 0
   217  0011A6                     __end_of__initialization:
   218                           	opt stack 0
   219  0011A6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   220  0011A8  6EF8               	movwf	tblptru,c
   221  0011AA  0100               	movlb	0
   222  0011AC  EF49  F005         	goto	_main	;jump to C main() function
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           tblptrl	equ	0xFF6
   226                           tablat	equ	0xFF5
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           
   230                           	psect	bssCOMRAM
   231  000027                     __pbssCOMRAM:
   232                           	opt stack 0
   233  000027                     _lcd_lower_display_buffer:
   234                           	opt stack 0
   235  000027                     	ds	16
   236  000037                     _cantidadLetrasDOWN:
   237                           	opt stack 0
   238  000037                     	ds	2
   239  000039                     _cantidadLetrasUP:
   240                           	opt stack 0
   241  000039                     	ds	2
   242  00003B                     _i:
   243                           	opt stack 0
   244  00003B                     	ds	2
   245  00003D                     _k:
   246                           	opt stack 0
   247  00003D                     	ds	2
   248  00003F                     _USART_Status:
   249                           	opt stack 0
   250  00003F                     	ds	1
   251  000040                     _c:
   252                           	opt stack 0
   253  000040                     	ds	1
   254  000041                     _flag_newline:
   255                           	opt stack 0
   256  000041                     	ds	1
   257  000042                     _lcd_x:
   258                           	opt stack 0
   259  000042                     	ds	1
   260  000043                     _lcd_y:
   261                           	opt stack 0
   262  000043                     	ds	1
   263  000044                     _DC_str:
   264                           	opt stack 0
   265  000044                     	ds	5
   266                           tblptru	equ	0xFF8
   267                           tblptrh	equ	0xFF7
   268                           tblptrl	equ	0xFF6
   269                           tablat	equ	0xFF5
   270                           postinc0	equ	0xFEE
   271                           wreg	equ	0xFE8
   272                           
   273                           	psect	dataCOMRAM
   274  000049                     __pdataCOMRAM:
   275                           	opt stack 0
   276  000049                     _DutyCycle:
   277                           	opt stack 0
   278  000049                     	ds	2
   279                           tblptru	equ	0xFF8
   280                           tblptrh	equ	0xFF7
   281                           tblptrl	equ	0xFF6
   282                           tablat	equ	0xFF5
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           
   286                           	psect	bssBANK0
   287  000073                     __pbssBANK0:
   288                           	opt stack 0
   289  000073                     _lcd_upper_display_buffer:
   290                           	opt stack 0
   291  000073                     	ds	16
   292                           tblptru	equ	0xFF8
   293                           tblptrh	equ	0xFF7
   294                           tblptrl	equ	0xFF6
   295                           tablat	equ	0xFF5
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           
   299                           	psect	bssBANK1
   300  000100                     __pbssBANK1:
   301                           	opt stack 0
   302  000100                     _MessageBuffer:
   303                           	opt stack 0
   304  000100                     	ds	200
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           
   312                           	psect	bssBANK2
   313  000200                     __pbssBANK2:
   314                           	opt stack 0
   315  000200                     _lcd_upper_row_buffer:
   316                           	opt stack 0
   317  000200                     	ds	200
   318                           tblptru	equ	0xFF8
   319                           tblptrh	equ	0xFF7
   320                           tblptrl	equ	0xFF6
   321                           tablat	equ	0xFF5
   322                           postinc0	equ	0xFEE
   323                           wreg	equ	0xFE8
   324                           
   325                           	psect	bssBANK3
   326  000300                     __pbssBANK3:
   327                           	opt stack 0
   328  000300                     _lcd_lower_row_buffer:
   329                           	opt stack 0
   330  000300                     	ds	200
   331                           tblptru	equ	0xFF8
   332                           tblptrh	equ	0xFF7
   333                           tblptrl	equ	0xFF6
   334                           tablat	equ	0xFF5
   335                           postinc0	equ	0xFEE
   336                           wreg	equ	0xFE8
   337                           
   338                           	psect	cstackBANK0
   339  000060                     __pcstackBANK0:
   340                           	opt stack 0
   341  000060                     ?___lwdiv:
   342                           	opt stack 0
   343  000060                     lcd_write_nibble@is_data:
   344                           	opt stack 0
   345  000060                     OpenPWM1@period:
   346                           	opt stack 0
   347  000060                     SetDCPWM1@dutycycle:
   348                           	opt stack 0
   349  000060                     OpenUSART@spbrg:
   350                           	opt stack 0
   351  000060                     ___lwdiv@dividend:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0x0
   355  000060                     	ds	1
   356  000061                     ??_lcd_write_nibble:
   357                           
   358                           ; 0 bytes @ 0x1
   359  000061                     	ds	1
   360  000062                     ??_OpenUSART:
   361  000062                     ??_SetDCPWM1:
   362  000062                     lcd_write_nibble@nibble:
   363                           	opt stack 0
   364  000062                     ___lwdiv@divisor:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x2
   368  000062                     	ds	1
   369  000063                     lcd_write_byte@is_data:
   370                           	opt stack 0
   371                           
   372                           ; 1 bytes @ 0x3
   373  000063                     	ds	1
   374  000064                     lcd_write_byte@byte:
   375                           	opt stack 0
   376  000064                     SetDCPWM1@DCycle:
   377                           	opt stack 0
   378  000064                     ___lwdiv@quotient:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x4
   382  000064                     	ds	1
   383  000065                     ??_lcd_init:
   384  000065                     lcd_gotoxy@y:
   385                           	opt stack 0
   386  000065                     OpenUSART@config:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x5
   390  000065                     	ds	1
   391  000066                     lcd_gotoxy@addr:
   392                           	opt stack 0
   393  000066                     ___lwdiv@counter:
   394                           	opt stack 0
   395                           
   396                           ; 1 bytes @ 0x6
   397  000066                     	ds	1
   398  000067                     lcd_gotoxy@x:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x7
   402  000067                     	ds	1
   403  000068                     lcd_putnum@num:
   404                           	opt stack 0
   405  000068                     lcd_puts@str:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x8
   409  000068                     	ds	2
   410  00006A                     lcd_putnum@len:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0xA
   414  00006A                     	ds	1
   415  00006B                     lcd_putnum@x:
   416                           	opt stack 0
   417                           
   418                           ; 1 bytes @ 0xB
   419  00006B                     	ds	1
   420  00006C                     lcd_putnum@y:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0xC
   424  00006C                     	ds	1
   425  00006D                     lcd_putnum@dec:
   426                           	opt stack 0
   427                           
   428                           ; 1 bytes @ 0xD
   429  00006D                     	ds	1
   430  00006E                     lcd_putnum@r:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0xE
   434  00006E                     	ds	2
   435  000070                     ??_main:
   436                           
   437                           ; 0 bytes @ 0x10
   438  000070                     	ds	1
   439  000071                     main@config:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x11
   443  000071                     	ds	1
   444  000072                     main@spbrg:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x12
   448  000072                     	ds	1
   449                           tblptru	equ	0xFF8
   450                           tblptrh	equ	0xFF7
   451                           tblptrl	equ	0xFF6
   452                           tablat	equ	0xFF5
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           
   456                           	psect	cstackCOMRAM
   457  000001                     __pcstackCOMRAM:
   458                           	opt stack 0
   459  000001                     ??_isdigit:
   460  000001                     ?___wmul:
   461                           	opt stack 0
   462  000001                     ?___lwmod:
   463                           	opt stack 0
   464  000001                     ?i2___lwdiv:
   465                           	opt stack 0
   466  000001                     ReadUSART@data:
   467                           	opt stack 0
   468  000001                     WriteUSART@data:
   469                           	opt stack 0
   470  000001                     ___wmul@multiplier:
   471                           	opt stack 0
   472  000001                     ___lwmod@dividend:
   473                           	opt stack 0
   474  000001                     strncpy@to:
   475                           	opt stack 0
   476  000001                     i2___lwdiv@dividend:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x0
   480  000001                     	ds	1
   481  000002                     _isdigit$1330:
   482                           	opt stack 0
   483  000002                     putsUSART@data:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x1
   487  000002                     	ds	1
   488  000003                     isdigit@c:
   489                           	opt stack 0
   490  000003                     ___wmul@multiplicand:
   491                           	opt stack 0
   492  000003                     ___lwmod@divisor:
   493                           	opt stack 0
   494  000003                     strncpy@from:
   495                           	opt stack 0
   496  000003                     i2___lwdiv@divisor:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x2
   500  000003                     	ds	1
   501  000004                     ??_putsUSART:
   502                           
   503                           ; 0 bytes @ 0x3
   504  000004                     	ds	1
   505  000005                     ___lwmod@counter:
   506                           	opt stack 0
   507  000005                     ___wmul@product:
   508                           	opt stack 0
   509  000005                     strncpy@size:
   510                           	opt stack 0
   511  000005                     i2___lwdiv@quotient:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x4
   515  000005                     	ds	2
   516  000007                     ?_atoi:
   517                           	opt stack 0
   518  000007                     i2___lwdiv@counter:
   519                           	opt stack 0
   520  000007                     atoi@s:
   521                           	opt stack 0
   522  000007                     strncpy@cp:
   523                           	opt stack 0
   524                           
   525                           ; 2 bytes @ 0x6
   526  000007                     	ds	1
   527  000008                     utoa@buf:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x7
   531  000008                     	ds	1
   532  000009                     ??_atoi:
   533                           
   534                           ; 0 bytes @ 0x8
   535  000009                     	ds	1
   536  00000A                     utoa@val:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x9
   540  00000A                     	ds	1
   541  00000B                     atoi@sign:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0xA
   545  00000B                     	ds	1
   546  00000C                     atoi@a:
   547                           	opt stack 0
   548  00000C                     utoa@base:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0xB
   552  00000C                     	ds	2
   553  00000E                     utoa@v:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0xD
   557  00000E                     	ds	2
   558  000010                     utoa@c:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0xF
   562  000010                     	ds	1
   563  000011                     itoa@buf:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x10
   567  000011                     	ds	2
   568  000013                     itoa@val:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x12
   572  000013                     	ds	2
   573  000015                     itoa@base:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x14
   577  000015                     	ds	2
   578  000017                     itoa@cp:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x16
   582  000017                     	ds	2
   583  000019                     ??_ISR:
   584                           
   585                           ; 0 bytes @ 0x18
   586  000019                     	ds	14
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           tblptrl	equ	0xFF6
   590                           tablat	equ	0xFF5
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           
   594 ;;
   595 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   596 ;;
   597 ;; *************** function _main *****************
   598 ;; Defined at:
   599 ;;		line 47 in file "main.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;		None
   602 ;; Auto vars:     Size  Location     Type
   603 ;;  spbrg           1   18[BANK0 ] unsigned char 
   604 ;;  config          1   17[BANK0 ] unsigned char 
   605 ;; Return value:  Size  Location     Type
   606 ;;		None               void
   607 ;; Registers used:
   608 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   614 ;;      Params:         0       0       0       0       0       0       0       0       0
   615 ;;      Locals:         0       2       0       0       0       0       0       0       0
   616 ;;      Temps:          0       1       0       0       0       0       0       0       0
   617 ;;      Totals:         0       3       0       0       0       0       0       0       0
   618 ;;Total ram usage:        3 bytes
   619 ;; Hardware stack levels required when called:    8
   620 ;; This function calls:
   621 ;;		_OpenPWM1
   622 ;;		_OpenUSART
   623 ;;		_SetDCPWM1
   624 ;;		_lcd_gotoxy
   625 ;;		_lcd_init
   626 ;;		_lcd_putnum
   627 ;;		_lcd_puts
   628 ;;		_lcd_write_byte
   629 ;; This function is called by:
   630 ;;		Startup code after reset
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           	psect	text0
   635  000A92                     __ptext0:
   636                           	opt stack 0
   637  000A92                     _main:
   638                           	opt stack 23
   639                           
   640                           ;main.c: 49: unsigned char config = 0, spbrg = 0;
   641                           
   642                           ;incstack = 0
   643  000A92  0E00               	movlw	0
   644  000A94  0100               	movlb	0	; () banked
   645  000A96  6F71               	movwf	main@config& (0+255),b
   646  000A98  0E00               	movlw	0
   647  000A9A  0100               	movlb	0	; () banked
   648  000A9C  6F72               	movwf	main@spbrg& (0+255),b
   649                           
   650                           ;main.c: 51: TRISC = 0b10000000;
   651  000A9E  0E80               	movlw	128
   652  000AA0  6E94               	movwf	3988,c	;volatile
   653                           
   654                           ;main.c: 52: TRISD = 0b00000000;
   655  000AA2  0E00               	movlw	0
   656  000AA4  6E95               	movwf	3989,c	;volatile
   657                           
   658                           ; BSR set to: 0
   659                           ;main.c: 57: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
   660  000AA6  0E4F               	movlw	79
   661  000AA8  16AB               	andwf	4011,f,c	;volatile
   662                           
   663                           ; BSR set to: 0
   664  000AAA  9AAC               	bcf	4012,5,c	;volatile
   665                           
   666                           ; BSR set to: 0
   667  000AAC  0ECF               	movlw	207
   668  000AAE  169D               	andwf	3997,f,c	;volatile
   669                           
   670                           ;main.c: 58: config = 0b01111111& 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111;
   671  000AB0  0E7C               	movlw	124
   672  000AB2  0100               	movlb	0	; () banked
   673  000AB4  6F71               	movwf	main@config& (0+255),b
   674                           
   675                           ;main.c: 59: spbrg = 77;
   676  000AB6  0E4D               	movlw	77
   677  000AB8  0100               	movlb	0	; () banked
   678  000ABA  6F72               	movwf	main@spbrg& (0+255),b
   679                           
   680                           ; BSR set to: 0
   681                           ;main.c: 60: OpenUSART(config, spbrg);
   682  000ABC  0100               	movlb	0	; () banked
   683  000ABE  C072  F060         	movff	main@spbrg,OpenUSART@spbrg
   684  000AC2  0100               	movlb	0	; () banked
   685  000AC4  6B61               	clrf	(OpenUSART@spbrg+1)& (0+255),b
   686  000AC6  0100               	movlb	0	; () banked
   687  000AC8  5171               	movf	main@config& (0+255),w,b
   688  000ACA  ECB9  F007         	call	_OpenUSART
   689                           
   690                           ;main.c: 61: RCIF = 0;
   691  000ACE  9A9E               	bcf	3998,5,c	;volatile
   692                           
   693                           ;main.c: 62: RCIP = 0;
   694  000AD0  9A9F               	bcf	3999,5,c	;volatile
   695                           
   696                           ;main.c: 63: RCIE = 1;
   697  000AD2  8A9D               	bsf	3997,5,c	;volatile
   698                           
   699                           ;main.c: 64: PEIE = 1;
   700  000AD4  8CF2               	bsf	intcon,6,c	;volatile
   701                           
   702                           ;main.c: 65: PIR1bits.RCIF = 0;
   703  000AD6  9A9E               	bcf	3998,5,c	;volatile
   704                           
   705                           ;main.c: 66: (INTCONbits.GIE = 1);
   706  000AD8  8EF2               	bsf	intcon,7,c	;volatile
   707                           
   708                           ;main.c: 70: T2CON = 0b00000111 ;
   709  000ADA  0E07               	movlw	7
   710  000ADC  6ECA               	movwf	4042,c	;volatile
   711                           
   712                           ;main.c: 71: OpenPWM1(0b10111011);
   713  000ADE  0EBB               	movlw	187
   714  000AE0  EC2B  F00A         	call	_OpenPWM1
   715                           
   716                           ;main.c: 73: SetDCPWM1(DutyCycle);
   717  000AE4  C049  F060         	movff	_DutyCycle,SetDCPWM1@dutycycle
   718  000AE8  C04A  F061         	movff	_DutyCycle+1,SetDCPWM1@dutycycle+1
   719  000AEC  EC87  F009         	call	_SetDCPWM1	;wreg free
   720                           
   721                           ;main.c: 76: lcd_init();
   722  000AF0  ECE0  F005         	call	_lcd_init	;wreg free
   723                           
   724                           ;main.c: 77: {lcd_write_byte(0x01, 0); { _delay((unsigned long)((5000)*(12000000/4000000
      +                          .0))); };};
   725  000AF4  0E00               	movlw	0
   726  000AF6  0100               	movlb	0	; () banked
   727  000AF8  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
   728  000AFA  0E01               	movlw	1
   729  000AFC  ECFC  F009         	call	_lcd_write_byte
   730  000B00  0E14               	movlw	20
   731  000B02  0100               	movlb	0	; () banked
   732  000B04  6F70               	movwf	??_main& (0+255),b
   733  000B06  0E7A               	movlw	122
   734  000B08                     u1197:
   735  000B08  2EE8               	decfsz	wreg,f,c
   736  000B0A  D7FE               	goto	u1197
   737  000B0C  2F70               	decfsz	??_main& (0+255),f,b
   738  000B0E  D7FC               	goto	u1197
   739                           
   740                           ;main.c: 78: lcd_gotoxy(0,0);
   741  000B10  0E00               	movlw	0
   742  000B12  0100               	movlb	0	; () banked
   743  000B14  6F65               	movwf	lcd_gotoxy@y& (0+255),b
   744  000B16  0E00               	movlw	0
   745  000B18  EC6F  F008         	call	_lcd_gotoxy
   746  000B1C                     l1811:
   747                           
   748                           ;main.c: 80: {
   749                           ;main.c: 81: SetDCPWM1(DutyCycle);
   750  000B1C  C049  F060         	movff	_DutyCycle,SetDCPWM1@dutycycle
   751  000B20  C04A  F061         	movff	_DutyCycle+1,SetDCPWM1@dutycycle+1
   752  000B24  EC87  F009         	call	_SetDCPWM1	;wreg free
   753                           
   754                           ;main.c: 83: lcd_gotoxy(0,0);
   755  000B28  0E00               	movlw	0
   756  000B2A  0100               	movlb	0	; () banked
   757  000B2C  6F65               	movwf	lcd_gotoxy@y& (0+255),b
   758  000B2E  0E00               	movlw	0
   759  000B30  EC6F  F008         	call	_lcd_gotoxy
   760                           
   761                           ;main.c: 84: lcd_puts("Duty Cycle: ");
   762  000B34  0E08               	movlw	high STR_1
   763  000B36  0100               	movlb	0	; () banked
   764  000B38  6F69               	movwf	(lcd_puts@str+1)& (0+255),b
   765  000B3A  0E30               	movlw	low STR_1
   766  000B3C  0100               	movlb	0	; () banked
   767  000B3E  6F68               	movwf	lcd_puts@str& (0+255),b
   768  000B40  EC70  F007         	call	_lcd_puts	;wreg free
   769                           
   770                           ;main.c: 85: lcd_putnum(DutyCycle, 4, 0, 1);
   771  000B44  C049  F068         	movff	_DutyCycle,lcd_putnum@num
   772  000B48  C04A  F069         	movff	_DutyCycle+1,lcd_putnum@num+1
   773  000B4C  0E04               	movlw	4
   774  000B4E  0100               	movlb	0	; () banked
   775  000B50  6F6A               	movwf	lcd_putnum@len& (0+255),b
   776  000B52  0E00               	movlw	0
   777  000B54  0100               	movlb	0	; () banked
   778  000B56  6F6B               	movwf	lcd_putnum@x& (0+255),b
   779  000B58  0E01               	movlw	1
   780  000B5A  0100               	movlb	0	; () banked
   781  000B5C  6F6C               	movwf	lcd_putnum@y& (0+255),b
   782  000B5E  EC35  F008         	call	_lcd_putnum	;wreg free
   783                           
   784                           ;main.c: 86: _delay((unsigned long)((50)*(12000000/4000.0)));
   785  000B62  0EC3               	movlw	195
   786  000B64  0100               	movlb	0	; () banked
   787  000B66  6F70               	movwf	??_main& (0+255),b
   788  000B68  0ECD               	movlw	205
   789  000B6A                     u1207:
   790  000B6A  2EE8               	decfsz	wreg,f,c
   791  000B6C  D7FE               	goto	u1207
   792  000B6E  2F70               	decfsz	??_main& (0+255),f,b
   793  000B70  D7FC               	goto	u1207
   794  000B72  F000               	nop	
   795                           
   796                           ;main.c: 87: _delay((unsigned long)((50)*(12000000/4000.0)));
   797  000B74  0EC3               	movlw	195
   798  000B76  0100               	movlb	0	; () banked
   799  000B78  6F70               	movwf	??_main& (0+255),b
   800  000B7A  0ECD               	movlw	205
   801  000B7C                     u1217:
   802  000B7C  2EE8               	decfsz	wreg,f,c
   803  000B7E  D7FE               	goto	u1217
   804  000B80  2F70               	decfsz	??_main& (0+255),f,b
   805  000B82  D7FC               	goto	u1217
   806  000B84  F000               	nop	
   807                           
   808                           ;main.c: 88: _delay((unsigned long)((50)*(12000000/4000.0)));
   809  000B86  0EC3               	movlw	195
   810  000B88  0100               	movlb	0	; () banked
   811  000B8A  6F70               	movwf	??_main& (0+255),b
   812  000B8C  0ECD               	movlw	205
   813  000B8E                     u1227:
   814  000B8E  2EE8               	decfsz	wreg,f,c
   815  000B90  D7FE               	goto	u1227
   816  000B92  2F70               	decfsz	??_main& (0+255),f,b
   817  000B94  D7FC               	goto	u1227
   818  000B96  F000               	nop	
   819                           
   820                           ;main.c: 89: _delay((unsigned long)((50)*(12000000/4000.0)));
   821  000B98  0EC3               	movlw	195
   822  000B9A  0100               	movlb	0	; () banked
   823  000B9C  6F70               	movwf	??_main& (0+255),b
   824  000B9E  0ECD               	movlw	205
   825  000BA0                     u1237:
   826  000BA0  2EE8               	decfsz	wreg,f,c
   827  000BA2  D7FE               	goto	u1237
   828  000BA4  2F70               	decfsz	??_main& (0+255),f,b
   829  000BA6  D7FC               	goto	u1237
   830  000BA8  F000               	nop	
   831                           
   832                           ;main.c: 90: _delay((unsigned long)((50)*(12000000/4000.0)));
   833  000BAA  0EC3               	movlw	195
   834  000BAC  0100               	movlb	0	; () banked
   835  000BAE  6F70               	movwf	??_main& (0+255),b
   836  000BB0  0ECD               	movlw	205
   837  000BB2                     u1247:
   838  000BB2  2EE8               	decfsz	wreg,f,c
   839  000BB4  D7FE               	goto	u1247
   840  000BB6  2F70               	decfsz	??_main& (0+255),f,b
   841  000BB8  D7FC               	goto	u1247
   842  000BBA  F000               	nop	
   843                           
   844                           ;main.c: 91: LATDbits.LATD0 =~ LATDbits.LATD0;
   845  000BBC  708C               	btg	3980,0,c	;volatile
   846  000BBE  D7AE               	goto	l1811
   847  000BC0                     __end_of_main:
   848                           	opt stack 0
   849                           tblptru	equ	0xFF8
   850                           tblptrh	equ	0xFF7
   851                           tblptrl	equ	0xFF6
   852                           tablat	equ	0xFF5
   853                           intcon	equ	0xFF2
   854                           postinc0	equ	0xFEE
   855                           wreg	equ	0xFE8
   856                           
   857 ;; *************** function _lcd_puts *****************
   858 ;; Defined at:
   859 ;;		line 108 in file "lcd_driver.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;  str             2    8[BANK0 ] PTR unsigned char 
   862 ;;		 -> STR_1(13), 
   863 ;; Auto vars:     Size  Location     Type
   864 ;;		None
   865 ;; Return value:  Size  Location     Type
   866 ;;		None               void
   867 ;; Registers used:
   868 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   874 ;;      Params:         0       2       0       0       0       0       0       0       0
   875 ;;      Locals:         0       0       0       0       0       0       0       0       0
   876 ;;      Temps:          0       0       0       0       0       0       0       0       0
   877 ;;      Totals:         0       2       0       0       0       0       0       0       0
   878 ;;Total ram usage:        2 bytes
   879 ;; Hardware stack levels used:    1
   880 ;; Hardware stack levels required when called:    7
   881 ;; This function calls:
   882 ;;		_lcd_gotoxy
   883 ;;		_lcd_write_byte
   884 ;; This function is called by:
   885 ;;		_main
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           	psect	text1
   890  000EE0                     __ptext1:
   891                           	opt stack 0
   892  000EE0                     _lcd_puts:
   893                           	opt stack 23
   894                           
   895                           ;lcd_driver.c: 110: while (*str != 0)
   896                           
   897                           ;incstack = 0
   898  000EE0  D03C               	goto	l1755
   899  000EE2                     l1739:
   900                           
   901                           ;lcd_driver.c: 111: {
   902                           ;lcd_driver.c: 112: if (*str != '\n')
   903  000EE2  0100               	movlb	0	; () banked
   904  000EE4  C068  FFF6         	movff	lcd_puts@str,tblptrl
   905  000EE8  0100               	movlb	0	; () banked
   906  000EEA  C069  FFF7         	movff	lcd_puts@str+1,tblptrh
   907  000EEE                     	if	0	;tblptru may be non-zero
   908  000EEE                     	endif
   909  000EEE                     	if	0	;tblptru may be non-zero
   910  000EEE                     	endif
   911  000EEE  0008               	tblrd		*
   912  000EF0  50F5               	movf	tablat,w,c
   913  000EF2  0A0A               	xorlw	10
   914  000EF4  B4D8               	btfsc	status,2,c
   915  000EF6  D00D               	goto	l1743
   916                           
   917                           ; BSR set to: 0
   918                           ;lcd_driver.c: 113: {
   919                           ;lcd_driver.c: 114: {lcd_write_byte(*str, 1);};
   920  000EF8  0E01               	movlw	1
   921  000EFA  0100               	movlb	0	; () banked
   922  000EFC  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
   923  000EFE  0100               	movlb	0	; () banked
   924  000F00  C068  FFF6         	movff	lcd_puts@str,tblptrl
   925  000F04  0100               	movlb	0	; () banked
   926  000F06  C069  FFF7         	movff	lcd_puts@str+1,tblptrh
   927  000F0A                     	if	0	;tblptru may be non-zero
   928  000F0A                     	endif
   929  000F0A                     	if	0	;tblptru may be non-zero
   930  000F0A                     	endif
   931  000F0A  0008               	tblrd		*
   932  000F0C  50F5               	movf	tablat,w,c
   933  000F0E  ECFC  F009         	call	_lcd_write_byte
   934  000F12                     l1743:
   935                           
   936                           ;lcd_driver.c: 115: }
   937                           ;lcd_driver.c: 117: if ((++lcd_x == 16) || (*str == '\n'))
   938  000F12  2A42               	incf	_lcd_x,f,c
   939  000F14  5042               	movf	_lcd_x& (0+255),w,c
   940  000F16  0A10               	xorlw	16
   941  000F18  B4D8               	btfsc	status,2,c
   942  000F1A  D00B               	goto	l1747
   943  000F1C  0100               	movlb	0	; () banked
   944  000F1E  C068  FFF6         	movff	lcd_puts@str,tblptrl
   945  000F22  0100               	movlb	0	; () banked
   946  000F24  C069  FFF7         	movff	lcd_puts@str+1,tblptrh
   947  000F28                     	if	0	;tblptru may be non-zero
   948  000F28                     	endif
   949  000F28                     	if	0	;tblptru may be non-zero
   950  000F28                     	endif
   951  000F28  0008               	tblrd		*
   952  000F2A  50F5               	movf	tablat,w,c
   953  000F2C  0A0A               	xorlw	10
   954  000F2E  A4D8               	btfss	status,2,c
   955  000F30  D011               	goto	l1753
   956  000F32                     l1747:
   957                           
   958                           ;lcd_driver.c: 118: {
   959                           ;lcd_driver.c: 119: if (++lcd_y == 2)
   960  000F32  2A43               	incf	_lcd_y,f,c
   961  000F34  5043               	movf	_lcd_y& (0+255),w,c
   962  000F36  0A02               	xorlw	2
   963  000F38  A4D8               	btfss	status,2,c
   964  000F3A  D007               	goto	l1751
   965                           
   966                           ;lcd_driver.c: 120: {
   967                           ;lcd_driver.c: 121: lcd_gotoxy(0,0);
   968  000F3C  0E00               	movlw	0
   969  000F3E  0100               	movlb	0	; () banked
   970  000F40  6F65               	movwf	lcd_gotoxy@y& (0+255),b
   971  000F42  0E00               	movlw	0
   972  000F44  EC6F  F008         	call	_lcd_gotoxy
   973                           
   974                           ;lcd_driver.c: 122: }
   975  000F48  D005               	goto	l1753
   976  000F4A                     l1751:
   977                           
   978                           ;lcd_driver.c: 123: else
   979                           ;lcd_driver.c: 124: {
   980                           ;lcd_driver.c: 125: lcd_gotoxy(0, lcd_y);
   981  000F4A  C043  F065         	movff	_lcd_y,lcd_gotoxy@y
   982  000F4E  0E00               	movlw	0
   983  000F50  EC6F  F008         	call	_lcd_gotoxy
   984  000F54                     l1753:
   985                           
   986                           ;lcd_driver.c: 126: }
   987                           ;lcd_driver.c: 127: }
   988                           ;lcd_driver.c: 128: str++;
   989  000F54  0100               	movlb	0	; () banked
   990  000F56  4B68               	infsnz	lcd_puts@str& (0+255),f,b
   991  000F58  2B69               	incf	(lcd_puts@str+1)& (0+255),f,b
   992  000F5A                     l1755:
   993  000F5A  0100               	movlb	0	; () banked
   994  000F5C  C068  FFF6         	movff	lcd_puts@str,tblptrl
   995  000F60  0100               	movlb	0	; () banked
   996  000F62  C069  FFF7         	movff	lcd_puts@str+1,tblptrh
   997  000F66                     	if	0	;tblptru may be non-zero
   998  000F66                     	endif
   999  000F66                     	if	0	;tblptru may be non-zero
  1000  000F66                     	endif
  1001  000F66  0008               	tblrd		*
  1002  000F68  50F5               	movf	tablat,w,c
  1003  000F6A  0900               	iorlw	0
  1004  000F6C  B4D8               	btfsc	status,2,c
  1005                           
  1006                           ; BSR set to: 0
  1007                           
  1008                           ; BSR set to: 0
  1009  000F6E  0012               	return	
  1010  000F70  D7B8               	goto	l1739
  1011  000F72                     __end_of_lcd_puts:
  1012                           	opt stack 0
  1013                           tblptru	equ	0xFF8
  1014                           tblptrh	equ	0xFF7
  1015                           tblptrl	equ	0xFF6
  1016                           tablat	equ	0xFF5
  1017                           intcon	equ	0xFF2
  1018                           postinc0	equ	0xFEE
  1019                           wreg	equ	0xFE8
  1020                           status	equ	0xFD8
  1021                           
  1022 ;; *************** function _lcd_putnum *****************
  1023 ;; Defined at:
  1024 ;;		line 87 in file "lcd_driver.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;  num             2    8[BANK0 ] unsigned int 
  1027 ;;  len             1   10[BANK0 ] unsigned char 
  1028 ;;  x               1   11[BANK0 ] unsigned char 
  1029 ;;  y               1   12[BANK0 ] unsigned char 
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;  r               2   14[BANK0 ] unsigned int 
  1032 ;;  dec             1   13[BANK0 ] unsigned char 
  1033 ;; Return value:  Size  Location     Type
  1034 ;;		None               void
  1035 ;; Registers used:
  1036 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1037 ;; Tracked objects:
  1038 ;;		On entry : 0/0
  1039 ;;		On exit  : 0/0
  1040 ;;		Unchanged: 0/0
  1041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1042 ;;      Params:         0       5       0       0       0       0       0       0       0
  1043 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1044 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1045 ;;      Totals:         0       8       0       0       0       0       0       0       0
  1046 ;;Total ram usage:        8 bytes
  1047 ;; Hardware stack levels used:    1
  1048 ;; Hardware stack levels required when called:    7
  1049 ;; This function calls:
  1050 ;;		___lwdiv
  1051 ;;		_lcd_gotoxy
  1052 ;;		_lcd_write_byte
  1053 ;; This function is called by:
  1054 ;;		_main
  1055 ;; This function uses a non-reentrant model
  1056 ;;
  1057                           
  1058                           	psect	text2
  1059  00106A                     __ptext2:
  1060                           	opt stack 0
  1061  00106A                     _lcd_putnum:
  1062                           	opt stack 23
  1063                           
  1064                           ;lcd_driver.c: 92: uint16_t r;
  1065                           ;lcd_driver.c: 93: uint8_t dec;
  1066                           ;lcd_driver.c: 95: x+=len;
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;incstack = 0
  1070  00106A  0100               	movlb	0	; () banked
  1071  00106C  516A               	movf	lcd_putnum@len& (0+255),w,b
  1072  00106E  0100               	movlb	0	; () banked
  1073  001070  276B               	addwf	lcd_putnum@x& (0+255),f,b
  1074                           
  1075                           ;lcd_driver.c: 96: while (len)
  1076  001072  D031               	goto	l1773
  1077  001074                     l1759:
  1078                           
  1079                           ; BSR set to: 0
  1080                           ;lcd_driver.c: 97: {
  1081                           ;lcd_driver.c: 98: r = num/10;
  1082  001074  C068  F060         	movff	lcd_putnum@num,___lwdiv@dividend
  1083  001078  C069  F061         	movff	lcd_putnum@num+1,___lwdiv@dividend+1
  1084  00107C  0E00               	movlw	0
  1085  00107E  0100               	movlb	0	; () banked
  1086  001080  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1087  001082  0E0A               	movlw	10
  1088  001084  0100               	movlb	0	; () banked
  1089  001086  6F62               	movwf	___lwdiv@divisor& (0+255),b
  1090  001088  ECF9  F007         	call	___lwdiv	;wreg free
  1091  00108C  0100               	movlb	0	; () banked
  1092  00108E  C060  F06E         	movff	?___lwdiv,lcd_putnum@r
  1093  001092  0100               	movlb	0	; () banked
  1094  001094  C061  F06F         	movff	?___lwdiv+1,lcd_putnum@r+1
  1095                           
  1096                           ; BSR set to: 0
  1097                           ;lcd_driver.c: 99: dec = num - r*10;
  1098  001098  0100               	movlb	0	; () banked
  1099  00109A  516E               	movf	lcd_putnum@r& (0+255),w,b
  1100  00109C  0D0A               	mullw	10
  1101  00109E  50F3               	movf	prodl,w,c
  1102  0010A0  0800               	sublw	0
  1103  0010A2  0100               	movlb	0	; () banked
  1104  0010A4  2568               	addwf	lcd_putnum@num& (0+255),w,b
  1105  0010A6  0100               	movlb	0	; () banked
  1106  0010A8  6F6D               	movwf	lcd_putnum@dec& (0+255),b
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;lcd_driver.c: 100: x--;
  1110  0010AA  0100               	movlb	0	; () banked
  1111  0010AC  076B               	decf	lcd_putnum@x& (0+255),f,b
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;lcd_driver.c: 101: len--;
  1115  0010AE  0100               	movlb	0	; () banked
  1116  0010B0  076A               	decf	lcd_putnum@len& (0+255),f,b
  1117                           
  1118                           ; BSR set to: 0
  1119                           ;lcd_driver.c: 102: lcd_gotoxy(x,y);
  1120  0010B2  C06C  F065         	movff	lcd_putnum@y,lcd_gotoxy@y
  1121  0010B6  0100               	movlb	0	; () banked
  1122  0010B8  516B               	movf	lcd_putnum@x& (0+255),w,b
  1123  0010BA  EC6F  F008         	call	_lcd_gotoxy
  1124                           
  1125                           ;lcd_driver.c: 103: {lcd_write_byte(dec + 0x30, 1);};
  1126  0010BE  0E01               	movlw	1
  1127  0010C0  0100               	movlb	0	; () banked
  1128  0010C2  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1129  0010C4  0100               	movlb	0	; () banked
  1130  0010C6  516D               	movf	lcd_putnum@dec& (0+255),w,b
  1131  0010C8  0F30               	addlw	48
  1132  0010CA  ECFC  F009         	call	_lcd_write_byte
  1133                           
  1134                           ;lcd_driver.c: 104: num = r;
  1135  0010CE  C06E  F068         	movff	lcd_putnum@r,lcd_putnum@num
  1136  0010D2  C06F  F069         	movff	lcd_putnum@r+1,lcd_putnum@num+1
  1137  0010D6                     l1773:
  1138  0010D6  0100               	movlb	0	; () banked
  1139  0010D8  676A               	tstfsz	lcd_putnum@len& (0+255),b
  1140  0010DA  D7CC               	goto	l1759
  1141                           
  1142                           ; BSR set to: 0
  1143                           
  1144                           ; BSR set to: 0
  1145  0010DC  0012               	return	
  1146  0010DE                     __end_of_lcd_putnum:
  1147                           	opt stack 0
  1148                           tblptru	equ	0xFF8
  1149                           tblptrh	equ	0xFF7
  1150                           tblptrl	equ	0xFF6
  1151                           tablat	equ	0xFF5
  1152                           prodl	equ	0xFF3
  1153                           intcon	equ	0xFF2
  1154                           postinc0	equ	0xFEE
  1155                           wreg	equ	0xFE8
  1156                           status	equ	0xFD8
  1157                           
  1158 ;; *************** function _lcd_gotoxy *****************
  1159 ;; Defined at:
  1160 ;;		line 54 in file "lcd_driver.c"
  1161 ;; Parameters:    Size  Location     Type
  1162 ;;  x               1    wreg     unsigned char 
  1163 ;;  y               1    5[BANK0 ] unsigned char 
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  x               1    7[BANK0 ] unsigned char 
  1166 ;;  addr            1    6[BANK0 ] unsigned char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;		None               void
  1169 ;; Registers used:
  1170 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1176 ;;      Params:         0       1       0       0       0       0       0       0       0
  1177 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1178 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1179 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1180 ;;Total ram usage:        3 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; Hardware stack levels required when called:    6
  1183 ;; This function calls:
  1184 ;;		_lcd_write_byte
  1185 ;; This function is called by:
  1186 ;;		_main
  1187 ;;		_lcd_putnum
  1188 ;;		_lcd_puts
  1189 ;;		_lcd_put_blank
  1190 ;;		_lcd_puts_const
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           	psect	text3
  1195  0010DE                     __ptext3:
  1196                           	opt stack 0
  1197  0010DE                     _lcd_gotoxy:
  1198                           	opt stack 23
  1199                           
  1200                           ; BSR set to: 0
  1201                           ;incstack = 0
  1202                           ;lcd_gotoxy@x stored from wreg
  1203  0010DE  0100               	movlb	0	; () banked
  1204  0010E0  6F67               	movwf	lcd_gotoxy@x& (0+255),b
  1205                           
  1206                           ; BSR set to: 0
  1207                           ;lcd_driver.c: 57: uint8_t addr;
  1208                           ;lcd_driver.c: 59: if ((y > 3) || (x > 19))
  1209  0010E2  0E04               	movlw	4
  1210  0010E4  0100               	movlb	0	; () banked
  1211  0010E6  5D65               	subwf	lcd_gotoxy@y& (0+255),w,b
  1212  0010E8  B0D8               	btfsc	status,0,c
  1213  0010EA  D032               	goto	l147
  1214                           
  1215                           ; BSR set to: 0
  1216  0010EC  0E13               	movlw	19
  1217  0010EE  0100               	movlb	0	; () banked
  1218  0010F0  6567               	cpfsgt	lcd_gotoxy@x& (0+255),b
  1219  0010F2  D001               	goto	l144
  1220  0010F4  D02D               	goto	l147
  1221  0010F6                     l144:
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;lcd_driver.c: 62: }
  1225                           ;lcd_driver.c: 63: lcd_x = x;
  1226  0010F6  C067  F042         	movff	lcd_gotoxy@x,_lcd_x
  1227                           
  1228                           ;lcd_driver.c: 64: lcd_y = y;
  1229  0010FA  C065  F043         	movff	lcd_gotoxy@y,_lcd_y
  1230                           
  1231                           ;lcd_driver.c: 65: addr = x;
  1232  0010FE  C067  F066         	movff	lcd_gotoxy@x,lcd_gotoxy@addr
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;lcd_driver.c: 66: addr += LCD_ROW_ADDRESS[y];
  1236  001102  0100               	movlb	0	; () banked
  1237  001104  5165               	movf	lcd_gotoxy@y& (0+255),w,b
  1238  001106  0D01               	mullw	1
  1239  001108  0E01               	movlw	low _LCD_ROW_ADDRESS
  1240  00110A  24F3               	addwf	prodl,w,c
  1241  00110C  6EF6               	movwf	tblptrl,c
  1242  00110E  0E08               	movlw	high _LCD_ROW_ADDRESS
  1243  001110  20F4               	addwfc	prodh,w,c
  1244  001112  6EF7               	movwf	tblptrh,c
  1245  001114                     	if	0	;There are less than 3 active tblptr bytes
  1246  001114                     	endif
  1247  001114  0008               	tblrd		*
  1248  001116  50F5               	movf	tablat,w,c
  1249  001118  0100               	movlb	0	; () banked
  1250  00111A  2766               	addwf	lcd_gotoxy@addr& (0+255),f,b
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;lcd_driver.c: 67: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1254  00111C  0EFA               	movlw	250
  1255  00111E                     u1257:
  1256  00111E  F000               	nop	
  1257  001120  2EE8               	decfsz	wreg,f,c
  1258  001122  D7FD               	goto	u1257
  1259                           
  1260                           ;lcd_driver.c: 68: lcd_write_byte(addr, 0);
  1261  001124  0E00               	movlw	0
  1262  001126  0100               	movlb	0	; () banked
  1263  001128  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1264  00112A  0100               	movlb	0	; () banked
  1265  00112C  5166               	movf	lcd_gotoxy@addr& (0+255),w,b
  1266  00112E  ECFC  F009         	call	_lcd_write_byte
  1267                           
  1268                           ;lcd_driver.c: 69: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1269  001132  0EFA               	movlw	250
  1270  001134                     u1267:
  1271  001134  F000               	nop	
  1272  001136  2EE8               	decfsz	wreg,f,c
  1273  001138  D7FD               	goto	u1267
  1274                           
  1275                           ;lcd_driver.c: 70: lcd_write_byte(addr, 0);
  1276  00113A  0E00               	movlw	0
  1277  00113C  0100               	movlb	0	; () banked
  1278  00113E  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1279  001140  0100               	movlb	0	; () banked
  1280  001142  5166               	movf	lcd_gotoxy@addr& (0+255),w,b
  1281  001144  ECFC  F009         	call	_lcd_write_byte
  1282                           
  1283                           ;lcd_driver.c: 71: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1284  001148  0EFA               	movlw	250
  1285  00114A                     u1277:
  1286  00114A  F000               	nop	
  1287  00114C  2EE8               	decfsz	wreg,f,c
  1288  00114E  D7FD               	goto	u1277
  1289  001150                     l147:
  1290  001150  0012               	return	
  1291  001152                     __end_of_lcd_gotoxy:
  1292                           	opt stack 0
  1293                           tblptru	equ	0xFF8
  1294                           tblptrh	equ	0xFF7
  1295                           tblptrl	equ	0xFF6
  1296                           tablat	equ	0xFF5
  1297                           prodh	equ	0xFF4
  1298                           prodl	equ	0xFF3
  1299                           intcon	equ	0xFF2
  1300                           postinc0	equ	0xFEE
  1301                           wreg	equ	0xFE8
  1302                           status	equ	0xFD8
  1303                           
  1304 ;; *************** function ___lwdiv *****************
  1305 ;; Defined at:
  1306 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1307 ;; Parameters:    Size  Location     Type
  1308 ;;  dividend        2    0[BANK0 ] unsigned int 
  1309 ;;  divisor         2    2[BANK0 ] unsigned int 
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;  quotient        2    4[BANK0 ] unsigned int 
  1312 ;;  counter         1    6[BANK0 ] unsigned char 
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  2    0[BANK0 ] unsigned int 
  1315 ;; Registers used:
  1316 ;;		wreg, status,2, status,0
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1322 ;;      Params:         0       4       0       0       0       0       0       0       0
  1323 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1325 ;;      Totals:         0       7       0       0       0       0       0       0       0
  1326 ;;Total ram usage:        7 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    4
  1329 ;; This function calls:
  1330 ;;		Nothing
  1331 ;; This function is called by:
  1332 ;;		_lcd_putnum
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text4
  1337  000FF2                     __ptext4:
  1338                           	opt stack 0
  1339  000FF2                     ___lwdiv:
  1340                           	opt stack 25
  1341                           
  1342                           ;incstack = 0
  1343  000FF2  0E00               	movlw	0
  1344  000FF4  0100               	movlb	0	; () banked
  1345  000FF6  6F65               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1346  000FF8  0E00               	movlw	0
  1347  000FFA  0100               	movlb	0	; () banked
  1348  000FFC  6F64               	movwf	___lwdiv@quotient& (0+255),b
  1349                           
  1350                           ; BSR set to: 0
  1351  000FFE  0100               	movlb	0	; () banked
  1352  001000  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1353  001002  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
  1354  001004  B4D8               	btfsc	status,2,c
  1355  001006  D02C               	goto	l834
  1356                           
  1357                           ; BSR set to: 0
  1358  001008  0E01               	movlw	1
  1359  00100A  0100               	movlb	0	; () banked
  1360  00100C  6F66               	movwf	___lwdiv@counter& (0+255),b
  1361  00100E  D006               	goto	l1637
  1362  001010                     l1635:
  1363                           
  1364                           ; BSR set to: 0
  1365  001010  0100               	movlb	0	; () banked
  1366  001012  90D8               	bcf	status,0,c
  1367  001014  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  1368  001016  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1369  001018  0100               	movlb	0	; () banked
  1370  00101A  2B66               	incf	___lwdiv@counter& (0+255),f,b
  1371  00101C                     l1637:
  1372                           
  1373                           ; BSR set to: 0
  1374  00101C  0100               	movlb	0	; () banked
  1375  00101E  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  1376  001020  D7F7               	goto	l1635
  1377  001022                     l1639:
  1378                           
  1379                           ; BSR set to: 0
  1380  001022  0100               	movlb	0	; () banked
  1381  001024  90D8               	bcf	status,0,c
  1382  001026  3764               	rlcf	___lwdiv@quotient& (0+255),f,b
  1383  001028  3765               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1384                           
  1385                           ; BSR set to: 0
  1386  00102A  0100               	movlb	0	; () banked
  1387  00102C  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1388  00102E  0100               	movlb	0	; () banked
  1389  001030  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  1390  001032  0100               	movlb	0	; () banked
  1391  001034  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1392  001036  0100               	movlb	0	; () banked
  1393  001038  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  1394  00103A  A0D8               	btfss	status,0,c
  1395  00103C  D00A               	goto	l1647
  1396                           
  1397                           ; BSR set to: 0
  1398  00103E  0100               	movlb	0	; () banked
  1399  001040  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1400  001042  0100               	movlb	0	; () banked
  1401  001044  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  1402  001046  0100               	movlb	0	; () banked
  1403  001048  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1404  00104A  0100               	movlb	0	; () banked
  1405  00104C  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  1406                           
  1407                           ; BSR set to: 0
  1408  00104E  0100               	movlb	0	; () banked
  1409  001050  8164               	bsf	___lwdiv@quotient& (0+255),0,b
  1410  001052                     l1647:
  1411                           
  1412                           ; BSR set to: 0
  1413  001052  0100               	movlb	0	; () banked
  1414  001054  90D8               	bcf	status,0,c
  1415  001056  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  1416  001058  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  1417                           
  1418                           ; BSR set to: 0
  1419  00105A  0100               	movlb	0	; () banked
  1420  00105C  2F66               	decfsz	___lwdiv@counter& (0+255),f,b
  1421  00105E  D7E1               	goto	l1639
  1422  001060                     l834:
  1423                           
  1424                           ; BSR set to: 0
  1425  001060  C064  F060         	movff	___lwdiv@quotient,?___lwdiv
  1426  001064  C065  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1427                           
  1428                           ; BSR set to: 0
  1429  001068  0012               	return	
  1430  00106A                     __end_of___lwdiv:
  1431                           	opt stack 0
  1432                           tblptru	equ	0xFF8
  1433                           tblptrh	equ	0xFF7
  1434                           tblptrl	equ	0xFF6
  1435                           tablat	equ	0xFF5
  1436                           prodh	equ	0xFF4
  1437                           prodl	equ	0xFF3
  1438                           intcon	equ	0xFF2
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           status	equ	0xFD8
  1442                           
  1443 ;; *************** function _lcd_init *****************
  1444 ;; Defined at:
  1445 ;;		line 11 in file "lcd_driver.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;		None
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;		None
  1450 ;; Return value:  Size  Location     Type
  1451 ;;		None               void
  1452 ;; Registers used:
  1453 ;;		wreg, status,2, status,0, cstack
  1454 ;; Tracked objects:
  1455 ;;		On entry : 0/0
  1456 ;;		On exit  : 0/0
  1457 ;;		Unchanged: 0/0
  1458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1459 ;;      Params:         0       0       0       0       0       0       0       0       0
  1460 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1461 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1462 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1463 ;;Total ram usage:        1 bytes
  1464 ;; Hardware stack levels used:    1
  1465 ;; Hardware stack levels required when called:    6
  1466 ;; This function calls:
  1467 ;;		_lcd_write_byte
  1468 ;;		_lcd_write_nibble
  1469 ;; This function is called by:
  1470 ;;		_main
  1471 ;; This function uses a non-reentrant model
  1472 ;;
  1473                           
  1474                           	psect	text5
  1475  000BC0                     __ptext5:
  1476                           	opt stack 0
  1477  000BC0                     _lcd_init:
  1478                           	opt stack 24
  1479                           
  1480                           ;lcd_driver.c: 15: { _delay((unsigned long)((15000)*(4000000/4000000.0))); };
  1481                           
  1482                           ; BSR set to: 0
  1483                           ;incstack = 0
  1484  000BC0  0E14               	movlw	20
  1485  000BC2  0100               	movlb	0	; () banked
  1486  000BC4  6F65               	movwf	??_lcd_init& (0+255),b
  1487  000BC6  0E7A               	movlw	122
  1488  000BC8                     u1287:
  1489  000BC8  2EE8               	decfsz	wreg,f,c
  1490  000BCA  D7FE               	goto	u1287
  1491  000BCC  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1492  000BCE  D7FC               	goto	u1287
  1493                           
  1494                           ;lcd_driver.c: 18: lcd_write_nibble(0x3, 0);
  1495  000BD0  0E00               	movlw	0
  1496  000BD2  0100               	movlb	0	; () banked
  1497  000BD4  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1498  000BD6  0E03               	movlw	3
  1499  000BD8  ECBD  F006         	call	_lcd_write_nibble
  1500                           
  1501                           ;lcd_driver.c: 20: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1502  000BDC  0E07               	movlw	7
  1503  000BDE  0100               	movlb	0	; () banked
  1504  000BE0  6F65               	movwf	??_lcd_init& (0+255),b
  1505  000BE2  0E7D               	movlw	125
  1506  000BE4                     u1297:
  1507  000BE4  2EE8               	decfsz	wreg,f,c
  1508  000BE6  D7FE               	goto	u1297
  1509  000BE8  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1510  000BEA  D7FC               	goto	u1297
  1511  000BEC  F000               	nop	
  1512                           
  1513                           ;lcd_driver.c: 22: lcd_write_nibble(0x3, 0);
  1514  000BEE  0E00               	movlw	0
  1515  000BF0  0100               	movlb	0	; () banked
  1516  000BF2  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1517  000BF4  0E03               	movlw	3
  1518  000BF6  ECBD  F006         	call	_lcd_write_nibble
  1519                           
  1520                           ;lcd_driver.c: 24: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1521  000BFA  0E07               	movlw	7
  1522  000BFC  0100               	movlb	0	; () banked
  1523  000BFE  6F65               	movwf	??_lcd_init& (0+255),b
  1524  000C00  0E7D               	movlw	125
  1525  000C02                     u1307:
  1526  000C02  2EE8               	decfsz	wreg,f,c
  1527  000C04  D7FE               	goto	u1307
  1528  000C06  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1529  000C08  D7FC               	goto	u1307
  1530  000C0A  F000               	nop	
  1531                           
  1532                           ;lcd_driver.c: 26: lcd_write_nibble(0x3, 0);
  1533  000C0C  0E00               	movlw	0
  1534  000C0E  0100               	movlb	0	; () banked
  1535  000C10  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1536  000C12  0E03               	movlw	3
  1537  000C14  ECBD  F006         	call	_lcd_write_nibble
  1538                           
  1539                           ;lcd_driver.c: 28: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1540  000C18  0E07               	movlw	7
  1541  000C1A  0100               	movlb	0	; () banked
  1542  000C1C  6F65               	movwf	??_lcd_init& (0+255),b
  1543  000C1E  0E7D               	movlw	125
  1544  000C20                     u1317:
  1545  000C20  2EE8               	decfsz	wreg,f,c
  1546  000C22  D7FE               	goto	u1317
  1547  000C24  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1548  000C26  D7FC               	goto	u1317
  1549  000C28  F000               	nop	
  1550                           
  1551                           ;lcd_driver.c: 30: lcd_write_nibble(0x2, 0);
  1552  000C2A  0E00               	movlw	0
  1553  000C2C  0100               	movlb	0	; () banked
  1554  000C2E  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1555  000C30  0E02               	movlw	2
  1556  000C32  ECBD  F006         	call	_lcd_write_nibble
  1557                           
  1558                           ;lcd_driver.c: 39: lcd_write_byte(0x28, 0);
  1559  000C36  0E00               	movlw	0
  1560  000C38  0100               	movlb	0	; () banked
  1561  000C3A  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1562  000C3C  0E28               	movlw	40
  1563  000C3E  ECFC  F009         	call	_lcd_write_byte
  1564                           
  1565                           ;lcd_driver.c: 40: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1566  000C42  0E07               	movlw	7
  1567  000C44  0100               	movlb	0	; () banked
  1568  000C46  6F65               	movwf	??_lcd_init& (0+255),b
  1569  000C48  0E7D               	movlw	125
  1570  000C4A                     u1327:
  1571  000C4A  2EE8               	decfsz	wreg,f,c
  1572  000C4C  D7FE               	goto	u1327
  1573  000C4E  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1574  000C50  D7FC               	goto	u1327
  1575  000C52  F000               	nop	
  1576                           
  1577                           ;lcd_driver.c: 42: lcd_write_byte(0x0c, 0);
  1578  000C54  0E00               	movlw	0
  1579  000C56  0100               	movlb	0	; () banked
  1580  000C58  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1581  000C5A  0E0C               	movlw	12
  1582  000C5C  ECFC  F009         	call	_lcd_write_byte
  1583                           
  1584                           ;lcd_driver.c: 43: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1585  000C60  0E07               	movlw	7
  1586  000C62  0100               	movlb	0	; () banked
  1587  000C64  6F65               	movwf	??_lcd_init& (0+255),b
  1588  000C66  0E7D               	movlw	125
  1589  000C68                     u1337:
  1590  000C68  2EE8               	decfsz	wreg,f,c
  1591  000C6A  D7FE               	goto	u1337
  1592  000C6C  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1593  000C6E  D7FC               	goto	u1337
  1594  000C70  F000               	nop	
  1595                           
  1596                           ;lcd_driver.c: 45: lcd_write_byte(0x01, 0);
  1597  000C72  0E00               	movlw	0
  1598  000C74  0100               	movlb	0	; () banked
  1599  000C76  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1600  000C78  0E01               	movlw	1
  1601  000C7A  ECFC  F009         	call	_lcd_write_byte
  1602                           
  1603                           ;lcd_driver.c: 46: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1604  000C7E  0E07               	movlw	7
  1605  000C80  0100               	movlb	0	; () banked
  1606  000C82  6F65               	movwf	??_lcd_init& (0+255),b
  1607  000C84  0E7D               	movlw	125
  1608  000C86                     u1347:
  1609  000C86  2EE8               	decfsz	wreg,f,c
  1610  000C88  D7FE               	goto	u1347
  1611  000C8A  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1612  000C8C  D7FC               	goto	u1347
  1613  000C8E  F000               	nop	
  1614                           
  1615                           ;lcd_driver.c: 48: lcd_write_byte(0x6, 0);
  1616  000C90  0E00               	movlw	0
  1617  000C92  0100               	movlb	0	; () banked
  1618  000C94  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1619  000C96  0E06               	movlw	6
  1620  000C98  ECFC  F009         	call	_lcd_write_byte
  1621                           
  1622                           ;lcd_driver.c: 49: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1623  000C9C  0E07               	movlw	7
  1624  000C9E  0100               	movlb	0	; () banked
  1625  000CA0  6F65               	movwf	??_lcd_init& (0+255),b
  1626  000CA2  0E7D               	movlw	125
  1627  000CA4                     u1357:
  1628  000CA4  2EE8               	decfsz	wreg,f,c
  1629  000CA6  D7FE               	goto	u1357
  1630  000CA8  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1631  000CAA  D7FC               	goto	u1357
  1632  000CAC  F000               	nop	
  1633  000CAE  0012               	return	
  1634  000CB0                     __end_of_lcd_init:
  1635                           	opt stack 0
  1636                           tblptru	equ	0xFF8
  1637                           tblptrh	equ	0xFF7
  1638                           tblptrl	equ	0xFF6
  1639                           tablat	equ	0xFF5
  1640                           prodh	equ	0xFF4
  1641                           prodl	equ	0xFF3
  1642                           intcon	equ	0xFF2
  1643                           postinc0	equ	0xFEE
  1644                           wreg	equ	0xFE8
  1645                           status	equ	0xFD8
  1646                           
  1647 ;; *************** function _lcd_write_byte *****************
  1648 ;; Defined at:
  1649 ;;		line 185 in file "lcd_driver.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  byte            1    wreg     unsigned char 
  1652 ;;  is_data         1    3[BANK0 ] unsigned char 
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  byte            1    4[BANK0 ] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;		None               void
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0, cstack
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1664 ;;      Params:         0       1       0       0       0       0       0       0       0
  1665 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1666 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1667 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1668 ;;Total ram usage:        2 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    5
  1671 ;; This function calls:
  1672 ;;		_lcd_write_nibble
  1673 ;; This function is called by:
  1674 ;;		_main
  1675 ;;		_lcd_init
  1676 ;;		_lcd_gotoxy
  1677 ;;		_lcd_putnum
  1678 ;;		_lcd_puts
  1679 ;;		_lcd_put_blank
  1680 ;;		_lcd_puts_const
  1681 ;;		_lcd_set_cgram
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           	psect	text6
  1686  0013F8                     __ptext6:
  1687                           	opt stack 0
  1688  0013F8                     _lcd_write_byte:
  1689                           	opt stack 25
  1690                           
  1691                           ;incstack = 0
  1692                           ;lcd_write_byte@byte stored from wreg
  1693  0013F8  0100               	movlb	0	; () banked
  1694  0013FA  6F64               	movwf	lcd_write_byte@byte& (0+255),b
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;lcd_driver.c: 188: lcd_write_nibble(byte >> 4, is_data);
  1698  0013FC  C063  F060         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
  1699  001400  0100               	movlb	0	; () banked
  1700  001402  3964               	swapf	lcd_write_byte@byte& (0+255),w,b
  1701  001404  0B0F               	andlw	15
  1702  001406  ECBD  F006         	call	_lcd_write_nibble
  1703                           
  1704                           ;lcd_driver.c: 189: lcd_write_nibble(byte, is_data);
  1705  00140A  C063  F060         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
  1706  00140E  0100               	movlb	0	; () banked
  1707  001410  5164               	movf	lcd_write_byte@byte& (0+255),w,b
  1708  001412  ECBD  F006         	call	_lcd_write_nibble
  1709  001416  0012               	return	
  1710  001418                     __end_of_lcd_write_byte:
  1711                           	opt stack 0
  1712                           tblptru	equ	0xFF8
  1713                           tblptrh	equ	0xFF7
  1714                           tblptrl	equ	0xFF6
  1715                           tablat	equ	0xFF5
  1716                           prodh	equ	0xFF4
  1717                           prodl	equ	0xFF3
  1718                           intcon	equ	0xFF2
  1719                           postinc0	equ	0xFEE
  1720                           wreg	equ	0xFE8
  1721                           status	equ	0xFD8
  1722                           
  1723 ;; *************** function _lcd_write_nibble *****************
  1724 ;; Defined at:
  1725 ;;		line 176 in file "lcd_driver.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;  nibble          1    wreg     unsigned char 
  1728 ;;  is_data         1    0[BANK0 ] unsigned char 
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;  nibble          1    2[BANK0 ] unsigned char 
  1731 ;; Return value:  Size  Location     Type
  1732 ;;		None               void
  1733 ;; Registers used:
  1734 ;;		wreg, status,2, status,0, cstack
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1740 ;;      Params:         0       1       0       0       0       0       0       0       0
  1741 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1742 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1743 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1744 ;;Total ram usage:        3 bytes
  1745 ;; Hardware stack levels used:    1
  1746 ;; Hardware stack levels required when called:    4
  1747 ;; This function calls:
  1748 ;;		Nothing
  1749 ;; This function is called by:
  1750 ;;		_lcd_init
  1751 ;;		_lcd_write_byte
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           	psect	text7
  1756  000D7A                     __ptext7:
  1757                           	opt stack 0
  1758  000D7A                     _lcd_write_nibble:
  1759                           	opt stack 25
  1760                           
  1761                           ;incstack = 0
  1762                           ;lcd_write_nibble@nibble stored from wreg
  1763  000D7A  0100               	movlb	0	; () banked
  1764  000D7C  6F62               	movwf	lcd_write_nibble@nibble& (0+255),b
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;lcd_driver.c: 179: { LATDbits.LATD2 = is_data; };
  1768  000D7E  0100               	movlb	0	; () banked
  1769  000D80  B160               	btfsc	lcd_write_nibble@is_data& (0+255),0,b
  1770  000D82  D002               	bra	u875
  1771  000D84  948C               	bcf	3980,2,c	;volatile
  1772  000D86  D001               	bra	u876
  1773  000D88                     u875:
  1774  000D88  848C               	bsf	3980,2,c	;volatile
  1775  000D8A                     u876:
  1776                           
  1777                           ;lcd_driver.c: 180: { _delay((unsigned long)((100)*(4000000/4000000.0))); };
  1778  000D8A  0E21               	movlw	33
  1779  000D8C                     u1367:
  1780  000D8C  2EE8               	decfsz	wreg,f,c
  1781  000D8E  D7FE               	goto	u1367
  1782  000D90  F000               	nop	
  1783                           
  1784                           ;lcd_driver.c: 181: { LATDbits.LATD4 = nibble & 1; LATDbits.LATD5 = (nibble & 2) >> 1; L
      +                          ATDbits.LATD6 = (nibble & 4) >> 2; LATDbits.LATD7 = (nibble & 8) >> 3; };
  1785  000D92  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1786  000D96  0E01               	movlw	1
  1787  000D98  0100               	movlb	0	; () banked
  1788  000D9A  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1789  000D9C  0100               	movlb	0	; () banked
  1790  000D9E  3B61               	swapf	??_lcd_write_nibble& (0+255),f,b
  1791  000DA0  508C               	movf	3980,w,c	;volatile
  1792  000DA2  0100               	movlb	0	; () banked
  1793  000DA4  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1794  000DA6  0BEF               	andlw	-17
  1795  000DA8  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1796  000DAA  6E8C               	movwf	3980,c	;volatile
  1797                           
  1798                           ; BSR set to: 0
  1799  000DAC  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1800  000DB0  0100               	movlb	0	; () banked
  1801  000DB2  90D8               	bcf	status,0,c
  1802  000DB4  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1803  000DB6  0E01               	movlw	1
  1804  000DB8  0100               	movlb	0	; () banked
  1805  000DBA  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1806  000DBC  0100               	movlb	0	; () banked
  1807  000DBE  3B61               	swapf	??_lcd_write_nibble& (0+255),f,b
  1808  000DC0  4761               	rlncf	??_lcd_write_nibble& (0+255),f,b
  1809  000DC2  508C               	movf	3980,w,c	;volatile
  1810  000DC4  0100               	movlb	0	; () banked
  1811  000DC6  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1812  000DC8  0BDF               	andlw	-33
  1813  000DCA  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1814  000DCC  6E8C               	movwf	3980,c	;volatile
  1815                           
  1816                           ; BSR set to: 0
  1817  000DCE  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1818  000DD2  0100               	movlb	0	; () banked
  1819  000DD4  90D8               	bcf	status,0,c
  1820  000DD6  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1821  000DD8  0100               	movlb	0	; () banked
  1822  000DDA  90D8               	bcf	status,0,c
  1823  000DDC  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1824  000DDE  0E01               	movlw	1
  1825  000DE0  0100               	movlb	0	; () banked
  1826  000DE2  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1827  000DE4  0100               	movlb	0	; () banked
  1828  000DE6  3B61               	swapf	??_lcd_write_nibble& (0+255),f,b
  1829  000DE8  4761               	rlncf	??_lcd_write_nibble& (0+255),f,b
  1830  000DEA  4761               	rlncf	??_lcd_write_nibble& (0+255),f,b
  1831  000DEC  508C               	movf	3980,w,c	;volatile
  1832  000DEE  0100               	movlb	0	; () banked
  1833  000DF0  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1834  000DF2  0BBF               	andlw	-65
  1835  000DF4  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1836  000DF6  6E8C               	movwf	3980,c	;volatile
  1837                           
  1838                           ; BSR set to: 0
  1839  000DF8  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1840  000DFC  0100               	movlb	0	; () banked
  1841  000DFE  90D8               	bcf	status,0,c
  1842  000E00  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1843  000E02  0100               	movlb	0	; () banked
  1844  000E04  90D8               	bcf	status,0,c
  1845  000E06  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1846  000E08  0100               	movlb	0	; () banked
  1847  000E0A  90D8               	bcf	status,0,c
  1848  000E0C  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1849  000E0E  0E01               	movlw	1
  1850  000E10  0100               	movlb	0	; () banked
  1851  000E12  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1852  000E14  0100               	movlb	0	; () banked
  1853  000E16  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1854  000E18  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1855  000E1A  508C               	movf	3980,w,c	;volatile
  1856  000E1C  0100               	movlb	0	; () banked
  1857  000E1E  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1858  000E20  0B7F               	andlw	-129
  1859  000E22  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1860  000E24  6E8C               	movwf	3980,c	;volatile
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;lcd_driver.c: 182: { LATDbits.LATD3 = 1; { _delay((unsigned long)((200)*(4000000/400000
      +                          0.0))); }; LATDbits.LATD3 = 0; { _delay((unsigned long)((500)*(4000000/4000000.0))); }; 
      +                          };
  1864  000E26  868C               	bsf	3980,3,c	;volatile
  1865                           
  1866                           ; BSR set to: 0
  1867  000E28  0E42               	movlw	66
  1868  000E2A                     u1377:
  1869  000E2A  2EE8               	decfsz	wreg,f,c
  1870  000E2C  D7FE               	goto	u1377
  1871  000E2E  D000               	nop2		;nop
  1872  000E30  968C               	bcf	3980,3,c	;volatile
  1873  000E32  0EA6               	movlw	166
  1874  000E34                     u1387:
  1875  000E34  2EE8               	decfsz	wreg,f,c
  1876  000E36  D7FE               	goto	u1387
  1877  000E38  D000               	nop2		;nop
  1878  000E3A  0012               	return	
  1879  000E3C                     __end_of_lcd_write_nibble:
  1880                           	opt stack 0
  1881                           tblptru	equ	0xFF8
  1882                           tblptrh	equ	0xFF7
  1883                           tblptrl	equ	0xFF6
  1884                           tablat	equ	0xFF5
  1885                           prodh	equ	0xFF4
  1886                           prodl	equ	0xFF3
  1887                           intcon	equ	0xFF2
  1888                           postinc0	equ	0xFEE
  1889                           wreg	equ	0xFE8
  1890                           status	equ	0xFD8
  1891                           
  1892 ;; *************** function _SetDCPWM1 *****************
  1893 ;; Defined at:
  1894 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;  dutycycle       2    0[BANK0 ] unsigned int 
  1897 ;; Auto vars:     Size  Location     Type
  1898 ;;  DCycle          2    4[BANK0 ] struct PWMDC
  1899 ;; Return value:  Size  Location     Type
  1900 ;;		None               void
  1901 ;; Registers used:
  1902 ;;		wreg, status,2, status,0
  1903 ;; Tracked objects:
  1904 ;;		On entry : 0/0
  1905 ;;		On exit  : 0/0
  1906 ;;		Unchanged: 0/0
  1907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1908 ;;      Params:         0       2       0       0       0       0       0       0       0
  1909 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1910 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1911 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1912 ;;Total ram usage:        6 bytes
  1913 ;; Hardware stack levels used:    1
  1914 ;; Hardware stack levels required when called:    4
  1915 ;; This function calls:
  1916 ;;		Nothing
  1917 ;; This function is called by:
  1918 ;;		_main
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text8
  1923  00130E                     __ptext8:
  1924                           	opt stack 0
  1925  00130E                     _SetDCPWM1:
  1926                           	opt stack 26
  1927                           
  1928                           ;incstack = 0
  1929  00130E  0100               	movlb	0	; () banked
  1930  001310  C060  F062         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  1931  001314  0100               	movlb	0	; () banked
  1932  001316  C061  F063         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  1933  00131A  0E06               	movlw	6
  1934  00131C                     u1035:
  1935  00131C  90D8               	bcf	status,0,c
  1936  00131E  0100               	movlb	0	; () banked
  1937  001320  3762               	rlcf	??_SetDCPWM1& (0+255),f,b
  1938  001322  3763               	rlcf	(??_SetDCPWM1+1)& (0+255),f,b
  1939  001324  2EE8               	decfsz	wreg,f,c
  1940  001326  D7FA               	goto	u1035
  1941  001328  C062  F064         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  1942  00132C  C063  F065         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  1943                           
  1944                           ; BSR set to: 0
  1945  001330  C065  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  1946  001334  C064  F062         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  1947  001338  0100               	movlb	0	; () banked
  1948  00133A  90D8               	bcf	status,0,c
  1949  00133C  3362               	rrcf	??_SetDCPWM1& (0+255),f,b
  1950  00133E  0100               	movlb	0	; () banked
  1951  001340  90D8               	bcf	status,0,c
  1952  001342  3362               	rrcf	??_SetDCPWM1& (0+255),f,b
  1953  001344  0E30               	movlw	48
  1954  001346  0100               	movlb	0	; () banked
  1955  001348  1762               	andwf	??_SetDCPWM1& (0+255),f,b
  1956  00134A  50BD               	movf	4029,w,c	;volatile
  1957  00134C  0BCF               	andlw	207
  1958  00134E  0100               	movlb	0	; () banked
  1959  001350  1162               	iorwf	??_SetDCPWM1& (0+255),w,b
  1960  001352  6EBD               	movwf	4029,c	;volatile
  1961                           
  1962                           ; BSR set to: 0
  1963  001354  0012               	return	
  1964  001356                     __end_of_SetDCPWM1:
  1965                           	opt stack 0
  1966                           tblptru	equ	0xFF8
  1967                           tblptrh	equ	0xFF7
  1968                           tblptrl	equ	0xFF6
  1969                           tablat	equ	0xFF5
  1970                           prodh	equ	0xFF4
  1971                           prodl	equ	0xFF3
  1972                           intcon	equ	0xFF2
  1973                           postinc0	equ	0xFEE
  1974                           wreg	equ	0xFE8
  1975                           status	equ	0xFD8
  1976                           
  1977 ;; *************** function _OpenUSART *****************
  1978 ;; Defined at:
  1979 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;  config          1    wreg     unsigned char 
  1982 ;;  spbrg           2    0[BANK0 ] unsigned int 
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;  config          1    5[BANK0 ] unsigned char 
  1985 ;; Return value:  Size  Location     Type
  1986 ;;		None               void
  1987 ;; Registers used:
  1988 ;;		wreg, status,2
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1994 ;;      Params:         0       2       0       0       0       0       0       0       0
  1995 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1996 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1997 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1998 ;;Total ram usage:        6 bytes
  1999 ;; Hardware stack levels used:    1
  2000 ;; Hardware stack levels required when called:    4
  2001 ;; This function calls:
  2002 ;;		Nothing
  2003 ;; This function is called by:
  2004 ;;		_main
  2005 ;; This function uses a non-reentrant model
  2006 ;;
  2007                           
  2008                           	psect	text9
  2009  000F72                     __ptext9:
  2010                           	opt stack 0
  2011  000F72                     _OpenUSART:
  2012                           	opt stack 26
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;incstack = 0
  2016                           ;OpenUSART@config stored from wreg
  2017  000F72  0100               	movlb	0	; () banked
  2018  000F74  6F65               	movwf	OpenUSART@config& (0+255),b
  2019                           
  2020                           ; BSR set to: 0
  2021  000F76  0E00               	movlw	0
  2022  000F78  6EAC               	movwf	4012,c	;volatile
  2023  000F7A  0E00               	movlw	0
  2024  000F7C  6EAB               	movwf	4011,c	;volatile
  2025                           
  2026                           ; BSR set to: 0
  2027  000F7E  0100               	movlb	0	; () banked
  2028  000F80  B165               	btfsc	OpenUSART@config& (0+255),0,b
  2029                           
  2030                           ; BSR set to: 0
  2031  000F82  88AC               	bsf	4012,4,c	;volatile
  2032                           
  2033                           ; BSR set to: 0
  2034                           
  2035                           ; BSR set to: 0
  2036  000F84  0100               	movlb	0	; () banked
  2037  000F86  A365               	btfss	OpenUSART@config& (0+255),1,b
  2038  000F88  D002               	goto	l1661
  2039                           
  2040                           ; BSR set to: 0
  2041  000F8A  8CAC               	bsf	4012,6,c	;volatile
  2042  000F8C  8CAB               	bsf	4011,6,c	;volatile
  2043  000F8E                     l1661:
  2044                           
  2045                           ; BSR set to: 0
  2046  000F8E  0100               	movlb	0	; () banked
  2047  000F90  B565               	btfsc	OpenUSART@config& (0+255),2,b
  2048                           
  2049                           ; BSR set to: 0
  2050  000F92  8EAC               	bsf	4012,7,c	;volatile
  2051                           
  2052                           ; BSR set to: 0
  2053                           
  2054                           ; BSR set to: 0
  2055  000F94  0100               	movlb	0	; () banked
  2056  000F96  A765               	btfss	OpenUSART@config& (0+255),3,b
  2057  000F98  D002               	goto	l240
  2058                           
  2059                           ; BSR set to: 0
  2060  000F9A  88AB               	bsf	4011,4,c	;volatile
  2061  000F9C  D001               	goto	l1669
  2062  000F9E                     l240:
  2063                           
  2064                           ; BSR set to: 0
  2065  000F9E  8AAB               	bsf	4011,5,c	;volatile
  2066  000FA0                     l1669:
  2067                           
  2068                           ; BSR set to: 0
  2069  000FA0  0100               	movlb	0	; () banked
  2070  000FA2  B965               	btfsc	OpenUSART@config& (0+255),4,b
  2071                           
  2072                           ; BSR set to: 0
  2073  000FA4  84AC               	bsf	4012,2,c	;volatile
  2074                           
  2075                           ; BSR set to: 0
  2076  000FA6  989E               	bcf	3998,4,c	;volatile
  2077                           
  2078                           ; BSR set to: 0
  2079  000FA8  0100               	movlb	0	; () banked
  2080  000FAA  BB65               	btfsc	OpenUSART@config& (0+255),5,b
  2081                           
  2082                           ; BSR set to: 0
  2083  000FAC  86AB               	bsf	4011,3,c	;volatile
  2084                           
  2085                           ; BSR set to: 0
  2086                           
  2087                           ; BSR set to: 0
  2088  000FAE  0100               	movlb	0	; () banked
  2089  000FB0  AD65               	btfss	OpenUSART@config& (0+255),6,b
  2090  000FB2  D002               	goto	l244
  2091                           
  2092                           ; BSR set to: 0
  2093  000FB4  8A9D               	bsf	3997,5,c	;volatile
  2094  000FB6  D001               	goto	l245
  2095  000FB8                     l244:
  2096                           
  2097                           ; BSR set to: 0
  2098  000FB8  9A9D               	bcf	3997,5,c	;volatile
  2099  000FBA                     l245:
  2100                           
  2101                           ; BSR set to: 0
  2102  000FBA  9A9E               	bcf	3998,5,c	;volatile
  2103                           
  2104                           ; BSR set to: 0
  2105  000FBC  0100               	movlb	0	; () banked
  2106  000FBE  AF65               	btfss	OpenUSART@config& (0+255),7,b
  2107  000FC0  D002               	goto	l246
  2108                           
  2109                           ; BSR set to: 0
  2110  000FC2  889D               	bsf	3997,4,c	;volatile
  2111  000FC4  D001               	goto	l247
  2112  000FC6                     l246:
  2113                           
  2114                           ; BSR set to: 0
  2115  000FC6  989D               	bcf	3997,4,c	;volatile
  2116  000FC8                     l247:
  2117                           
  2118                           ; BSR set to: 0
  2119  000FC8  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  2120                           
  2121                           ; BSR set to: 0
  2122  000FCC  0100               	movlb	0	; () banked
  2123  000FCE  C061  F062         	movff	OpenUSART@spbrg+1,??_OpenUSART
  2124  000FD2  C062  F063         	movff	??_OpenUSART,??_OpenUSART+1
  2125  000FD6  0100               	movlb	0	; () banked
  2126  000FD8  6B64               	clrf	(??_OpenUSART+2)& (0+255),b
  2127  000FDA  0100               	movlb	0	; () banked
  2128  000FDC  5163               	movf	(??_OpenUSART+1)& (0+255),w,b
  2129  000FDE  6EB0               	movwf	4016,c	;volatile
  2130                           
  2131                           ; BSR set to: 0
  2132  000FE0  8AAC               	bsf	4012,5,c	;volatile
  2133                           
  2134                           ; BSR set to: 0
  2135  000FE2  8EAB               	bsf	4011,7,c	;volatile
  2136                           
  2137                           ; BSR set to: 0
  2138  000FE4  9C94               	bcf	3988,6,c	;volatile
  2139                           
  2140                           ; BSR set to: 0
  2141  000FE6  8E94               	bsf	3988,7,c	;volatile
  2142                           
  2143                           ; BSR set to: 0
  2144  000FE8  B8AC               	btfsc	4012,4,c	;volatile
  2145                           
  2146                           ; BSR set to: 0
  2147  000FEA  BEAC               	btfsc	4012,7,c	;volatile
  2148  000FEC  D001               	goto	l249
  2149                           
  2150                           ; BSR set to: 0
  2151  000FEE  8C94               	bsf	3988,6,c	;volatile
  2152  000FF0                     l249:
  2153                           
  2154                           ; BSR set to: 0
  2155  000FF0  0012               	return	
  2156  000FF2                     __end_of_OpenUSART:
  2157                           	opt stack 0
  2158                           tblptru	equ	0xFF8
  2159                           tblptrh	equ	0xFF7
  2160                           tblptrl	equ	0xFF6
  2161                           tablat	equ	0xFF5
  2162                           prodh	equ	0xFF4
  2163                           prodl	equ	0xFF3
  2164                           intcon	equ	0xFF2
  2165                           postinc0	equ	0xFEE
  2166                           wreg	equ	0xFE8
  2167                           status	equ	0xFD8
  2168                           
  2169 ;; *************** function _OpenPWM1 *****************
  2170 ;; Defined at:
  2171 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;  period          1    wreg     unsigned char 
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;  period          1    0[BANK0 ] unsigned char 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;		None               void
  2178 ;; Registers used:
  2179 ;;		wreg, status,2, status,0
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2185 ;;      Params:         0       0       0       0       0       0       0       0       0
  2186 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2188 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2189 ;;Total ram usage:        1 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    4
  2192 ;; This function calls:
  2193 ;;		Nothing
  2194 ;; This function is called by:
  2195 ;;		_main
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text10
  2200  001456                     __ptext10:
  2201                           	opt stack 0
  2202  001456                     _OpenPWM1:
  2203                           	opt stack 26
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;incstack = 0
  2207                           ;OpenPWM1@period stored from wreg
  2208  001456  0100               	movlb	0	; () banked
  2209  001458  6F60               	movwf	OpenPWM1@period& (0+255),b
  2210                           
  2211                           ; BSR set to: 0
  2212  00145A  0E0C               	movlw	12
  2213  00145C  12BD               	iorwf	4029,f,c	;volatile
  2214                           
  2215                           ; BSR set to: 0
  2216  00145E  9494               	bcf	3988,2,c	;volatile
  2217                           
  2218                           ; BSR set to: 0
  2219  001460  94CA               	bcf	4042,2,c	;volatile
  2220                           
  2221                           ; BSR set to: 0
  2222  001462  C060  FFCB         	movff	OpenPWM1@period,4043	;volatile
  2223                           
  2224                           ; BSR set to: 0
  2225  001466  84CA               	bsf	4042,2,c	;volatile
  2226                           
  2227                           ; BSR set to: 0
  2228  001468  0012               	return	
  2229  00146A                     __end_of_OpenPWM1:
  2230                           	opt stack 0
  2231                           tblptru	equ	0xFF8
  2232                           tblptrh	equ	0xFF7
  2233                           tblptrl	equ	0xFF6
  2234                           tablat	equ	0xFF5
  2235                           prodh	equ	0xFF4
  2236                           prodl	equ	0xFF3
  2237                           intcon	equ	0xFF2
  2238                           postinc0	equ	0xFEE
  2239                           wreg	equ	0xFE8
  2240                           status	equ	0xFD8
  2241                           
  2242 ;; *************** function _ISR *****************
  2243 ;; Defined at:
  2244 ;;		line 97 in file "main.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;		None
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;		None
  2249 ;; Return value:  Size  Location     Type
  2250 ;;		None               void
  2251 ;; Registers used:
  2252 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2258 ;;      Params:         0       0       0       0       0       0       0       0       0
  2259 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2260 ;;      Temps:         14       0       0       0       0       0       0       0       0
  2261 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2262 ;;Total ram usage:       14 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    3
  2265 ;; This function calls:
  2266 ;;		_ReadUSART
  2267 ;;		_atoi
  2268 ;;		_cleanMessageBuffer
  2269 ;;		_itoa
  2270 ;;		_putsUSART
  2271 ;;		_strncpy
  2272 ;; This function is called by:
  2273 ;;		Interrupt level 2
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	intcode
  2278  000008                     __pintcode:
  2279                           	opt stack 0
  2280  000008                     _ISR:
  2281                           	opt stack 23
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;incstack = 0
  2285  000008  CFFA F019          	movff	pclath,??_ISR
  2286  00000C  CFFB F01A          	movff	pclatu,??_ISR+1
  2287  000010  CFE9 F01B          	movff	fsr0l,??_ISR+2
  2288  000014  ED1F  F004         	call	int_func,f	;refresh shadow registers
  2289                           pclatu	equ	0xFFB
  2290                           pclath	equ	0xFFA
  2291                           tblptru	equ	0xFF8
  2292                           tblptrh	equ	0xFF7
  2293                           tblptrl	equ	0xFF6
  2294                           tablat	equ	0xFF5
  2295                           prodh	equ	0xFF4
  2296                           prodl	equ	0xFF3
  2297                           intcon	equ	0xFF2
  2298                           postinc0	equ	0xFEE
  2299                           fsr0l	equ	0xFE9
  2300                           wreg	equ	0xFE8
  2301                           status	equ	0xFD8
  2302                           
  2303                           	psect	intcode_body
  2304  00083E                     __pintcode_body:
  2305                           	opt stack 23
  2306  00083E                     int_func:
  2307                           	opt stack 23
  2308  00083E  0006               	pop		; remove dummy address from shadow register refresh
  2309  000840  CFEA F01C          	movff	fsr0h,??_ISR+3
  2310  000844  CFE1 F01D          	movff	fsr1l,??_ISR+4
  2311  000848  CFE2 F01E          	movff	fsr1h,??_ISR+5
  2312  00084C  CFD9 F01F          	movff	fsr2l,??_ISR+6
  2313  000850  CFDA F020          	movff	fsr2h,??_ISR+7
  2314  000854  CFF3 F021          	movff	prodl,??_ISR+8
  2315  000858  CFF4 F022          	movff	prodh,??_ISR+9
  2316  00085C  CFF6 F023          	movff	tblptrl,??_ISR+10
  2317  000860  CFF7 F024          	movff	tblptrh,??_ISR+11
  2318  000864  CFF8 F025          	movff	tblptru,??_ISR+12
  2319  000868  CFF5 F026          	movff	tablat,??_ISR+13
  2320                           
  2321                           ;main.c: 100: if(PIR1bits.RCIF == 1)
  2322  00086C  AA9E               	btfss	3998,5,c	;volatile
  2323  00086E  D0F4               	goto	i2l106
  2324                           
  2325                           ;main.c: 101: {
  2326                           ;main.c: 102: if(i<200)
  2327  000870  503C               	movf	_i+1,w,c
  2328  000872  0A80               	xorlw	128
  2329  000874  6EF3               	movwf	prodl,c
  2330  000876  0E80               	movlw	128
  2331  000878  5CF3               	subwf	prodl,w,c
  2332  00087A  0EC8               	movlw	200
  2333  00087C  B4D8               	btfsc	status,2,c
  2334  00087E  5C3B               	subwf	_i,w,c
  2335  000880  B0D8               	btfsc	status,0,c
  2336  000882  D0E0               	goto	i2l1585
  2337                           
  2338                           ;main.c: 103: {
  2339                           ;main.c: 104: MessageBuffer[i] = ReadUSART();
  2340  000884  0101               	movlb	1	; () banked
  2341  000886  0E00               	movlw	low _MessageBuffer
  2342  000888  243B               	addwf	_i,w,c
  2343  00088A  6ED9               	movwf	fsr2l,c
  2344  00088C  0101               	movlb	1	; () banked
  2345  00088E  0E01               	movlw	high _MessageBuffer
  2346  000890  203C               	addwfc	_i+1,w,c
  2347  000892  6EDA               	movwf	fsr2h,c
  2348  000894  EC1C  F00A         	call	_ReadUSART	;wreg free
  2349  000898  6EDF               	movwf	indf2,c
  2350                           
  2351                           ;main.c: 106: switch(MessageBuffer[i])
  2352  00089A  D0C1               	goto	i2l1583
  2353  00089C                     i2l1525:
  2354                           
  2355                           ;main.c: 109: strncpy(DC_str, MessageBuffer,4);
  2356  00089C  0E00               	movlw	high _DC_str
  2357  00089E  6E02               	movwf	strncpy@to+1,c
  2358  0008A0  0E44               	movlw	low _DC_str
  2359  0008A2  6E01               	movwf	strncpy@to,c
  2360  0008A4  0101               	movlb	1	; () banked
  2361  0008A6  0E01               	movlw	high _MessageBuffer
  2362  0008A8  6E04               	movwf	strncpy@from+1,c
  2363  0008AA  0101               	movlb	1	; () banked
  2364  0008AC  0E00               	movlw	low _MessageBuffer
  2365  0008AE  6E03               	movwf	strncpy@from,c
  2366  0008B0  0E00               	movlw	0
  2367  0008B2  6E06               	movwf	strncpy@size+1,c
  2368  0008B4  0E04               	movlw	4
  2369  0008B6  6E05               	movwf	strncpy@size,c
  2370  0008B8  ECD8  F008         	call	_strncpy	;wreg free
  2371                           
  2372                           ;main.c: 110: k = atoi(DC_str);
  2373  0008BC  0E00               	movlw	high _DC_str
  2374  0008BE  6E08               	movwf	atoi@s+1,c
  2375  0008C0  0E44               	movlw	low _DC_str
  2376  0008C2  6E07               	movwf	atoi@s,c
  2377  0008C4  EC58  F006         	call	_atoi	;wreg free
  2378  0008C8  C007  F03D         	movff	?_atoi,_k
  2379  0008CC  C008  F03E         	movff	?_atoi+1,_k+1
  2380                           
  2381                           ;main.c: 111: if(k >= 0 && k <= 1023)
  2382  0008D0  BE3E               	btfsc	_k+1,7,c
  2383  0008D2  D021               	goto	i2l1537
  2384  0008D4  503E               	movf	_k+1,w,c
  2385  0008D6  0A80               	xorlw	128
  2386  0008D8  6EF3               	movwf	prodl,c
  2387  0008DA  0E84               	movlw	132
  2388  0008DC  5CF3               	subwf	prodl,w,c
  2389  0008DE  0E00               	movlw	0
  2390  0008E0  B4D8               	btfsc	status,2,c
  2391  0008E2  5C3D               	subwf	_k,w,c
  2392  0008E4  B0D8               	btfsc	status,0,c
  2393  0008E6  D017               	goto	i2l1537
  2394                           
  2395                           ;main.c: 112: {
  2396                           ;main.c: 113: DutyCycle = k;
  2397  0008E8  C03D  F049         	movff	_k,_DutyCycle
  2398  0008EC  C03E  F04A         	movff	_k+1,_DutyCycle+1
  2399                           
  2400                           ;main.c: 114: putsUSART("Modificado el SetPoint a: ");
  2401  0008F0  0E08               	movlw	high STR_2
  2402  0008F2  6E03               	movwf	putsUSART@data+1,c
  2403  0008F4  0E05               	movlw	low STR_2
  2404  0008F6  6E02               	movwf	putsUSART@data,c
  2405  0008F8  EC07  F009         	call	_putsUSART	;wreg free
  2406                           
  2407                           ;main.c: 115: putsUSART(DC_str);
  2408  0008FC  0E00               	movlw	high _DC_str
  2409  0008FE  6E03               	movwf	putsUSART@data+1,c
  2410  000900  0E44               	movlw	low _DC_str
  2411  000902  6E02               	movwf	putsUSART@data,c
  2412  000904  EC07  F009         	call	_putsUSART	;wreg free
  2413                           
  2414                           ;main.c: 116: putsUSART(0x0D);
  2415  000908  0E00               	movlw	0
  2416  00090A  6E03               	movwf	putsUSART@data+1,c
  2417  00090C  0E0D               	movlw	13
  2418  00090E  6E02               	movwf	putsUSART@data,c
  2419  000910  EC07  F009         	call	_putsUSART	;wreg free
  2420                           
  2421                           ;main.c: 117: }
  2422  000914  D00C               	goto	i2l1539
  2423  000916                     i2l1537:
  2424                           
  2425                           ;main.c: 118: else
  2426                           ;main.c: 119: {
  2427                           ;main.c: 120: putsUSART("Error maquinola");
  2428  000916  0E08               	movlw	high STR_3
  2429  000918  6E03               	movwf	putsUSART@data+1,c
  2430  00091A  0E20               	movlw	low STR_3
  2431  00091C  6E02               	movwf	putsUSART@data,c
  2432  00091E  EC07  F009         	call	_putsUSART	;wreg free
  2433                           
  2434                           ;main.c: 121: putsUSART(0x0D);
  2435  000922  0E00               	movlw	0
  2436  000924  6E03               	movwf	putsUSART@data+1,c
  2437  000926  0E0D               	movlw	13
  2438  000928  6E02               	movwf	putsUSART@data,c
  2439  00092A  EC07  F009         	call	_putsUSART	;wreg free
  2440  00092E                     i2l1539:
  2441                           
  2442                           ;main.c: 122: }
  2443                           ;main.c: 124: cleanMessageBuffer();
  2444  00092E  ECCC  F009         	call	_cleanMessageBuffer	;wreg free
  2445  000932  D073               	goto	L3
  2446  000934                     i2l1543:
  2447                           
  2448                           ;main.c: 128: if(DutyCycle >= 0 && DutyCycle <= 1023)
  2449  000934  0E00               	movlw	0
  2450  000936  5C49               	subwf	_DutyCycle,w,c
  2451  000938  0E04               	movlw	4
  2452  00093A  584A               	subwfb	_DutyCycle+1,w,c
  2453  00093C  B0D8               	btfsc	status,0,c
  2454  00093E  D023               	goto	i2l1555
  2455                           
  2456                           ;main.c: 129: {
  2457                           ;main.c: 130: DutyCycle++;
  2458  000940  4A49               	infsnz	_DutyCycle,f,c
  2459  000942  2A4A               	incf	_DutyCycle+1,f,c
  2460                           
  2461                           ;main.c: 131: itoa(DC_str, DutyCycle, 10);
  2462  000944  0E00               	movlw	high _DC_str
  2463  000946  6E12               	movwf	itoa@buf+1,c
  2464  000948  0E44               	movlw	low _DC_str
  2465  00094A  6E11               	movwf	itoa@buf,c
  2466  00094C  C049  F013         	movff	_DutyCycle,itoa@val
  2467  000950  C04A  F014         	movff	_DutyCycle+1,itoa@val+1
  2468  000954  0E00               	movlw	0
  2469  000956  6E16               	movwf	itoa@base+1,c
  2470  000958  0E0A               	movlw	10
  2471  00095A  6E15               	movwf	itoa@base,c
  2472  00095C  EC35  F009         	call	_itoa	;wreg free
  2473                           
  2474                           ;main.c: 132: putsUSART("Modificado el SetPoint a: ");
  2475  000960  0E08               	movlw	high STR_2
  2476  000962  6E03               	movwf	putsUSART@data+1,c
  2477  000964  0E05               	movlw	low STR_2
  2478  000966  6E02               	movwf	putsUSART@data,c
  2479  000968  EC07  F009         	call	_putsUSART	;wreg free
  2480                           
  2481                           ;main.c: 133: putsUSART(DC_str);
  2482  00096C  0E00               	movlw	high _DC_str
  2483  00096E  6E03               	movwf	putsUSART@data+1,c
  2484  000970  0E44               	movlw	low _DC_str
  2485  000972  6E02               	movwf	putsUSART@data,c
  2486  000974  EC07  F009         	call	_putsUSART	;wreg free
  2487                           
  2488                           ;main.c: 134: putsUSART(0x0D);
  2489  000978  0E00               	movlw	0
  2490  00097A  6E03               	movwf	putsUSART@data+1,c
  2491  00097C  0E0D               	movlw	13
  2492  00097E  6E02               	movwf	putsUSART@data,c
  2493  000980  EC07  F009         	call	_putsUSART	;wreg free
  2494                           
  2495                           ;main.c: 135: }
  2496  000984  D00C               	goto	i2l1557
  2497  000986                     i2l1555:
  2498                           
  2499                           ;main.c: 136: else
  2500                           ;main.c: 137: {
  2501                           ;main.c: 138: putsUSART("Error maquinola");
  2502  000986  0E08               	movlw	high STR_3
  2503  000988  6E03               	movwf	putsUSART@data+1,c
  2504  00098A  0E20               	movlw	low STR_3
  2505  00098C  6E02               	movwf	putsUSART@data,c
  2506  00098E  EC07  F009         	call	_putsUSART	;wreg free
  2507                           
  2508                           ;main.c: 139: putsUSART(0x0D);
  2509  000992  0E00               	movlw	0
  2510  000994  6E03               	movwf	putsUSART@data+1,c
  2511  000996  0E0D               	movlw	13
  2512  000998  6E02               	movwf	putsUSART@data,c
  2513  00099A  EC07  F009         	call	_putsUSART	;wreg free
  2514  00099E                     i2l1557:
  2515                           
  2516                           ;main.c: 140: }
  2517                           ;main.c: 141: cleanMessageBuffer();
  2518  00099E  ECCC  F009         	call	_cleanMessageBuffer	;wreg free
  2519  0009A2  D03B               	goto	L3
  2520  0009A4                     i2l1561:
  2521                           
  2522                           ;main.c: 145: if(DutyCycle >= 0 && DutyCycle <= 1023)
  2523  0009A4  0E00               	movlw	0
  2524  0009A6  5C49               	subwf	_DutyCycle,w,c
  2525  0009A8  0E04               	movlw	4
  2526  0009AA  584A               	subwfb	_DutyCycle+1,w,c
  2527  0009AC  B0D8               	btfsc	status,0,c
  2528  0009AE  D024               	goto	i2l1573
  2529                           
  2530                           ;main.c: 146: {
  2531                           ;main.c: 147: DutyCycle--;
  2532  0009B0  0649               	decf	_DutyCycle,f,c
  2533  0009B2  A0D8               	btfss	status,0,c
  2534  0009B4  064A               	decf	_DutyCycle+1,f,c
  2535                           
  2536                           ;main.c: 149: putsUSART("Modificado el SetPoint a: ");
  2537  0009B6  0E08               	movlw	high STR_2
  2538  0009B8  6E03               	movwf	putsUSART@data+1,c
  2539  0009BA  0E05               	movlw	low STR_2
  2540  0009BC  6E02               	movwf	putsUSART@data,c
  2541  0009BE  EC07  F009         	call	_putsUSART	;wreg free
  2542                           
  2543                           ;main.c: 150: itoa(DC_str, DutyCycle, 10);
  2544  0009C2  0E00               	movlw	high _DC_str
  2545  0009C4  6E12               	movwf	itoa@buf+1,c
  2546  0009C6  0E44               	movlw	low _DC_str
  2547  0009C8  6E11               	movwf	itoa@buf,c
  2548  0009CA  C049  F013         	movff	_DutyCycle,itoa@val
  2549  0009CE  C04A  F014         	movff	_DutyCycle+1,itoa@val+1
  2550  0009D2  0E00               	movlw	0
  2551  0009D4  6E16               	movwf	itoa@base+1,c
  2552  0009D6  0E0A               	movlw	10
  2553  0009D8  6E15               	movwf	itoa@base,c
  2554  0009DA  EC35  F009         	call	_itoa	;wreg free
  2555                           
  2556                           ;main.c: 151: putsUSART(DC_str);
  2557  0009DE  0E00               	movlw	high _DC_str
  2558  0009E0  6E03               	movwf	putsUSART@data+1,c
  2559  0009E2  0E44               	movlw	low _DC_str
  2560  0009E4  6E02               	movwf	putsUSART@data,c
  2561  0009E6  EC07  F009         	call	_putsUSART	;wreg free
  2562                           
  2563                           ;main.c: 152: putsUSART(0x0D);
  2564  0009EA  0E00               	movlw	0
  2565  0009EC  6E03               	movwf	putsUSART@data+1,c
  2566  0009EE  0E0D               	movlw	13
  2567  0009F0  6E02               	movwf	putsUSART@data,c
  2568  0009F2  EC07  F009         	call	_putsUSART	;wreg free
  2569                           
  2570                           ;main.c: 153: }
  2571  0009F6  D00C               	goto	i2l1575
  2572  0009F8                     i2l1573:
  2573                           
  2574                           ;main.c: 154: else
  2575                           ;main.c: 155: {
  2576                           ;main.c: 156: putsUSART("Error maquinola");
  2577  0009F8  0E08               	movlw	high STR_3
  2578  0009FA  6E03               	movwf	putsUSART@data+1,c
  2579  0009FC  0E20               	movlw	low STR_3
  2580  0009FE  6E02               	movwf	putsUSART@data,c
  2581  000A00  EC07  F009         	call	_putsUSART	;wreg free
  2582                           
  2583                           ;main.c: 157: putsUSART(0x0D);
  2584  000A04  0E00               	movlw	0
  2585  000A06  6E03               	movwf	putsUSART@data+1,c
  2586  000A08  0E0D               	movlw	13
  2587  000A0A  6E02               	movwf	putsUSART@data,c
  2588  000A0C  EC07  F009         	call	_putsUSART	;wreg free
  2589  000A10                     i2l1575:
  2590                           
  2591                           ;main.c: 158: }
  2592                           ;main.c: 159: cleanMessageBuffer();
  2593  000A10  ECCC  F009         	call	_cleanMessageBuffer	;wreg free
  2594  000A14  D002               	goto	L3
  2595  000A16                     i2l1579:
  2596                           
  2597                           ;main.c: 163: i++;
  2598  000A16  4A3B               	infsnz	_i,f,c
  2599  000A18  2A3C               	incf	_i+1,f,c
  2600  000A1A                     L3:
  2601                           
  2602                           ;main.c: 164: PIR1bits.RCIF = 0;
  2603  000A1A  9A9E               	bcf	3998,5,c	;volatile
  2604                           
  2605                           ;main.c: 165: }
  2606  000A1C  D01D               	goto	i2l106
  2607  000A1E                     i2l1583:
  2608  000A1E  0101               	movlb	1	; () banked
  2609  000A20  0E00               	movlw	low _MessageBuffer
  2610  000A22  243B               	addwf	_i,w,c
  2611  000A24  6ED9               	movwf	fsr2l,c
  2612  000A26  0101               	movlb	1	; () banked
  2613  000A28  0E01               	movlw	high _MessageBuffer
  2614  000A2A  203C               	addwfc	_i+1,w,c
  2615  000A2C  6EDA               	movwf	fsr2h,c
  2616  000A2E  50DF               	movf	indf2,w,c
  2617                           
  2618                           ; Switch size 1, requested type "space"
  2619                           ; Number of cases is 3, Range of values is 13 to 45
  2620                           ; switch strategies available:
  2621                           ; Name         Instructions Cycles
  2622                           ; simple_byte           10     6 (average)
  2623                           ;	Chosen strategy is simple_byte
  2624  000A30  0A0D               	xorlw	13	; case 13
  2625  000A32  B4D8               	btfsc	status,2,c
  2626  000A34  D733               	goto	i2l1525
  2627  000A36  0A26               	xorlw	38	; case 43
  2628  000A38  B4D8               	btfsc	status,2,c
  2629  000A3A  D77C               	goto	i2l1543
  2630  000A3C  0A06               	xorlw	6	; case 45
  2631  000A3E  B4D8               	btfsc	status,2,c
  2632  000A40  D7B1               	goto	i2l1561
  2633  000A42  D7E9               	goto	i2l1579
  2634  000A44                     i2l1585:
  2635                           
  2636                           ;main.c: 167: else
  2637                           ;main.c: 168: {
  2638                           ;main.c: 169: putsUSART(MessageBuffer);
  2639  000A44  0101               	movlb	1	; () banked
  2640  000A46  0E01               	movlw	high _MessageBuffer
  2641  000A48  6E03               	movwf	putsUSART@data+1,c
  2642  000A4A  0101               	movlb	1	; () banked
  2643  000A4C  0E00               	movlw	low _MessageBuffer
  2644  000A4E  6E02               	movwf	putsUSART@data,c
  2645  000A50  EC07  F009         	call	_putsUSART	;wreg free
  2646                           
  2647                           ;main.c: 170: cleanMessageBuffer();
  2648  000A54  ECCC  F009         	call	_cleanMessageBuffer	;wreg free
  2649  000A58                     i2l106:
  2650  000A58  C026  FFF5         	movff	??_ISR+13,tablat
  2651  000A5C  C025  FFF8         	movff	??_ISR+12,tblptru
  2652  000A60  C024  FFF7         	movff	??_ISR+11,tblptrh
  2653  000A64  C023  FFF6         	movff	??_ISR+10,tblptrl
  2654  000A68  C022  FFF4         	movff	??_ISR+9,prodh
  2655  000A6C  C021  FFF3         	movff	??_ISR+8,prodl
  2656  000A70  C020  FFDA         	movff	??_ISR+7,fsr2h
  2657  000A74  C01F  FFD9         	movff	??_ISR+6,fsr2l
  2658  000A78  C01E  FFE2         	movff	??_ISR+5,fsr1h
  2659  000A7C  C01D  FFE1         	movff	??_ISR+4,fsr1l
  2660  000A80  C01C  FFEA         	movff	??_ISR+3,fsr0h
  2661  000A84  C01B  FFE9         	movff	??_ISR+2,fsr0l
  2662  000A88  C01A  FFFB         	movff	??_ISR+1,pclatu
  2663  000A8C  C019  FFFA         	movff	??_ISR,pclath
  2664  000A90  0011               	retfie		f
  2665  000A92                     __end_of_ISR:
  2666                           	opt stack 0
  2667                           pclatu	equ	0xFFB
  2668                           pclath	equ	0xFFA
  2669                           tblptru	equ	0xFF8
  2670                           tblptrh	equ	0xFF7
  2671                           tblptrl	equ	0xFF6
  2672                           tablat	equ	0xFF5
  2673                           prodh	equ	0xFF4
  2674                           prodl	equ	0xFF3
  2675                           intcon	equ	0xFF2
  2676                           postinc0	equ	0xFEE
  2677                           fsr0h	equ	0xFEA
  2678                           fsr0l	equ	0xFE9
  2679                           wreg	equ	0xFE8
  2680                           fsr1h	equ	0xFE2
  2681                           fsr1l	equ	0xFE1
  2682                           indf2	equ	0xFDF
  2683                           fsr2h	equ	0xFDA
  2684                           fsr2l	equ	0xFD9
  2685                           status	equ	0xFD8
  2686                           
  2687 ;; *************** function _strncpy *****************
  2688 ;; Defined at:
  2689 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\strncpy.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  to              2    0[COMRAM] PTR unsigned char 
  2692 ;;		 -> DC_str(5), 
  2693 ;;  from            2    2[COMRAM] PTR const unsigned char 
  2694 ;;		 -> MessageBuffer(200), 
  2695 ;;  size            2    4[COMRAM] unsigned int 
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;  cp              2    6[COMRAM] PTR unsigned char 
  2698 ;;		 -> DC_str(5), 
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  2    0[COMRAM] PTR unsigned char 
  2701 ;; Registers used:
  2702 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2708 ;;      Params:         6       0       0       0       0       0       0       0       0
  2709 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2710 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2711 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2712 ;;Total ram usage:        8 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; This function calls:
  2715 ;;		Nothing
  2716 ;; This function is called by:
  2717 ;;		_ISR
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           	psect	text12
  2722  0011B0                     __ptext12:
  2723                           	opt stack 0
  2724  0011B0                     _strncpy:
  2725                           	opt stack 25
  2726                           
  2727                           ;incstack = 0
  2728  0011B0  C002  F008         	movff	strncpy@to+1,strncpy@cp+1
  2729  0011B4  C001  F007         	movff	strncpy@to,strncpy@cp
  2730  0011B8  D014               	goto	i2l1225
  2731  0011BA                     i2l1219:
  2732  0011BA  0605               	decf	strncpy@size,f,c
  2733  0011BC  A0D8               	btfss	status,0,c
  2734  0011BE  0606               	decf	strncpy@size+1,f,c
  2735  0011C0  C003  FFD9         	movff	strncpy@from,fsr2l
  2736  0011C4  C004  FFDA         	movff	strncpy@from+1,fsr2h
  2737  0011C8  4A03               	infsnz	strncpy@from,f,c
  2738  0011CA  2A04               	incf	strncpy@from+1,f,c
  2739  0011CC  C007  FFE1         	movff	strncpy@cp,fsr1l
  2740  0011D0  C008  FFE2         	movff	strncpy@cp+1,fsr1h
  2741  0011D4  4A07               	infsnz	strncpy@cp,f,c
  2742  0011D6  2A08               	incf	strncpy@cp+1,f,c
  2743  0011D8  CFDF FFE7          	movff	indf2,indf1
  2744  0011DC  50E7               	movf	indf1,w,c
  2745  0011DE  B4D8               	btfsc	status,2,c
  2746  0011E0  D00D               	goto	i2l1231
  2747  0011E2                     i2l1225:
  2748  0011E2  5006               	movf	strncpy@size+1,w,c
  2749  0011E4  1005               	iorwf	strncpy@size,w,c
  2750  0011E6  B4D8               	btfsc	status,2,c
  2751  0011E8  D009               	goto	i2l1231
  2752  0011EA  D7E7               	goto	i2l1219
  2753  0011EC                     i2l1227:
  2754  0011EC  C007  FFD9         	movff	strncpy@cp,fsr2l
  2755  0011F0  C008  FFDA         	movff	strncpy@cp+1,fsr2h
  2756  0011F4  0E00               	movlw	0
  2757  0011F6  6EDF               	movwf	indf2,c
  2758  0011F8  4A07               	infsnz	strncpy@cp,f,c
  2759  0011FA  2A08               	incf	strncpy@cp+1,f,c
  2760  0011FC                     i2l1231:
  2761  0011FC  0605               	decf	strncpy@size,f,c
  2762  0011FE  A0D8               	btfss	status,0,c
  2763  001200  0606               	decf	strncpy@size+1,f,c
  2764  001202  2805               	incf	strncpy@size& (0+255),w,c
  2765  001204  B4D8               	btfsc	status,2,c
  2766  001206  2806               	incf	(strncpy@size+1)& (0+255),w,c
  2767  001208  B4D8               	btfsc	status,2,c
  2768                           
  2769                           ;	Return value of _strncpy is never used
  2770  00120A  0012               	return	
  2771  00120C  D7EF               	goto	i2l1227
  2772  00120E                     __end_of_strncpy:
  2773                           	opt stack 0
  2774                           pclatu	equ	0xFFB
  2775                           pclath	equ	0xFFA
  2776                           tblptru	equ	0xFF8
  2777                           tblptrh	equ	0xFF7
  2778                           tblptrl	equ	0xFF6
  2779                           tablat	equ	0xFF5
  2780                           prodh	equ	0xFF4
  2781                           prodl	equ	0xFF3
  2782                           intcon	equ	0xFF2
  2783                           postinc0	equ	0xFEE
  2784                           fsr0h	equ	0xFEA
  2785                           fsr0l	equ	0xFE9
  2786                           wreg	equ	0xFE8
  2787                           indf1	equ	0xFE7
  2788                           fsr1h	equ	0xFE2
  2789                           fsr1l	equ	0xFE1
  2790                           indf2	equ	0xFDF
  2791                           fsr2h	equ	0xFDA
  2792                           fsr2l	equ	0xFD9
  2793                           status	equ	0xFD8
  2794                           
  2795 ;; *************** function _putsUSART *****************
  2796 ;; Defined at:
  2797 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\uputs.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;  data            2    1[COMRAM] PTR unsigned char 
  2800 ;;		 -> STR_7(16), STR_6(27), STR_5(16), STR_4(27), 
  2801 ;;		 -> STR_3(16), RAM(2047), STR_2(27), DC_str(5), 
  2802 ;;		 -> MessageBuffer(200), 
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;		None
  2805 ;; Return value:  Size  Location     Type
  2806 ;;		None               void
  2807 ;; Registers used:
  2808 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2814 ;;      Params:         2       0       0       0       0       0       0       0       0
  2815 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2816 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2817 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2818 ;;Total ram usage:        4 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    1
  2821 ;; This function calls:
  2822 ;;		_WriteUSART
  2823 ;; This function is called by:
  2824 ;;		_ISR
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text13
  2829  00120E                     __ptext13:
  2830                           	opt stack 0
  2831  00120E                     _putsUSART:
  2832                           	opt stack 24
  2833  00120E                     i2l257:
  2834  00120E  A2AC               	btfss	4012,1,c	;volatile
  2835  001210  D7FE               	goto	i2l257
  2836  001212  C002  FFF6         	movff	putsUSART@data,tblptrl
  2837  001216  C003  FFF7         	movff	putsUSART@data+1,tblptrh
  2838  00121A  6AF8               	clrf	tblptru,c
  2839  00121C  0E07               	movlw	(high __ramtop+-1)
  2840  00121E  64F7               	cpfsgt	tblptrh,c
  2841  001220  D003               	bra	i2u51_47
  2842  001222  0008               	tblrd		*
  2843  001224  50F5               	movf	tablat,w,c
  2844  001226  D005               	bra	i2u51_40
  2845  001228                     i2u51_47:
  2846  001228  CFF6 FFE1          	movff	tblptrl,fsr1l
  2847  00122C  CFF7 FFE2          	movff	tblptrh,fsr1h
  2848  001230  50E7               	movf	indf1,w,c
  2849  001232                     i2u51_40:
  2850  001232  EC35  F00A         	call	_WriteUSART
  2851  001236  5002               	movf	putsUSART@data,w,c
  2852  001238  6E04               	movwf	??_putsUSART& (0+255),c
  2853  00123A  5003               	movf	putsUSART@data+1,w,c
  2854  00123C  6E05               	movwf	(??_putsUSART+1)& (0+255),c
  2855  00123E  4A02               	infsnz	putsUSART@data,f,c
  2856  001240  2A03               	incf	putsUSART@data+1,f,c
  2857  001242  C004  FFF6         	movff	??_putsUSART,tblptrl
  2858  001246  C005  FFF7         	movff	??_putsUSART+1,tblptrh
  2859  00124A  6AF8               	clrf	tblptru,c
  2860  00124C  0E07               	movlw	(high __ramtop+-1)
  2861  00124E  64F7               	cpfsgt	tblptrh,c
  2862  001250  D003               	bra	i2u52_47
  2863  001252  0008               	tblrd		*
  2864  001254  50F5               	movf	tablat,w,c
  2865  001256  D005               	bra	i2u52_40
  2866  001258                     i2u52_47:
  2867  001258  CFF6 FFE1          	movff	tblptrl,fsr1l
  2868  00125C  CFF7 FFE2          	movff	tblptrh,fsr1h
  2869  001260  50E7               	movf	indf1,w,c
  2870  001262                     i2u52_40:
  2871  001262  0900               	iorlw	0
  2872  001264  B4D8               	btfsc	status,2,c
  2873  001266  0012               	return	
  2874  001268  D7D2               	goto	i2l257
  2875  00126A                     __end_of_putsUSART:
  2876                           	opt stack 0
  2877                           pclatu	equ	0xFFB
  2878                           pclath	equ	0xFFA
  2879                           tblptru	equ	0xFF8
  2880                           tblptrh	equ	0xFF7
  2881                           tblptrl	equ	0xFF6
  2882                           tablat	equ	0xFF5
  2883                           prodh	equ	0xFF4
  2884                           prodl	equ	0xFF3
  2885                           intcon	equ	0xFF2
  2886                           postinc0	equ	0xFEE
  2887                           fsr0h	equ	0xFEA
  2888                           fsr0l	equ	0xFE9
  2889                           wreg	equ	0xFE8
  2890                           indf1	equ	0xFE7
  2891                           fsr1h	equ	0xFE2
  2892                           fsr1l	equ	0xFE1
  2893                           indf2	equ	0xFDF
  2894                           fsr2h	equ	0xFDA
  2895                           fsr2l	equ	0xFD9
  2896                           status	equ	0xFD8
  2897                           
  2898 ;; *************** function _WriteUSART *****************
  2899 ;; Defined at:
  2900 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;  data            1    wreg     unsigned char 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;  data            1    0[COMRAM] unsigned char 
  2905 ;; Return value:  Size  Location     Type
  2906 ;;		None               void
  2907 ;; Registers used:
  2908 ;;		wreg
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2914 ;;      Params:         0       0       0       0       0       0       0       0       0
  2915 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2916 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2917 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2918 ;;Total ram usage:        1 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; This function calls:
  2921 ;;		Nothing
  2922 ;; This function is called by:
  2923 ;;		_putsUSART
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           	psect	text14
  2928  00146A                     __ptext14:
  2929                           	opt stack 0
  2930  00146A                     _WriteUSART:
  2931                           	opt stack 24
  2932                           
  2933                           ;incstack = 0
  2934                           ;WriteUSART@data stored from wreg
  2935  00146A  6E01               	movwf	WriteUSART@data,c
  2936  00146C  ACAC               	btfss	4012,6,c	;volatile
  2937  00146E  D003               	goto	i2l1005
  2938  001470  90AC               	bcf	4012,0,c	;volatile
  2939  001472  B23F               	btfsc	_USART_Status,1,c
  2940  001474  80AC               	bsf	4012,0,c	;volatile
  2941  001476                     i2l1005:
  2942  001476  C001  FFAD         	movff	WriteUSART@data,4013	;volatile
  2943  00147A  0012               	return	
  2944  00147C                     __end_of_WriteUSART:
  2945                           	opt stack 0
  2946                           pclatu	equ	0xFFB
  2947                           pclath	equ	0xFFA
  2948                           tblptru	equ	0xFF8
  2949                           tblptrh	equ	0xFF7
  2950                           tblptrl	equ	0xFF6
  2951                           tablat	equ	0xFF5
  2952                           prodh	equ	0xFF4
  2953                           prodl	equ	0xFF3
  2954                           intcon	equ	0xFF2
  2955                           postinc0	equ	0xFEE
  2956                           fsr0h	equ	0xFEA
  2957                           fsr0l	equ	0xFE9
  2958                           wreg	equ	0xFE8
  2959                           indf1	equ	0xFE7
  2960                           fsr1h	equ	0xFE2
  2961                           fsr1l	equ	0xFE1
  2962                           indf2	equ	0xFDF
  2963                           fsr2h	equ	0xFDA
  2964                           fsr2l	equ	0xFD9
  2965                           status	equ	0xFD8
  2966                           
  2967 ;; *************** function _itoa *****************
  2968 ;; Defined at:
  2969 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\itoa.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;  buf             2   16[COMRAM] PTR unsigned char 
  2972 ;;		 -> DC_str(5), 
  2973 ;;  val             2   18[COMRAM] int 
  2974 ;;  base            2   20[COMRAM] int 
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;  cp              2   22[COMRAM] PTR unsigned char 
  2977 ;;		 -> DC_str(5), 
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  2   16[COMRAM] PTR unsigned char 
  2980 ;; Registers used:
  2981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2987 ;;      Params:         6       0       0       0       0       0       0       0       0
  2988 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2989 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2990 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2991 ;;Total ram usage:        8 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:    2
  2994 ;; This function calls:
  2995 ;;		_utoa
  2996 ;; This function is called by:
  2997 ;;		_ISR
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           	psect	text15
  3002  00126A                     __ptext15:
  3003                           	opt stack 0
  3004  00126A                     _itoa:
  3005                           	opt stack 23
  3006                           
  3007                           ;incstack = 0
  3008  00126A  C012  F018         	movff	itoa@buf+1,itoa@cp+1
  3009  00126E  C011  F017         	movff	itoa@buf,itoa@cp
  3010  001272  5014               	movf	itoa@val+1,w,c
  3011  001274  0A80               	xorlw	128
  3012  001276  6EF3               	movwf	prodl,c
  3013  001278  0E80               	movlw	128
  3014  00127A  5CF3               	subwf	prodl,w,c
  3015  00127C  0E00               	movlw	0
  3016  00127E  B4D8               	btfsc	status,2,c
  3017  001280  5C13               	subwf	itoa@val,w,c
  3018  001282  B0D8               	btfsc	status,0,c
  3019  001284  D00C               	goto	i2l1285
  3020  001286  C011  FFD9         	movff	itoa@buf,fsr2l
  3021  00128A  C012  FFDA         	movff	itoa@buf+1,fsr2h
  3022  00128E  0E2D               	movlw	45
  3023  001290  6EDF               	movwf	indf2,c
  3024  001292  4A11               	infsnz	itoa@buf,f,c
  3025  001294  2A12               	incf	itoa@buf+1,f,c
  3026  001296  6C13               	negf	itoa@val,c
  3027  001298  1E14               	comf	itoa@val+1,f,c
  3028  00129A  B0D8               	btfsc	status,0,c
  3029  00129C  2A14               	incf	itoa@val+1,f,c
  3030  00129E                     i2l1285:
  3031  00129E  C012  F009         	movff	itoa@buf+1,utoa@buf+1
  3032  0012A2  C011  F008         	movff	itoa@buf,utoa@buf
  3033  0012A6  C013  F00A         	movff	itoa@val,utoa@val
  3034  0012AA  C014  F00B         	movff	itoa@val+1,utoa@val+1
  3035  0012AE  C015  F00C         	movff	itoa@base,utoa@base
  3036  0012B2  C016  F00D         	movff	itoa@base+1,utoa@base+1
  3037  0012B6  EC1E  F007         	call	_utoa	;wreg free
  3038                           
  3039                           ;	Return value of _itoa is never used
  3040  0012BA  0012               	return	
  3041  0012BC                     __end_of_itoa:
  3042                           	opt stack 0
  3043                           pclatu	equ	0xFFB
  3044                           pclath	equ	0xFFA
  3045                           tblptru	equ	0xFF8
  3046                           tblptrh	equ	0xFF7
  3047                           tblptrl	equ	0xFF6
  3048                           tablat	equ	0xFF5
  3049                           prodh	equ	0xFF4
  3050                           prodl	equ	0xFF3
  3051                           intcon	equ	0xFF2
  3052                           postinc0	equ	0xFEE
  3053                           fsr0h	equ	0xFEA
  3054                           fsr0l	equ	0xFE9
  3055                           wreg	equ	0xFE8
  3056                           indf1	equ	0xFE7
  3057                           fsr1h	equ	0xFE2
  3058                           fsr1l	equ	0xFE1
  3059                           indf2	equ	0xFDF
  3060                           fsr2h	equ	0xFDA
  3061                           fsr2l	equ	0xFD9
  3062                           status	equ	0xFD8
  3063                           
  3064 ;; *************** function _utoa *****************
  3065 ;; Defined at:
  3066 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\itoa.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;  buf             2    7[COMRAM] PTR unsigned char 
  3069 ;;		 -> DC_str(5), 
  3070 ;;  val             2    9[COMRAM] unsigned int 
  3071 ;;  base            2   11[COMRAM] int 
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;  v               2   13[COMRAM] unsigned int 
  3074 ;;  c               1   15[COMRAM] unsigned char 
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  2    7[COMRAM] PTR unsigned char 
  3077 ;; Registers used:
  3078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3079 ;; Tracked objects:
  3080 ;;		On entry : 0/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3084 ;;      Params:         6       0       0       0       0       0       0       0       0
  3085 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3086 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3087 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3088 ;;Total ram usage:        9 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; Hardware stack levels required when called:    1
  3091 ;; This function calls:
  3092 ;;		___lwmod
  3093 ;;		i2___lwdiv
  3094 ;; This function is called by:
  3095 ;;		_itoa
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           	psect	text16
  3100  000E3C                     __ptext16:
  3101                           	opt stack 0
  3102  000E3C                     _utoa:
  3103                           	opt stack 23
  3104                           
  3105                           ;incstack = 0
  3106  000E3C  C00A  F00E         	movff	utoa@val,utoa@v
  3107  000E40  C00B  F00F         	movff	utoa@val+1,utoa@v+1
  3108  000E44                     i2l1027:
  3109  000E44  C00E  F001         	movff	utoa@v,i2___lwdiv@dividend
  3110  000E48  C00F  F002         	movff	utoa@v+1,i2___lwdiv@dividend+1
  3111  000E4C  C00C  F003         	movff	utoa@base,i2___lwdiv@divisor
  3112  000E50  C00D  F004         	movff	utoa@base+1,i2___lwdiv@divisor+1
  3113  000E54  EC5E  F009         	call	i2___lwdiv	;wreg free
  3114  000E58  C001  F00E         	movff	?i2___lwdiv,utoa@v
  3115  000E5C  C002  F00F         	movff	?i2___lwdiv+1,utoa@v+1
  3116  000E60  4A08               	infsnz	utoa@buf,f,c
  3117  000E62  2A09               	incf	utoa@buf+1,f,c
  3118  000E64  500F               	movf	utoa@v+1,w,c
  3119  000E66  100E               	iorwf	utoa@v,w,c
  3120  000E68  A4D8               	btfss	status,2,c
  3121  000E6A  D7EC               	goto	i2l1027
  3122  000E6C  C008  FFD9         	movff	utoa@buf,fsr2l
  3123  000E70  C009  FFDA         	movff	utoa@buf+1,fsr2h
  3124  000E74  0E00               	movlw	0
  3125  000E76  6EDF               	movwf	indf2,c
  3126  000E78  0608               	decf	utoa@buf,f,c
  3127  000E7A  A0D8               	btfss	status,0,c
  3128  000E7C  0609               	decf	utoa@buf+1,f,c
  3129  000E7E                     i2l1037:
  3130  000E7E  C00A  F001         	movff	utoa@val,___lwmod@dividend
  3131  000E82  C00B  F002         	movff	utoa@val+1,___lwmod@dividend+1
  3132  000E86  C00C  F003         	movff	utoa@base,___lwmod@divisor
  3133  000E8A  C00D  F004         	movff	utoa@base+1,___lwmod@divisor+1
  3134  000E8E  ECAB  F009         	call	___lwmod	;wreg free
  3135  000E92  5001               	movf	?___lwmod,w,c
  3136  000E94  6E10               	movwf	utoa@c,c
  3137  000E96  C00A  F001         	movff	utoa@val,i2___lwdiv@dividend
  3138  000E9A  C00B  F002         	movff	utoa@val+1,i2___lwdiv@dividend+1
  3139  000E9E  C00C  F003         	movff	utoa@base,i2___lwdiv@divisor
  3140  000EA2  C00D  F004         	movff	utoa@base+1,i2___lwdiv@divisor+1
  3141  000EA6  EC5E  F009         	call	i2___lwdiv	;wreg free
  3142  000EAA  C001  F00A         	movff	?i2___lwdiv,utoa@val
  3143  000EAE  C002  F00B         	movff	?i2___lwdiv+1,utoa@val+1
  3144  000EB2  0E09               	movlw	9
  3145  000EB4  6410               	cpfsgt	utoa@c,c
  3146  000EB6  D002               	goto	i2l740
  3147  000EB8  0E07               	movlw	7
  3148  000EBA  2610               	addwf	utoa@c,f,c
  3149  000EBC                     i2l740:
  3150  000EBC  0E30               	movlw	48
  3151  000EBE  2610               	addwf	utoa@c,f,c
  3152  000EC0  C008  FFD9         	movff	utoa@buf,fsr2l
  3153  000EC4  C009  FFDA         	movff	utoa@buf+1,fsr2h
  3154  000EC8  C010  FFDF         	movff	utoa@c,indf2
  3155  000ECC  0608               	decf	utoa@buf,f,c
  3156  000ECE  A0D8               	btfss	status,0,c
  3157  000ED0  0609               	decf	utoa@buf+1,f,c
  3158  000ED2  500B               	movf	utoa@val+1,w,c
  3159  000ED4  100A               	iorwf	utoa@val,w,c
  3160  000ED6  A4D8               	btfss	status,2,c
  3161  000ED8  D7D2               	goto	i2l1037
  3162                           
  3163                           ;	Return value of _utoa is never used
  3164  000EDA  4A08               	infsnz	utoa@buf,f,c
  3165  000EDC  2A09               	incf	utoa@buf+1,f,c
  3166  000EDE  0012               	return	
  3167  000EE0                     __end_of_utoa:
  3168                           	opt stack 0
  3169                           pclatu	equ	0xFFB
  3170                           pclath	equ	0xFFA
  3171                           tblptru	equ	0xFF8
  3172                           tblptrh	equ	0xFF7
  3173                           tblptrl	equ	0xFF6
  3174                           tablat	equ	0xFF5
  3175                           prodh	equ	0xFF4
  3176                           prodl	equ	0xFF3
  3177                           intcon	equ	0xFF2
  3178                           postinc0	equ	0xFEE
  3179                           fsr0h	equ	0xFEA
  3180                           fsr0l	equ	0xFE9
  3181                           wreg	equ	0xFE8
  3182                           indf1	equ	0xFE7
  3183                           fsr1h	equ	0xFE2
  3184                           fsr1l	equ	0xFE1
  3185                           indf2	equ	0xFDF
  3186                           fsr2h	equ	0xFDA
  3187                           fsr2l	equ	0xFD9
  3188                           status	equ	0xFD8
  3189                           
  3190 ;; *************** function i2___lwdiv *****************
  3191 ;; Defined at:
  3192 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;  dividend        2    0[COMRAM] unsigned int 
  3195 ;;  divisor         2    2[COMRAM] unsigned int 
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  3198 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  3199 ;; Return value:  Size  Location     Type
  3200 ;;                  2    0[COMRAM] unsigned int 
  3201 ;; Registers used:
  3202 ;;		wreg, status,2, status,0
  3203 ;; Tracked objects:
  3204 ;;		On entry : 0/0
  3205 ;;		On exit  : 0/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3208 ;;      Params:         4       0       0       0       0       0       0       0       0
  3209 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3210 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3211 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3212 ;;Total ram usage:        7 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; This function calls:
  3215 ;;		Nothing
  3216 ;; This function is called by:
  3217 ;;		_utoa
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           	psect	text17
  3222  0012BC                     __ptext17:
  3223                           	opt stack 0
  3224  0012BC                     i2___lwdiv:
  3225                           	opt stack 23
  3226                           
  3227                           ;incstack = 0
  3228  0012BC  0E00               	movlw	0
  3229  0012BE  6E06               	movwf	i2___lwdiv@quotient+1,c
  3230  0012C0  0E00               	movlw	0
  3231  0012C2  6E05               	movwf	i2___lwdiv@quotient,c
  3232  0012C4  5004               	movf	i2___lwdiv@divisor+1,w,c
  3233  0012C6  1003               	iorwf	i2___lwdiv@divisor,w,c
  3234  0012C8  B4D8               	btfsc	status,2,c
  3235  0012CA  D01C               	goto	i2l834
  3236  0012CC  0E01               	movlw	1
  3237  0012CE  6E07               	movwf	i2___lwdiv@counter,c
  3238  0012D0  D004               	goto	i2l969
  3239  0012D2                     i2l967:
  3240  0012D2  90D8               	bcf	status,0,c
  3241  0012D4  3603               	rlcf	i2___lwdiv@divisor,f,c
  3242  0012D6  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  3243  0012D8  2A07               	incf	i2___lwdiv@counter,f,c
  3244  0012DA                     i2l969:
  3245  0012DA  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  3246  0012DC  D7FA               	goto	i2l967
  3247  0012DE                     i2l971:
  3248  0012DE  90D8               	bcf	status,0,c
  3249  0012E0  3605               	rlcf	i2___lwdiv@quotient,f,c
  3250  0012E2  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  3251  0012E4  5003               	movf	i2___lwdiv@divisor,w,c
  3252  0012E6  5C01               	subwf	i2___lwdiv@dividend,w,c
  3253  0012E8  5004               	movf	i2___lwdiv@divisor+1,w,c
  3254  0012EA  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  3255  0012EC  A0D8               	btfss	status,0,c
  3256  0012EE  D005               	goto	i2l979
  3257  0012F0  5003               	movf	i2___lwdiv@divisor,w,c
  3258  0012F2  5E01               	subwf	i2___lwdiv@dividend,f,c
  3259  0012F4  5004               	movf	i2___lwdiv@divisor+1,w,c
  3260  0012F6  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  3261  0012F8  8005               	bsf	i2___lwdiv@quotient,0,c
  3262  0012FA                     i2l979:
  3263  0012FA  90D8               	bcf	status,0,c
  3264  0012FC  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  3265  0012FE  3203               	rrcf	i2___lwdiv@divisor,f,c
  3266  001300  2E07               	decfsz	i2___lwdiv@counter,f,c
  3267  001302  D7ED               	goto	i2l971
  3268  001304                     i2l834:
  3269  001304  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  3270  001308  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  3271  00130C  0012               	return	
  3272  00130E                     __end_ofi2___lwdiv:
  3273                           	opt stack 0
  3274                           pclatu	equ	0xFFB
  3275                           pclath	equ	0xFFA
  3276                           tblptru	equ	0xFF8
  3277                           tblptrh	equ	0xFF7
  3278                           tblptrl	equ	0xFF6
  3279                           tablat	equ	0xFF5
  3280                           prodh	equ	0xFF4
  3281                           prodl	equ	0xFF3
  3282                           intcon	equ	0xFF2
  3283                           postinc0	equ	0xFEE
  3284                           fsr0h	equ	0xFEA
  3285                           fsr0l	equ	0xFE9
  3286                           wreg	equ	0xFE8
  3287                           indf1	equ	0xFE7
  3288                           fsr1h	equ	0xFE2
  3289                           fsr1l	equ	0xFE1
  3290                           indf2	equ	0xFDF
  3291                           fsr2h	equ	0xFDA
  3292                           fsr2l	equ	0xFD9
  3293                           status	equ	0xFD8
  3294                           
  3295 ;; *************** function ___lwmod *****************
  3296 ;; Defined at:
  3297 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;  dividend        2    0[COMRAM] unsigned int 
  3300 ;;  divisor         2    2[COMRAM] unsigned int 
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;  counter         1    4[COMRAM] unsigned char 
  3303 ;; Return value:  Size  Location     Type
  3304 ;;                  2    0[COMRAM] unsigned int 
  3305 ;; Registers used:
  3306 ;;		wreg, status,2, status,0
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3312 ;;      Params:         4       0       0       0       0       0       0       0       0
  3313 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3314 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3315 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3316 ;;Total ram usage:        5 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; This function calls:
  3319 ;;		Nothing
  3320 ;; This function is called by:
  3321 ;;		_utoa
  3322 ;; This function uses a non-reentrant model
  3323 ;;
  3324                           
  3325                           	psect	text18
  3326  001356                     __ptext18:
  3327                           	opt stack 0
  3328  001356                     ___lwmod:
  3329                           	opt stack 23
  3330                           
  3331                           ;incstack = 0
  3332  001356  5004               	movf	___lwmod@divisor+1,w,c
  3333  001358  1003               	iorwf	___lwmod@divisor,w,c
  3334  00135A  B4D8               	btfsc	status,2,c
  3335  00135C  D018               	goto	i2l844
  3336  00135E  0E01               	movlw	1
  3337  001360  6E05               	movwf	___lwmod@counter,c
  3338  001362  D004               	goto	i2l951
  3339  001364                     i2l949:
  3340  001364  90D8               	bcf	status,0,c
  3341  001366  3603               	rlcf	___lwmod@divisor,f,c
  3342  001368  3604               	rlcf	___lwmod@divisor+1,f,c
  3343  00136A  2A05               	incf	___lwmod@counter,f,c
  3344  00136C                     i2l951:
  3345  00136C  AE04               	btfss	___lwmod@divisor+1,7,c
  3346  00136E  D7FA               	goto	i2l949
  3347  001370                     i2l953:
  3348  001370  5003               	movf	___lwmod@divisor,w,c
  3349  001372  5C01               	subwf	___lwmod@dividend,w,c
  3350  001374  5004               	movf	___lwmod@divisor+1,w,c
  3351  001376  5802               	subwfb	___lwmod@dividend+1,w,c
  3352  001378  A0D8               	btfss	status,0,c
  3353  00137A  D004               	goto	i2l957
  3354  00137C  5003               	movf	___lwmod@divisor,w,c
  3355  00137E  5E01               	subwf	___lwmod@dividend,f,c
  3356  001380  5004               	movf	___lwmod@divisor+1,w,c
  3357  001382  5A02               	subwfb	___lwmod@dividend+1,f,c
  3358  001384                     i2l957:
  3359  001384  90D8               	bcf	status,0,c
  3360  001386  3204               	rrcf	___lwmod@divisor+1,f,c
  3361  001388  3203               	rrcf	___lwmod@divisor,f,c
  3362  00138A  2E05               	decfsz	___lwmod@counter,f,c
  3363  00138C  D7F1               	goto	i2l953
  3364  00138E                     i2l844:
  3365  00138E  C001  F001         	movff	___lwmod@dividend,?___lwmod
  3366  001392  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  3367  001396  0012               	return	
  3368  001398                     __end_of___lwmod:
  3369                           	opt stack 0
  3370                           pclatu	equ	0xFFB
  3371                           pclath	equ	0xFFA
  3372                           tblptru	equ	0xFF8
  3373                           tblptrh	equ	0xFF7
  3374                           tblptrl	equ	0xFF6
  3375                           tablat	equ	0xFF5
  3376                           prodh	equ	0xFF4
  3377                           prodl	equ	0xFF3
  3378                           intcon	equ	0xFF2
  3379                           postinc0	equ	0xFEE
  3380                           fsr0h	equ	0xFEA
  3381                           fsr0l	equ	0xFE9
  3382                           wreg	equ	0xFE8
  3383                           indf1	equ	0xFE7
  3384                           fsr1h	equ	0xFE2
  3385                           fsr1l	equ	0xFE1
  3386                           indf2	equ	0xFDF
  3387                           fsr2h	equ	0xFDA
  3388                           fsr2l	equ	0xFD9
  3389                           status	equ	0xFD8
  3390                           
  3391 ;; *************** function _cleanMessageBuffer *****************
  3392 ;; Defined at:
  3393 ;;		line 176 in file "main.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;		None
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;		None
  3398 ;; Return value:  Size  Location     Type
  3399 ;;		None               void
  3400 ;; Registers used:
  3401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3407 ;;      Params:         0       0       0       0       0       0       0       0       0
  3408 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3409 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3410 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3411 ;;Total ram usage:        0 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; This function calls:
  3414 ;;		Nothing
  3415 ;; This function is called by:
  3416 ;;		_ISR
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           	psect	text19
  3421  001398                     __ptext19:
  3422                           	opt stack 0
  3423  001398                     _cleanMessageBuffer:
  3424                           	opt stack 25
  3425                           
  3426                           ;main.c: 178: for(;i>0;i--){
  3427                           
  3428                           ;incstack = 0
  3429  001398  D00D               	goto	i2l1271
  3430  00139A                     i2l1267:
  3431                           
  3432                           ;main.c: 179: MessageBuffer[i] = 0x00;
  3433  00139A  0101               	movlb	1	; () banked
  3434  00139C  0E00               	movlw	low _MessageBuffer
  3435  00139E  243B               	addwf	_i,w,c
  3436  0013A0  6ED9               	movwf	fsr2l,c
  3437  0013A2  0101               	movlb	1	; () banked
  3438  0013A4  0E01               	movlw	high _MessageBuffer
  3439  0013A6  203C               	addwfc	_i+1,w,c
  3440  0013A8  6EDA               	movwf	fsr2h,c
  3441  0013AA  0E00               	movlw	0
  3442  0013AC  6EDF               	movwf	indf2,c
  3443                           
  3444                           ; BSR set to: 1
  3445  0013AE  063B               	decf	_i,f,c
  3446  0013B0  A0D8               	btfss	status,0,c
  3447  0013B2  063C               	decf	_i+1,f,c
  3448  0013B4                     i2l1271:
  3449  0013B4  503C               	movf	_i+1,w,c
  3450  0013B6  0A80               	xorlw	128
  3451  0013B8  6EF3               	movwf	prodl,c
  3452  0013BA  0E80               	movlw	128
  3453  0013BC  5CF3               	subwf	prodl,w,c
  3454  0013BE  0E01               	movlw	1
  3455  0013C0  B4D8               	btfsc	status,2,c
  3456  0013C2  5C3B               	subwf	_i,w,c
  3457  0013C4  B0D8               	btfsc	status,0,c
  3458  0013C6  D7E9               	goto	i2l1267
  3459                           
  3460                           ;main.c: 180: }
  3461                           ;main.c: 181: i=0;
  3462  0013C8  0E00               	movlw	0
  3463  0013CA  6E3C               	movwf	_i+1,c
  3464  0013CC  0E00               	movlw	0
  3465  0013CE  6E3B               	movwf	_i,c
  3466  0013D0  0012               	return	
  3467  0013D2                     __end_of_cleanMessageBuffer:
  3468                           	opt stack 0
  3469                           pclatu	equ	0xFFB
  3470                           pclath	equ	0xFFA
  3471                           tblptru	equ	0xFF8
  3472                           tblptrh	equ	0xFF7
  3473                           tblptrl	equ	0xFF6
  3474                           tablat	equ	0xFF5
  3475                           prodh	equ	0xFF4
  3476                           prodl	equ	0xFF3
  3477                           intcon	equ	0xFF2
  3478                           postinc0	equ	0xFEE
  3479                           fsr0h	equ	0xFEA
  3480                           fsr0l	equ	0xFE9
  3481                           wreg	equ	0xFE8
  3482                           indf1	equ	0xFE7
  3483                           fsr1h	equ	0xFE2
  3484                           fsr1l	equ	0xFE1
  3485                           indf2	equ	0xFDF
  3486                           fsr2h	equ	0xFDA
  3487                           fsr2l	equ	0xFD9
  3488                           status	equ	0xFD8
  3489                           
  3490 ;; *************** function _atoi *****************
  3491 ;; Defined at:
  3492 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\atoi.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;  s               2    6[COMRAM] PTR const unsigned char 
  3495 ;;		 -> DC_str(5), 
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;  a               2   11[COMRAM] int 
  3498 ;;  sign            1   10[COMRAM] unsigned char 
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  2    6[COMRAM] int 
  3501 ;; Registers used:
  3502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3508 ;;      Params:         2       0       0       0       0       0       0       0       0
  3509 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3510 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3511 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3512 ;;Total ram usage:        7 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; Hardware stack levels required when called:    1
  3515 ;; This function calls:
  3516 ;;		___wmul
  3517 ;;		_isdigit
  3518 ;; This function is called by:
  3519 ;;		_ISR
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           	psect	text20
  3524  000CB0                     __ptext20:
  3525                           	opt stack 0
  3526  000CB0                     _atoi:
  3527                           	opt stack 24
  3528                           
  3529                           ;incstack = 0
  3530  000CB0  D002               	goto	i2l1495
  3531  000CB2                     i2l1493:
  3532  000CB2  4A07               	infsnz	atoi@s,f,c
  3533  000CB4  2A08               	incf	atoi@s+1,f,c
  3534  000CB6                     i2l1495:
  3535  000CB6  C007  FFD9         	movff	atoi@s,fsr2l
  3536  000CBA  C008  FFDA         	movff	atoi@s+1,fsr2h
  3537  000CBE  50DF               	movf	indf2,w,c
  3538  000CC0  0A20               	xorlw	32
  3539  000CC2  B4D8               	btfsc	status,2,c
  3540  000CC4  D7F6               	goto	i2l1493
  3541  000CC6  C007  FFD9         	movff	atoi@s,fsr2l
  3542  000CCA  C008  FFDA         	movff	atoi@s+1,fsr2h
  3543  000CCE  50DF               	movf	indf2,w,c
  3544  000CD0  0A09               	xorlw	9
  3545  000CD2  B4D8               	btfsc	status,2,c
  3546  000CD4  D7EE               	goto	i2l1493
  3547  000CD6  0E00               	movlw	0
  3548  000CD8  6E0D               	movwf	atoi@a+1,c
  3549  000CDA  0E00               	movlw	0
  3550  000CDC  6E0C               	movwf	atoi@a,c
  3551  000CDE  0E00               	movlw	0
  3552  000CE0  6E0B               	movwf	atoi@sign,c
  3553  000CE2  0E2D               	movlw	45
  3554  000CE4  C007  FFD9         	movff	atoi@s,fsr2l
  3555  000CE8  C008  FFDA         	movff	atoi@s+1,fsr2h
  3556  000CEC  62DF               	cpfseq	indf2,c
  3557  000CEE  D002               	goto	i2l1505
  3558  000CF0  2A0B               	incf	atoi@sign,f,c
  3559  000CF2  D023               	goto	L4
  3560  000CF4                     i2l1505:
  3561  000CF4  0E2B               	movlw	43
  3562  000CF6  C007  FFD9         	movff	atoi@s,fsr2l
  3563  000CFA  C008  FFDA         	movff	atoi@s+1,fsr2h
  3564  000CFE  62DF               	cpfseq	indf2,c
  3565  000D00  D01E               	goto	i2l1513
  3566  000D02  D01B               	goto	L4
  3567  000D04                     i2l1509:
  3568  000D04  C00C  F001         	movff	atoi@a,___wmul@multiplier
  3569  000D08  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  3570  000D0C  0E00               	movlw	0
  3571  000D0E  6E04               	movwf	___wmul@multiplicand+1,c
  3572  000D10  0E0A               	movlw	10
  3573  000D12  6E03               	movwf	___wmul@multiplicand,c
  3574  000D14  ECE9  F009         	call	___wmul	;wreg free
  3575  000D18  C007  FFD9         	movff	atoi@s,fsr2l
  3576  000D1C  C008  FFDA         	movff	atoi@s+1,fsr2h
  3577  000D20  50DF               	movf	indf2,w,c
  3578  000D22  6E09               	movwf	??_atoi& (0+255),c
  3579  000D24  6A0A               	clrf	(??_atoi+1)& (0+255),c
  3580  000D26  5001               	movf	?___wmul,w,c
  3581  000D28  2609               	addwf	??_atoi,f,c
  3582  000D2A  5002               	movf	?___wmul+1,w,c
  3583  000D2C  220A               	addwfc	??_atoi+1,f,c
  3584  000D2E  0ED0               	movlw	208
  3585  000D30  2409               	addwf	??_atoi,w,c
  3586  000D32  6E0C               	movwf	atoi@a,c
  3587  000D34  0EFF               	movlw	255
  3588  000D36  200A               	addwfc	??_atoi+1,w,c
  3589  000D38  6E0D               	movwf	atoi@a+1,c
  3590  000D3A                     L4:
  3591  000D3A  4A07               	infsnz	atoi@s,f,c
  3592  000D3C  2A08               	incf	atoi@s+1,f,c
  3593  000D3E                     i2l1513:
  3594  000D3E  C007  FFD9         	movff	atoi@s,fsr2l
  3595  000D42  C008  FFDA         	movff	atoi@s+1,fsr2h
  3596  000D46  50DF               	movf	indf2,w,c
  3597  000D48  EC0C  F00A         	call	_isdigit
  3598  000D4C  B0D8               	btfsc	status,0,c
  3599  000D4E  D7DA               	goto	i2l1509
  3600  000D50  500B               	movf	atoi@sign,w,c
  3601  000D52  B4D8               	btfsc	status,2,c
  3602  000D54  D00D               	goto	i2l470
  3603  000D56  C00C  F009         	movff	atoi@a,??_atoi
  3604  000D5A  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  3605  000D5E  1E09               	comf	??_atoi,f,c
  3606  000D60  1E0A               	comf	??_atoi+1,f,c
  3607  000D62  4A09               	infsnz	??_atoi,f,c
  3608  000D64  2A0A               	incf	??_atoi+1,f,c
  3609  000D66  C009  F007         	movff	??_atoi,?_atoi
  3610  000D6A  C00A  F008         	movff	??_atoi+1,?_atoi+1
  3611  000D6E  D004               	goto	i2l471
  3612  000D70                     i2l470:
  3613  000D70  C00C  F007         	movff	atoi@a,?_atoi
  3614  000D74  C00D  F008         	movff	atoi@a+1,?_atoi+1
  3615  000D78                     i2l471:
  3616  000D78  0012               	return	
  3617  000D7A                     __end_of_atoi:
  3618                           	opt stack 0
  3619                           pclatu	equ	0xFFB
  3620                           pclath	equ	0xFFA
  3621                           tblptru	equ	0xFF8
  3622                           tblptrh	equ	0xFF7
  3623                           tblptrl	equ	0xFF6
  3624                           tablat	equ	0xFF5
  3625                           prodh	equ	0xFF4
  3626                           prodl	equ	0xFF3
  3627                           intcon	equ	0xFF2
  3628                           postinc0	equ	0xFEE
  3629                           fsr0h	equ	0xFEA
  3630                           fsr0l	equ	0xFE9
  3631                           wreg	equ	0xFE8
  3632                           indf1	equ	0xFE7
  3633                           fsr1h	equ	0xFE2
  3634                           fsr1l	equ	0xFE1
  3635                           indf2	equ	0xFDF
  3636                           fsr2h	equ	0xFDA
  3637                           fsr2l	equ	0xFD9
  3638                           status	equ	0xFD8
  3639                           
  3640 ;; *************** function _isdigit *****************
  3641 ;; Defined at:
  3642 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;  c               1    wreg     unsigned char 
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;  c               1    2[COMRAM] unsigned char 
  3647 ;; Return value:  Size  Location     Type
  3648 ;;		None               void
  3649 ;; Registers used:
  3650 ;;		wreg, status,2, status,0
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3656 ;;      Params:         0       0       0       0       0       0       0       0       0
  3657 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3658 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3659 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3660 ;;Total ram usage:        3 bytes
  3661 ;; Hardware stack levels used:    1
  3662 ;; This function calls:
  3663 ;;		Nothing
  3664 ;; This function is called by:
  3665 ;;		_atoi
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           	psect	text21
  3670  001418                     __ptext21:
  3671                           	opt stack 0
  3672  001418                     _isdigit:
  3673                           	opt stack 24
  3674                           
  3675                           ;incstack = 0
  3676                           ;isdigit@c stored from wreg
  3677  001418  6E03               	movwf	isdigit@c,c
  3678  00141A  0E00               	movlw	0
  3679  00141C  6E02               	movwf	_isdigit$1330,c
  3680  00141E  0E3A               	movlw	58
  3681  001420  5C03               	subwf	isdigit@c,w,c
  3682  001422  B0D8               	btfsc	status,0,c
  3683  001424  D005               	goto	i2l1487
  3684  001426  0E2F               	movlw	47
  3685  001428  6403               	cpfsgt	isdigit@c,c
  3686  00142A  D002               	goto	i2l1487
  3687  00142C  0E01               	movlw	1
  3688  00142E  6E02               	movwf	_isdigit$1330,c
  3689  001430                     i2l1487:
  3690  001430  C002  F001         	movff	_isdigit$1330,??_isdigit
  3691  001434  3001               	rrcf	??_isdigit,w,c
  3692  001436  0012               	return	
  3693  001438                     __end_of_isdigit:
  3694                           	opt stack 0
  3695                           pclatu	equ	0xFFB
  3696                           pclath	equ	0xFFA
  3697                           tblptru	equ	0xFF8
  3698                           tblptrh	equ	0xFF7
  3699                           tblptrl	equ	0xFF6
  3700                           tablat	equ	0xFF5
  3701                           prodh	equ	0xFF4
  3702                           prodl	equ	0xFF3
  3703                           intcon	equ	0xFF2
  3704                           postinc0	equ	0xFEE
  3705                           fsr0h	equ	0xFEA
  3706                           fsr0l	equ	0xFE9
  3707                           wreg	equ	0xFE8
  3708                           indf1	equ	0xFE7
  3709                           fsr1h	equ	0xFE2
  3710                           fsr1l	equ	0xFE1
  3711                           indf2	equ	0xFDF
  3712                           fsr2h	equ	0xFDA
  3713                           fsr2l	equ	0xFD9
  3714                           status	equ	0xFD8
  3715                           
  3716 ;; *************** function ___wmul *****************
  3717 ;; Defined at:
  3718 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;  multiplier      2    0[COMRAM] unsigned int 
  3721 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;  product         2    4[COMRAM] unsigned int 
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  2    0[COMRAM] unsigned int 
  3726 ;; Registers used:
  3727 ;;		wreg, status,2, status,0, prodl, prodh
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3733 ;;      Params:         4       0       0       0       0       0       0       0       0
  3734 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3735 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3736 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3737 ;;Total ram usage:        6 bytes
  3738 ;; Hardware stack levels used:    1
  3739 ;; This function calls:
  3740 ;;		Nothing
  3741 ;; This function is called by:
  3742 ;;		_atoi
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           	psect	text22
  3747  0013D2                     __ptext22:
  3748                           	opt stack 0
  3749  0013D2                     ___wmul:
  3750                           	opt stack 24
  3751                           
  3752                           ;incstack = 0
  3753  0013D2  5001               	movf	___wmul@multiplier,w,c
  3754  0013D4  0203               	mulwf	___wmul@multiplicand,c
  3755  0013D6  CFF3 F005          	movff	prodl,___wmul@product
  3756  0013DA  CFF4 F006          	movff	prodh,___wmul@product+1
  3757  0013DE  5001               	movf	___wmul@multiplier,w,c
  3758  0013E0  0204               	mulwf	___wmul@multiplicand+1,c
  3759  0013E2  50F3               	movf	prodl,w,c
  3760  0013E4  2606               	addwf	___wmul@product+1,f,c
  3761  0013E6  5002               	movf	___wmul@multiplier+1,w,c
  3762  0013E8  0203               	mulwf	___wmul@multiplicand,c
  3763  0013EA  50F3               	movf	prodl,w,c
  3764  0013EC  2606               	addwf	___wmul@product+1,f,c
  3765  0013EE  C005  F001         	movff	___wmul@product,?___wmul
  3766  0013F2  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3767  0013F6  0012               	return	
  3768  0013F8                     __end_of___wmul:
  3769                           	opt stack 0
  3770                           pclatu	equ	0xFFB
  3771                           pclath	equ	0xFFA
  3772                           tblptru	equ	0xFF8
  3773                           tblptrh	equ	0xFF7
  3774                           tblptrl	equ	0xFF6
  3775                           tablat	equ	0xFF5
  3776                           prodh	equ	0xFF4
  3777                           prodl	equ	0xFF3
  3778                           intcon	equ	0xFF2
  3779                           postinc0	equ	0xFEE
  3780                           fsr0h	equ	0xFEA
  3781                           fsr0l	equ	0xFE9
  3782                           wreg	equ	0xFE8
  3783                           indf1	equ	0xFE7
  3784                           fsr1h	equ	0xFE2
  3785                           fsr1l	equ	0xFE1
  3786                           indf2	equ	0xFDF
  3787                           fsr2h	equ	0xFDA
  3788                           fsr2l	equ	0xFD9
  3789                           status	equ	0xFD8
  3790                           
  3791 ;; *************** function _ReadUSART *****************
  3792 ;; Defined at:
  3793 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
  3794 ;; Parameters:    Size  Location     Type
  3795 ;;		None
  3796 ;; Auto vars:     Size  Location     Type
  3797 ;;  data            1    0[COMRAM] unsigned char 
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  1    wreg      unsigned char 
  3800 ;; Registers used:
  3801 ;;		wreg, status,2, status,0
  3802 ;; Tracked objects:
  3803 ;;		On entry : 0/0
  3804 ;;		On exit  : 0/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3807 ;;      Params:         0       0       0       0       0       0       0       0       0
  3808 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3809 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3810 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3811 ;;Total ram usage:        1 bytes
  3812 ;; Hardware stack levels used:    1
  3813 ;; This function calls:
  3814 ;;		Nothing
  3815 ;; This function is called by:
  3816 ;;		_ISR
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           	psect	text23
  3821  001438                     __ptext23:
  3822                           	opt stack 0
  3823  001438                     _ReadUSART:
  3824                           	opt stack 25
  3825                           
  3826                           ;incstack = 0
  3827  001438  0EF2               	movlw	242
  3828  00143A  163F               	andwf	_USART_Status,f,c
  3829  00143C  ACAB               	btfss	4011,6,c	;volatile
  3830  00143E  D003               	goto	i2l270
  3831  001440  903F               	bcf	_USART_Status,0,c
  3832  001442  B0AB               	btfsc	4011,0,c	;volatile
  3833  001444  803F               	bsf	_USART_Status,0,c
  3834  001446                     i2l270:
  3835  001446  B4AB               	btfsc	4011,2,c	;volatile
  3836  001448  843F               	bsf	_USART_Status,2,c
  3837  00144A  B2AB               	btfsc	4011,1,c	;volatile
  3838  00144C  863F               	bsf	_USART_Status,3,c
  3839  00144E  CFAE F001          	movff	4014,ReadUSART@data	;volatile
  3840  001452  5001               	movf	ReadUSART@data,w,c
  3841  001454  0012               	return	
  3842  001456                     __end_of_ReadUSART:
  3843                           	opt stack 0
  3844                           pclatu	equ	0xFFB
  3845                           pclath	equ	0xFFA
  3846                           tblptru	equ	0xFF8
  3847                           tblptrh	equ	0xFF7
  3848                           tblptrl	equ	0xFF6
  3849                           tablat	equ	0xFF5
  3850                           prodh	equ	0xFF4
  3851                           prodl	equ	0xFF3
  3852                           intcon	equ	0xFF2
  3853                           postinc0	equ	0xFEE
  3854                           fsr0h	equ	0xFEA
  3855                           fsr0l	equ	0xFE9
  3856                           wreg	equ	0xFE8
  3857                           indf1	equ	0xFE7
  3858                           fsr1h	equ	0xFE2
  3859                           fsr1l	equ	0xFE1
  3860                           indf2	equ	0xFDF
  3861                           fsr2h	equ	0xFDA
  3862                           fsr2l	equ	0xFD9
  3863                           status	equ	0xFD8
  3864                           pclatu	equ	0xFFB
  3865                           pclath	equ	0xFFA
  3866                           tblptru	equ	0xFF8
  3867                           tblptrh	equ	0xFF7
  3868                           tblptrl	equ	0xFF6
  3869                           tablat	equ	0xFF5
  3870                           prodh	equ	0xFF4
  3871                           prodl	equ	0xFF3
  3872                           intcon	equ	0xFF2
  3873                           postinc0	equ	0xFEE
  3874                           fsr0h	equ	0xFEA
  3875                           fsr0l	equ	0xFE9
  3876                           wreg	equ	0xFE8
  3877                           indf1	equ	0xFE7
  3878                           fsr1h	equ	0xFE2
  3879                           fsr1l	equ	0xFE1
  3880                           indf2	equ	0xFDF
  3881                           fsr2h	equ	0xFDA
  3882                           fsr2l	equ	0xFD9
  3883                           status	equ	0xFD8
  3884                           
  3885                           	psect	rparam
  3886  0000                     pclatu	equ	0xFFB
  3887                           pclath	equ	0xFFA
  3888                           tblptru	equ	0xFF8
  3889                           tblptrh	equ	0xFF7
  3890                           tblptrl	equ	0xFF6
  3891                           tablat	equ	0xFF5
  3892                           prodh	equ	0xFF4
  3893                           prodl	equ	0xFF3
  3894                           intcon	equ	0xFF2
  3895                           postinc0	equ	0xFEE
  3896                           fsr0h	equ	0xFEA
  3897                           fsr0l	equ	0xFE9
  3898                           wreg	equ	0xFE8
  3899                           indf1	equ	0xFE7
  3900                           fsr1h	equ	0xFE2
  3901                           fsr1l	equ	0xFE1
  3902                           indf2	equ	0xFDF
  3903                           fsr2h	equ	0xFDA
  3904                           fsr2l	equ	0xFD9
  3905                           status	equ	0xFD8


Data Sizes:
    Strings     56
    Constant    4
    Data        2
    BSS         650
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      74
    BANK0           160     19      35
    BANK1           256      0     200
    BANK2           256      0     200
    BANK3           256      0     200
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strncpy@from	PTR const unsigned char  size(2) Largest target is 200
		 -> MessageBuffer(BANK1[200]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 2047
		 -> STR_7(CODE[16]), STR_6(CODE[27]), STR_5(CODE[16]), STR_4(CODE[27]), 
		 -> STR_3(CODE[16]), RAM(DATA[2047]), STR_2(CODE[27]), DC_str(COMRAM[5]), 
		 -> MessageBuffer(BANK1[200]), 

    lcd_puts@str	PTR unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_itoa
    _putsUSART->_WriteUSART
    _itoa->_utoa
    _utoa->i2___lwdiv
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_lcd_putnum
    _lcd_puts->_lcd_gotoxy
    _lcd_putnum->_lcd_gotoxy
    _lcd_gotoxy->_lcd_write_byte
    _lcd_init->_lcd_write_byte
    _lcd_write_byte->_lcd_write_nibble

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   14067
                                             16 BANK0      3     3      0
                           _OpenPWM1
                          _OpenUSART
                          _SetDCPWM1
                         _lcd_gotoxy
                           _lcd_init
                         _lcd_putnum
                           _lcd_puts
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    3671
                                              8 BANK0      2     0      2
                         _lcd_gotoxy
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_putnum                                           8     3      5    4420
                                              8 BANK0      8     3      5
                            ___lwdiv
                         _lcd_gotoxy
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    2104
                                              5 BANK0      3     2      1
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1908
                                              5 BANK0      1     1      0
                     _lcd_write_byte
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (1) _lcd_write_byte                                       2     1      1    1414
                                              3 BANK0      2     1      1
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (2) _lcd_write_nibble                                     3     2      1     494
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _SetDCPWM1                                            6     4      2     196
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _OpenUSART                                            6     4      2     284
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _OpenPWM1                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 14    14      0    2912
                                             24 COMRAM    14    14      0
                          _ReadUSART
                               _atoi
                 _cleanMessageBuffer
                               _itoa
                          _putsUSART
                            _strncpy
 ---------------------------------------------------------------------------------
 (6) _strncpy                                              8     2      6     254
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _putsUSART                                            4     2      2     893
                                              1 COMRAM     4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (7) _WriteUSART                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _itoa                                                 8     2      6    1179
                                             16 COMRAM     8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (7) _utoa                                                 9     3      6     751
                                              7 COMRAM     9     3      6
                            ___lwmod
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     181
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4     211
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) _cleanMessageBuffer                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _atoi                                                 7     5      2     571
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     211
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _ReadUSART                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OpenPWM1
   _OpenUSART
   _SetDCPWM1
   _lcd_gotoxy
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_init
     _lcd_write_byte
       _lcd_write_nibble
     _lcd_write_nibble
   _lcd_putnum
     ___lwdiv
     _lcd_gotoxy
       _lcd_write_byte
         _lcd_write_nibble
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_puts
     _lcd_gotoxy
       _lcd_write_byte
         _lcd_write_nibble
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_write_byte
     _lcd_write_nibble

 _ISR (ROOT)
   _ReadUSART
   _atoi
     ___wmul
     _isdigit
   _cleanMessageBuffer
   _itoa
     _utoa
       ___lwmod
       i2___lwdiv
   _putsUSART
     _WriteUSART
   _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      23       5       21.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     26      4A       1       77.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2C5      20        0.0%
DATA                 0      0     2C5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Jan 04 00:42:55 2017

                          _c 0040                            _i 003B                            _k 003D  
        ___wmul@multiplicand 0003           i2___lwdiv@dividend 0001                          l240 0F9E  
                        l144 10F6                          l147 1150                          l244 0FB8  
                        l245 0FBA                          l246 0FC6                          l247 0FC8  
                        l249 0FF0                          l834 1060                          _PR2 000FCB  
                        _ISR 0008                          u875 0D88                          u876 0D8A  
                        wreg 000FE8                 __CFG_FOSC$HS 000000                  lcd_gotoxy@x 0067  
                lcd_gotoxy@y 0065                 __CFG_LVP$OFF 000000                         ?_ISR 0001  
               __CFG_WDT$OFF 000000                         l1635 1010                         l1811 0B1C  
                       l1661 0F8E                         l1637 101C                         l1647 1052  
                       l1639 1022                         l1751 0F4A                         l1743 0F12  
                       l1753 0F54                         l1747 0F32                         l1739 0EE2  
                       l1755 0F5A                         l1669 0FA0                         l1773 10D6  
                       l1759 1074                         STR_1 0830                         STR_2 0805  
                       STR_3 0820                         STR_4 0805                         STR_5 0820  
                       STR_6 0805                         STR_7 0820                         u1035 131C  
                       u1207 0B6A                         u1217 0B7C                         u1307 0C02  
                       u1227 0B8E                         u1317 0C20                         u1237 0BA0  
                       u1327 0C4A                         u1247 0BB2                         u1337 0C68  
                       u1257 111E                         u1347 0C86                         u1267 1134  
                       u1357 0CA4                         u1277 114A                         u1197 0B08  
                       u1367 0D8C                         u1287 0BC8                         u1377 0E2A  
                       u1297 0BE4                         u1387 0E34                         _PIE1 000F9D  
                       _PEIE 007F96                         _RCIE 007CED                         _RCIF 007CF5  
                       _RCIP 007CFD       __end_of_lcd_write_byte 1418                         _atoi 0CB0  
                       _main 0A92                         _itoa 126A                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0005                         fsr0l 000FE9  
                       fsr2h 000FDA                         indf1 000FE7                         fsr1l 000FE1  
                       indf2 000FDF                         fsr2l 000FD9                         _utoa 0E3C  
                lcd_puts@str 0068                         pclat 000FFA                         prodh 000FF4  
                       prodl 000FF3                         start 0018                  lcd_putnum@r 006E  
                lcd_putnum@x 006B                  lcd_putnum@y 006C                __CFG_MCLRE$ON 000000  
                      ??_ISR 0019                        ?_atoi 0007                        ?_main 0001  
                      ?_itoa 0011                        ?_utoa 0008                        _T2CON 000FCA  
            __end_of___lwdiv 106A              __end_of___lwmod 1398                        i2l106 0A58  
                      i2l270 1446                        i2l257 120E                        i2l470 0D70  
                      i2l471 0D78                        i2l740 0EBC                        i2l834 1304  
                      i2l844 138E                        i2l951 136C                        i2l953 1370  
                      i2l971 12DE                        i2l957 1384                        i2l949 1364  
                      i2l967 12D2                        i2l969 12DA                        i2l979 12FA  
                      _RCREG 000FAE                        _RCSTA 000FAB                        _SPBRG 000FAF  
                      _TRISC 000F94                        _TRISD 000F95                        _TXREG 000FAD  
                      _TXSTA 000FAC                        _lcd_x 0042                        _lcd_y 0043  
            __end_of_isdigit 1438                        atoi@a 000C                        atoi@s 0007  
                      tablat 000FF5                        utoa@c 0010                        utoa@v 000E  
                      status 000FD8              ?_lcd_write_byte 0063              __end_of_strncpy 120E  
         __size_ofi2___lwdiv 0052               WriteUSART@data 0001              __initialization 1152  
               __end_of_atoi 0D7A                 __end_of_main 0BC0                 __end_of_itoa 12BC  
               __end_of_utoa 0EE0             __end_of_OpenPWM1 146A                       ??_atoi 0009  
                     ??_main 0070                       ??_itoa 0017   __end_of_cleanMessageBuffer 13D2  
                     ??_utoa 000E                __activetblptr 000002                       _CCPR1L 000FBE  
                     i2l1005 1476                       i2l1027 0E44                       i2l1037 0E7E  
                     i2l1231 11FC                       i2l1225 11E2                       i2l1227 11EC  
                     i2l1219 11BA                       i2l1271 13B4                       i2l1513 0D3E  
                     i2l1505 0CF4                       i2l1267 139A                       i2l1509 0D04  
                     i2l1285 129E                       i2l1525 089C                       i2l1543 0934  
                     i2l1561 09A4                       i2l1537 0916                       i2l1555 0986  
                     i2l1539 092E                       i2l1493 0CB2                       i2l1573 09F8  
                     i2l1557 099E                       i2l1487 1430                       i2l1495 0CB6  
                     i2l1575 0A10                       i2l1583 0A1E                       i2l1585 0A44  
                     i2l1579 0A16                       _DC_str 0044           __size_of_ReadUSART 001E  
                     _SPBRGH 000FB0           __size_of_SetDCPWM1 0048             __end_of_lcd_init 0CB0  
         __size_of_OpenUSART 0080             __end_of_lcd_puts 0F72                       ___wmul 13D2  
   __end_of_lcd_write_nibble 0E3C                    ??___lwdiv 0064                    ??___lwmod 0005  
                     clear_0 1158                       clear_1 1164                       clear_2 1170  
                     clear_3 117C                       clear_4 1188                       itoa@cp 0017  
               __pdataCOMRAM 0049                    ??_isdigit 0001            __end_ofi2___lwdiv 130E  
       _lcd_lower_row_buffer 0300                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                lcd_putnum@dec 006D  
              lcd_putnum@len 006A                lcd_putnum@num 0068                    ??_strncpy 0007  
              _MessageBuffer 0100                   __accesstop 0060      __end_of__initialization 11A6  
                 _WriteUSART 146A               __pcstackCOMRAM 0001            __end_of_ReadUSART 1456  
          __end_of_SetDCPWM1 1356               lcd_gotoxy@addr 0066                ReadUSART@data 0001  
          __end_of_OpenUSART 0FF2                   __pbssBANK0 0073                   __pbssBANK1 0100  
                 __pbssBANK2 0200                   __pbssBANK3 0300                    ?_OpenPWM1 0001  
                    ?___wmul 0001                      _CCP1CON 000FBD                putsUSART@data 0002  
                 _lcd_gotoxy 10DE                      i2u51_40 1232                      i2u51_47 1228  
                    i2u52_40 1262                      i2u52_47 1258           __size_of_putsUSART 005C  
           ??_lcd_write_byte 0064                   _lcd_putnum 106A                    ?_lcd_init 0001  
                  ?_lcd_puts 0068                   ??_OpenPWM1 0060                      __Hparam 0000  
                    __Lparam 0000                 _flag_newline 0041                  ?_WriteUSART 0001  
            __size_of___wmul 0026                      ___lwdiv 0FF2                      ___lwmod 1356  
               __psmallconst 0800        lcd_write_byte@is_data 0063                      __pcinit 1152  
                    __ramtop 0800                      __ptext0 0A92                      __ptext1 0EE0  
                    __ptext2 106A                      __ptext3 10DE                      __ptext4 0FF2  
                    __ptext5 0BC0                      __ptext6 13F8                      __ptext7 0D7A  
                    __ptext8 130E                      __ptext9 0F72                 __size_of_ISR 0A8A  
                  _T2CONbits 000FCA           lcd_write_byte@byte 0064                      _isdigit 1418  
       _lcd_upper_row_buffer 0200                   ??_lcd_init 0065               __pintcode_body 083E  
                    _strncpy 11B0                   ??_lcd_puts 006A         end_of_initialization 11A6  
           _cantidadLetrasUP 0039           _cleanMessageBuffer 1398                      itoa@buf 0011  
                    itoa@val 0013                __Lmediumconst 0000                      int_func 083E  
        ?_cleanMessageBuffer 0001                    _RCSTAbits 000FAB                      postinc0 000FEE  
          __end_of_putsUSART 126A                      utoa@buf 0008                      utoa@val 000A  
          ?_lcd_write_nibble 0060           ??_lcd_write_nibble 0061         ??_cleanMessageBuffer 0001  
                  _TRISCbits 000F94                  ?_lcd_gotoxy 0065                  ?_lcd_putnum 0068  
        __size_of_WriteUSART 0012            i2___lwdiv@divisor 0003                    i2___lwdiv 12BC  
          i2___lwdiv@counter 0007                   main@config 0071                    _TXSTAbits 000FAC  
             __end_of___wmul 13F8                __pidataCOMRAM 147C          start_initialization 1152  
                  _ReadUSART 1438                  __end_of_ISR 0A92                    _SetDCPWM1 130E  
            SetDCPWM1@DCycle 0064                    _DutyCycle 0049     _lcd_lower_display_buffer 0027  
                 ?i2___lwdiv 0001                    _OpenUSART 0F72            __size_of_OpenPWM1 0014  
        __size_of_lcd_gotoxy 0074                     ??___wmul 0005          __size_of_lcd_putnum 0074  
                __pbssCOMRAM 0027                   ?_ReadUSART 0001                __pcstackBANK0 0060  
                 ?_SetDCPWM1 0060          __end_of__stringdata 083D                 _isdigit$1330 0002  
                 ?_OpenUSART 0060            __size_of_lcd_init 00F0            __size_of_lcd_puts 0092  
           ___lwdiv@dividend 0060                 ??_WriteUSART 0001                    __pintcode 0008  
                   ?___lwdiv 0060                     ?___lwmod 0001                  __smallconst 0800  
                   ?_isdigit 0001             ___lwdiv@quotient 0064              _LCD_ROW_ADDRESS 0801  
                   ?_strncpy 0001                  ??i2___lwdiv 0005           __end_of_WriteUSART 147C  
             ___wmul@product 0005                     _LATDbits 000F8C                  strncpy@from 0003  
                   _PIE1bits 000F9D                  strncpy@size 0005                     _PIR1bits 000F9E  
   _lcd_upper_display_buffer 0073                    _putsUSART 120E                  __stringdata 0805  
          ___wmul@multiplier 0001                  ??_ReadUSART 0001                    main@spbrg 0072  
               ??_lcd_gotoxy 0066                  ??_SetDCPWM1 0062                 ??_lcd_putnum 006D  
  __size_of_lcd_write_nibble 00C2           _cantidadLetrasDOWN 0037                  ??_OpenUSART 0062  
         SetDCPWM1@dutycycle 0060              OpenUSART@config 0065                     _OpenPWM1 1456  
    __size_of_lcd_write_byte 0020                     __Hrparam 0000      lcd_write_nibble@is_data 0060  
                   __Lrparam 0000           __end_of_lcd_gotoxy 1152             __size_of___lwdiv 0078  
         __end_of_lcd_putnum 10DE             __size_of___lwmod 0042                   ?_putsUSART 0002  
    __end_of_LCD_ROW_ADDRESS 0805               OpenPWM1@period 0060  __size_of_cleanMessageBuffer 003A  
           __size_of_isdigit 0020              ___lwdiv@divisor 0062              ___lwdiv@counter 0066  
                   __ptext10 1456                     __ptext20 0CB0                     __ptext12 11B0  
                   __ptext21 1418                     __ptext13 120E                     __ptext22 13D2  
                   __ptext14 146A                     __ptext23 1438                     __ptext15 126A  
                   __ptext16 0E3C                     __ptext17 12BC                     __ptext18 1356  
                   __ptext19 1398                     _lcd_init 0BC0                     _lcd_puts 0EE0  
           __size_of_strncpy 005E                __size_of_atoi 00CA                __size_of_main 012E  
              __size_of_itoa 0052                __size_of_utoa 00A4                     atoi@sign 000B  
                 _INTCONbits 000FF2               OpenUSART@spbrg 0060       lcd_write_nibble@nibble 0062  
                   itoa@base 0015                     isdigit@c 0003                     intlevel2 0000  
           ___lwmod@dividend 0001                    strncpy@cp 0007                    strncpy@to 0001  
                ??_putsUSART 0004                     utoa@base 000C              ___lwmod@divisor 0003  
            ___lwmod@counter 0005             _lcd_write_nibble 0D7A                 _USART_Status 003F  
             _lcd_write_byte 13F8  
