

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Jan 03 17:53:05 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    35  0000                     
    36                           	psect	smallconst
    37  000800                     __psmallconst:
    38                           	opt stack 0
    39  000800  00                 	db	0
    40  000801                     _LCD_ROW_ADDRESS:
    41                           	opt stack 0
    42  000801  80                 	db	128
    43  000802  C0                 	db	192
    44  000803  94                 	db	148
    45  000804  D4                 	db	212
    46  000805                     __end_of_LCD_ROW_ADDRESS:
    47                           	opt stack 0
    48  0000                     _INTCONbits	set	4082
    49  0000                     _LATDbits	set	3980
    50  0000                     _PIE1	set	3997
    51  0000                     _PIE1bits	set	3997
    52  0000                     _PIR1bits	set	3998
    53  0000                     _RCREG	set	4014
    54  0000                     _RCSTA	set	4011
    55  0000                     _RCSTAbits	set	4011
    56  0000                     _SPBRG	set	4015
    57  0000                     _SPBRGH	set	4016
    58  0000                     _TRISC	set	3988
    59  0000                     _TRISCbits	set	3988
    60  0000                     _TRISD	set	3989
    61  0000                     _TXREG	set	4013
    62  0000                     _TXSTA	set	4012
    63  0000                     _TXSTAbits	set	4012
    64  0000                     _PEIE	set	32662
    65  0000                     _RCIE	set	31981
    66  0000                     _RCIF	set	31989
    67  0000                     _RCIP	set	31997
    68                           
    69                           ; #config settings
    70  000805  00                 	db	0	; dummy byte at the end
    71  0000                     
    72                           	psect	cinit
    73  001172                     __pcinit:
    74                           	opt stack 0
    75  001172                     start_initialization:
    76                           	opt stack 0
    77  001172                     __initialization:
    78                           	opt stack 0
    79                           
    80                           ; Clear objects allocated to BANK3 (200 bytes)
    81  001172  EE03  F000         	lfsr	0,__pbssBANK3
    82  001176  0EC8               	movlw	200
    83  001178                     clear_0:
    84  001178  6AEE               	clrf	postinc0,c
    85  00117A  06E8               	decf	wreg,f,c
    86  00117C  E1FD               	bnz	clear_0
    87                           
    88                           ; Clear objects allocated to BANK2 (200 bytes)
    89  00117E  EE02  F000         	lfsr	0,__pbssBANK2
    90  001182  0EC8               	movlw	200
    91  001184                     clear_1:
    92  001184  6AEE               	clrf	postinc0,c
    93  001186  06E8               	decf	wreg,f,c
    94  001188  E1FD               	bnz	clear_1
    95                           
    96                           ; Clear objects allocated to BANK1 (200 bytes)
    97  00118A  EE01  F000         	lfsr	0,__pbssBANK1
    98  00118E  0EC8               	movlw	200
    99  001190                     clear_2:
   100  001190  6AEE               	clrf	postinc0,c
   101  001192  06E8               	decf	wreg,f,c
   102  001194  E1FD               	bnz	clear_2
   103                           
   104                           ; Clear objects allocated to COMRAM (45 bytes)
   105  001196  EE00  F001         	lfsr	0,__pbssCOMRAM
   106  00119A  0E2D               	movlw	45
   107  00119C                     clear_3:
   108  00119C  6AEE               	clrf	postinc0,c
   109  00119E  06E8               	decf	wreg,f,c
   110  0011A0  E1FD               	bnz	clear_3
   111  0011A2                     end_of_initialization:
   112                           	opt stack 0
   113  0011A2                     __end_of__initialization:
   114                           	opt stack 0
   115  0011A2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   116  0011A4  6EF8               	movwf	tblptru,c
   117  0011A6  0100               	movlb	0
   118  0011A8  EF20  F005         	goto	_main	;jump to C main() function
   119                           tblptru	equ	0xFF8
   120                           postinc0	equ	0xFEE
   121                           wreg	equ	0xFE8
   122                           
   123                           	psect	bssCOMRAM
   124  000001                     __pbssCOMRAM:
   125                           	opt stack 0
   126  000001                     _cantidadLetrasDOWN:
   127                           	opt stack 0
   128  000001                     	ds	2
   129  000003                     _cantidadLetrasUP:
   130                           	opt stack 0
   131  000003                     	ds	2
   132  000005                     _i:
   133                           	opt stack 0
   134  000005                     	ds	2
   135  000007                     _k:
   136                           	opt stack 0
   137  000007                     	ds	2
   138  000009                     _USART_Status:
   139                           	opt stack 0
   140  000009                     	ds	1
   141  00000A                     _c:
   142                           	opt stack 0
   143  00000A                     	ds	1
   144  00000B                     _flag_newline:
   145                           	opt stack 0
   146  00000B                     	ds	1
   147  00000C                     _lcd_x:
   148                           	opt stack 0
   149  00000C                     	ds	1
   150  00000D                     _lcd_y:
   151                           	opt stack 0
   152  00000D                     	ds	1
   153  00000E                     _lcd_lower_display_buffer:
   154                           	opt stack 0
   155  00000E                     	ds	16
   156  00001E                     _lcd_upper_display_buffer:
   157                           	opt stack 0
   158  00001E                     	ds	16
   159                           tblptru	equ	0xFF8
   160                           postinc0	equ	0xFEE
   161                           wreg	equ	0xFE8
   162                           
   163                           	psect	bssBANK1
   164  000100                     __pbssBANK1:
   165                           	opt stack 0
   166  000100                     _MessageBuffer:
   167                           	opt stack 0
   168  000100                     	ds	200
   169                           tblptru	equ	0xFF8
   170                           postinc0	equ	0xFEE
   171                           wreg	equ	0xFE8
   172                           
   173                           	psect	bssBANK2
   174  000200                     __pbssBANK2:
   175                           	opt stack 0
   176  000200                     _lcd_upper_row_buffer:
   177                           	opt stack 0
   178  000200                     	ds	200
   179                           tblptru	equ	0xFF8
   180                           postinc0	equ	0xFEE
   181                           wreg	equ	0xFE8
   182                           
   183                           	psect	bssBANK3
   184  000300                     __pbssBANK3:
   185                           	opt stack 0
   186  000300                     _lcd_lower_row_buffer:
   187                           	opt stack 0
   188  000300                     	ds	200
   189                           tblptru	equ	0xFF8
   190                           postinc0	equ	0xFEE
   191                           wreg	equ	0xFE8
   192                           
   193                           	psect	cstackBANK0
   194  000060                     __pcstackBANK0:
   195                           	opt stack 0
   196  000060                     lcd_write_nibble@is_data:
   197                           	opt stack 0
   198  000060                     rotarString@str:
   199                           	opt stack 0
   200  000060                     OpenUSART@spbrg:
   201                           	opt stack 0
   202  000060                     strncpy@to:
   203                           	opt stack 0
   204                           
   205                           ; 2 bytes @ 0x0
   206  000060                     	ds	1
   207  000061                     ??_lcd_write_nibble:
   208                           
   209                           ; 0 bytes @ 0x1
   210  000061                     	ds	1
   211  000062                     ??_OpenUSART:
   212  000062                     lcd_write_nibble@nibble:
   213                           	opt stack 0
   214  000062                     rotarString@length:
   215                           	opt stack 0
   216  000062                     strncpy@from:
   217                           	opt stack 0
   218                           
   219                           ; 2 bytes @ 0x2
   220  000062                     	ds	1
   221  000063                     lcd_write_byte@is_data:
   222                           	opt stack 0
   223                           
   224                           ; 1 bytes @ 0x3
   225  000063                     	ds	1
   226  000064                     ??_rotarString:
   227  000064                     lcd_write_byte@byte:
   228                           	opt stack 0
   229  000064                     strncpy@size:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x4
   233  000064                     	ds	1
   234  000065                     ??_lcd_init:
   235  000065                     lcd_gotoxy@y:
   236                           	opt stack 0
   237  000065                     OpenUSART@config:
   238                           	opt stack 0
   239                           
   240                           ; 1 bytes @ 0x5
   241  000065                     	ds	1
   242  000066                     lcd_gotoxy@addr:
   243                           	opt stack 0
   244  000066                     strncpy@cp:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x6
   248  000066                     	ds	1
   249  000067                     lcd_gotoxy@x:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x7
   253  000067                     	ds	1
   254  000068                     lcd_puts@str:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x8
   258  000068                     	ds	1
   259  000069                     rotarString@aux:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x9
   263  000069                     	ds	1
   264  00006A                     rotarString@j:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0xA
   268  00006A                     	ds	2
   269  00006C                     ??_main:
   270                           
   271                           ; 0 bytes @ 0xC
   272  00006C                     	ds	1
   273  00006D                     main@config:
   274                           	opt stack 0
   275                           
   276                           ; 1 bytes @ 0xD
   277  00006D                     	ds	1
   278  00006E                     main@spbrg:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0xE
   282  00006E                     	ds	1
   283                           tblptru	equ	0xFF8
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	cstackCOMRAM
   288  00002E                     __pcstackCOMRAM:
   289                           	opt stack 0
   290  00002E                     ?_cuentaLetras:
   291                           	opt stack 0
   292  00002E                     ReadUSART@data:
   293                           	opt stack 0
   294  00002E                     WriteUSART@data:
   295                           	opt stack 0
   296  00002E                     i2lcd_write_nibble@is_data:
   297                           	opt stack 0
   298  00002E                     cuentaLetras@str:
   299                           	opt stack 0
   300  00002E                     strcpy@to:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0x0
   304  00002E                     	ds	1
   305  00002F                     ??i2_lcd_write_nibble:
   306  00002F                     putsUSART@data:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x1
   310  00002F                     	ds	1
   311  000030                     i2lcd_write_nibble@nibble:
   312                           	opt stack 0
   313  000030                     cuentaLetras@j:
   314                           	opt stack 0
   315  000030                     strcpy@from:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x2
   319  000030                     	ds	1
   320  000031                     i2lcd_write_byte@is_data:
   321                           	opt stack 0
   322                           
   323                           ; 1 bytes @ 0x3
   324  000031                     	ds	1
   325  000032                     i2lcd_write_byte@byte:
   326                           	opt stack 0
   327  000032                     strcpy@cp:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x4
   331  000032                     	ds	1
   332  000033                     i2lcd_gotoxy@y:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0x5
   336  000033                     	ds	1
   337  000034                     i2lcd_gotoxy@addr:
   338                           	opt stack 0
   339                           
   340                           ; 1 bytes @ 0x6
   341  000034                     	ds	1
   342  000035                     i2lcd_gotoxy@x:
   343                           	opt stack 0
   344                           
   345                           ; 1 bytes @ 0x7
   346  000035                     	ds	1
   347  000036                     lcd_put_blank@y:
   348                           	opt stack 0
   349                           
   350                           ; 1 bytes @ 0x8
   351  000036                     	ds	1
   352  000037                     lcd_put_blank@size:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0x9
   356  000037                     	ds	1
   357  000038                     lcd_put_blank@x:
   358                           	opt stack 0
   359                           
   360                           ; 1 bytes @ 0xA
   361  000038                     	ds	1
   362  000039                     ??_ISR:
   363                           
   364                           ; 0 bytes @ 0xB
   365  000039                     	ds	14
   366  000047                     tblptru	equ	0xFF8
   367                           postinc0	equ	0xFEE
   368                           wreg	equ	0xFE8
   369                           
   370                           ; 0 bytes @ 0x19
   371 ;;
   372 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   373 ;;
   374 ;; *************** function _main *****************
   375 ;; Defined at:
   376 ;;		line 40 in file "main.c"
   377 ;; Parameters:    Size  Location     Type
   378 ;;		None
   379 ;; Auto vars:     Size  Location     Type
   380 ;;  spbrg           1   14[BANK0 ] unsigned char 
   381 ;;  config          1   13[BANK0 ] unsigned char 
   382 ;; Return value:  Size  Location     Type
   383 ;;		None               void
   384 ;; Registers used:
   385 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   386 ;; Tracked objects:
   387 ;;		On entry : 0/0
   388 ;;		On exit  : 0/0
   389 ;;		Unchanged: 0/0
   390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   391 ;;      Params:         0       0       0       0       0       0       0       0       0
   392 ;;      Locals:         0       2       0       0       0       0       0       0       0
   393 ;;      Temps:          0       1       0       0       0       0       0       0       0
   394 ;;      Totals:         0       3       0       0       0       0       0       0       0
   395 ;;Total ram usage:        3 bytes
   396 ;; Hardware stack levels required when called:    9
   397 ;; This function calls:
   398 ;;		_OpenUSART
   399 ;;		_lcd_gotoxy
   400 ;;		_lcd_init
   401 ;;		_lcd_puts
   402 ;;		_lcd_write_byte
   403 ;;		_rotarString
   404 ;;		_strncpy
   405 ;; This function is called by:
   406 ;;		Startup code after reset
   407 ;; This function uses a non-reentrant model
   408 ;;
   409                           
   410                           	psect	text0
   411  000A40                     __ptext0:
   412                           	opt stack 0
   413  000A40                     _main:
   414                           	opt stack 22
   415                           
   416                           ;main.c: 42: unsigned char config = 0, spbrg = 0;
   417                           
   418                           ;incstack = 0
   419  000A40  0E00               	movlw	0
   420  000A42  0100               	movlb	0	; () banked
   421  000A44  6F6D               	movwf	main@config& (0+255),b
   422  000A46  0E00               	movlw	0
   423  000A48  0100               	movlb	0	; () banked
   424  000A4A  6F6E               	movwf	main@spbrg& (0+255),b
   425                           
   426                           ;main.c: 44: TRISC = 0b10000000;
   427  000A4C  0E80               	movlw	128
   428  000A4E  6E94               	movwf	3988,c	;volatile
   429                           
   430                           ;main.c: 45: TRISD = 0b00000000;
   431  000A50  0E00               	movlw	0
   432  000A52  6E95               	movwf	3989,c	;volatile
   433                           
   434                           ; BSR set to: 0
   435                           ;main.c: 48: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
   436  000A54  0E4F               	movlw	79
   437  000A56  16AB               	andwf	4011,f,c	;volatile
   438                           
   439                           ; BSR set to: 0
   440  000A58  9AAC               	bcf	4012,5,c	;volatile
   441                           
   442                           ; BSR set to: 0
   443  000A5A  0ECF               	movlw	207
   444  000A5C  169D               	andwf	3997,f,c	;volatile
   445                           
   446                           ;main.c: 50: config = 0b01111111& 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111;
   447  000A5E  0E7C               	movlw	124
   448  000A60  0100               	movlb	0	; () banked
   449  000A62  6F6D               	movwf	main@config& (0+255),b
   450                           
   451                           ;main.c: 51: spbrg = 77;
   452  000A64  0E4D               	movlw	77
   453  000A66  0100               	movlb	0	; () banked
   454  000A68  6F6E               	movwf	main@spbrg& (0+255),b
   455                           
   456                           ; BSR set to: 0
   457                           ;main.c: 53: OpenUSART(config, spbrg);
   458  000A6A  0100               	movlb	0	; () banked
   459  000A6C  C06E  F060         	movff	main@spbrg,OpenUSART@spbrg
   460  000A70  0100               	movlb	0	; () banked
   461  000A72  6B61               	clrf	(OpenUSART@spbrg+1)& (0+255),b
   462  000A74  0100               	movlb	0	; () banked
   463  000A76  516D               	movf	main@config& (0+255),w,b
   464  000A78  EC97  F007         	call	_OpenUSART
   465                           
   466                           ;main.c: 56: RCIF = 0;
   467  000A7C  9A9E               	bcf	3998,5,c	;volatile
   468                           
   469                           ;main.c: 57: RCIP = 0;
   470  000A7E  9A9F               	bcf	3999,5,c	;volatile
   471                           
   472                           ;main.c: 58: RCIE = 1;
   473  000A80  8A9D               	bsf	3997,5,c	;volatile
   474                           
   475                           ;main.c: 59: PEIE = 1;
   476  000A82  8CF2               	bsf	intcon,6,c	;volatile
   477                           
   478                           ;main.c: 60: PIR1bits.RCIF = 0;
   479  000A84  9A9E               	bcf	3998,5,c	;volatile
   480                           
   481                           ;main.c: 61: (INTCONbits.GIE = 1);
   482  000A86  8EF2               	bsf	intcon,7,c	;volatile
   483                           
   484                           ;main.c: 63: lcd_init();
   485  000A88  ECFD  F005         	call	_lcd_init	;wreg free
   486                           
   487                           ;main.c: 64: {lcd_write_byte(0x01, 0); { _delay((unsigned long)((5000)*(12000000/4000000
      +                          .0))); };};
   488  000A8C  0E00               	movlw	0
   489  000A8E  0100               	movlb	0	; () banked
   490  000A90  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
   491  000A92  0E01               	movlw	1
   492  000A94  EC17  F009         	call	_lcd_write_byte
   493  000A98  0E14               	movlw	20
   494  000A9A  0100               	movlb	0	; () banked
   495  000A9C  6F6C               	movwf	??_main& (0+255),b
   496  000A9E  0E7A               	movlw	122
   497  000AA0                     u1427:
   498  000AA0  2EE8               	decfsz	wreg,f,c
   499  000AA2  D7FE               	goto	u1427
   500  000AA4  2F6C               	decfsz	??_main& (0+255),f,b
   501  000AA6  D7FC               	goto	u1427
   502                           
   503                           ;main.c: 65: lcd_gotoxy(0,0);
   504  000AA8  0E00               	movlw	0
   505  000AAA  0100               	movlb	0	; () banked
   506  000AAC  6F65               	movwf	lcd_gotoxy@y& (0+255),b
   507  000AAE  0E00               	movlw	0
   508  000AB0  EC4E  F008         	call	_lcd_gotoxy
   509  000AB4                     l1929:
   510                           
   511                           ;main.c: 67: {
   512                           ;main.c: 69: lcd_gotoxy(0,0);
   513  000AB4  0E00               	movlw	0
   514  000AB6  0100               	movlb	0	; () banked
   515  000AB8  6F65               	movwf	lcd_gotoxy@y& (0+255),b
   516  000ABA  0E00               	movlw	0
   517  000ABC  EC4E  F008         	call	_lcd_gotoxy
   518                           
   519                           ;main.c: 70: strncpy(lcd_upper_display_buffer, lcd_upper_row_buffer, 16);
   520  000AC0  0E00               	movlw	high _lcd_upper_display_buffer
   521  000AC2  0100               	movlb	0	; () banked
   522  000AC4  6F61               	movwf	(strncpy@to+1)& (0+255),b
   523  000AC6  0E1E               	movlw	low _lcd_upper_display_buffer
   524  000AC8  0100               	movlb	0	; () banked
   525  000ACA  6F60               	movwf	strncpy@to& (0+255),b
   526  000ACC  0102               	movlb	2	; () banked
   527  000ACE  0E02               	movlw	high _lcd_upper_row_buffer
   528  000AD0  0100               	movlb	0	; () banked
   529  000AD2  6F63               	movwf	(strncpy@from+1)& (0+255),b
   530  000AD4  0102               	movlb	2	; () banked
   531  000AD6  0E00               	movlw	low _lcd_upper_row_buffer
   532  000AD8  0100               	movlb	0	; () banked
   533  000ADA  6F62               	movwf	strncpy@from& (0+255),b
   534  000ADC  0E00               	movlw	0
   535  000ADE  0100               	movlb	0	; () banked
   536  000AE0  6F65               	movwf	(strncpy@size+1)& (0+255),b
   537  000AE2  0E10               	movlw	16
   538  000AE4  0100               	movlb	0	; () banked
   539  000AE6  6F64               	movwf	strncpy@size& (0+255),b
   540  000AE8  ECD7  F007         	call	_strncpy	;wreg free
   541                           
   542                           ;main.c: 71: lcd_puts(lcd_upper_display_buffer);
   543  000AEC  0E00               	movlw	high _lcd_upper_display_buffer
   544  000AEE  0100               	movlb	0	; () banked
   545  000AF0  6F69               	movwf	(lcd_puts@str+1)& (0+255),b
   546  000AF2  0E1E               	movlw	low _lcd_upper_display_buffer
   547  000AF4  0100               	movlb	0	; () banked
   548  000AF6  6F68               	movwf	lcd_puts@str& (0+255),b
   549  000AF8  EC13  F008         	call	_lcd_puts	;wreg free
   550                           
   551                           ;main.c: 73: lcd_gotoxy(0,1);
   552  000AFC  0E01               	movlw	1
   553  000AFE  0100               	movlb	0	; () banked
   554  000B00  6F65               	movwf	lcd_gotoxy@y& (0+255),b
   555  000B02  0E00               	movlw	0
   556  000B04  EC4E  F008         	call	_lcd_gotoxy
   557                           
   558                           ;main.c: 74: strncpy(lcd_lower_display_buffer, lcd_lower_row_buffer, 16);
   559  000B08  0E00               	movlw	high _lcd_lower_display_buffer
   560  000B0A  0100               	movlb	0	; () banked
   561  000B0C  6F61               	movwf	(strncpy@to+1)& (0+255),b
   562  000B0E  0E0E               	movlw	low _lcd_lower_display_buffer
   563  000B10  0100               	movlb	0	; () banked
   564  000B12  6F60               	movwf	strncpy@to& (0+255),b
   565  000B14  0103               	movlb	3	; () banked
   566  000B16  0E03               	movlw	high _lcd_lower_row_buffer
   567  000B18  0100               	movlb	0	; () banked
   568  000B1A  6F63               	movwf	(strncpy@from+1)& (0+255),b
   569  000B1C  0103               	movlb	3	; () banked
   570  000B1E  0E00               	movlw	low _lcd_lower_row_buffer
   571  000B20  0100               	movlb	0	; () banked
   572  000B22  6F62               	movwf	strncpy@from& (0+255),b
   573  000B24  0E00               	movlw	0
   574  000B26  0100               	movlb	0	; () banked
   575  000B28  6F65               	movwf	(strncpy@size+1)& (0+255),b
   576  000B2A  0E10               	movlw	16
   577  000B2C  0100               	movlb	0	; () banked
   578  000B2E  6F64               	movwf	strncpy@size& (0+255),b
   579  000B30  ECD7  F007         	call	_strncpy	;wreg free
   580                           
   581                           ;main.c: 75: lcd_puts(lcd_lower_display_buffer);
   582  000B34  0E00               	movlw	high _lcd_lower_display_buffer
   583  000B36  0100               	movlb	0	; () banked
   584  000B38  6F69               	movwf	(lcd_puts@str+1)& (0+255),b
   585  000B3A  0E0E               	movlw	low _lcd_lower_display_buffer
   586  000B3C  0100               	movlb	0	; () banked
   587  000B3E  6F68               	movwf	lcd_puts@str& (0+255),b
   588  000B40  EC13  F008         	call	_lcd_puts	;wreg free
   589                           
   590                           ;main.c: 76: if(cantidadLetrasUP > 16)
   591  000B44  5004               	movf	_cantidadLetrasUP+1,w,c
   592  000B46  0A80               	xorlw	128
   593  000B48  0F80               	addlw	-128
   594  000B4A  0E11               	movlw	17
   595  000B4C  B4D8               	btfsc	status,2,c
   596  000B4E  5C03               	subwf	_cantidadLetrasUP,w,c
   597  000B50  A0D8               	btfss	status,0,c
   598  000B52  D00E               	goto	l1945
   599                           
   600                           ;main.c: 77: {
   601                           ;main.c: 78: rotarString(lcd_upper_row_buffer, cantidadLetrasUP);
   602  000B54  0102               	movlb	2	; () banked
   603  000B56  0E02               	movlw	high _lcd_upper_row_buffer
   604  000B58  0100               	movlb	0	; () banked
   605  000B5A  6F61               	movwf	(rotarString@str+1)& (0+255),b
   606  000B5C  0102               	movlb	2	; () banked
   607  000B5E  0E00               	movlw	low _lcd_upper_row_buffer
   608  000B60  0100               	movlb	0	; () banked
   609  000B62  6F60               	movwf	rotarString@str& (0+255),b
   610  000B64  C003  F062         	movff	_cantidadLetrasUP,rotarString@length
   611  000B68  C004  F063         	movff	_cantidadLetrasUP+1,rotarString@length+1
   612  000B6C  EC75  F006         	call	_rotarString	;wreg free
   613  000B70                     l1945:
   614                           
   615                           ;main.c: 79: }
   616                           ;main.c: 80: if(cantidadLetrasDOWN > 16)
   617  000B70  5002               	movf	_cantidadLetrasDOWN+1,w,c
   618  000B72  0A80               	xorlw	128
   619  000B74  0F80               	addlw	-128
   620  000B76  0E11               	movlw	17
   621  000B78  B4D8               	btfsc	status,2,c
   622  000B7A  5C01               	subwf	_cantidadLetrasDOWN,w,c
   623  000B7C  A0D8               	btfss	status,0,c
   624  000B7E  D00E               	goto	l1949
   625                           
   626                           ;main.c: 81: {
   627                           ;main.c: 82: rotarString(lcd_lower_row_buffer, cantidadLetrasDOWN);
   628  000B80  0103               	movlb	3	; () banked
   629  000B82  0E03               	movlw	high _lcd_lower_row_buffer
   630  000B84  0100               	movlb	0	; () banked
   631  000B86  6F61               	movwf	(rotarString@str+1)& (0+255),b
   632  000B88  0103               	movlb	3	; () banked
   633  000B8A  0E00               	movlw	low _lcd_lower_row_buffer
   634  000B8C  0100               	movlb	0	; () banked
   635  000B8E  6F60               	movwf	rotarString@str& (0+255),b
   636  000B90  C001  F062         	movff	_cantidadLetrasDOWN,rotarString@length
   637  000B94  C002  F063         	movff	_cantidadLetrasDOWN+1,rotarString@length+1
   638  000B98  EC75  F006         	call	_rotarString	;wreg free
   639  000B9C                     l1949:
   640                           
   641                           ;main.c: 83: }
   642                           ;main.c: 84: _delay((unsigned long)((50)*(12000000/4000.0)));
   643  000B9C  0EC3               	movlw	195
   644  000B9E  0100               	movlb	0	; () banked
   645  000BA0  6F6C               	movwf	??_main& (0+255),b
   646  000BA2  0ECD               	movlw	205
   647  000BA4                     u1437:
   648  000BA4  2EE8               	decfsz	wreg,f,c
   649  000BA6  D7FE               	goto	u1437
   650  000BA8  2F6C               	decfsz	??_main& (0+255),f,b
   651  000BAA  D7FC               	goto	u1437
   652  000BAC  F000               	nop	
   653                           
   654                           ;main.c: 85: _delay((unsigned long)((50)*(12000000/4000.0)));
   655  000BAE  0EC3               	movlw	195
   656  000BB0  0100               	movlb	0	; () banked
   657  000BB2  6F6C               	movwf	??_main& (0+255),b
   658  000BB4  0ECD               	movlw	205
   659  000BB6                     u1447:
   660  000BB6  2EE8               	decfsz	wreg,f,c
   661  000BB8  D7FE               	goto	u1447
   662  000BBA  2F6C               	decfsz	??_main& (0+255),f,b
   663  000BBC  D7FC               	goto	u1447
   664  000BBE  F000               	nop	
   665                           
   666                           ;main.c: 86: _delay((unsigned long)((50)*(12000000/4000.0)));
   667  000BC0  0EC3               	movlw	195
   668  000BC2  0100               	movlb	0	; () banked
   669  000BC4  6F6C               	movwf	??_main& (0+255),b
   670  000BC6  0ECD               	movlw	205
   671  000BC8                     u1457:
   672  000BC8  2EE8               	decfsz	wreg,f,c
   673  000BCA  D7FE               	goto	u1457
   674  000BCC  2F6C               	decfsz	??_main& (0+255),f,b
   675  000BCE  D7FC               	goto	u1457
   676  000BD0  F000               	nop	
   677                           
   678                           ;main.c: 87: _delay((unsigned long)((50)*(12000000/4000.0)));
   679  000BD2  0EC3               	movlw	195
   680  000BD4  0100               	movlb	0	; () banked
   681  000BD6  6F6C               	movwf	??_main& (0+255),b
   682  000BD8  0ECD               	movlw	205
   683  000BDA                     u1467:
   684  000BDA  2EE8               	decfsz	wreg,f,c
   685  000BDC  D7FE               	goto	u1467
   686  000BDE  2F6C               	decfsz	??_main& (0+255),f,b
   687  000BE0  D7FC               	goto	u1467
   688  000BE2  F000               	nop	
   689                           
   690                           ;main.c: 88: _delay((unsigned long)((50)*(12000000/4000.0)));
   691  000BE4  0EC3               	movlw	195
   692  000BE6  0100               	movlb	0	; () banked
   693  000BE8  6F6C               	movwf	??_main& (0+255),b
   694  000BEA  0ECD               	movlw	205
   695  000BEC                     u1477:
   696  000BEC  2EE8               	decfsz	wreg,f,c
   697  000BEE  D7FE               	goto	u1477
   698  000BF0  2F6C               	decfsz	??_main& (0+255),f,b
   699  000BF2  D7FC               	goto	u1477
   700  000BF4  F000               	nop	
   701                           
   702                           ;main.c: 89: LATDbits.LATD0 =~ LATDbits.LATD0;
   703  000BF6  708C               	btg	3980,0,c	;volatile
   704  000BF8  D75D               	goto	l1929
   705  000BFA                     __end_of_main:
   706                           	opt stack 0
   707                           tblptru	equ	0xFF8
   708                           intcon	equ	0xFF2
   709                           postinc0	equ	0xFEE
   710                           wreg	equ	0xFE8
   711                           status	equ	0xFD8
   712                           
   713 ;; *************** function _strncpy *****************
   714 ;; Defined at:
   715 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\strncpy.c"
   716 ;; Parameters:    Size  Location     Type
   717 ;;  to              2    0[BANK0 ] PTR unsigned char 
   718 ;;		 -> lcd_lower_display_buffer(16), lcd_upper_display_buffer(16), 
   719 ;;  from            2    2[BANK0 ] PTR const unsigned char 
   720 ;;		 -> lcd_lower_row_buffer(200), lcd_upper_row_buffer(200), 
   721 ;;  size            2    4[BANK0 ] unsigned int 
   722 ;; Auto vars:     Size  Location     Type
   723 ;;  cp              2    6[BANK0 ] PTR unsigned char 
   724 ;;		 -> lcd_lower_display_buffer(16), lcd_upper_display_buffer(16), 
   725 ;; Return value:  Size  Location     Type
   726 ;;                  2    0[BANK0 ] PTR unsigned char 
   727 ;; Registers used:
   728 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   729 ;; Tracked objects:
   730 ;;		On entry : 0/0
   731 ;;		On exit  : 0/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   734 ;;      Params:         0       6       0       0       0       0       0       0       0
   735 ;;      Locals:         0       2       0       0       0       0       0       0       0
   736 ;;      Temps:          0       0       0       0       0       0       0       0       0
   737 ;;      Totals:         0       8       0       0       0       0       0       0       0
   738 ;;Total ram usage:        8 bytes
   739 ;; Hardware stack levels used:    1
   740 ;; Hardware stack levels required when called:    5
   741 ;; This function calls:
   742 ;;		Nothing
   743 ;; This function is called by:
   744 ;;		_main
   745 ;; This function uses a non-reentrant model
   746 ;;
   747                           
   748                           	psect	text1
   749  000FAE                     __ptext1:
   750                           	opt stack 0
   751  000FAE                     _strncpy:
   752                           	opt stack 25
   753                           
   754                           ;incstack = 0
   755  000FAE  0100               	movlb	0	; () banked
   756  000FB0  C061  F067         	movff	strncpy@to+1,strncpy@cp+1
   757  000FB4  0100               	movlb	0	; () banked
   758  000FB6  C060  F066         	movff	strncpy@to,strncpy@cp
   759  000FBA  D01B               	goto	l1859
   760  000FBC                     l1853:
   761                           
   762                           ; BSR set to: 0
   763  000FBC  0100               	movlb	0	; () banked
   764  000FBE  0764               	decf	strncpy@size& (0+255),f,b
   765  000FC0  A0D8               	btfss	status,0,c
   766  000FC2  0765               	decf	(strncpy@size+1)& (0+255),f,b
   767                           
   768                           ; BSR set to: 0
   769  000FC4  0100               	movlb	0	; () banked
   770  000FC6  C062  FFD9         	movff	strncpy@from,fsr2l
   771  000FCA  0100               	movlb	0	; () banked
   772  000FCC  C063  FFDA         	movff	strncpy@from+1,fsr2h
   773  000FD0  0100               	movlb	0	; () banked
   774  000FD2  4B62               	infsnz	strncpy@from& (0+255),f,b
   775  000FD4  2B63               	incf	(strncpy@from+1)& (0+255),f,b
   776  000FD6  0100               	movlb	0	; () banked
   777  000FD8  C066  FFE1         	movff	strncpy@cp,fsr1l
   778  000FDC  0100               	movlb	0	; () banked
   779  000FDE  C067  FFE2         	movff	strncpy@cp+1,fsr1h
   780  000FE2  0100               	movlb	0	; () banked
   781  000FE4  4B66               	infsnz	strncpy@cp& (0+255),f,b
   782  000FE6  2B67               	incf	(strncpy@cp+1)& (0+255),f,b
   783  000FE8  CFDF FFE7          	movff	indf2,indf1
   784  000FEC  50E7               	movf	indf1,w,c
   785  000FEE  B4D8               	btfsc	status,2,c
   786  000FF0  D00F               	goto	l1865
   787  000FF2                     l1859:
   788                           
   789                           ; BSR set to: 0
   790  000FF2  0100               	movlb	0	; () banked
   791  000FF4  5165               	movf	(strncpy@size+1)& (0+255),w,b
   792  000FF6  1164               	iorwf	strncpy@size& (0+255),w,b
   793  000FF8  B4D8               	btfsc	status,2,c
   794  000FFA  D00A               	goto	l1865
   795  000FFC  D7DF               	goto	l1853
   796  000FFE                     l1861:
   797                           
   798                           ; BSR set to: 0
   799  000FFE  C066  FFD9         	movff	strncpy@cp,fsr2l
   800  001002  C067  FFDA         	movff	strncpy@cp+1,fsr2h
   801  001006  0E00               	movlw	0
   802  001008  6EDF               	movwf	indf2,c
   803                           
   804                           ; BSR set to: 0
   805  00100A  0100               	movlb	0	; () banked
   806  00100C  4B66               	infsnz	strncpy@cp& (0+255),f,b
   807  00100E  2B67               	incf	(strncpy@cp+1)& (0+255),f,b
   808  001010                     l1865:
   809                           
   810                           ; BSR set to: 0
   811  001010  0100               	movlb	0	; () banked
   812  001012  0764               	decf	strncpy@size& (0+255),f,b
   813  001014  A0D8               	btfss	status,0,c
   814  001016  0765               	decf	(strncpy@size+1)& (0+255),f,b
   815  001018  0100               	movlb	0	; () banked
   816  00101A  2964               	incf	strncpy@size& (0+255),w,b
   817  00101C  B4D8               	btfsc	status,2,c
   818  00101E  2965               	incf	(strncpy@size+1)& (0+255),w,b
   819  001020  B4D8               	btfsc	status,2,c
   820                           
   821                           ; BSR set to: 0
   822                           
   823                           ; BSR set to: 0
   824                           ;	Return value of _strncpy is never used
   825  001022  0012               	return	
   826  001024  D7EC               	goto	l1861
   827  001026                     __end_of_strncpy:
   828                           	opt stack 0
   829                           tblptru	equ	0xFF8
   830                           intcon	equ	0xFF2
   831                           postinc0	equ	0xFEE
   832                           wreg	equ	0xFE8
   833                           indf1	equ	0xFE7
   834                           fsr1h	equ	0xFE2
   835                           fsr1l	equ	0xFE1
   836                           indf2	equ	0xFDF
   837                           fsr2h	equ	0xFDA
   838                           fsr2l	equ	0xFD9
   839                           status	equ	0xFD8
   840                           
   841 ;; *************** function _rotarString *****************
   842 ;; Defined at:
   843 ;;		line 160 in file "main.c"
   844 ;; Parameters:    Size  Location     Type
   845 ;;  str             2    0[BANK0 ] PTR unsigned char 
   846 ;;		 -> lcd_lower_row_buffer(200), lcd_upper_row_buffer(200), 
   847 ;;  length          2    2[BANK0 ] int 
   848 ;; Auto vars:     Size  Location     Type
   849 ;;  j               2   10[BANK0 ] int 
   850 ;;  aux             1    9[BANK0 ] unsigned char 
   851 ;; Return value:  Size  Location     Type
   852 ;;		None               void
   853 ;; Registers used:
   854 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   855 ;; Tracked objects:
   856 ;;		On entry : 0/0
   857 ;;		On exit  : 0/0
   858 ;;		Unchanged: 0/0
   859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   860 ;;      Params:         0       4       0       0       0       0       0       0       0
   861 ;;      Locals:         0       3       0       0       0       0       0       0       0
   862 ;;      Temps:          0       5       0       0       0       0       0       0       0
   863 ;;      Totals:         0      12       0       0       0       0       0       0       0
   864 ;;Total ram usage:       12 bytes
   865 ;; Hardware stack levels used:    1
   866 ;; Hardware stack levels required when called:    5
   867 ;; This function calls:
   868 ;;		Nothing
   869 ;; This function is called by:
   870 ;;		_main
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874                           	psect	text2
   875  000CEA                     __ptext2:
   876                           	opt stack 0
   877  000CEA                     _rotarString:
   878                           	opt stack 25
   879                           
   880                           ;main.c: 162: int j;
   881                           ;main.c: 163: char aux;
   882                           ;main.c: 164: aux = str[0];
   883                           
   884                           ; BSR set to: 0
   885                           ;incstack = 0
   886  000CEA  C060  FFD9         	movff	rotarString@str,fsr2l
   887  000CEE  C061  FFDA         	movff	rotarString@str+1,fsr2h
   888  000CF2  50DF               	movf	indf2,w,c
   889  000CF4  0100               	movlb	0	; () banked
   890  000CF6  6F69               	movwf	rotarString@aux& (0+255),b
   891                           
   892                           ; BSR set to: 0
   893                           ;main.c: 165: for(j = 0; j<length - 1; j++)
   894  000CF8  0E00               	movlw	0
   895  000CFA  0100               	movlb	0	; () banked
   896  000CFC  6F6B               	movwf	(rotarString@j+1)& (0+255),b
   897  000CFE  0E00               	movlw	0
   898  000D00  0100               	movlb	0	; () banked
   899  000D02  6F6A               	movwf	rotarString@j& (0+255),b
   900  000D04  D023               	goto	l1895
   901  000D06                     l1891:
   902                           
   903                           ; BSR set to: 0
   904                           ;main.c: 166: {
   905                           ;main.c: 167: str[j] = str[j+1];
   906  000D06  0E01               	movlw	1
   907  000D08  0100               	movlb	0	; () banked
   908  000D0A  256A               	addwf	rotarString@j& (0+255),w,b
   909  000D0C  0100               	movlb	0	; () banked
   910  000D0E  6F64               	movwf	??_rotarString& (0+255),b
   911  000D10  0E00               	movlw	0
   912  000D12  0100               	movlb	0	; () banked
   913  000D14  216B               	addwfc	(rotarString@j+1)& (0+255),w,b
   914  000D16  0100               	movlb	0	; () banked
   915  000D18  6F65               	movwf	(??_rotarString+1)& (0+255),b
   916  000D1A  0100               	movlb	0	; () banked
   917  000D1C  5164               	movf	??_rotarString& (0+255),w,b
   918  000D1E  0100               	movlb	0	; () banked
   919  000D20  2560               	addwf	rotarString@str& (0+255),w,b
   920  000D22  6ED9               	movwf	fsr2l,c
   921  000D24  0100               	movlb	0	; () banked
   922  000D26  5165               	movf	(??_rotarString+1)& (0+255),w,b
   923  000D28  0100               	movlb	0	; () banked
   924  000D2A  2161               	addwfc	(rotarString@str+1)& (0+255),w,b
   925  000D2C  6EDA               	movwf	fsr2h,c
   926  000D2E  0100               	movlb	0	; () banked
   927  000D30  516A               	movf	rotarString@j& (0+255),w,b
   928  000D32  0100               	movlb	0	; () banked
   929  000D34  2560               	addwf	rotarString@str& (0+255),w,b
   930  000D36  6EE1               	movwf	fsr1l,c
   931  000D38  0100               	movlb	0	; () banked
   932  000D3A  516B               	movf	(rotarString@j+1)& (0+255),w,b
   933  000D3C  0100               	movlb	0	; () banked
   934  000D3E  2161               	addwfc	(rotarString@str+1)& (0+255),w,b
   935  000D40  6EE2               	movwf	fsr1h,c
   936  000D42  CFDF FFE7          	movff	indf2,indf1
   937                           
   938                           ; BSR set to: 0
   939  000D46  0100               	movlb	0	; () banked
   940  000D48  4B6A               	infsnz	rotarString@j& (0+255),f,b
   941  000D4A  2B6B               	incf	(rotarString@j+1)& (0+255),f,b
   942  000D4C                     l1895:
   943                           
   944                           ; BSR set to: 0
   945  000D4C  0EFF               	movlw	255
   946  000D4E  0100               	movlb	0	; () banked
   947  000D50  6F64               	movwf	??_rotarString& (0+255),b
   948  000D52  0EFF               	movlw	255
   949  000D54  6F65               	movwf	(??_rotarString+1)& (0+255),b
   950  000D56  0100               	movlb	0	; () banked
   951  000D58  C062  F066         	movff	rotarString@length,??_rotarString+2
   952  000D5C  0100               	movlb	0	; () banked
   953  000D5E  C063  F067         	movff	rotarString@length+1,??_rotarString+3
   954  000D62  0100               	movlb	0	; () banked
   955  000D64  5164               	movf	??_rotarString& (0+255),w,b
   956  000D66  0100               	movlb	0	; () banked
   957  000D68  2766               	addwf	(??_rotarString+2)& (0+255),f,b
   958  000D6A  0100               	movlb	0	; () banked
   959  000D6C  5165               	movf	(??_rotarString+1)& (0+255),w,b
   960  000D6E  0100               	movlb	0	; () banked
   961  000D70  2367               	addwfc	(??_rotarString+3)& (0+255),f,b
   962  000D72  0100               	movlb	0	; () banked
   963  000D74  516B               	movf	(rotarString@j+1)& (0+255),w,b
   964  000D76  0A80               	xorlw	128
   965  000D78  0100               	movlb	0	; () banked
   966  000D7A  6F68               	movwf	(??_rotarString+4)& (0+255),b
   967  000D7C  5166               	movf	(??_rotarString+2)& (0+255),w,b
   968  000D7E  0100               	movlb	0	; () banked
   969  000D80  5D6A               	subwf	rotarString@j& (0+255),w,b
   970  000D82  0100               	movlb	0	; () banked
   971  000D84  5167               	movf	(??_rotarString+3)& (0+255),w,b
   972  000D86  0A80               	xorlw	128
   973  000D88  0100               	movlb	0	; () banked
   974  000D8A  5968               	subwfb	(??_rotarString+4)& (0+255),w,b
   975  000D8C  A0D8               	btfss	status,0,c
   976  000D8E  D7BB               	goto	l1891
   977                           
   978                           ; BSR set to: 0
   979                           ;main.c: 168: }
   980                           ;main.c: 169: str[length - 1] = aux;
   981                           
   982                           ; BSR set to: 0
   983  000D90  0EFF               	movlw	255
   984  000D92  0100               	movlb	0	; () banked
   985  000D94  6F64               	movwf	??_rotarString& (0+255),b
   986  000D96  0EFF               	movlw	255
   987  000D98  6F65               	movwf	(??_rotarString+1)& (0+255),b
   988  000D9A  0100               	movlb	0	; () banked
   989  000D9C  C062  F066         	movff	rotarString@length,??_rotarString+2
   990  000DA0  0100               	movlb	0	; () banked
   991  000DA2  C063  F067         	movff	rotarString@length+1,??_rotarString+3
   992  000DA6  0100               	movlb	0	; () banked
   993  000DA8  5164               	movf	??_rotarString& (0+255),w,b
   994  000DAA  0100               	movlb	0	; () banked
   995  000DAC  2766               	addwf	(??_rotarString+2)& (0+255),f,b
   996  000DAE  0100               	movlb	0	; () banked
   997  000DB0  5165               	movf	(??_rotarString+1)& (0+255),w,b
   998  000DB2  0100               	movlb	0	; () banked
   999  000DB4  2367               	addwfc	(??_rotarString+3)& (0+255),f,b
  1000  000DB6  0100               	movlb	0	; () banked
  1001  000DB8  5166               	movf	(??_rotarString+2)& (0+255),w,b
  1002  000DBA  0100               	movlb	0	; () banked
  1003  000DBC  2560               	addwf	rotarString@str& (0+255),w,b
  1004  000DBE  6ED9               	movwf	fsr2l,c
  1005  000DC0  0100               	movlb	0	; () banked
  1006  000DC2  5167               	movf	(??_rotarString+3)& (0+255),w,b
  1007  000DC4  0100               	movlb	0	; () banked
  1008  000DC6  2161               	addwfc	(rotarString@str+1)& (0+255),w,b
  1009  000DC8  6EDA               	movwf	fsr2h,c
  1010  000DCA  0100               	movlb	0	; () banked
  1011  000DCC  C069  FFDF         	movff	rotarString@aux,indf2
  1012                           
  1013                           ; BSR set to: 0
  1014  000DD0  0012               	return	
  1015  000DD2                     __end_of_rotarString:
  1016                           	opt stack 0
  1017                           tblptru	equ	0xFF8
  1018                           intcon	equ	0xFF2
  1019                           postinc0	equ	0xFEE
  1020                           wreg	equ	0xFE8
  1021                           indf1	equ	0xFE7
  1022                           fsr1h	equ	0xFE2
  1023                           fsr1l	equ	0xFE1
  1024                           indf2	equ	0xFDF
  1025                           fsr2h	equ	0xFDA
  1026                           fsr2l	equ	0xFD9
  1027                           status	equ	0xFD8
  1028                           
  1029 ;; *************** function _lcd_puts *****************
  1030 ;; Defined at:
  1031 ;;		line 108 in file "lcd_driver.c"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;  str             2    8[BANK0 ] PTR unsigned char 
  1034 ;;		 -> lcd_lower_display_buffer(16), lcd_upper_display_buffer(16), 
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;		None
  1037 ;; Return value:  Size  Location     Type
  1038 ;;		None               void
  1039 ;; Registers used:
  1040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1041 ;; Tracked objects:
  1042 ;;		On entry : 0/0
  1043 ;;		On exit  : 0/0
  1044 ;;		Unchanged: 0/0
  1045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1046 ;;      Params:         0       2       0       0       0       0       0       0       0
  1047 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1048 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1049 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1050 ;;Total ram usage:        2 bytes
  1051 ;; Hardware stack levels used:    1
  1052 ;; Hardware stack levels required when called:    8
  1053 ;; This function calls:
  1054 ;;		_lcd_gotoxy
  1055 ;;		_lcd_write_byte
  1056 ;; This function is called by:
  1057 ;;		_main
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           	psect	text3
  1062  001026                     __ptext3:
  1063                           	opt stack 0
  1064  001026                     _lcd_puts:
  1065                           	opt stack 22
  1066                           
  1067                           ;lcd_driver.c: 110: while (*str != 0)
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;incstack = 0
  1071  001026  D032               	goto	l1885
  1072  001028                     l1869:
  1073                           
  1074                           ;lcd_driver.c: 111: {
  1075                           ;lcd_driver.c: 112: if (*str != '\n')
  1076  001028  C068  FFD9         	movff	lcd_puts@str,fsr2l
  1077  00102C  C069  FFDA         	movff	lcd_puts@str+1,fsr2h
  1078  001030  50DF               	movf	indf2,w,c
  1079  001032  0A0A               	xorlw	10
  1080  001034  B4D8               	btfsc	status,2,c
  1081  001036  D00A               	goto	l1873
  1082                           
  1083                           ;lcd_driver.c: 113: {
  1084                           ;lcd_driver.c: 114: {lcd_write_byte(*str, 1);};
  1085  001038  0E01               	movlw	1
  1086  00103A  0100               	movlb	0	; () banked
  1087  00103C  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1088  00103E  C068  FFD9         	movff	lcd_puts@str,fsr2l
  1089  001042  C069  FFDA         	movff	lcd_puts@str+1,fsr2h
  1090  001046  50DF               	movf	indf2,w,c
  1091  001048  EC17  F009         	call	_lcd_write_byte
  1092  00104C                     l1873:
  1093                           
  1094                           ;lcd_driver.c: 115: }
  1095                           ;lcd_driver.c: 117: if ((++lcd_x == 16) || (*str == '\n'))
  1096  00104C  2A0C               	incf	_lcd_x,f,c
  1097  00104E  500C               	movf	_lcd_x& (0+255),w,c
  1098  001050  0A10               	xorlw	16
  1099  001052  B4D8               	btfsc	status,2,c
  1100  001054  D007               	goto	l1877
  1101  001056  0E0A               	movlw	10
  1102  001058  C068  FFD9         	movff	lcd_puts@str,fsr2l
  1103  00105C  C069  FFDA         	movff	lcd_puts@str+1,fsr2h
  1104  001060  62DF               	cpfseq	indf2,c
  1105  001062  D011               	goto	l1883
  1106  001064                     l1877:
  1107                           
  1108                           ;lcd_driver.c: 118: {
  1109                           ;lcd_driver.c: 119: if (++lcd_y == 2)
  1110  001064  2A0D               	incf	_lcd_y,f,c
  1111  001066  500D               	movf	_lcd_y& (0+255),w,c
  1112  001068  0A02               	xorlw	2
  1113  00106A  A4D8               	btfss	status,2,c
  1114  00106C  D007               	goto	l1881
  1115                           
  1116                           ;lcd_driver.c: 120: {
  1117                           ;lcd_driver.c: 121: lcd_gotoxy(0,0);
  1118  00106E  0E00               	movlw	0
  1119  001070  0100               	movlb	0	; () banked
  1120  001072  6F65               	movwf	lcd_gotoxy@y& (0+255),b
  1121  001074  0E00               	movlw	0
  1122  001076  EC4E  F008         	call	_lcd_gotoxy
  1123                           
  1124                           ;lcd_driver.c: 122: }
  1125  00107A  D005               	goto	l1883
  1126  00107C                     l1881:
  1127                           
  1128                           ;lcd_driver.c: 123: else
  1129                           ;lcd_driver.c: 124: {
  1130                           ;lcd_driver.c: 125: lcd_gotoxy(0, lcd_y);
  1131  00107C  C00D  F065         	movff	_lcd_y,lcd_gotoxy@y
  1132  001080  0E00               	movlw	0
  1133  001082  EC4E  F008         	call	_lcd_gotoxy
  1134  001086                     l1883:
  1135                           
  1136                           ;lcd_driver.c: 126: }
  1137                           ;lcd_driver.c: 127: }
  1138                           ;lcd_driver.c: 128: str++;
  1139  001086  0100               	movlb	0	; () banked
  1140  001088  4B68               	infsnz	lcd_puts@str& (0+255),f,b
  1141  00108A  2B69               	incf	(lcd_puts@str+1)& (0+255),f,b
  1142  00108C                     l1885:
  1143  00108C  C068  FFD9         	movff	lcd_puts@str,fsr2l
  1144  001090  C069  FFDA         	movff	lcd_puts@str+1,fsr2h
  1145  001094  50DF               	movf	indf2,w,c
  1146  001096  B4D8               	btfsc	status,2,c
  1147  001098  0012               	return	
  1148  00109A  D7C6               	goto	l1869
  1149  00109C                     __end_of_lcd_puts:
  1150                           	opt stack 0
  1151                           tblptru	equ	0xFF8
  1152                           intcon	equ	0xFF2
  1153                           postinc0	equ	0xFEE
  1154                           wreg	equ	0xFE8
  1155                           indf1	equ	0xFE7
  1156                           fsr1h	equ	0xFE2
  1157                           fsr1l	equ	0xFE1
  1158                           indf2	equ	0xFDF
  1159                           fsr2h	equ	0xFDA
  1160                           fsr2l	equ	0xFD9
  1161                           status	equ	0xFD8
  1162                           
  1163 ;; *************** function _lcd_gotoxy *****************
  1164 ;; Defined at:
  1165 ;;		line 54 in file "lcd_driver.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;  x               1    wreg     unsigned char 
  1168 ;;  y               1    5[BANK0 ] unsigned char 
  1169 ;; Auto vars:     Size  Location     Type
  1170 ;;  x               1    7[BANK0 ] unsigned char 
  1171 ;;  addr            1    6[BANK0 ] unsigned char 
  1172 ;; Return value:  Size  Location     Type
  1173 ;;		None               void
  1174 ;; Registers used:
  1175 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1176 ;; Tracked objects:
  1177 ;;		On entry : 0/0
  1178 ;;		On exit  : 0/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1181 ;;      Params:         0       1       0       0       0       0       0       0       0
  1182 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1183 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1184 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1185 ;;Total ram usage:        3 bytes
  1186 ;; Hardware stack levels used:    1
  1187 ;; Hardware stack levels required when called:    7
  1188 ;; This function calls:
  1189 ;;		_lcd_write_byte
  1190 ;; This function is called by:
  1191 ;;		_main
  1192 ;;		_lcd_puts
  1193 ;;		_lcd_putnum
  1194 ;;		_lcd_puts_const
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           	psect	text4
  1199  00109C                     __ptext4:
  1200                           	opt stack 0
  1201  00109C                     _lcd_gotoxy:
  1202                           	opt stack 22
  1203                           
  1204                           ;incstack = 0
  1205                           ;lcd_gotoxy@x stored from wreg
  1206  00109C  0100               	movlb	0	; () banked
  1207  00109E  6F67               	movwf	lcd_gotoxy@x& (0+255),b
  1208                           
  1209                           ; BSR set to: 0
  1210                           ;lcd_driver.c: 57: uint8_t addr;
  1211                           ;lcd_driver.c: 59: if ((y > 3) || (x > 19))
  1212  0010A0  0E04               	movlw	4
  1213  0010A2  0100               	movlb	0	; () banked
  1214  0010A4  5D65               	subwf	lcd_gotoxy@y& (0+255),w,b
  1215  0010A6  B0D8               	btfsc	status,0,c
  1216  0010A8  D032               	goto	l138
  1217                           
  1218                           ; BSR set to: 0
  1219  0010AA  0E13               	movlw	19
  1220  0010AC  0100               	movlb	0	; () banked
  1221  0010AE  6567               	cpfsgt	lcd_gotoxy@x& (0+255),b
  1222  0010B0  D001               	goto	l135
  1223  0010B2  D02D               	goto	l138
  1224  0010B4                     l135:
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;lcd_driver.c: 62: }
  1228                           ;lcd_driver.c: 63: lcd_x = x;
  1229  0010B4  C067  F00C         	movff	lcd_gotoxy@x,_lcd_x
  1230                           
  1231                           ;lcd_driver.c: 64: lcd_y = y;
  1232  0010B8  C065  F00D         	movff	lcd_gotoxy@y,_lcd_y
  1233                           
  1234                           ;lcd_driver.c: 65: addr = x;
  1235  0010BC  C067  F066         	movff	lcd_gotoxy@x,lcd_gotoxy@addr
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;lcd_driver.c: 66: addr += LCD_ROW_ADDRESS[y];
  1239  0010C0  0100               	movlb	0	; () banked
  1240  0010C2  5165               	movf	lcd_gotoxy@y& (0+255),w,b
  1241  0010C4  0D01               	mullw	1
  1242  0010C6  0E01               	movlw	low _LCD_ROW_ADDRESS
  1243  0010C8  24F3               	addwf	prodl,w,c
  1244  0010CA  6EF6               	movwf	tblptrl,c
  1245  0010CC  0E08               	movlw	high _LCD_ROW_ADDRESS
  1246  0010CE  20F4               	addwfc	prodh,w,c
  1247  0010D0  6EF7               	movwf	tblptrh,c
  1248  0010D2                     	if	0	;There are less than 3 active tblptr bytes
  1249  0010D2                     	endif
  1250  0010D2  0008               	tblrd		*
  1251  0010D4  50F5               	movf	tablat,w,c
  1252  0010D6  0100               	movlb	0	; () banked
  1253  0010D8  2766               	addwf	lcd_gotoxy@addr& (0+255),f,b
  1254                           
  1255                           ; BSR set to: 0
  1256                           ;lcd_driver.c: 67: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1257  0010DA  0EFA               	movlw	250
  1258  0010DC                     u1487:
  1259  0010DC  F000               	nop	
  1260  0010DE  2EE8               	decfsz	wreg,f,c
  1261  0010E0  D7FD               	goto	u1487
  1262                           
  1263                           ;lcd_driver.c: 68: lcd_write_byte(addr, 0);
  1264  0010E2  0E00               	movlw	0
  1265  0010E4  0100               	movlb	0	; () banked
  1266  0010E6  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1267  0010E8  0100               	movlb	0	; () banked
  1268  0010EA  5166               	movf	lcd_gotoxy@addr& (0+255),w,b
  1269  0010EC  EC17  F009         	call	_lcd_write_byte
  1270                           
  1271                           ;lcd_driver.c: 69: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1272  0010F0  0EFA               	movlw	250
  1273  0010F2                     u1497:
  1274  0010F2  F000               	nop	
  1275  0010F4  2EE8               	decfsz	wreg,f,c
  1276  0010F6  D7FD               	goto	u1497
  1277                           
  1278                           ;lcd_driver.c: 70: lcd_write_byte(addr, 0);
  1279  0010F8  0E00               	movlw	0
  1280  0010FA  0100               	movlb	0	; () banked
  1281  0010FC  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1282  0010FE  0100               	movlb	0	; () banked
  1283  001100  5166               	movf	lcd_gotoxy@addr& (0+255),w,b
  1284  001102  EC17  F009         	call	_lcd_write_byte
  1285                           
  1286                           ;lcd_driver.c: 71: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1287  001106  0EFA               	movlw	250
  1288  001108                     u1507:
  1289  001108  F000               	nop	
  1290  00110A  2EE8               	decfsz	wreg,f,c
  1291  00110C  D7FD               	goto	u1507
  1292  00110E                     l138:
  1293  00110E  0012               	return	
  1294  001110                     __end_of_lcd_gotoxy:
  1295                           	opt stack 0
  1296                           tblptru	equ	0xFF8
  1297                           tblptrh	equ	0xFF7
  1298                           tblptrl	equ	0xFF6
  1299                           tablat	equ	0xFF5
  1300                           prodh	equ	0xFF4
  1301                           prodl	equ	0xFF3
  1302                           intcon	equ	0xFF2
  1303                           postinc0	equ	0xFEE
  1304                           wreg	equ	0xFE8
  1305                           indf1	equ	0xFE7
  1306                           fsr1h	equ	0xFE2
  1307                           fsr1l	equ	0xFE1
  1308                           indf2	equ	0xFDF
  1309                           fsr2h	equ	0xFDA
  1310                           fsr2l	equ	0xFD9
  1311                           status	equ	0xFD8
  1312                           
  1313 ;; *************** function _lcd_init *****************
  1314 ;; Defined at:
  1315 ;;		line 11 in file "lcd_driver.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;		None
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;		None
  1320 ;; Return value:  Size  Location     Type
  1321 ;;		None               void
  1322 ;; Registers used:
  1323 ;;		wreg, status,2, status,0, cstack
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1329 ;;      Params:         0       0       0       0       0       0       0       0       0
  1330 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1331 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1332 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1333 ;;Total ram usage:        1 bytes
  1334 ;; Hardware stack levels used:    1
  1335 ;; Hardware stack levels required when called:    7
  1336 ;; This function calls:
  1337 ;;		_lcd_write_byte
  1338 ;;		_lcd_write_nibble
  1339 ;; This function is called by:
  1340 ;;		_main
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           	psect	text5
  1345  000BFA                     __ptext5:
  1346                           	opt stack 0
  1347  000BFA                     _lcd_init:
  1348                           	opt stack 23
  1349                           
  1350                           ;lcd_driver.c: 15: { _delay((unsigned long)((15000)*(4000000/4000000.0))); };
  1351                           
  1352                           ;incstack = 0
  1353  000BFA  0E14               	movlw	20
  1354  000BFC  0100               	movlb	0	; () banked
  1355  000BFE  6F65               	movwf	??_lcd_init& (0+255),b
  1356  000C00  0E7A               	movlw	122
  1357  000C02                     u1517:
  1358  000C02  2EE8               	decfsz	wreg,f,c
  1359  000C04  D7FE               	goto	u1517
  1360  000C06  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1361  000C08  D7FC               	goto	u1517
  1362                           
  1363                           ;lcd_driver.c: 18: lcd_write_nibble(0x3, 0);
  1364  000C0A  0E00               	movlw	0
  1365  000C0C  0100               	movlb	0	; () banked
  1366  000C0E  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1367  000C10  0E03               	movlw	3
  1368  000C12  ECE9  F006         	call	_lcd_write_nibble
  1369                           
  1370                           ;lcd_driver.c: 20: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1371  000C16  0E07               	movlw	7
  1372  000C18  0100               	movlb	0	; () banked
  1373  000C1A  6F65               	movwf	??_lcd_init& (0+255),b
  1374  000C1C  0E7D               	movlw	125
  1375  000C1E                     u1527:
  1376  000C1E  2EE8               	decfsz	wreg,f,c
  1377  000C20  D7FE               	goto	u1527
  1378  000C22  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1379  000C24  D7FC               	goto	u1527
  1380  000C26  F000               	nop	
  1381                           
  1382                           ;lcd_driver.c: 22: lcd_write_nibble(0x3, 0);
  1383  000C28  0E00               	movlw	0
  1384  000C2A  0100               	movlb	0	; () banked
  1385  000C2C  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1386  000C2E  0E03               	movlw	3
  1387  000C30  ECE9  F006         	call	_lcd_write_nibble
  1388                           
  1389                           ;lcd_driver.c: 24: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1390  000C34  0E07               	movlw	7
  1391  000C36  0100               	movlb	0	; () banked
  1392  000C38  6F65               	movwf	??_lcd_init& (0+255),b
  1393  000C3A  0E7D               	movlw	125
  1394  000C3C                     u1537:
  1395  000C3C  2EE8               	decfsz	wreg,f,c
  1396  000C3E  D7FE               	goto	u1537
  1397  000C40  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1398  000C42  D7FC               	goto	u1537
  1399  000C44  F000               	nop	
  1400                           
  1401                           ;lcd_driver.c: 26: lcd_write_nibble(0x3, 0);
  1402  000C46  0E00               	movlw	0
  1403  000C48  0100               	movlb	0	; () banked
  1404  000C4A  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1405  000C4C  0E03               	movlw	3
  1406  000C4E  ECE9  F006         	call	_lcd_write_nibble
  1407                           
  1408                           ;lcd_driver.c: 28: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1409  000C52  0E07               	movlw	7
  1410  000C54  0100               	movlb	0	; () banked
  1411  000C56  6F65               	movwf	??_lcd_init& (0+255),b
  1412  000C58  0E7D               	movlw	125
  1413  000C5A                     u1547:
  1414  000C5A  2EE8               	decfsz	wreg,f,c
  1415  000C5C  D7FE               	goto	u1547
  1416  000C5E  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1417  000C60  D7FC               	goto	u1547
  1418  000C62  F000               	nop	
  1419                           
  1420                           ;lcd_driver.c: 30: lcd_write_nibble(0x2, 0);
  1421  000C64  0E00               	movlw	0
  1422  000C66  0100               	movlb	0	; () banked
  1423  000C68  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1424  000C6A  0E02               	movlw	2
  1425  000C6C  ECE9  F006         	call	_lcd_write_nibble
  1426                           
  1427                           ;lcd_driver.c: 39: lcd_write_byte(0x28, 0);
  1428  000C70  0E00               	movlw	0
  1429  000C72  0100               	movlb	0	; () banked
  1430  000C74  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1431  000C76  0E28               	movlw	40
  1432  000C78  EC17  F009         	call	_lcd_write_byte
  1433                           
  1434                           ;lcd_driver.c: 40: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1435  000C7C  0E07               	movlw	7
  1436  000C7E  0100               	movlb	0	; () banked
  1437  000C80  6F65               	movwf	??_lcd_init& (0+255),b
  1438  000C82  0E7D               	movlw	125
  1439  000C84                     u1557:
  1440  000C84  2EE8               	decfsz	wreg,f,c
  1441  000C86  D7FE               	goto	u1557
  1442  000C88  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1443  000C8A  D7FC               	goto	u1557
  1444  000C8C  F000               	nop	
  1445                           
  1446                           ;lcd_driver.c: 42: lcd_write_byte(0x0c, 0);
  1447  000C8E  0E00               	movlw	0
  1448  000C90  0100               	movlb	0	; () banked
  1449  000C92  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1450  000C94  0E0C               	movlw	12
  1451  000C96  EC17  F009         	call	_lcd_write_byte
  1452                           
  1453                           ;lcd_driver.c: 43: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1454  000C9A  0E07               	movlw	7
  1455  000C9C  0100               	movlb	0	; () banked
  1456  000C9E  6F65               	movwf	??_lcd_init& (0+255),b
  1457  000CA0  0E7D               	movlw	125
  1458  000CA2                     u1567:
  1459  000CA2  2EE8               	decfsz	wreg,f,c
  1460  000CA4  D7FE               	goto	u1567
  1461  000CA6  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1462  000CA8  D7FC               	goto	u1567
  1463  000CAA  F000               	nop	
  1464                           
  1465                           ;lcd_driver.c: 45: lcd_write_byte(0x01, 0);
  1466  000CAC  0E00               	movlw	0
  1467  000CAE  0100               	movlb	0	; () banked
  1468  000CB0  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1469  000CB2  0E01               	movlw	1
  1470  000CB4  EC17  F009         	call	_lcd_write_byte
  1471                           
  1472                           ;lcd_driver.c: 46: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1473  000CB8  0E07               	movlw	7
  1474  000CBA  0100               	movlb	0	; () banked
  1475  000CBC  6F65               	movwf	??_lcd_init& (0+255),b
  1476  000CBE  0E7D               	movlw	125
  1477  000CC0                     u1577:
  1478  000CC0  2EE8               	decfsz	wreg,f,c
  1479  000CC2  D7FE               	goto	u1577
  1480  000CC4  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1481  000CC6  D7FC               	goto	u1577
  1482  000CC8  F000               	nop	
  1483                           
  1484                           ;lcd_driver.c: 48: lcd_write_byte(0x6, 0);
  1485  000CCA  0E00               	movlw	0
  1486  000CCC  0100               	movlb	0	; () banked
  1487  000CCE  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1488  000CD0  0E06               	movlw	6
  1489  000CD2  EC17  F009         	call	_lcd_write_byte
  1490                           
  1491                           ;lcd_driver.c: 49: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1492  000CD6  0E07               	movlw	7
  1493  000CD8  0100               	movlb	0	; () banked
  1494  000CDA  6F65               	movwf	??_lcd_init& (0+255),b
  1495  000CDC  0E7D               	movlw	125
  1496  000CDE                     u1587:
  1497  000CDE  2EE8               	decfsz	wreg,f,c
  1498  000CE0  D7FE               	goto	u1587
  1499  000CE2  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1500  000CE4  D7FC               	goto	u1587
  1501  000CE6  F000               	nop	
  1502  000CE8  0012               	return	
  1503  000CEA                     __end_of_lcd_init:
  1504                           	opt stack 0
  1505                           tblptru	equ	0xFF8
  1506                           tblptrh	equ	0xFF7
  1507                           tblptrl	equ	0xFF6
  1508                           tablat	equ	0xFF5
  1509                           prodh	equ	0xFF4
  1510                           prodl	equ	0xFF3
  1511                           intcon	equ	0xFF2
  1512                           postinc0	equ	0xFEE
  1513                           wreg	equ	0xFE8
  1514                           indf1	equ	0xFE7
  1515                           fsr1h	equ	0xFE2
  1516                           fsr1l	equ	0xFE1
  1517                           indf2	equ	0xFDF
  1518                           fsr2h	equ	0xFDA
  1519                           fsr2l	equ	0xFD9
  1520                           status	equ	0xFD8
  1521                           
  1522 ;; *************** function _lcd_write_byte *****************
  1523 ;; Defined at:
  1524 ;;		line 185 in file "lcd_driver.c"
  1525 ;; Parameters:    Size  Location     Type
  1526 ;;  byte            1    wreg     unsigned char 
  1527 ;;  is_data         1    3[BANK0 ] unsigned char 
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;  byte            1    4[BANK0 ] unsigned char 
  1530 ;; Return value:  Size  Location     Type
  1531 ;;		None               void
  1532 ;; Registers used:
  1533 ;;		wreg, status,2, status,0, cstack
  1534 ;; Tracked objects:
  1535 ;;		On entry : 0/0
  1536 ;;		On exit  : 0/0
  1537 ;;		Unchanged: 0/0
  1538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1539 ;;      Params:         0       1       0       0       0       0       0       0       0
  1540 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1541 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1542 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1543 ;;Total ram usage:        2 bytes
  1544 ;; Hardware stack levels used:    1
  1545 ;; Hardware stack levels required when called:    6
  1546 ;; This function calls:
  1547 ;;		_lcd_write_nibble
  1548 ;; This function is called by:
  1549 ;;		_main
  1550 ;;		_lcd_init
  1551 ;;		_lcd_gotoxy
  1552 ;;		_lcd_puts
  1553 ;;		_lcd_putnum
  1554 ;;		_lcd_puts_const
  1555 ;;		_lcd_set_cgram
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text6
  1560  00122E                     __ptext6:
  1561                           	opt stack 0
  1562  00122E                     _lcd_write_byte:
  1563                           	opt stack 24
  1564                           
  1565                           ;incstack = 0
  1566                           ;lcd_write_byte@byte stored from wreg
  1567  00122E  0100               	movlb	0	; () banked
  1568  001230  6F64               	movwf	lcd_write_byte@byte& (0+255),b
  1569                           
  1570                           ; BSR set to: 0
  1571                           ;lcd_driver.c: 188: lcd_write_nibble(byte >> 4, is_data);
  1572  001232  C063  F060         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
  1573  001236  0100               	movlb	0	; () banked
  1574  001238  3964               	swapf	lcd_write_byte@byte& (0+255),w,b
  1575  00123A  0B0F               	andlw	15
  1576  00123C  ECE9  F006         	call	_lcd_write_nibble
  1577                           
  1578                           ;lcd_driver.c: 189: lcd_write_nibble(byte, is_data);
  1579  001240  C063  F060         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
  1580  001244  0100               	movlb	0	; () banked
  1581  001246  5164               	movf	lcd_write_byte@byte& (0+255),w,b
  1582  001248  ECE9  F006         	call	_lcd_write_nibble
  1583  00124C  0012               	return	
  1584  00124E                     __end_of_lcd_write_byte:
  1585                           	opt stack 0
  1586                           tblptru	equ	0xFF8
  1587                           tblptrh	equ	0xFF7
  1588                           tblptrl	equ	0xFF6
  1589                           tablat	equ	0xFF5
  1590                           prodh	equ	0xFF4
  1591                           prodl	equ	0xFF3
  1592                           intcon	equ	0xFF2
  1593                           postinc0	equ	0xFEE
  1594                           wreg	equ	0xFE8
  1595                           indf1	equ	0xFE7
  1596                           fsr1h	equ	0xFE2
  1597                           fsr1l	equ	0xFE1
  1598                           indf2	equ	0xFDF
  1599                           fsr2h	equ	0xFDA
  1600                           fsr2l	equ	0xFD9
  1601                           status	equ	0xFD8
  1602                           
  1603 ;; *************** function _lcd_write_nibble *****************
  1604 ;; Defined at:
  1605 ;;		line 176 in file "lcd_driver.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;  nibble          1    wreg     unsigned char 
  1608 ;;  is_data         1    0[BANK0 ] unsigned char 
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;  nibble          1    2[BANK0 ] unsigned char 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;		None               void
  1613 ;; Registers used:
  1614 ;;		wreg, status,2, status,0, cstack
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1620 ;;      Params:         0       1       0       0       0       0       0       0       0
  1621 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1622 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1623 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1624 ;;Total ram usage:        3 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    5
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_lcd_init
  1631 ;;		_lcd_write_byte
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635                           	psect	text7
  1636  000DD2                     __ptext7:
  1637                           	opt stack 0
  1638  000DD2                     _lcd_write_nibble:
  1639                           	opt stack 24
  1640                           
  1641                           ;incstack = 0
  1642                           ;lcd_write_nibble@nibble stored from wreg
  1643  000DD2  0100               	movlb	0	; () banked
  1644  000DD4  6F62               	movwf	lcd_write_nibble@nibble& (0+255),b
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;lcd_driver.c: 179: { LATDbits.LATD2 = is_data; };
  1648  000DD6  0100               	movlb	0	; () banked
  1649  000DD8  B160               	btfsc	lcd_write_nibble@is_data& (0+255),0,b
  1650  000DDA  D002               	bra	u1095
  1651  000DDC  948C               	bcf	3980,2,c	;volatile
  1652  000DDE  D001               	bra	u1096
  1653  000DE0                     u1095:
  1654  000DE0  848C               	bsf	3980,2,c	;volatile
  1655  000DE2                     u1096:
  1656                           
  1657                           ;lcd_driver.c: 180: { _delay((unsigned long)((100)*(4000000/4000000.0))); };
  1658  000DE2  0E21               	movlw	33
  1659  000DE4                     u1597:
  1660  000DE4  2EE8               	decfsz	wreg,f,c
  1661  000DE6  D7FE               	goto	u1597
  1662  000DE8  F000               	nop	
  1663                           
  1664                           ;lcd_driver.c: 181: { LATDbits.LATD4 = nibble & 1; LATDbits.LATD5 = (nibble & 2) >> 1; L
      +                          ATDbits.LATD6 = (nibble & 4) >> 2; LATDbits.LATD7 = (nibble & 8) >> 3; };
  1665  000DEA  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1666  000DEE  0E01               	movlw	1
  1667  000DF0  0100               	movlb	0	; () banked
  1668  000DF2  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1669  000DF4  0100               	movlb	0	; () banked
  1670  000DF6  3B61               	swapf	??_lcd_write_nibble& (0+255),f,b
  1671  000DF8  508C               	movf	3980,w,c	;volatile
  1672  000DFA  0100               	movlb	0	; () banked
  1673  000DFC  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1674  000DFE  0BEF               	andlw	-17
  1675  000E00  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1676  000E02  6E8C               	movwf	3980,c	;volatile
  1677                           
  1678                           ; BSR set to: 0
  1679  000E04  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1680  000E08  0100               	movlb	0	; () banked
  1681  000E0A  90D8               	bcf	status,0,c
  1682  000E0C  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1683  000E0E  0E01               	movlw	1
  1684  000E10  0100               	movlb	0	; () banked
  1685  000E12  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1686  000E14  0100               	movlb	0	; () banked
  1687  000E16  3B61               	swapf	??_lcd_write_nibble& (0+255),f,b
  1688  000E18  4761               	rlncf	??_lcd_write_nibble& (0+255),f,b
  1689  000E1A  508C               	movf	3980,w,c	;volatile
  1690  000E1C  0100               	movlb	0	; () banked
  1691  000E1E  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1692  000E20  0BDF               	andlw	-33
  1693  000E22  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1694  000E24  6E8C               	movwf	3980,c	;volatile
  1695                           
  1696                           ; BSR set to: 0
  1697  000E26  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1698  000E2A  0100               	movlb	0	; () banked
  1699  000E2C  90D8               	bcf	status,0,c
  1700  000E2E  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1701  000E30  0100               	movlb	0	; () banked
  1702  000E32  90D8               	bcf	status,0,c
  1703  000E34  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1704  000E36  0E01               	movlw	1
  1705  000E38  0100               	movlb	0	; () banked
  1706  000E3A  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1707  000E3C  0100               	movlb	0	; () banked
  1708  000E3E  3B61               	swapf	??_lcd_write_nibble& (0+255),f,b
  1709  000E40  4761               	rlncf	??_lcd_write_nibble& (0+255),f,b
  1710  000E42  4761               	rlncf	??_lcd_write_nibble& (0+255),f,b
  1711  000E44  508C               	movf	3980,w,c	;volatile
  1712  000E46  0100               	movlb	0	; () banked
  1713  000E48  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1714  000E4A  0BBF               	andlw	-65
  1715  000E4C  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1716  000E4E  6E8C               	movwf	3980,c	;volatile
  1717                           
  1718                           ; BSR set to: 0
  1719  000E50  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1720  000E54  0100               	movlb	0	; () banked
  1721  000E56  90D8               	bcf	status,0,c
  1722  000E58  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1723  000E5A  0100               	movlb	0	; () banked
  1724  000E5C  90D8               	bcf	status,0,c
  1725  000E5E  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1726  000E60  0100               	movlb	0	; () banked
  1727  000E62  90D8               	bcf	status,0,c
  1728  000E64  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1729  000E66  0E01               	movlw	1
  1730  000E68  0100               	movlb	0	; () banked
  1731  000E6A  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1732  000E6C  0100               	movlb	0	; () banked
  1733  000E6E  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1734  000E70  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1735  000E72  508C               	movf	3980,w,c	;volatile
  1736  000E74  0100               	movlb	0	; () banked
  1737  000E76  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1738  000E78  0B7F               	andlw	-129
  1739  000E7A  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1740  000E7C  6E8C               	movwf	3980,c	;volatile
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;lcd_driver.c: 182: { LATDbits.LATD3 = 1; { _delay((unsigned long)((200)*(4000000/400000
      +                          0.0))); }; LATDbits.LATD3 = 0; { _delay((unsigned long)((500)*(4000000/4000000.0))); }; 
      +                          };
  1744  000E7E  868C               	bsf	3980,3,c	;volatile
  1745                           
  1746                           ; BSR set to: 0
  1747  000E80  0E42               	movlw	66
  1748  000E82                     u1607:
  1749  000E82  2EE8               	decfsz	wreg,f,c
  1750  000E84  D7FE               	goto	u1607
  1751  000E86  D000               	nop2		;nop
  1752  000E88  968C               	bcf	3980,3,c	;volatile
  1753  000E8A  0EA6               	movlw	166
  1754  000E8C                     u1617:
  1755  000E8C  2EE8               	decfsz	wreg,f,c
  1756  000E8E  D7FE               	goto	u1617
  1757  000E90  D000               	nop2		;nop
  1758  000E92  0012               	return	
  1759  000E94                     __end_of_lcd_write_nibble:
  1760                           	opt stack 0
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           prodh	equ	0xFF4
  1766                           prodl	equ	0xFF3
  1767                           intcon	equ	0xFF2
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           indf1	equ	0xFE7
  1771                           fsr1h	equ	0xFE2
  1772                           fsr1l	equ	0xFE1
  1773                           indf2	equ	0xFDF
  1774                           fsr2h	equ	0xFDA
  1775                           fsr2l	equ	0xFD9
  1776                           status	equ	0xFD8
  1777                           
  1778 ;; *************** function _OpenUSART *****************
  1779 ;; Defined at:
  1780 ;;		line 73 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;  config          1    wreg     unsigned char 
  1783 ;;  spbrg           2    0[BANK0 ] unsigned int 
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;  config          1    5[BANK0 ] unsigned char 
  1786 ;; Return value:  Size  Location     Type
  1787 ;;		None               void
  1788 ;; Registers used:
  1789 ;;		wreg, status,2
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1795 ;;      Params:         0       2       0       0       0       0       0       0       0
  1796 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1797 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1798 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1799 ;;Total ram usage:        6 bytes
  1800 ;; Hardware stack levels used:    1
  1801 ;; Hardware stack levels required when called:    5
  1802 ;; This function calls:
  1803 ;;		Nothing
  1804 ;; This function is called by:
  1805 ;;		_main
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text8
  1810  000F2E                     __ptext8:
  1811                           	opt stack 0
  1812  000F2E                     _OpenUSART:
  1813                           	opt stack 25
  1814                           
  1815                           ;incstack = 0
  1816                           ;OpenUSART@config stored from wreg
  1817  000F2E  0100               	movlb	0	; () banked
  1818  000F30  6F65               	movwf	OpenUSART@config& (0+255),b
  1819                           
  1820                           ; BSR set to: 0
  1821  000F32  0E00               	movlw	0
  1822  000F34  6EAC               	movwf	4012,c	;volatile
  1823  000F36  0E00               	movlw	0
  1824  000F38  6EAB               	movwf	4011,c	;volatile
  1825                           
  1826                           ; BSR set to: 0
  1827  000F3A  0100               	movlb	0	; () banked
  1828  000F3C  B165               	btfsc	OpenUSART@config& (0+255),0,b
  1829                           
  1830                           ; BSR set to: 0
  1831  000F3E  88AC               	bsf	4012,4,c	;volatile
  1832                           
  1833                           ; BSR set to: 0
  1834                           
  1835                           ; BSR set to: 0
  1836  000F40  0100               	movlb	0	; () banked
  1837  000F42  A365               	btfss	OpenUSART@config& (0+255),1,b
  1838  000F44  D002               	goto	l1789
  1839                           
  1840                           ; BSR set to: 0
  1841  000F46  8CAC               	bsf	4012,6,c	;volatile
  1842  000F48  8CAB               	bsf	4011,6,c	;volatile
  1843  000F4A                     l1789:
  1844                           
  1845                           ; BSR set to: 0
  1846  000F4A  0100               	movlb	0	; () banked
  1847  000F4C  B565               	btfsc	OpenUSART@config& (0+255),2,b
  1848                           
  1849                           ; BSR set to: 0
  1850  000F4E  8EAC               	bsf	4012,7,c	;volatile
  1851                           
  1852                           ; BSR set to: 0
  1853                           
  1854                           ; BSR set to: 0
  1855  000F50  0100               	movlb	0	; () banked
  1856  000F52  A765               	btfss	OpenUSART@config& (0+255),3,b
  1857  000F54  D002               	goto	l210
  1858                           
  1859                           ; BSR set to: 0
  1860  000F56  88AB               	bsf	4011,4,c	;volatile
  1861  000F58  D001               	goto	l1797
  1862  000F5A                     l210:
  1863                           
  1864                           ; BSR set to: 0
  1865  000F5A  8AAB               	bsf	4011,5,c	;volatile
  1866  000F5C                     l1797:
  1867                           
  1868                           ; BSR set to: 0
  1869  000F5C  0100               	movlb	0	; () banked
  1870  000F5E  B965               	btfsc	OpenUSART@config& (0+255),4,b
  1871                           
  1872                           ; BSR set to: 0
  1873  000F60  84AC               	bsf	4012,2,c	;volatile
  1874                           
  1875                           ; BSR set to: 0
  1876  000F62  989E               	bcf	3998,4,c	;volatile
  1877                           
  1878                           ; BSR set to: 0
  1879  000F64  0100               	movlb	0	; () banked
  1880  000F66  BB65               	btfsc	OpenUSART@config& (0+255),5,b
  1881                           
  1882                           ; BSR set to: 0
  1883  000F68  86AB               	bsf	4011,3,c	;volatile
  1884                           
  1885                           ; BSR set to: 0
  1886                           
  1887                           ; BSR set to: 0
  1888  000F6A  0100               	movlb	0	; () banked
  1889  000F6C  AD65               	btfss	OpenUSART@config& (0+255),6,b
  1890  000F6E  D002               	goto	l214
  1891                           
  1892                           ; BSR set to: 0
  1893  000F70  8A9D               	bsf	3997,5,c	;volatile
  1894  000F72  D001               	goto	l215
  1895  000F74                     l214:
  1896                           
  1897                           ; BSR set to: 0
  1898  000F74  9A9D               	bcf	3997,5,c	;volatile
  1899  000F76                     l215:
  1900                           
  1901                           ; BSR set to: 0
  1902  000F76  9A9E               	bcf	3998,5,c	;volatile
  1903                           
  1904                           ; BSR set to: 0
  1905  000F78  0100               	movlb	0	; () banked
  1906  000F7A  AF65               	btfss	OpenUSART@config& (0+255),7,b
  1907  000F7C  D002               	goto	l216
  1908                           
  1909                           ; BSR set to: 0
  1910  000F7E  889D               	bsf	3997,4,c	;volatile
  1911  000F80  D001               	goto	l217
  1912  000F82                     l216:
  1913                           
  1914                           ; BSR set to: 0
  1915  000F82  989D               	bcf	3997,4,c	;volatile
  1916  000F84                     l217:
  1917                           
  1918                           ; BSR set to: 0
  1919  000F84  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1920                           
  1921                           ; BSR set to: 0
  1922  000F88  0100               	movlb	0	; () banked
  1923  000F8A  C061  F062         	movff	OpenUSART@spbrg+1,??_OpenUSART
  1924  000F8E  C062  F063         	movff	??_OpenUSART,??_OpenUSART+1
  1925  000F92  0100               	movlb	0	; () banked
  1926  000F94  6B64               	clrf	(??_OpenUSART+2)& (0+255),b
  1927  000F96  0100               	movlb	0	; () banked
  1928  000F98  5163               	movf	(??_OpenUSART+1)& (0+255),w,b
  1929  000F9A  6EB0               	movwf	4016,c	;volatile
  1930                           
  1931                           ; BSR set to: 0
  1932  000F9C  8AAC               	bsf	4012,5,c	;volatile
  1933                           
  1934                           ; BSR set to: 0
  1935  000F9E  8EAB               	bsf	4011,7,c	;volatile
  1936                           
  1937                           ; BSR set to: 0
  1938  000FA0  9C94               	bcf	3988,6,c	;volatile
  1939                           
  1940                           ; BSR set to: 0
  1941  000FA2  8E94               	bsf	3988,7,c	;volatile
  1942                           
  1943                           ; BSR set to: 0
  1944  000FA4  B8AC               	btfsc	4012,4,c	;volatile
  1945                           
  1946                           ; BSR set to: 0
  1947  000FA6  BEAC               	btfsc	4012,7,c	;volatile
  1948  000FA8  D001               	goto	l219
  1949                           
  1950                           ; BSR set to: 0
  1951  000FAA  8C94               	bsf	3988,6,c	;volatile
  1952  000FAC                     l219:
  1953                           
  1954                           ; BSR set to: 0
  1955  000FAC  0012               	return	
  1956  000FAE                     __end_of_OpenUSART:
  1957                           	opt stack 0
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           tblptrl	equ	0xFF6
  1961                           tablat	equ	0xFF5
  1962                           prodh	equ	0xFF4
  1963                           prodl	equ	0xFF3
  1964                           intcon	equ	0xFF2
  1965                           postinc0	equ	0xFEE
  1966                           wreg	equ	0xFE8
  1967                           indf1	equ	0xFE7
  1968                           fsr1h	equ	0xFE2
  1969                           fsr1l	equ	0xFE1
  1970                           indf2	equ	0xFDF
  1971                           fsr2h	equ	0xFDA
  1972                           fsr2l	equ	0xFD9
  1973                           status	equ	0xFD8
  1974                           
  1975 ;; *************** function _ISR *****************
  1976 ;; Defined at:
  1977 ;;		line 93 in file "main.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;		None
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;		None
  1982 ;; Return value:  Size  Location     Type
  1983 ;;		None               void
  1984 ;; Registers used:
  1985 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1986 ;; Tracked objects:
  1987 ;;		On entry : 0/0
  1988 ;;		On exit  : 0/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1991 ;;      Params:         0       0       0       0       0       0       0       0       0
  1992 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1993 ;;      Temps:         14       0       0       0       0       0       0       0       0
  1994 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1995 ;;Total ram usage:       14 bytes
  1996 ;; Hardware stack levels used:    1
  1997 ;; Hardware stack levels required when called:    4
  1998 ;; This function calls:
  1999 ;;		_ReadUSART
  2000 ;;		_cuentaLetras
  2001 ;;		_lcd_put_blank
  2002 ;;		_putsUSART
  2003 ;;		_strcpy
  2004 ;; This function is called by:
  2005 ;;		Interrupt level 2
  2006 ;; This function uses a non-reentrant model
  2007 ;;
  2008                           
  2009                           	psect	intcode
  2010  000008                     __pintcode:
  2011                           	opt stack 0
  2012  000008                     _ISR:
  2013                           	opt stack 22
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;incstack = 0
  2017  000008  CFFA F039          	movff	pclath,??_ISR
  2018  00000C  CFFB F03A          	movff	pclatu,??_ISR+1
  2019  000010  CFE9 F03B          	movff	fsr0l,??_ISR+2
  2020  000014  ED03  F004         	call	int_func,f	;refresh shadow registers
  2021                           pclatu	equ	0xFFB
  2022                           pclath	equ	0xFFA
  2023                           tblptru	equ	0xFF8
  2024                           tblptrh	equ	0xFF7
  2025                           tblptrl	equ	0xFF6
  2026                           tablat	equ	0xFF5
  2027                           prodh	equ	0xFF4
  2028                           prodl	equ	0xFF3
  2029                           intcon	equ	0xFF2
  2030                           postinc0	equ	0xFEE
  2031                           fsr0l	equ	0xFE9
  2032                           wreg	equ	0xFE8
  2033                           indf1	equ	0xFE7
  2034                           fsr1h	equ	0xFE2
  2035                           fsr1l	equ	0xFE1
  2036                           indf2	equ	0xFDF
  2037                           fsr2h	equ	0xFDA
  2038                           fsr2l	equ	0xFD9
  2039                           status	equ	0xFD8
  2040                           
  2041                           	psect	intcode_body
  2042  000806                     __pintcode_body:
  2043                           	opt stack 22
  2044  000806                     int_func:
  2045                           	opt stack 22
  2046  000806  0006               	pop		; remove dummy address from shadow register refresh
  2047  000808  CFEA F03C          	movff	fsr0h,??_ISR+3
  2048  00080C  CFE1 F03D          	movff	fsr1l,??_ISR+4
  2049  000810  CFE2 F03E          	movff	fsr1h,??_ISR+5
  2050  000814  CFD9 F03F          	movff	fsr2l,??_ISR+6
  2051  000818  CFDA F040          	movff	fsr2h,??_ISR+7
  2052  00081C  CFF3 F041          	movff	prodl,??_ISR+8
  2053  000820  CFF4 F042          	movff	prodh,??_ISR+9
  2054  000824  CFF6 F043          	movff	tblptrl,??_ISR+10
  2055  000828  CFF7 F044          	movff	tblptrh,??_ISR+11
  2056  00082C  CFF8 F045          	movff	tblptru,??_ISR+12
  2057  000830  CFF5 F046          	movff	tablat,??_ISR+13
  2058                           
  2059                           ;main.c: 96: if(PIR1bits.RCIF == 1)
  2060  000834  AA9E               	btfss	3998,5,c	;volatile
  2061  000836  D0E7               	goto	i2l99
  2062                           
  2063                           ;main.c: 97: {
  2064                           ;main.c: 98: if(i<200)
  2065  000838  5006               	movf	_i+1,w,c
  2066  00083A  0A80               	xorlw	128
  2067  00083C  6EF3               	movwf	prodl,c
  2068  00083E  0E80               	movlw	128
  2069  000840  5CF3               	subwf	prodl,w,c
  2070  000842  0EC8               	movlw	200
  2071  000844  B4D8               	btfsc	status,2,c
  2072  000846  5C05               	subwf	_i,w,c
  2073  000848  B0D8               	btfsc	status,0,c
  2074  00084A  D0B9               	goto	i2l1671
  2075                           
  2076                           ;main.c: 99: {
  2077                           ;main.c: 101: MessageBuffer[i] = ReadUSART();
  2078  00084C  0101               	movlb	1	; () banked
  2079  00084E  0E00               	movlw	low _MessageBuffer
  2080  000850  2405               	addwf	_i,w,c
  2081  000852  6ED9               	movwf	fsr2l,c
  2082  000854  0101               	movlb	1	; () banked
  2083  000856  0E01               	movlw	high _MessageBuffer
  2084  000858  2006               	addwfc	_i+1,w,c
  2085  00085A  6EDA               	movwf	fsr2h,c
  2086  00085C  EC37  F009         	call	_ReadUSART	;wreg free
  2087  000860  6EDF               	movwf	indf2,c
  2088                           
  2089                           ;main.c: 102: if(MessageBuffer[i] == 0x0D)
  2090  000862  0101               	movlb	1	; () banked
  2091  000864  0E00               	movlw	low _MessageBuffer
  2092  000866  2405               	addwf	_i,w,c
  2093  000868  6ED9               	movwf	fsr2l,c
  2094  00086A  0101               	movlb	1	; () banked
  2095  00086C  0E01               	movlw	high _MessageBuffer
  2096  00086E  2006               	addwfc	_i+1,w,c
  2097  000870  6EDA               	movwf	fsr2h,c
  2098  000872  0E0D               	movlw	13
  2099  000874  62DF               	cpfseq	indf2,c
  2100  000876  D09F               	goto	i2l1667
  2101                           
  2102                           ; BSR set to: 1
  2103                           ;main.c: 103: {
  2104                           ;main.c: 104: lcd_put_blank(0,flag_newline, 16);
  2105  000878  C00B  F036         	movff	_flag_newline,lcd_put_blank@y
  2106  00087C  0E10               	movlw	16
  2107  00087E  6E37               	movwf	lcd_put_blank@size,c
  2108  000880  0E00               	movlw	0
  2109  000882  EC27  F009         	call	_lcd_put_blank
  2110                           
  2111                           ;main.c: 105: switch (flag_newline)
  2112  000886  D06C               	goto	i2l1649
  2113  000888                     i2l1623:
  2114                           
  2115                           ;main.c: 109: lcd_upper_row_buffer[k] = 0x00;
  2116  000888  0102               	movlb	2	; () banked
  2117  00088A  0E00               	movlw	low _lcd_upper_row_buffer
  2118  00088C  2407               	addwf	_k,w,c
  2119  00088E  6ED9               	movwf	fsr2l,c
  2120  000890  0102               	movlb	2	; () banked
  2121  000892  0E02               	movlw	high _lcd_upper_row_buffer
  2122  000894  2008               	addwfc	_k+1,w,c
  2123  000896  6EDA               	movwf	fsr2h,c
  2124  000898  0E00               	movlw	0
  2125  00089A  6EDF               	movwf	indf2,c
  2126                           
  2127                           ; BSR set to: 2
  2128  00089C  0607               	decf	_k,f,c
  2129  00089E  A0D8               	btfss	status,0,c
  2130  0008A0  0608               	decf	_k+1,f,c
  2131  0008A2                     i2l1627:
  2132  0008A2  5008               	movf	_k+1,w,c
  2133  0008A4  0A80               	xorlw	128
  2134  0008A6  6EF3               	movwf	prodl,c
  2135  0008A8  0E80               	movlw	128
  2136  0008AA  5CF3               	subwf	prodl,w,c
  2137  0008AC  0E01               	movlw	1
  2138  0008AE  B4D8               	btfsc	status,2,c
  2139  0008B0  5C07               	subwf	_k,w,c
  2140  0008B2  B0D8               	btfsc	status,0,c
  2141  0008B4  D7E9               	goto	i2l1623
  2142                           
  2143                           ;main.c: 110: k = 0;
  2144  0008B6  0E00               	movlw	0
  2145  0008B8  6E08               	movwf	_k+1,c
  2146  0008BA  0E00               	movlw	0
  2147  0008BC  6E07               	movwf	_k,c
  2148                           
  2149                           ;main.c: 111: strcpy(lcd_upper_row_buffer, MessageBuffer);
  2150  0008BE  0102               	movlb	2	; () banked
  2151  0008C0  0E02               	movlw	high _lcd_upper_row_buffer
  2152  0008C2  6E2F               	movwf	strcpy@to+1,c
  2153  0008C4  0102               	movlb	2	; () banked
  2154  0008C6  0E00               	movlw	low _lcd_upper_row_buffer
  2155  0008C8  6E2E               	movwf	strcpy@to,c
  2156  0008CA  0101               	movlb	1	; () banked
  2157  0008CC  0E01               	movlw	high _MessageBuffer
  2158  0008CE  6E31               	movwf	strcpy@from+1,c
  2159  0008D0  0101               	movlb	1	; () banked
  2160  0008D2  0E00               	movlw	low _MessageBuffer
  2161  0008D4  6E30               	movwf	strcpy@from,c
  2162  0008D6  ECD6  F008         	call	_strcpy	;wreg free
  2163                           
  2164                           ;main.c: 112: cantidadLetrasUP = cuentaLetras(MessageBuffer);
  2165  0008DA  0101               	movlb	1	; () banked
  2166  0008DC  0E01               	movlw	high _MessageBuffer
  2167  0008DE  6E2F               	movwf	cuentaLetras@str+1,c
  2168  0008E0  0101               	movlb	1	; () banked
  2169  0008E2  0E00               	movlw	low _MessageBuffer
  2170  0008E4  6E2E               	movwf	cuentaLetras@str,c
  2171  0008E6  ECED  F008         	call	_cuentaLetras	;wreg free
  2172  0008EA  C02E  F003         	movff	?_cuentaLetras,_cantidadLetrasUP
  2173  0008EE  C02F  F004         	movff	?_cuentaLetras+1,_cantidadLetrasUP+1
  2174                           
  2175                           ;main.c: 113: break;
  2176  0008F2  D03D               	goto	i2l1651
  2177  0008F4                     i2l1635:
  2178                           
  2179                           ;main.c: 117: lcd_lower_row_buffer[k] = 0x00;
  2180  0008F4  0103               	movlb	3	; () banked
  2181  0008F6  0E00               	movlw	low _lcd_lower_row_buffer
  2182  0008F8  2407               	addwf	_k,w,c
  2183  0008FA  6ED9               	movwf	fsr2l,c
  2184  0008FC  0103               	movlb	3	; () banked
  2185  0008FE  0E03               	movlw	high _lcd_lower_row_buffer
  2186  000900  2008               	addwfc	_k+1,w,c
  2187  000902  6EDA               	movwf	fsr2h,c
  2188  000904  0E00               	movlw	0
  2189  000906  6EDF               	movwf	indf2,c
  2190                           
  2191                           ; BSR set to: 3
  2192  000908  0607               	decf	_k,f,c
  2193  00090A  A0D8               	btfss	status,0,c
  2194  00090C  0608               	decf	_k+1,f,c
  2195  00090E                     i2l1639:
  2196  00090E  5008               	movf	_k+1,w,c
  2197  000910  0A80               	xorlw	128
  2198  000912  6EF3               	movwf	prodl,c
  2199  000914  0E80               	movlw	128
  2200  000916  5CF3               	subwf	prodl,w,c
  2201  000918  0E01               	movlw	1
  2202  00091A  B4D8               	btfsc	status,2,c
  2203  00091C  5C07               	subwf	_k,w,c
  2204  00091E  B0D8               	btfsc	status,0,c
  2205  000920  D7E9               	goto	i2l1635
  2206                           
  2207                           ;main.c: 118: k = 0;
  2208  000922  0E00               	movlw	0
  2209  000924  6E08               	movwf	_k+1,c
  2210  000926  0E00               	movlw	0
  2211  000928  6E07               	movwf	_k,c
  2212                           
  2213                           ;main.c: 119: strcpy(lcd_lower_row_buffer, MessageBuffer);
  2214  00092A  0103               	movlb	3	; () banked
  2215  00092C  0E03               	movlw	high _lcd_lower_row_buffer
  2216  00092E  6E2F               	movwf	strcpy@to+1,c
  2217  000930  0103               	movlb	3	; () banked
  2218  000932  0E00               	movlw	low _lcd_lower_row_buffer
  2219  000934  6E2E               	movwf	strcpy@to,c
  2220  000936  0101               	movlb	1	; () banked
  2221  000938  0E01               	movlw	high _MessageBuffer
  2222  00093A  6E31               	movwf	strcpy@from+1,c
  2223  00093C  0101               	movlb	1	; () banked
  2224  00093E  0E00               	movlw	low _MessageBuffer
  2225  000940  6E30               	movwf	strcpy@from,c
  2226  000942  ECD6  F008         	call	_strcpy	;wreg free
  2227                           
  2228                           ;main.c: 120: cantidadLetrasDOWN = cuentaLetras(MessageBuffer);
  2229  000946  0101               	movlb	1	; () banked
  2230  000948  0E01               	movlw	high _MessageBuffer
  2231  00094A  6E2F               	movwf	cuentaLetras@str+1,c
  2232  00094C  0101               	movlb	1	; () banked
  2233  00094E  0E00               	movlw	low _MessageBuffer
  2234  000950  6E2E               	movwf	cuentaLetras@str,c
  2235  000952  ECED  F008         	call	_cuentaLetras	;wreg free
  2236  000956  C02E  F001         	movff	?_cuentaLetras,_cantidadLetrasDOWN
  2237  00095A  C02F  F002         	movff	?_cuentaLetras+1,_cantidadLetrasDOWN+1
  2238                           
  2239                           ;main.c: 121: break;
  2240  00095E  D007               	goto	i2l1651
  2241  000960                     i2l1649:
  2242  000960  500B               	movf	_flag_newline,w,c
  2243                           
  2244                           ; Switch size 1, requested type "space"
  2245                           ; Number of cases is 2, Range of values is 0 to 1
  2246                           ; switch strategies available:
  2247                           ; Name         Instructions Cycles
  2248                           ; simple_byte            7     4 (average)
  2249                           ;	Chosen strategy is simple_byte
  2250  000962  0A00               	xorlw	0	; case 0
  2251  000964  B4D8               	btfsc	status,2,c
  2252  000966  D79D               	goto	i2l1627
  2253  000968  0A01               	xorlw	1	; case 1
  2254  00096A  B4D8               	btfsc	status,2,c
  2255  00096C  D7D0               	goto	i2l1639
  2256  00096E                     i2l1651:
  2257                           
  2258                           ;main.c: 123: putsUSART(MessageBuffer);
  2259  00096E  0101               	movlb	1	; () banked
  2260  000970  0E01               	movlw	high _MessageBuffer
  2261  000972  6E30               	movwf	putsUSART@data+1,c
  2262  000974  0101               	movlb	1	; () banked
  2263  000976  0E00               	movlw	low _MessageBuffer
  2264  000978  6E2F               	movwf	putsUSART@data,c
  2265  00097A  EC04  F009         	call	_putsUSART	;wreg free
  2266                           
  2267                           ;main.c: 125: LATDbits.LATD1 =~ LATDbits.LATD1;
  2268  00097E  728C               	btg	3980,1,c	;volatile
  2269                           
  2270                           ;main.c: 128: flag_newline^=1;
  2271  000980  0E01               	movlw	1
  2272  000982  1A0B               	xorwf	_flag_newline,f,c
  2273                           
  2274                           ;main.c: 129: for(;i>0;i--)
  2275  000984  D00D               	goto	i2l1661
  2276  000986                     i2l1657:
  2277                           
  2278                           ;main.c: 130: MessageBuffer[i] = 0x00;
  2279  000986  0101               	movlb	1	; () banked
  2280  000988  0E00               	movlw	low _MessageBuffer
  2281  00098A  2405               	addwf	_i,w,c
  2282  00098C  6ED9               	movwf	fsr2l,c
  2283  00098E  0101               	movlb	1	; () banked
  2284  000990  0E01               	movlw	high _MessageBuffer
  2285  000992  2006               	addwfc	_i+1,w,c
  2286  000994  6EDA               	movwf	fsr2h,c
  2287  000996  0E00               	movlw	0
  2288  000998  6EDF               	movwf	indf2,c
  2289                           
  2290                           ; BSR set to: 1
  2291  00099A  0605               	decf	_i,f,c
  2292  00099C  A0D8               	btfss	status,0,c
  2293  00099E  0606               	decf	_i+1,f,c
  2294  0009A0                     i2l1661:
  2295  0009A0  5006               	movf	_i+1,w,c
  2296  0009A2  0A80               	xorlw	128
  2297  0009A4  6EF3               	movwf	prodl,c
  2298  0009A6  0E80               	movlw	128
  2299  0009A8  5CF3               	subwf	prodl,w,c
  2300  0009AA  0E01               	movlw	1
  2301  0009AC  B4D8               	btfsc	status,2,c
  2302  0009AE  5C05               	subwf	_i,w,c
  2303  0009B0  B0D8               	btfsc	status,0,c
  2304  0009B2  D7E9               	goto	i2l1657
  2305  0009B4  D024               	goto	i2l1679
  2306  0009B6                     i2l1667:
  2307                           
  2308                           ;main.c: 133: }
  2309                           ;main.c: 134: i++;
  2310  0009B6  4A05               	infsnz	_i,f,c
  2311  0009B8  2A06               	incf	_i+1,f,c
  2312                           
  2313                           ;main.c: 135: PIR1bits.RCIF = 0;
  2314  0009BA  9A9E               	bcf	3998,5,c	;volatile
  2315                           
  2316                           ;main.c: 136: }
  2317  0009BC  D024               	goto	i2l99
  2318  0009BE                     i2l1671:
  2319                           
  2320                           ;main.c: 137: else
  2321                           ;main.c: 138: {
  2322                           ;main.c: 140: putsUSART(MessageBuffer);
  2323  0009BE  0101               	movlb	1	; () banked
  2324  0009C0  0E01               	movlw	high _MessageBuffer
  2325  0009C2  6E30               	movwf	putsUSART@data+1,c
  2326  0009C4  0101               	movlb	1	; () banked
  2327  0009C6  0E00               	movlw	low _MessageBuffer
  2328  0009C8  6E2F               	movwf	putsUSART@data,c
  2329  0009CA  EC04  F009         	call	_putsUSART	;wreg free
  2330                           
  2331                           ;main.c: 141: for(;i>0;i--)
  2332  0009CE  D00D               	goto	i2l1677
  2333  0009D0                     i2l1673:
  2334                           
  2335                           ;main.c: 142: MessageBuffer[i] = 0x00;
  2336  0009D0  0101               	movlb	1	; () banked
  2337  0009D2  0E00               	movlw	low _MessageBuffer
  2338  0009D4  2405               	addwf	_i,w,c
  2339  0009D6  6ED9               	movwf	fsr2l,c
  2340  0009D8  0101               	movlb	1	; () banked
  2341  0009DA  0E01               	movlw	high _MessageBuffer
  2342  0009DC  2006               	addwfc	_i+1,w,c
  2343  0009DE  6EDA               	movwf	fsr2h,c
  2344  0009E0  0E00               	movlw	0
  2345  0009E2  6EDF               	movwf	indf2,c
  2346                           
  2347                           ; BSR set to: 1
  2348  0009E4  0605               	decf	_i,f,c
  2349  0009E6  A0D8               	btfss	status,0,c
  2350  0009E8  0606               	decf	_i+1,f,c
  2351  0009EA                     i2l1677:
  2352  0009EA  5006               	movf	_i+1,w,c
  2353  0009EC  0A80               	xorlw	128
  2354  0009EE  6EF3               	movwf	prodl,c
  2355  0009F0  0E80               	movlw	128
  2356  0009F2  5CF3               	subwf	prodl,w,c
  2357  0009F4  0E01               	movlw	1
  2358  0009F6  B4D8               	btfsc	status,2,c
  2359  0009F8  5C05               	subwf	_i,w,c
  2360  0009FA  B0D8               	btfsc	status,0,c
  2361  0009FC  D7E9               	goto	i2l1673
  2362  0009FE                     i2l1679:
  2363                           
  2364                           ;main.c: 143: i=0;
  2365  0009FE  0E00               	movlw	0
  2366  000A00  6E06               	movwf	_i+1,c
  2367  000A02  0E00               	movlw	0
  2368  000A04  6E05               	movwf	_i,c
  2369  000A06                     i2l99:
  2370  000A06  C046  FFF5         	movff	??_ISR+13,tablat
  2371  000A0A  C045  FFF8         	movff	??_ISR+12,tblptru
  2372  000A0E  C044  FFF7         	movff	??_ISR+11,tblptrh
  2373  000A12  C043  FFF6         	movff	??_ISR+10,tblptrl
  2374  000A16  C042  FFF4         	movff	??_ISR+9,prodh
  2375  000A1A  C041  FFF3         	movff	??_ISR+8,prodl
  2376  000A1E  C040  FFDA         	movff	??_ISR+7,fsr2h
  2377  000A22  C03F  FFD9         	movff	??_ISR+6,fsr2l
  2378  000A26  C03E  FFE2         	movff	??_ISR+5,fsr1h
  2379  000A2A  C03D  FFE1         	movff	??_ISR+4,fsr1l
  2380  000A2E  C03C  FFEA         	movff	??_ISR+3,fsr0h
  2381  000A32  C03B  FFE9         	movff	??_ISR+2,fsr0l
  2382  000A36  C03A  FFFB         	movff	??_ISR+1,pclatu
  2383  000A3A  C039  FFFA         	movff	??_ISR,pclath
  2384  000A3E  0011               	retfie		f
  2385  000A40                     __end_of_ISR:
  2386                           	opt stack 0
  2387                           pclatu	equ	0xFFB
  2388                           pclath	equ	0xFFA
  2389                           tblptru	equ	0xFF8
  2390                           tblptrh	equ	0xFF7
  2391                           tblptrl	equ	0xFF6
  2392                           tablat	equ	0xFF5
  2393                           prodh	equ	0xFF4
  2394                           prodl	equ	0xFF3
  2395                           intcon	equ	0xFF2
  2396                           postinc0	equ	0xFEE
  2397                           fsr0h	equ	0xFEA
  2398                           fsr0l	equ	0xFE9
  2399                           wreg	equ	0xFE8
  2400                           indf1	equ	0xFE7
  2401                           fsr1h	equ	0xFE2
  2402                           fsr1l	equ	0xFE1
  2403                           indf2	equ	0xFDF
  2404                           fsr2h	equ	0xFDA
  2405                           fsr2l	equ	0xFD9
  2406                           status	equ	0xFD8
  2407                           
  2408 ;; *************** function _strcpy *****************
  2409 ;; Defined at:
  2410 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\strcpy.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;  to              2    0[COMRAM] PTR unsigned char 
  2413 ;;		 -> lcd_lower_row_buffer(200), lcd_upper_row_buffer(200), 
  2414 ;;  from            2    2[COMRAM] PTR const unsigned char 
  2415 ;;		 -> MessageBuffer(200), 
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;  cp              2    4[COMRAM] PTR unsigned char 
  2418 ;;		 -> lcd_lower_row_buffer(200), lcd_upper_row_buffer(200), 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  2    0[COMRAM] PTR unsigned char 
  2421 ;; Registers used:
  2422 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2428 ;;      Params:         4       0       0       0       0       0       0       0       0
  2429 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2430 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2431 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2432 ;;Total ram usage:        6 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; This function calls:
  2435 ;;		Nothing
  2436 ;; This function is called by:
  2437 ;;		_ISR
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           	psect	text10
  2442  0011AC                     __ptext10:
  2443                           	opt stack 0
  2444  0011AC                     _strcpy:
  2445                           	opt stack 25
  2446                           
  2447                           ;incstack = 0
  2448  0011AC  C02F  F033         	movff	strcpy@to+1,strcpy@cp+1
  2449  0011B0  C02E  F032         	movff	strcpy@to,strcpy@cp
  2450  0011B4  D004               	goto	i2l1535
  2451  0011B6                     i2l1533:
  2452  0011B6  4A32               	infsnz	strcpy@cp,f,c
  2453  0011B8  2A33               	incf	strcpy@cp+1,f,c
  2454  0011BA  4A30               	infsnz	strcpy@from,f,c
  2455  0011BC  2A31               	incf	strcpy@from+1,f,c
  2456  0011BE                     i2l1535:
  2457  0011BE  C030  FFD9         	movff	strcpy@from,fsr2l
  2458  0011C2  C031  FFDA         	movff	strcpy@from+1,fsr2h
  2459  0011C6  C032  FFE1         	movff	strcpy@cp,fsr1l
  2460  0011CA  C033  FFE2         	movff	strcpy@cp+1,fsr1h
  2461  0011CE  CFDF FFE7          	movff	indf2,indf1
  2462  0011D2  50E7               	movf	indf1,w,c
  2463  0011D4  B4D8               	btfsc	status,2,c
  2464                           
  2465                           ;	Return value of _strcpy is never used
  2466  0011D6  0012               	return	
  2467  0011D8  D7EE               	goto	i2l1533
  2468  0011DA                     __end_of_strcpy:
  2469                           	opt stack 0
  2470                           pclatu	equ	0xFFB
  2471                           pclath	equ	0xFFA
  2472                           tblptru	equ	0xFF8
  2473                           tblptrh	equ	0xFF7
  2474                           tblptrl	equ	0xFF6
  2475                           tablat	equ	0xFF5
  2476                           prodh	equ	0xFF4
  2477                           prodl	equ	0xFF3
  2478                           intcon	equ	0xFF2
  2479                           postinc0	equ	0xFEE
  2480                           fsr0h	equ	0xFEA
  2481                           fsr0l	equ	0xFE9
  2482                           wreg	equ	0xFE8
  2483                           indf1	equ	0xFE7
  2484                           fsr1h	equ	0xFE2
  2485                           fsr1l	equ	0xFE1
  2486                           indf2	equ	0xFDF
  2487                           fsr2h	equ	0xFDA
  2488                           fsr2l	equ	0xFD9
  2489                           status	equ	0xFD8
  2490                           
  2491 ;; *************** function _putsUSART *****************
  2492 ;; Defined at:
  2493 ;;		line 14 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uputs.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;  data            2    1[COMRAM] PTR unsigned char 
  2496 ;;		 -> MessageBuffer(200), 
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;		None
  2499 ;; Return value:  Size  Location     Type
  2500 ;;		None               void
  2501 ;; Registers used:
  2502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2503 ;; Tracked objects:
  2504 ;;		On entry : 0/0
  2505 ;;		On exit  : 0/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2508 ;;      Params:         2       0       0       0       0       0       0       0       0
  2509 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2510 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2511 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2512 ;;Total ram usage:        2 bytes
  2513 ;; Hardware stack levels used:    1
  2514 ;; Hardware stack levels required when called:    1
  2515 ;; This function calls:
  2516 ;;		_WriteUSART
  2517 ;; This function is called by:
  2518 ;;		_ISR
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           	psect	text11
  2523  001208                     __ptext11:
  2524                           	opt stack 0
  2525  001208                     _putsUSART:
  2526                           	opt stack 24
  2527  001208                     i2l227:
  2528  001208  A2AC               	btfss	4012,1,c	;volatile
  2529  00120A  D7FE               	goto	i2l227
  2530  00120C  C02F  FFD9         	movff	putsUSART@data,fsr2l
  2531  001210  C030  FFDA         	movff	putsUSART@data+1,fsr2h
  2532  001214  50DF               	movf	indf2,w,c
  2533  001216  EC53  F009         	call	_WriteUSART
  2534  00121A  C02F  FFD9         	movff	putsUSART@data,fsr2l
  2535  00121E  C030  FFDA         	movff	putsUSART@data+1,fsr2h
  2536  001222  4A2F               	infsnz	putsUSART@data,f,c
  2537  001224  2A30               	incf	putsUSART@data+1,f,c
  2538  001226  50DF               	movf	indf2,w,c
  2539  001228  B4D8               	btfsc	status,2,c
  2540  00122A  0012               	return	
  2541  00122C  D7ED               	goto	i2l227
  2542  00122E                     __end_of_putsUSART:
  2543                           	opt stack 0
  2544                           pclatu	equ	0xFFB
  2545                           pclath	equ	0xFFA
  2546                           tblptru	equ	0xFF8
  2547                           tblptrh	equ	0xFF7
  2548                           tblptrl	equ	0xFF6
  2549                           tablat	equ	0xFF5
  2550                           prodh	equ	0xFF4
  2551                           prodl	equ	0xFF3
  2552                           intcon	equ	0xFF2
  2553                           postinc0	equ	0xFEE
  2554                           fsr0h	equ	0xFEA
  2555                           fsr0l	equ	0xFE9
  2556                           wreg	equ	0xFE8
  2557                           indf1	equ	0xFE7
  2558                           fsr1h	equ	0xFE2
  2559                           fsr1l	equ	0xFE1
  2560                           indf2	equ	0xFDF
  2561                           fsr2h	equ	0xFDA
  2562                           fsr2l	equ	0xFD9
  2563                           status	equ	0xFD8
  2564                           
  2565 ;; *************** function _WriteUSART *****************
  2566 ;; Defined at:
  2567 ;;		line 13 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;  data            1    wreg     unsigned char 
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;  data            1    0[COMRAM] unsigned char 
  2572 ;; Return value:  Size  Location     Type
  2573 ;;		None               void
  2574 ;; Registers used:
  2575 ;;		wreg
  2576 ;; Tracked objects:
  2577 ;;		On entry : 0/0
  2578 ;;		On exit  : 0/0
  2579 ;;		Unchanged: 0/0
  2580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2581 ;;      Params:         0       0       0       0       0       0       0       0       0
  2582 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2583 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2584 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2585 ;;Total ram usage:        1 bytes
  2586 ;; Hardware stack levels used:    1
  2587 ;; This function calls:
  2588 ;;		Nothing
  2589 ;; This function is called by:
  2590 ;;		_putsUSART
  2591 ;; This function uses a non-reentrant model
  2592 ;;
  2593                           
  2594                           	psect	text12
  2595  0012A6                     __ptext12:
  2596                           	opt stack 0
  2597  0012A6                     _WriteUSART:
  2598                           	opt stack 24
  2599                           
  2600                           ;incstack = 0
  2601                           ;WriteUSART@data stored from wreg
  2602  0012A6  6E2E               	movwf	WriteUSART@data,c
  2603  0012A8  ACAC               	btfss	4012,6,c	;volatile
  2604  0012AA  D003               	goto	i2l1369
  2605  0012AC  90AC               	bcf	4012,0,c	;volatile
  2606  0012AE  B209               	btfsc	_USART_Status,1,c
  2607  0012B0  80AC               	bsf	4012,0,c	;volatile
  2608  0012B2                     i2l1369:
  2609  0012B2  C02E  FFAD         	movff	WriteUSART@data,4013	;volatile
  2610  0012B6  0012               	return	
  2611  0012B8                     __end_of_WriteUSART:
  2612                           	opt stack 0
  2613                           pclatu	equ	0xFFB
  2614                           pclath	equ	0xFFA
  2615                           tblptru	equ	0xFF8
  2616                           tblptrh	equ	0xFF7
  2617                           tblptrl	equ	0xFF6
  2618                           tablat	equ	0xFF5
  2619                           prodh	equ	0xFF4
  2620                           prodl	equ	0xFF3
  2621                           intcon	equ	0xFF2
  2622                           postinc0	equ	0xFEE
  2623                           fsr0h	equ	0xFEA
  2624                           fsr0l	equ	0xFE9
  2625                           wreg	equ	0xFE8
  2626                           indf1	equ	0xFE7
  2627                           fsr1h	equ	0xFE2
  2628                           fsr1l	equ	0xFE1
  2629                           indf2	equ	0xFDF
  2630                           fsr2h	equ	0xFDA
  2631                           fsr2l	equ	0xFD9
  2632                           status	equ	0xFD8
  2633                           
  2634 ;; *************** function _lcd_put_blank *****************
  2635 ;; Defined at:
  2636 ;;		line 74 in file "lcd_driver.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  x               1    wreg     unsigned char 
  2639 ;;  y               1    8[COMRAM] unsigned char 
  2640 ;;  size            1    9[COMRAM] unsigned char 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;  x               1   10[COMRAM] unsigned char 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;		None               void
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2652 ;;      Params:         2       0       0       0       0       0       0       0       0
  2653 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2654 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2655 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2656 ;;Total ram usage:        3 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    3
  2659 ;; This function calls:
  2660 ;;		i2_lcd_gotoxy
  2661 ;;		i2_lcd_write_byte
  2662 ;; This function is called by:
  2663 ;;		_ISR
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           	psect	text13
  2668  00124E                     __ptext13:
  2669                           	opt stack 0
  2670  00124E                     _lcd_put_blank:
  2671                           	opt stack 22
  2672                           
  2673                           ;incstack = 0
  2674                           ;lcd_put_blank@x stored from wreg
  2675  00124E  6E38               	movwf	lcd_put_blank@x,c
  2676                           
  2677                           ;lcd_driver.c: 78: lcd_gotoxy(x,y);
  2678  001250  C036  F033         	movff	lcd_put_blank@y,i2lcd_gotoxy@y
  2679  001254  5038               	movf	lcd_put_blank@x,w,c
  2680  001256  EC88  F008         	call	i2_lcd_gotoxy
  2681                           
  2682                           ;lcd_driver.c: 80: while (size)
  2683  00125A  D006               	goto	i2l1529
  2684  00125C                     i2l1525:
  2685                           
  2686                           ;lcd_driver.c: 81: {
  2687                           ;lcd_driver.c: 82: {lcd_write_byte(' ', 1);};
  2688  00125C  0E01               	movlw	1
  2689  00125E  6E31               	movwf	i2lcd_write_byte@is_data,c
  2690  001260  0E20               	movlw	32
  2691  001262  EC46  F009         	call	i2_lcd_write_byte
  2692                           
  2693                           ;lcd_driver.c: 83: size--;
  2694  001266  0637               	decf	lcd_put_blank@size,f,c
  2695  001268                     i2l1529:
  2696  001268  6637               	tstfsz	lcd_put_blank@size,c
  2697  00126A  D7F8               	goto	i2l1525
  2698  00126C  0012               	return	
  2699  00126E                     __end_of_lcd_put_blank:
  2700                           	opt stack 0
  2701                           pclatu	equ	0xFFB
  2702                           pclath	equ	0xFFA
  2703                           tblptru	equ	0xFF8
  2704                           tblptrh	equ	0xFF7
  2705                           tblptrl	equ	0xFF6
  2706                           tablat	equ	0xFF5
  2707                           prodh	equ	0xFF4
  2708                           prodl	equ	0xFF3
  2709                           intcon	equ	0xFF2
  2710                           postinc0	equ	0xFEE
  2711                           fsr0h	equ	0xFEA
  2712                           fsr0l	equ	0xFE9
  2713                           wreg	equ	0xFE8
  2714                           indf1	equ	0xFE7
  2715                           fsr1h	equ	0xFE2
  2716                           fsr1l	equ	0xFE1
  2717                           indf2	equ	0xFDF
  2718                           fsr2h	equ	0xFDA
  2719                           fsr2l	equ	0xFD9
  2720                           status	equ	0xFD8
  2721                           
  2722 ;; *************** function i2_lcd_gotoxy *****************
  2723 ;; Defined at:
  2724 ;;		line 54 in file "lcd_driver.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;  x               1    wreg     unsigned char 
  2727 ;;  y               1    5[COMRAM] unsigned char 
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;  x               1    7[COMRAM] unsigned char 
  2730 ;;  lcd_gotoxy      1    6[COMRAM] unsigned char 
  2731 ;; Return value:  Size  Location     Type
  2732 ;;		None               void
  2733 ;; Registers used:
  2734 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2740 ;;      Params:         1       0       0       0       0       0       0       0       0
  2741 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2742 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2743 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2744 ;;Total ram usage:        3 bytes
  2745 ;; Hardware stack levels used:    1
  2746 ;; Hardware stack levels required when called:    2
  2747 ;; This function calls:
  2748 ;;		i2_lcd_write_byte
  2749 ;; This function is called by:
  2750 ;;		_lcd_put_blank
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text14
  2755  001110                     __ptext14:
  2756                           	opt stack 0
  2757  001110                     i2_lcd_gotoxy:
  2758                           	opt stack 22
  2759                           
  2760                           ;incstack = 0
  2761                           ;i2lcd_gotoxy@x stored from wreg
  2762  001110  6E35               	movwf	i2lcd_gotoxy@x,c
  2763                           
  2764                           ;lcd_driver.c: 57: uint8_t addr;
  2765                           ;lcd_driver.c: 59: if ((y > 3) || (x > 19))
  2766  001112  0E04               	movlw	4
  2767  001114  5C33               	subwf	i2lcd_gotoxy@y,w,c
  2768  001116  B0D8               	btfsc	status,0,c
  2769  001118  D02B               	goto	i2l138
  2770  00111A  0E13               	movlw	19
  2771  00111C  6435               	cpfsgt	i2lcd_gotoxy@x,c
  2772  00111E  D001               	goto	i2l135
  2773  001120  D027               	goto	i2l138
  2774  001122                     i2l135:
  2775                           
  2776                           ;lcd_driver.c: 62: }
  2777                           ;lcd_driver.c: 63: lcd_x = x;
  2778  001122  C035  F00C         	movff	i2lcd_gotoxy@x,_lcd_x
  2779                           
  2780                           ;lcd_driver.c: 64: lcd_y = y;
  2781  001126  C033  F00D         	movff	i2lcd_gotoxy@y,_lcd_y
  2782                           
  2783                           ;lcd_driver.c: 65: addr = x;
  2784  00112A  C035  F034         	movff	i2lcd_gotoxy@x,i2lcd_gotoxy@addr
  2785                           
  2786                           ;lcd_driver.c: 66: addr += LCD_ROW_ADDRESS[y];
  2787  00112E  5033               	movf	i2lcd_gotoxy@y,w,c
  2788  001130  0D01               	mullw	1
  2789  001132  0E01               	movlw	low _LCD_ROW_ADDRESS
  2790  001134  24F3               	addwf	prodl,w,c
  2791  001136  6EF6               	movwf	tblptrl,c
  2792  001138  0E08               	movlw	high _LCD_ROW_ADDRESS
  2793  00113A  20F4               	addwfc	prodh,w,c
  2794  00113C  6EF7               	movwf	tblptrh,c
  2795  00113E                     	if	0	;There are less than 3 active tblptr bytes
  2796  00113E                     	endif
  2797  00113E  0008               	tblrd		*
  2798  001140  50F5               	movf	tablat,w,c
  2799  001142  2634               	addwf	i2lcd_gotoxy@addr,f,c
  2800                           
  2801                           ;lcd_driver.c: 67: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  2802  001144  0EFA               	movlw	250
  2803  001146                     i2u162_47:
  2804  001146  F000               	nop	
  2805  001148  2EE8               	decfsz	wreg,f,c
  2806  00114A  D7FD               	goto	i2u162_47
  2807                           
  2808                           ;lcd_driver.c: 68: lcd_write_byte(addr, 0);
  2809  00114C  0E00               	movlw	0
  2810  00114E  6E31               	movwf	i2lcd_write_byte@is_data,c
  2811  001150  5034               	movf	i2lcd_gotoxy@addr,w,c
  2812  001152  EC46  F009         	call	i2_lcd_write_byte
  2813                           
  2814                           ;lcd_driver.c: 69: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  2815  001156  0EFA               	movlw	250
  2816  001158                     i2u163_47:
  2817  001158  F000               	nop	
  2818  00115A  2EE8               	decfsz	wreg,f,c
  2819  00115C  D7FD               	goto	i2u163_47
  2820                           
  2821                           ;lcd_driver.c: 70: lcd_write_byte(addr, 0);
  2822  00115E  0E00               	movlw	0
  2823  001160  6E31               	movwf	i2lcd_write_byte@is_data,c
  2824  001162  5034               	movf	i2lcd_gotoxy@addr,w,c
  2825  001164  EC46  F009         	call	i2_lcd_write_byte
  2826                           
  2827                           ;lcd_driver.c: 71: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  2828  001168  0EFA               	movlw	250
  2829  00116A                     i2u164_47:
  2830  00116A  F000               	nop	
  2831  00116C  2EE8               	decfsz	wreg,f,c
  2832  00116E  D7FD               	goto	i2u164_47
  2833  001170                     i2l138:
  2834  001170  0012               	return	
  2835  001172                     __end_ofi2_lcd_gotoxy:
  2836                           	opt stack 0
  2837                           pclatu	equ	0xFFB
  2838                           pclath	equ	0xFFA
  2839                           tblptru	equ	0xFF8
  2840                           tblptrh	equ	0xFF7
  2841                           tblptrl	equ	0xFF6
  2842                           tablat	equ	0xFF5
  2843                           prodh	equ	0xFF4
  2844                           prodl	equ	0xFF3
  2845                           intcon	equ	0xFF2
  2846                           postinc0	equ	0xFEE
  2847                           fsr0h	equ	0xFEA
  2848                           fsr0l	equ	0xFE9
  2849                           wreg	equ	0xFE8
  2850                           indf1	equ	0xFE7
  2851                           fsr1h	equ	0xFE2
  2852                           fsr1l	equ	0xFE1
  2853                           indf2	equ	0xFDF
  2854                           fsr2h	equ	0xFDA
  2855                           fsr2l	equ	0xFD9
  2856                           status	equ	0xFD8
  2857                           
  2858 ;; *************** function i2_lcd_write_byte *****************
  2859 ;; Defined at:
  2860 ;;		line 185 in file "lcd_driver.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;  byte            1    wreg     unsigned char 
  2863 ;;  is_data         1    3[COMRAM] unsigned char 
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;  byte            1    4[COMRAM] unsigned char 
  2866 ;; Return value:  Size  Location     Type
  2867 ;;		None               void
  2868 ;; Registers used:
  2869 ;;		wreg, status,2, status,0, cstack
  2870 ;; Tracked objects:
  2871 ;;		On entry : 0/0
  2872 ;;		On exit  : 0/0
  2873 ;;		Unchanged: 0/0
  2874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2875 ;;      Params:         1       0       0       0       0       0       0       0       0
  2876 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2877 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2878 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2879 ;;Total ram usage:        2 bytes
  2880 ;; Hardware stack levels used:    1
  2881 ;; Hardware stack levels required when called:    1
  2882 ;; This function calls:
  2883 ;;		i2_lcd_write_nibble
  2884 ;; This function is called by:
  2885 ;;		_lcd_put_blank
  2886 ;;		i2_lcd_gotoxy
  2887 ;; This function uses a non-reentrant model
  2888 ;;
  2889                           
  2890                           	psect	text15
  2891  00128C                     __ptext15:
  2892                           	opt stack 0
  2893  00128C                     i2_lcd_write_byte:
  2894                           	opt stack 23
  2895                           
  2896                           ;incstack = 0
  2897                           ;i2lcd_write_byte@byte stored from wreg
  2898  00128C  6E32               	movwf	i2lcd_write_byte@byte,c
  2899                           
  2900                           ;lcd_driver.c: 188: lcd_write_nibble(byte >> 4, is_data);
  2901  00128E  C031  F02E         	movff	i2lcd_write_byte@is_data,i2lcd_write_nibble@is_data
  2902  001292  3832               	swapf	i2lcd_write_byte@byte,w,c
  2903  001294  0B0F               	andlw	15
  2904  001296  EC4A  F007         	call	i2_lcd_write_nibble
  2905                           
  2906                           ;lcd_driver.c: 189: lcd_write_nibble(byte, is_data);
  2907  00129A  C031  F02E         	movff	i2lcd_write_byte@is_data,i2lcd_write_nibble@is_data
  2908  00129E  5032               	movf	i2lcd_write_byte@byte,w,c
  2909  0012A0  EC4A  F007         	call	i2_lcd_write_nibble
  2910  0012A4  0012               	return	
  2911  0012A6                     __end_ofi2_lcd_write_byte:
  2912                           	opt stack 0
  2913                           pclatu	equ	0xFFB
  2914                           pclath	equ	0xFFA
  2915                           tblptru	equ	0xFF8
  2916                           tblptrh	equ	0xFF7
  2917                           tblptrl	equ	0xFF6
  2918                           tablat	equ	0xFF5
  2919                           prodh	equ	0xFF4
  2920                           prodl	equ	0xFF3
  2921                           intcon	equ	0xFF2
  2922                           postinc0	equ	0xFEE
  2923                           fsr0h	equ	0xFEA
  2924                           fsr0l	equ	0xFE9
  2925                           wreg	equ	0xFE8
  2926                           indf1	equ	0xFE7
  2927                           fsr1h	equ	0xFE2
  2928                           fsr1l	equ	0xFE1
  2929                           indf2	equ	0xFDF
  2930                           fsr2h	equ	0xFDA
  2931                           fsr2l	equ	0xFD9
  2932                           status	equ	0xFD8
  2933                           
  2934 ;; *************** function i2_lcd_write_nibble *****************
  2935 ;; Defined at:
  2936 ;;		line 176 in file "lcd_driver.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;  nibble          1    wreg     unsigned char 
  2939 ;;  is_data         1    0[COMRAM] unsigned char 
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;  nibble          1    2[COMRAM] unsigned char 
  2942 ;; Return value:  Size  Location     Type
  2943 ;;		None               void
  2944 ;; Registers used:
  2945 ;;		wreg, status,2, status,0, cstack
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2951 ;;      Params:         1       0       0       0       0       0       0       0       0
  2952 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2953 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2954 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2955 ;;Total ram usage:        3 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		i2_lcd_write_byte
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text16
  2965  000E94                     __ptext16:
  2966                           	opt stack 0
  2967  000E94                     i2_lcd_write_nibble:
  2968                           	opt stack 23
  2969                           
  2970                           ;incstack = 0
  2971                           ;i2lcd_write_nibble@nibble stored from wreg
  2972  000E94  6E30               	movwf	i2lcd_write_nibble@nibble,c
  2973                           
  2974                           ;lcd_driver.c: 179: { LATDbits.LATD2 = is_data; };
  2975  000E96  B02E               	btfsc	i2lcd_write_nibble@is_data,0,c
  2976  000E98  D002               	bra	i2u56_45
  2977  000E9A  948C               	bcf	3980,2,c	;volatile
  2978  000E9C  D001               	bra	i2u56_46
  2979  000E9E                     i2u56_45:
  2980  000E9E  848C               	bsf	3980,2,c	;volatile
  2981  000EA0                     i2u56_46:
  2982                           
  2983                           ;lcd_driver.c: 180: { _delay((unsigned long)((100)*(4000000/4000000.0))); };
  2984  000EA0  0E21               	movlw	33
  2985  000EA2                     i2u165_47:
  2986  000EA2  2EE8               	decfsz	wreg,f,c
  2987  000EA4  D7FE               	goto	i2u165_47
  2988  000EA6  F000               	nop	
  2989                           
  2990                           ;lcd_driver.c: 181: { LATDbits.LATD4 = nibble & 1; LATDbits.LATD5 = (nibble & 2) >> 1; L
      +                          ATDbits.LATD6 = (nibble & 4) >> 2; LATDbits.LATD7 = (nibble & 8) >> 3; };
  2991  000EA8  C030  F02F         	movff	i2lcd_write_nibble@nibble,??i2_lcd_write_nibble
  2992  000EAC  0E01               	movlw	1
  2993  000EAE  162F               	andwf	??i2_lcd_write_nibble,f,c
  2994  000EB0  3A2F               	swapf	??i2_lcd_write_nibble,f,c
  2995  000EB2  508C               	movf	3980,w,c	;volatile
  2996  000EB4  182F               	xorwf	??i2_lcd_write_nibble,w,c
  2997  000EB6  0BEF               	andlw	-17
  2998  000EB8  182F               	xorwf	??i2_lcd_write_nibble,w,c
  2999  000EBA  6E8C               	movwf	3980,c	;volatile
  3000  000EBC  C030  F02F         	movff	i2lcd_write_nibble@nibble,??i2_lcd_write_nibble
  3001  000EC0  90D8               	bcf	status,0,c
  3002  000EC2  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3003  000EC4  0E01               	movlw	1
  3004  000EC6  162F               	andwf	??i2_lcd_write_nibble,f,c
  3005  000EC8  3A2F               	swapf	??i2_lcd_write_nibble,f,c
  3006  000ECA  462F               	rlncf	??i2_lcd_write_nibble,f,c
  3007  000ECC  508C               	movf	3980,w,c	;volatile
  3008  000ECE  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3009  000ED0  0BDF               	andlw	-33
  3010  000ED2  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3011  000ED4  6E8C               	movwf	3980,c	;volatile
  3012  000ED6  C030  F02F         	movff	i2lcd_write_nibble@nibble,??i2_lcd_write_nibble
  3013  000EDA  90D8               	bcf	status,0,c
  3014  000EDC  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3015  000EDE  90D8               	bcf	status,0,c
  3016  000EE0  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3017  000EE2  0E01               	movlw	1
  3018  000EE4  162F               	andwf	??i2_lcd_write_nibble,f,c
  3019  000EE6  3A2F               	swapf	??i2_lcd_write_nibble,f,c
  3020  000EE8  462F               	rlncf	??i2_lcd_write_nibble,f,c
  3021  000EEA  462F               	rlncf	??i2_lcd_write_nibble,f,c
  3022  000EEC  508C               	movf	3980,w,c	;volatile
  3023  000EEE  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3024  000EF0  0BBF               	andlw	-65
  3025  000EF2  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3026  000EF4  6E8C               	movwf	3980,c	;volatile
  3027  000EF6  C030  F02F         	movff	i2lcd_write_nibble@nibble,??i2_lcd_write_nibble
  3028  000EFA  90D8               	bcf	status,0,c
  3029  000EFC  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3030  000EFE  90D8               	bcf	status,0,c
  3031  000F00  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3032  000F02  90D8               	bcf	status,0,c
  3033  000F04  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3034  000F06  0E01               	movlw	1
  3035  000F08  162F               	andwf	??i2_lcd_write_nibble,f,c
  3036  000F0A  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3037  000F0C  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3038  000F0E  508C               	movf	3980,w,c	;volatile
  3039  000F10  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3040  000F12  0B7F               	andlw	-129
  3041  000F14  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3042  000F16  6E8C               	movwf	3980,c	;volatile
  3043                           
  3044                           ;lcd_driver.c: 182: { LATDbits.LATD3 = 1; { _delay((unsigned long)((200)*(4000000/400000
      +                          0.0))); }; LATDbits.LATD3 = 0; { _delay((unsigned long)((500)*(4000000/4000000.0))); }; 
      +                          };
  3045  000F18  868C               	bsf	3980,3,c	;volatile
  3046  000F1A  0E42               	movlw	66
  3047  000F1C                     i2u166_47:
  3048  000F1C  2EE8               	decfsz	wreg,f,c
  3049  000F1E  D7FE               	goto	i2u166_47
  3050  000F20  D000               	nop2		;nop
  3051  000F22  968C               	bcf	3980,3,c	;volatile
  3052  000F24  0EA6               	movlw	166
  3053  000F26                     i2u167_47:
  3054  000F26  2EE8               	decfsz	wreg,f,c
  3055  000F28  D7FE               	goto	i2u167_47
  3056  000F2A  D000               	nop2		;nop
  3057  000F2C  0012               	return	
  3058  000F2E                     __end_ofi2_lcd_write_nibble:
  3059                           	opt stack 0
  3060                           pclatu	equ	0xFFB
  3061                           pclath	equ	0xFFA
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           intcon	equ	0xFF2
  3069                           postinc0	equ	0xFEE
  3070                           fsr0h	equ	0xFEA
  3071                           fsr0l	equ	0xFE9
  3072                           wreg	equ	0xFE8
  3073                           indf1	equ	0xFE7
  3074                           fsr1h	equ	0xFE2
  3075                           fsr1l	equ	0xFE1
  3076                           indf2	equ	0xFDF
  3077                           fsr2h	equ	0xFDA
  3078                           fsr2l	equ	0xFD9
  3079                           status	equ	0xFD8
  3080                           
  3081 ;; *************** function _cuentaLetras *****************
  3082 ;; Defined at:
  3083 ;;		line 150 in file "main.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;  str             2    0[COMRAM] PTR unsigned char 
  3086 ;;		 -> MessageBuffer(200), 
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;  j               2    2[COMRAM] int 
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  2    0[COMRAM] int 
  3091 ;; Registers used:
  3092 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3098 ;;      Params:         2       0       0       0       0       0       0       0       0
  3099 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3100 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3101 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3102 ;;Total ram usage:        4 bytes
  3103 ;; Hardware stack levels used:    1
  3104 ;; This function calls:
  3105 ;;		Nothing
  3106 ;; This function is called by:
  3107 ;;		_ISR
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           	psect	text17
  3112  0011DA                     __ptext17:
  3113                           	opt stack 0
  3114  0011DA                     _cuentaLetras:
  3115                           	opt stack 25
  3116                           
  3117                           ;main.c: 152: int j=0;
  3118                           
  3119                           ;incstack = 0
  3120  0011DA  0E00               	movlw	0
  3121  0011DC  6E31               	movwf	cuentaLetras@j+1,c
  3122  0011DE  0E00               	movlw	0
  3123  0011E0  6E30               	movwf	cuentaLetras@j,c
  3124                           
  3125                           ;main.c: 153: while(str[j]!= 0x0D)
  3126  0011E2  D002               	goto	i2l1541
  3127  0011E4                     i2l1539:
  3128                           
  3129                           ;main.c: 154: {
  3130                           ;main.c: 155: j++;
  3131  0011E4  4A30               	infsnz	cuentaLetras@j,f,c
  3132  0011E6  2A31               	incf	cuentaLetras@j+1,f,c
  3133  0011E8                     i2l1541:
  3134  0011E8  5030               	movf	cuentaLetras@j,w,c
  3135  0011EA  242E               	addwf	cuentaLetras@str,w,c
  3136  0011EC  6ED9               	movwf	fsr2l,c
  3137  0011EE  5031               	movf	cuentaLetras@j+1,w,c
  3138  0011F0  202F               	addwfc	cuentaLetras@str+1,w,c
  3139  0011F2  6EDA               	movwf	fsr2h,c
  3140  0011F4  0E0D               	movlw	13
  3141  0011F6  62DF               	cpfseq	indf2,c
  3142  0011F8  D7F5               	goto	i2l1539
  3143                           
  3144                           ;main.c: 156: }
  3145                           ;main.c: 157: return j+1;
  3146  0011FA  0E01               	movlw	1
  3147  0011FC  2430               	addwf	cuentaLetras@j,w,c
  3148  0011FE  6E2E               	movwf	?_cuentaLetras,c
  3149  001200  0E00               	movlw	0
  3150  001202  2031               	addwfc	cuentaLetras@j+1,w,c
  3151  001204  6E2F               	movwf	?_cuentaLetras+1,c
  3152  001206  0012               	return	
  3153  001208                     __end_of_cuentaLetras:
  3154                           	opt stack 0
  3155                           pclatu	equ	0xFFB
  3156                           pclath	equ	0xFFA
  3157                           tblptru	equ	0xFF8
  3158                           tblptrh	equ	0xFF7
  3159                           tblptrl	equ	0xFF6
  3160                           tablat	equ	0xFF5
  3161                           prodh	equ	0xFF4
  3162                           prodl	equ	0xFF3
  3163                           intcon	equ	0xFF2
  3164                           postinc0	equ	0xFEE
  3165                           fsr0h	equ	0xFEA
  3166                           fsr0l	equ	0xFE9
  3167                           wreg	equ	0xFE8
  3168                           indf1	equ	0xFE7
  3169                           fsr1h	equ	0xFE2
  3170                           fsr1l	equ	0xFE1
  3171                           indf2	equ	0xFDF
  3172                           fsr2h	equ	0xFDA
  3173                           fsr2l	equ	0xFD9
  3174                           status	equ	0xFD8
  3175                           
  3176 ;; *************** function _ReadUSART *****************
  3177 ;; Defined at:
  3178 ;;		line 15 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
  3179 ;; Parameters:    Size  Location     Type
  3180 ;;		None
  3181 ;; Auto vars:     Size  Location     Type
  3182 ;;  data            1    0[COMRAM] unsigned char 
  3183 ;; Return value:  Size  Location     Type
  3184 ;;                  1    wreg      unsigned char 
  3185 ;; Registers used:
  3186 ;;		wreg, status,2, status,0
  3187 ;; Tracked objects:
  3188 ;;		On entry : 0/0
  3189 ;;		On exit  : 0/0
  3190 ;;		Unchanged: 0/0
  3191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3192 ;;      Params:         0       0       0       0       0       0       0       0       0
  3193 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3194 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3195 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3196 ;;Total ram usage:        1 bytes
  3197 ;; Hardware stack levels used:    1
  3198 ;; This function calls:
  3199 ;;		Nothing
  3200 ;; This function is called by:
  3201 ;;		_ISR
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           	psect	text18
  3206  00126E                     __ptext18:
  3207                           	opt stack 0
  3208  00126E                     _ReadUSART:
  3209                           	opt stack 25
  3210                           
  3211                           ;incstack = 0
  3212  00126E  0EF2               	movlw	242
  3213  001270  1609               	andwf	_USART_Status,f,c
  3214  001272  ACAB               	btfss	4011,6,c	;volatile
  3215  001274  D003               	goto	i2l240
  3216  001276  9009               	bcf	_USART_Status,0,c
  3217  001278  B0AB               	btfsc	4011,0,c	;volatile
  3218  00127A  8009               	bsf	_USART_Status,0,c
  3219  00127C                     i2l240:
  3220  00127C  B4AB               	btfsc	4011,2,c	;volatile
  3221  00127E  8409               	bsf	_USART_Status,2,c
  3222  001280  B2AB               	btfsc	4011,1,c	;volatile
  3223  001282  8609               	bsf	_USART_Status,3,c
  3224  001284  CFAE F02E          	movff	4014,ReadUSART@data	;volatile
  3225  001288  502E               	movf	ReadUSART@data,w,c
  3226  00128A  0012               	return	
  3227  00128C                     __end_of_ReadUSART:
  3228                           	opt stack 0
  3229                           pclatu	equ	0xFFB
  3230                           pclath	equ	0xFFA
  3231                           tblptru	equ	0xFF8
  3232                           tblptrh	equ	0xFF7
  3233                           tblptrl	equ	0xFF6
  3234                           tablat	equ	0xFF5
  3235                           prodh	equ	0xFF4
  3236                           prodl	equ	0xFF3
  3237                           intcon	equ	0xFF2
  3238                           postinc0	equ	0xFEE
  3239                           fsr0h	equ	0xFEA
  3240                           fsr0l	equ	0xFE9
  3241                           wreg	equ	0xFE8
  3242                           indf1	equ	0xFE7
  3243                           fsr1h	equ	0xFE2
  3244                           fsr1l	equ	0xFE1
  3245                           indf2	equ	0xFDF
  3246                           fsr2h	equ	0xFDA
  3247                           fsr2l	equ	0xFD9
  3248                           status	equ	0xFD8
  3249                           pclatu	equ	0xFFB
  3250                           pclath	equ	0xFFA
  3251                           tblptru	equ	0xFF8
  3252                           tblptrh	equ	0xFF7
  3253                           tblptrl	equ	0xFF6
  3254                           tablat	equ	0xFF5
  3255                           prodh	equ	0xFF4
  3256                           prodl	equ	0xFF3
  3257                           intcon	equ	0xFF2
  3258                           postinc0	equ	0xFEE
  3259                           fsr0h	equ	0xFEA
  3260                           fsr0l	equ	0xFE9
  3261                           wreg	equ	0xFE8
  3262                           indf1	equ	0xFE7
  3263                           fsr1h	equ	0xFE2
  3264                           fsr1l	equ	0xFE1
  3265                           indf2	equ	0xFDF
  3266                           fsr2h	equ	0xFDA
  3267                           fsr2l	equ	0xFD9
  3268                           status	equ	0xFD8
  3269                           
  3270                           	psect	rparam
  3271  0000                     pclatu	equ	0xFFB
  3272                           pclath	equ	0xFFA
  3273                           tblptru	equ	0xFF8
  3274                           tblptrh	equ	0xFF7
  3275                           tblptrl	equ	0xFF6
  3276                           tablat	equ	0xFF5
  3277                           prodh	equ	0xFF4
  3278                           prodl	equ	0xFF3
  3279                           intcon	equ	0xFF2
  3280                           postinc0	equ	0xFEE
  3281                           fsr0h	equ	0xFEA
  3282                           fsr0l	equ	0xFE9
  3283                           wreg	equ	0xFE8
  3284                           indf1	equ	0xFE7
  3285                           fsr1h	equ	0xFE2
  3286                           fsr1l	equ	0xFE1
  3287                           indf2	equ	0xFDF
  3288                           fsr2h	equ	0xFDA
  3289                           fsr2l	equ	0xFD9
  3290                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        0
    BSS         645
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     25      70
    BANK0           160     15      15
    BANK1           256      0     200
    BANK2           256      0     200
    BANK3           256      0     200
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strncpy@from	PTR const unsigned char  size(2) Largest target is 200
		 -> lcd_lower_row_buffer(BANK3[200]), lcd_upper_row_buffer(BANK2[200]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 16
		 -> lcd_lower_display_buffer(COMRAM[16]), lcd_upper_display_buffer(COMRAM[16]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 16
		 -> lcd_lower_display_buffer(COMRAM[16]), lcd_upper_display_buffer(COMRAM[16]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 200
		 -> MessageBuffer(BANK1[200]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 200
		 -> lcd_lower_row_buffer(BANK3[200]), lcd_upper_row_buffer(BANK2[200]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 200
		 -> lcd_lower_row_buffer(BANK3[200]), lcd_upper_row_buffer(BANK2[200]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 200
		 -> MessageBuffer(BANK1[200]), 

    lcd_puts@str	PTR unsigned char  size(2) Largest target is 16
		 -> lcd_lower_display_buffer(COMRAM[16]), lcd_upper_display_buffer(COMRAM[16]), 

    rotarString@str	PTR unsigned char  size(2) Largest target is 200
		 -> lcd_lower_row_buffer(BANK3[200]), lcd_upper_row_buffer(BANK2[200]), 

    cuentaLetras@str	PTR unsigned char  size(2) Largest target is 200
		 -> MessageBuffer(BANK1[200]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 200
		 -> lcd_lower_row_buffer(BANK3[200]), lcd_upper_row_buffer(BANK2[200]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 16
		 -> lcd_lower_display_buffer(COMRAM[16]), lcd_upper_display_buffer(COMRAM[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_lcd_put_blank
    _putsUSART->_WriteUSART
    _lcd_put_blank->i2_lcd_gotoxy
    i2_lcd_gotoxy->i2_lcd_write_byte
    i2_lcd_write_byte->i2_lcd_write_nibble

Critical Paths under _main in BANK0

    _main->_rotarString
    _lcd_puts->_lcd_gotoxy
    _lcd_gotoxy->_lcd_write_byte
    _lcd_init->_lcd_write_byte
    _lcd_write_byte->_lcd_write_nibble

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   13009
                                             12 BANK0      3     3      0
                          _OpenUSART
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                     _lcd_write_byte
                        _rotarString
                            _strncpy
 ---------------------------------------------------------------------------------
 (1) _strncpy                                              8     2      6     664
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _rotarString                                         12     8      4     627
                                              0 BANK0     12     8      4
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    4607
                                              8 BANK0      2     0      2
                         _lcd_gotoxy
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    2619
                                              5 BANK0      3     2      1
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    2324
                                              5 BANK0      1     1      0
                     _lcd_write_byte
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (1) _lcd_write_byte                                       2     1      1    1707
                                              3 BANK0      2     1      1
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (2) _lcd_write_nibble                                     3     2      1     617
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _OpenUSART                                            6     4      2     387
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 14    14      0    1799
                                             11 COMRAM    14    14      0
                          _ReadUSART
                       _cuentaLetras
                      _lcd_put_blank
                          _putsUSART
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4     331
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _putsUSART                                            2     0      2     194
                                              1 COMRAM     2     0      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (7) _WriteUSART                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _lcd_put_blank                                        3     1      2    1055
                                              8 COMRAM     3     1      2
                       i2_lcd_gotoxy
                   i2_lcd_write_byte
 ---------------------------------------------------------------------------------
 (7) i2_lcd_gotoxy                                         3     2      1     532
                                              5 COMRAM     3     2      1
                   i2_lcd_write_byte
 ---------------------------------------------------------------------------------
 (7) i2_lcd_write_byte                                     2     1      1     328
                                              3 COMRAM     2     1      1
                 i2_lcd_write_nibble
 ---------------------------------------------------------------------------------
 (8) i2_lcd_write_nibble                                   3     2      1     162
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (6) _cuentaLetras                                         4     2      2     196
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OpenUSART
   _lcd_gotoxy
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_init
     _lcd_write_byte
       _lcd_write_nibble
     _lcd_write_nibble
   _lcd_puts
     _lcd_gotoxy
       _lcd_write_byte
         _lcd_write_nibble
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_write_byte
     _lcd_write_nibble
   _rotarString
   _strncpy

 _ISR (ROOT)
   _ReadUSART
   _cuentaLetras
   _lcd_put_blank
     i2_lcd_gotoxy
       i2_lcd_write_byte
         i2_lcd_write_nibble
     i2_lcd_write_byte
       i2_lcd_write_nibble
   _putsUSART
     _WriteUSART
   _strcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      F       F       5        9.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     19      46       1       73.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2AD      20        0.0%
DATA                 0      0     2AD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Jan 03 17:53:05 2017

                _rotarString 0CEA                            _c 000A                            _i 0005  
                          _k 0007                          l210 0F5A                          l214 0F74  
                        l215 0F76                          l135 10B4                          l216 0F82  
                        l217 0F84                          l138 110E                          l219 0FAC  
                        _ISR 0008                          wreg 000FE8   __end_ofi2_lcd_write_nibble 0F2E  
               __CFG_FOSC$HS 000000            rotarString@length 0062                  lcd_gotoxy@x 0067  
                lcd_gotoxy@y 0065               ?_lcd_put_blank 0036                 __CFG_LVP$OFF 000000  
                       ?_ISR 002E                 __CFG_WDT$OFF 000000                         l1861 0FFE  
                       l1853 0FBC                         l1881 107C                         l1873 104C  
                       l1865 1010                         l1945 0B70                         l1929 0AB4  
                       l1883 1086                         l1891 0D06                         l1859 0FF2  
                       l1797 0F5C                         l1789 0F4A                         l1877 1064  
                       l1869 1028                         l1885 108C                         l1949 0B9C  
                       l1895 0D4C                         u1095 0DE0                         u1096 0DE2  
                       u1507 1108                         u1427 0AA0                         u1517 0C02  
                       u1437 0BA4                         u1607 0E82                         u1527 0C1E  
                       u1447 0BB6                         u1617 0E8C                         u1537 0C3C  
                       u1457 0BC8                         u1547 0C5A                         u1467 0BDA  
                       u1557 0C84                         u1477 0BEC                         u1567 0CA2  
                       u1487 10DC                         _PIE1 000F9D                         u1577 0CC0  
                       u1497 10F2                         u1587 0CDE                         u1597 0DE4  
                       _PEIE 007F96                         _RCIE 007CED                         _RCIF 007CF5  
                       _RCIP 007CFD                         i2l99 0A06       __end_of_lcd_write_byte 124E  
                       _main 0A40                         fsr0h 000FEA                         fsr1h 000FE2  
                       fsr0l 000FE9                         fsr2h 000FDA                         indf1 000FE7  
                       fsr1l 000FE1                         indf2 000FDF                         fsr2l 000FD9  
                lcd_puts@str 0068                         pclat 000FFA                         prodh 000FF4  
                       prodl 000FF3                         start 0018                ?_cuentaLetras 002E  
   __end_ofi2_lcd_write_byte 12A6                __CFG_MCLRE$ON 000000                        ??_ISR 0039  
                      ?_main 002E                        i2l135 1122                        i2l240 127C  
                      i2l138 1170                        i2l227 1208                        _RCREG 000FAE  
                      _RCSTA 000FAB                        _SPBRG 000FAF                        _TRISC 000F94  
                      _TRISD 000F95                        _TXREG 000FAD                        _TXSTA 000FAC  
                      _lcd_x 000C                        _lcd_y 000D                        tablat 000FF5  
                      status 000FD8              ?_lcd_write_byte 0063        __size_ofi2_lcd_gotoxy 0062  
            __end_of_strncpy 1026               ??_cuentaLetras 0030             i2lcd_gotoxy@addr 0034  
             WriteUSART@data 002E              __initialization 1172                 __end_of_main 0BFA  
                     ??_main 006C                __activetblptr 000002                 rotarString@j 006A  
            ??_lcd_put_blank 0038    i2lcd_write_nibble@is_data 002E                 i2_lcd_gotoxy 1110  
                     i2l1541 11E8                       i2l1525 125C                       i2l1533 11B6  
                     i2l1535 11BE                       i2l1623 0888                       i2l1529 1268  
                     i2l1369 12B2                       i2l1539 11E4                       i2l1635 08F4  
                     i2l1651 096E                       i2l1627 08A2                       i2l1661 09A0  
                     i2l1639 090E                       i2l1671 09BE                       i2l1673 09D0  
                     i2l1657 0986                       i2l1649 0960                       i2l1667 09B6  
                     i2l1677 09EA                       i2l1679 09FE           __size_of_ReadUSART 001E  
                     _SPBRGH 000FB0             __end_of_lcd_init 0CEA           __size_of_OpenUSART 0080  
           __end_of_lcd_puts 109C     __end_of_lcd_write_nibble 0E94                       clear_0 1178  
                     clear_1 1184                       clear_2 1190                       clear_3 119C  
                     _strcpy 11AC         _lcd_lower_row_buffer 0300                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                  ??_strncpy 0047                _MessageBuffer 0100                   __accesstop 0060  
    __end_of__initialization 11A2                   _WriteUSART 12A6               __pcstackCOMRAM 002E  
               ?_rotarString 0060            __end_of_ReadUSART 128C               lcd_gotoxy@addr 0066  
   i2lcd_write_nibble@nibble 0030         __end_of_cuentaLetras 1208                ReadUSART@data 002E  
          __end_of_OpenUSART 0FAE                   __pbssBANK1 0100                   __pbssBANK2 0200  
                 __pbssBANK3 0300           i2_lcd_write_nibble 0E94            ?i2_lcd_write_byte 0031  
        ?i2_lcd_write_nibble 002E           ??i2_lcd_write_byte 0032                putsUSART@data 002F  
                    ?_strcpy 002E                   _lcd_gotoxy 109C                      i2u56_45 0E9E  
                    i2u56_46 0EA0           __size_of_putsUSART 0026             ??_lcd_write_byte 0047  
       ??i2_lcd_write_nibble 002F                    ?_lcd_init 002E                    ?_lcd_puts 0068  
              cuentaLetras@j 0030                      __Hparam 0000                      __Lparam 0000  
               _flag_newline 000B                  ?_WriteUSART 002E                 __psmallconst 0800  
      lcd_write_byte@is_data 0063                      __pcinit 1172                      __ramtop 0800  
                    __ptext0 0A40                      __ptext1 0FAE                      __ptext2 0CEA  
                    __ptext3 1026                      __ptext4 109C                      __ptext5 0BFA  
                    __ptext6 122E                      __ptext7 0DD2                      __ptext8 0F2E  
            __size_of_strcpy 002E                 __size_of_ISR 0A38           lcd_write_byte@byte 0064  
       _lcd_upper_row_buffer 0200               lcd_put_blank@x 0038               lcd_put_blank@y 0036  
                 ??_lcd_init 0065               __pintcode_body 0806                      _strncpy 0FAE  
                 ??_lcd_puts 0047         end_of_initialization 11A2             _cantidadLetrasUP 0003  
              __Lmediumconst 0000                      int_func 0806                    _RCSTAbits 000FAB  
                    postinc0 000FEE            __end_of_putsUSART 122E            ?_lcd_write_nibble 0060  
      __size_of_cuentaLetras 002E         __size_of_rotarString 00E8           ??_lcd_write_nibble 0061  
          lcd_put_blank@size 0037                    _TRISCbits 000F94                  ?_lcd_gotoxy 0065  
      __end_of_lcd_put_blank 126E          __size_of_WriteUSART 0012                   main@config 006D  
                  _TXSTAbits 000FAC                 _cuentaLetras 11DA              cuentaLetras@str 002E  
             __end_of_strcpy 11DA          start_initialization 1172                    _ReadUSART 126E  
                __end_of_ISR 0A40     _lcd_lower_display_buffer 000E                    _OpenUSART 0F2E  
        __size_of_lcd_gotoxy 0074      i2lcd_write_byte@is_data 0031                     ??_strcpy 0032  
                __pbssCOMRAM 0001               rotarString@aux 0069                   ?_ReadUSART 002E  
             rotarString@str 0060    __size_ofi2_lcd_write_byte 001A                __pcstackBANK0 0060  
              i2lcd_gotoxy@x 0035                i2lcd_gotoxy@y 0033                   ?_OpenUSART 0060  
          __size_of_lcd_init 00F0            __size_of_lcd_puts 0076                 ??_WriteUSART 002E  
                  __pintcode 0008                  __smallconst 0800                ?i2_lcd_gotoxy 0033  
__size_ofi2_lcd_write_nibble 009A              _LCD_ROW_ADDRESS 0801                     ?_strncpy 0060  
         __end_of_WriteUSART 12B8                     _LATDbits 000F8C                  strncpy@from 0062  
                   _PIE1bits 000F9D                  strncpy@size 0064                     i2u162_47 1146  
                   i2u163_47 1158                     i2u164_47 116A                     i2u165_47 0EA2  
                   i2u166_47 0F1C                     i2u167_47 0F26                     _PIR1bits 000F9E  
   _lcd_upper_display_buffer 001E                    _putsUSART 1208                  ??_ReadUSART 002E  
             ??i2_lcd_gotoxy 0034                    main@spbrg 006E                 ??_lcd_gotoxy 0047  
  __size_of_lcd_write_nibble 00C2           _cantidadLetrasDOWN 0001                  ??_OpenUSART 0062  
            OpenUSART@config 0065      __size_of_lcd_write_byte 0020                     __Hrparam 0000  
    lcd_write_nibble@is_data 0060                     __Lrparam 0000                ??_rotarString 0064  
         __end_of_lcd_gotoxy 1110                   ?_putsUSART 002F      __end_of_LCD_ROW_ADDRESS 0805  
       i2lcd_write_byte@byte 0032             i2_lcd_write_byte 128C                     __ptext10 11AC  
                   __ptext11 1208                     __ptext12 12A6                     __ptext13 124E  
                   __ptext14 1110                     __ptext15 128C                     __ptext16 0E94  
                   __ptext17 11DA                     __ptext18 126E                     _lcd_init 0BFA  
                   _lcd_puts 1026             __size_of_strncpy 0078                   strcpy@from 0030  
              __size_of_main 01BA       __size_of_lcd_put_blank 0020          __end_of_rotarString 0DD2  
                 _INTCONbits 000FF2               OpenUSART@spbrg 0060       lcd_write_nibble@nibble 0062  
                   intlevel2 0000                    strncpy@cp 0066                    strncpy@to 0060  
       __end_ofi2_lcd_gotoxy 1172                  ??_putsUSART 0031                     strcpy@cp 0032  
                   strcpy@to 002E             _lcd_write_nibble 0DD2                _lcd_put_blank 124E  
               _USART_Status 0009               _lcd_write_byte 122E  
