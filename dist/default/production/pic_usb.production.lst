

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Jan 03 18:25:13 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    35  0000                     
    36                           	psect	smallconst
    37  000800                     __psmallconst:
    38                           	opt stack 0
    39  000800  00                 	db	0
    40  000801                     _LCD_ROW_ADDRESS:
    41                           	opt stack 0
    42  000801  80                 	db	128
    43  000802  C0                 	db	192
    44  000803  94                 	db	148
    45  000804  D4                 	db	212
    46  000805                     __end_of_LCD_ROW_ADDRESS:
    47                           	opt stack 0
    48  0000                     _INTCONbits	set	4082
    49  0000                     _LATDbits	set	3980
    50  0000                     _PIE1	set	3997
    51  0000                     _PIE1bits	set	3997
    52  0000                     _PIR1bits	set	3998
    53  0000                     _RCREG	set	4014
    54  0000                     _RCSTA	set	4011
    55  0000                     _RCSTAbits	set	4011
    56  0000                     _SPBRG	set	4015
    57  0000                     _SPBRGH	set	4016
    58  0000                     _TRISC	set	3988
    59  0000                     _TRISCbits	set	3988
    60  0000                     _TRISD	set	3989
    61  0000                     _TXREG	set	4013
    62  0000                     _TXSTA	set	4012
    63  0000                     _TXSTAbits	set	4012
    64  0000                     _PEIE	set	32662
    65  0000                     _RCIE	set	31981
    66  0000                     _RCIF	set	31989
    67  0000                     _RCIP	set	31997
    68                           
    69                           ; #config settings
    70  000805  00                 	db	0	; dummy byte at the end
    71  0000                     
    72                           	psect	cinit
    73  0011C2                     __pcinit:
    74                           	opt stack 0
    75  0011C2                     start_initialization:
    76                           	opt stack 0
    77  0011C2                     __initialization:
    78                           	opt stack 0
    79                           
    80                           ; Clear objects allocated to BANK3 (200 bytes)
    81  0011C2  EE03  F000         	lfsr	0,__pbssBANK3
    82  0011C6  0EC8               	movlw	200
    83  0011C8                     clear_0:
    84  0011C8  6AEE               	clrf	postinc0,c
    85  0011CA  06E8               	decf	wreg,f,c
    86  0011CC  E1FD               	bnz	clear_0
    87                           
    88                           ; Clear objects allocated to BANK2 (200 bytes)
    89  0011CE  EE02  F000         	lfsr	0,__pbssBANK2
    90  0011D2  0EC8               	movlw	200
    91  0011D4                     clear_1:
    92  0011D4  6AEE               	clrf	postinc0,c
    93  0011D6  06E8               	decf	wreg,f,c
    94  0011D8  E1FD               	bnz	clear_1
    95                           
    96                           ; Clear objects allocated to BANK1 (200 bytes)
    97  0011DA  EE01  F000         	lfsr	0,__pbssBANK1
    98  0011DE  0EC8               	movlw	200
    99  0011E0                     clear_2:
   100  0011E0  6AEE               	clrf	postinc0,c
   101  0011E2  06E8               	decf	wreg,f,c
   102  0011E4  E1FD               	bnz	clear_2
   103                           
   104                           ; Clear objects allocated to COMRAM (45 bytes)
   105  0011E6  EE00  F001         	lfsr	0,__pbssCOMRAM
   106  0011EA  0E2D               	movlw	45
   107  0011EC                     clear_3:
   108  0011EC  6AEE               	clrf	postinc0,c
   109  0011EE  06E8               	decf	wreg,f,c
   110  0011F0  E1FD               	bnz	clear_3
   111  0011F2                     end_of_initialization:
   112                           	opt stack 0
   113  0011F2                     __end_of__initialization:
   114                           	opt stack 0
   115  0011F2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   116  0011F4  6EF8               	movwf	tblptru,c
   117  0011F6  0100               	movlb	0
   118  0011F8  EF48  F005         	goto	_main	;jump to C main() function
   119                           tblptru	equ	0xFF8
   120                           postinc0	equ	0xFEE
   121                           wreg	equ	0xFE8
   122                           
   123                           	psect	bssCOMRAM
   124  000001                     __pbssCOMRAM:
   125                           	opt stack 0
   126  000001                     _cantidadLetrasDOWN:
   127                           	opt stack 0
   128  000001                     	ds	2
   129  000003                     _cantidadLetrasUP:
   130                           	opt stack 0
   131  000003                     	ds	2
   132  000005                     _i:
   133                           	opt stack 0
   134  000005                     	ds	2
   135  000007                     _k:
   136                           	opt stack 0
   137  000007                     	ds	2
   138  000009                     _USART_Status:
   139                           	opt stack 0
   140  000009                     	ds	1
   141  00000A                     _c:
   142                           	opt stack 0
   143  00000A                     	ds	1
   144  00000B                     _flag_newline:
   145                           	opt stack 0
   146  00000B                     	ds	1
   147  00000C                     _lcd_x:
   148                           	opt stack 0
   149  00000C                     	ds	1
   150  00000D                     _lcd_y:
   151                           	opt stack 0
   152  00000D                     	ds	1
   153  00000E                     _lcd_lower_display_buffer:
   154                           	opt stack 0
   155  00000E                     	ds	16
   156  00001E                     _lcd_upper_display_buffer:
   157                           	opt stack 0
   158  00001E                     	ds	16
   159                           tblptru	equ	0xFF8
   160                           postinc0	equ	0xFEE
   161                           wreg	equ	0xFE8
   162                           
   163                           	psect	bssBANK1
   164  000100                     __pbssBANK1:
   165                           	opt stack 0
   166  000100                     _MessageBuffer:
   167                           	opt stack 0
   168  000100                     	ds	200
   169                           tblptru	equ	0xFF8
   170                           postinc0	equ	0xFEE
   171                           wreg	equ	0xFE8
   172                           
   173                           	psect	bssBANK2
   174  000200                     __pbssBANK2:
   175                           	opt stack 0
   176  000200                     _lcd_upper_row_buffer:
   177                           	opt stack 0
   178  000200                     	ds	200
   179                           tblptru	equ	0xFF8
   180                           postinc0	equ	0xFEE
   181                           wreg	equ	0xFE8
   182                           
   183                           	psect	bssBANK3
   184  000300                     __pbssBANK3:
   185                           	opt stack 0
   186  000300                     _lcd_lower_row_buffer:
   187                           	opt stack 0
   188  000300                     	ds	200
   189                           tblptru	equ	0xFF8
   190                           postinc0	equ	0xFEE
   191                           wreg	equ	0xFE8
   192                           
   193                           	psect	cstackBANK0
   194  000060                     __pcstackBANK0:
   195                           	opt stack 0
   196  000060                     lcd_write_nibble@is_data:
   197                           	opt stack 0
   198  000060                     rotarString@str:
   199                           	opt stack 0
   200  000060                     OpenUSART@spbrg:
   201                           	opt stack 0
   202  000060                     strncpy@to:
   203                           	opt stack 0
   204                           
   205                           ; 2 bytes @ 0x0
   206  000060                     	ds	1
   207  000061                     ??_lcd_write_nibble:
   208                           
   209                           ; 0 bytes @ 0x1
   210  000061                     	ds	1
   211  000062                     ??_OpenUSART:
   212  000062                     lcd_write_nibble@nibble:
   213                           	opt stack 0
   214  000062                     rotarString@length:
   215                           	opt stack 0
   216  000062                     strncpy@from:
   217                           	opt stack 0
   218                           
   219                           ; 2 bytes @ 0x2
   220  000062                     	ds	1
   221  000063                     lcd_write_byte@is_data:
   222                           	opt stack 0
   223                           
   224                           ; 1 bytes @ 0x3
   225  000063                     	ds	1
   226  000064                     ??_rotarString:
   227  000064                     lcd_write_byte@byte:
   228                           	opt stack 0
   229  000064                     strncpy@size:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x4
   233  000064                     	ds	1
   234  000065                     ??_lcd_init:
   235  000065                     lcd_gotoxy@y:
   236                           	opt stack 0
   237  000065                     OpenUSART@config:
   238                           	opt stack 0
   239                           
   240                           ; 1 bytes @ 0x5
   241  000065                     	ds	1
   242  000066                     lcd_gotoxy@addr:
   243                           	opt stack 0
   244  000066                     strncpy@cp:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x6
   248  000066                     	ds	1
   249  000067                     lcd_gotoxy@x:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x7
   253  000067                     	ds	1
   254  000068                     lcd_puts@str:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x8
   258  000068                     	ds	1
   259  000069                     rotarString@aux:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x9
   263  000069                     	ds	1
   264  00006A                     rotarString@j:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0xA
   268  00006A                     	ds	2
   269  00006C                     ??_main:
   270                           
   271                           ; 0 bytes @ 0xC
   272  00006C                     	ds	1
   273  00006D                     main@config:
   274                           	opt stack 0
   275                           
   276                           ; 1 bytes @ 0xD
   277  00006D                     	ds	1
   278  00006E                     main@spbrg:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0xE
   282  00006E                     	ds	1
   283                           tblptru	equ	0xFF8
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	cstackCOMRAM
   288  00002E                     __pcstackCOMRAM:
   289                           	opt stack 0
   290  00002E                     ?_cuentaLetras:
   291                           	opt stack 0
   292  00002E                     ReadUSART@data:
   293                           	opt stack 0
   294  00002E                     WriteUSART@data:
   295                           	opt stack 0
   296  00002E                     i2lcd_write_nibble@is_data:
   297                           	opt stack 0
   298  00002E                     cuentaLetras@str:
   299                           	opt stack 0
   300  00002E                     strcpy@to:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0x0
   304  00002E                     	ds	1
   305  00002F                     ??i2_lcd_write_nibble:
   306  00002F                     putsUSART@data:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x1
   310  00002F                     	ds	1
   311  000030                     i2lcd_write_nibble@nibble:
   312                           	opt stack 0
   313  000030                     cuentaLetras@j:
   314                           	opt stack 0
   315  000030                     strcpy@from:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x2
   319  000030                     	ds	1
   320  000031                     i2lcd_write_byte@is_data:
   321                           	opt stack 0
   322                           
   323                           ; 1 bytes @ 0x3
   324  000031                     	ds	1
   325  000032                     i2lcd_write_byte@byte:
   326                           	opt stack 0
   327  000032                     strcpy@cp:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x4
   331  000032                     	ds	1
   332  000033                     i2lcd_gotoxy@y:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0x5
   336  000033                     	ds	1
   337  000034                     i2lcd_gotoxy@addr:
   338                           	opt stack 0
   339                           
   340                           ; 1 bytes @ 0x6
   341  000034                     	ds	1
   342  000035                     i2lcd_gotoxy@x:
   343                           	opt stack 0
   344                           
   345                           ; 1 bytes @ 0x7
   346  000035                     	ds	1
   347  000036                     lcd_put_blank@y:
   348                           	opt stack 0
   349                           
   350                           ; 1 bytes @ 0x8
   351  000036                     	ds	1
   352  000037                     lcd_put_blank@size:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0x9
   356  000037                     	ds	1
   357  000038                     lcd_put_blank@x:
   358                           	opt stack 0
   359                           
   360                           ; 1 bytes @ 0xA
   361  000038                     	ds	1
   362  000039                     ??_ISR:
   363                           
   364                           ; 0 bytes @ 0xB
   365  000039                     	ds	18
   366                           tblptru	equ	0xFF8
   367                           postinc0	equ	0xFEE
   368                           wreg	equ	0xFE8
   369                           
   370 ;;
   371 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   372 ;;
   373 ;; *************** function _main *****************
   374 ;; Defined at:
   375 ;;		line 40 in file "main.c"
   376 ;; Parameters:    Size  Location     Type
   377 ;;		None
   378 ;; Auto vars:     Size  Location     Type
   379 ;;  spbrg           1   14[BANK0 ] unsigned char 
   380 ;;  config          1   13[BANK0 ] unsigned char 
   381 ;; Return value:  Size  Location     Type
   382 ;;		None               void
   383 ;; Registers used:
   384 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   385 ;; Tracked objects:
   386 ;;		On entry : 0/0
   387 ;;		On exit  : 0/0
   388 ;;		Unchanged: 0/0
   389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   390 ;;      Params:         0       0       0       0       0       0       0       0       0
   391 ;;      Locals:         0       2       0       0       0       0       0       0       0
   392 ;;      Temps:          0       1       0       0       0       0       0       0       0
   393 ;;      Totals:         0       3       0       0       0       0       0       0       0
   394 ;;Total ram usage:        3 bytes
   395 ;; Hardware stack levels required when called:    9
   396 ;; This function calls:
   397 ;;		_OpenUSART
   398 ;;		_lcd_gotoxy
   399 ;;		_lcd_init
   400 ;;		_lcd_puts
   401 ;;		_lcd_write_byte
   402 ;;		_rotarString
   403 ;;		_strncpy
   404 ;; This function is called by:
   405 ;;		Startup code after reset
   406 ;; This function uses a non-reentrant model
   407 ;;
   408                           
   409                           	psect	text0
   410  000A90                     __ptext0:
   411                           	opt stack 0
   412  000A90                     _main:
   413                           	opt stack 22
   414                           
   415                           ;main.c: 42: unsigned char config = 0, spbrg = 0;
   416                           
   417                           ;incstack = 0
   418  000A90  0E00               	movlw	0
   419  000A92  0100               	movlb	0	; () banked
   420  000A94  6F6D               	movwf	main@config& (0+255),b
   421  000A96  0E00               	movlw	0
   422  000A98  0100               	movlb	0	; () banked
   423  000A9A  6F6E               	movwf	main@spbrg& (0+255),b
   424                           
   425                           ;main.c: 44: TRISC = 0b10000000;
   426  000A9C  0E80               	movlw	128
   427  000A9E  6E94               	movwf	3988,c	;volatile
   428                           
   429                           ;main.c: 45: TRISD = 0b00000000;
   430  000AA0  0E00               	movlw	0
   431  000AA2  6E95               	movwf	3989,c	;volatile
   432                           
   433                           ; BSR set to: 0
   434                           ;main.c: 48: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
   435  000AA4  0E4F               	movlw	79
   436  000AA6  16AB               	andwf	4011,f,c	;volatile
   437                           
   438                           ; BSR set to: 0
   439  000AA8  9AAC               	bcf	4012,5,c	;volatile
   440                           
   441                           ; BSR set to: 0
   442  000AAA  0ECF               	movlw	207
   443  000AAC  169D               	andwf	3997,f,c	;volatile
   444                           
   445                           ;main.c: 50: config = 0b01111111& 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111;
   446  000AAE  0E7C               	movlw	124
   447  000AB0  0100               	movlb	0	; () banked
   448  000AB2  6F6D               	movwf	main@config& (0+255),b
   449                           
   450                           ;main.c: 51: spbrg = 77;
   451  000AB4  0E4D               	movlw	77
   452  000AB6  0100               	movlb	0	; () banked
   453  000AB8  6F6E               	movwf	main@spbrg& (0+255),b
   454                           
   455                           ; BSR set to: 0
   456                           ;main.c: 53: OpenUSART(config, spbrg);
   457  000ABA  0100               	movlb	0	; () banked
   458  000ABC  C06E  F060         	movff	main@spbrg,OpenUSART@spbrg
   459  000AC0  0100               	movlb	0	; () banked
   460  000AC2  6B61               	clrf	(OpenUSART@spbrg+1)& (0+255),b
   461  000AC4  0100               	movlb	0	; () banked
   462  000AC6  516D               	movf	main@config& (0+255),w,b
   463  000AC8  ECBF  F007         	call	_OpenUSART
   464                           
   465                           ;main.c: 56: RCIF = 0;
   466  000ACC  9A9E               	bcf	3998,5,c	;volatile
   467                           
   468                           ;main.c: 57: RCIP = 0;
   469  000ACE  9A9F               	bcf	3999,5,c	;volatile
   470                           
   471                           ;main.c: 58: RCIE = 1;
   472  000AD0  8A9D               	bsf	3997,5,c	;volatile
   473                           
   474                           ;main.c: 59: PEIE = 1;
   475  000AD2  8CF2               	bsf	intcon,6,c	;volatile
   476                           
   477                           ;main.c: 60: PIR1bits.RCIF = 0;
   478  000AD4  9A9E               	bcf	3998,5,c	;volatile
   479                           
   480                           ;main.c: 61: (INTCONbits.GIE = 1);
   481  000AD6  8EF2               	bsf	intcon,7,c	;volatile
   482                           
   483                           ;main.c: 63: lcd_init();
   484  000AD8  EC25  F006         	call	_lcd_init	;wreg free
   485                           
   486                           ;main.c: 64: {lcd_write_byte(0x01, 0); { _delay((unsigned long)((5000)*(12000000/4000000
      +                          .0))); };};
   487  000ADC  0E00               	movlw	0
   488  000ADE  0100               	movlb	0	; () banked
   489  000AE0  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
   490  000AE2  0E01               	movlw	1
   491  000AE4  EC3F  F009         	call	_lcd_write_byte
   492  000AE8  0E14               	movlw	20
   493  000AEA  0100               	movlb	0	; () banked
   494  000AEC  6F6C               	movwf	??_main& (0+255),b
   495  000AEE  0E7A               	movlw	122
   496  000AF0                     u1427:
   497  000AF0  2EE8               	decfsz	wreg,f,c
   498  000AF2  D7FE               	goto	u1427
   499  000AF4  2F6C               	decfsz	??_main& (0+255),f,b
   500  000AF6  D7FC               	goto	u1427
   501                           
   502                           ;main.c: 65: lcd_gotoxy(0,0);
   503  000AF8  0E00               	movlw	0
   504  000AFA  0100               	movlb	0	; () banked
   505  000AFC  6F65               	movwf	lcd_gotoxy@y& (0+255),b
   506  000AFE  0E00               	movlw	0
   507  000B00  EC76  F008         	call	_lcd_gotoxy
   508  000B04                     l1937:
   509                           
   510                           ;main.c: 67: {
   511                           ;main.c: 69: lcd_gotoxy(0,0);
   512  000B04  0E00               	movlw	0
   513  000B06  0100               	movlb	0	; () banked
   514  000B08  6F65               	movwf	lcd_gotoxy@y& (0+255),b
   515  000B0A  0E00               	movlw	0
   516  000B0C  EC76  F008         	call	_lcd_gotoxy
   517                           
   518                           ;main.c: 70: strncpy(lcd_upper_display_buffer, lcd_upper_row_buffer, 16);
   519  000B10  0E00               	movlw	high _lcd_upper_display_buffer
   520  000B12  0100               	movlb	0	; () banked
   521  000B14  6F61               	movwf	(strncpy@to+1)& (0+255),b
   522  000B16  0E1E               	movlw	low _lcd_upper_display_buffer
   523  000B18  0100               	movlb	0	; () banked
   524  000B1A  6F60               	movwf	strncpy@to& (0+255),b
   525  000B1C  0102               	movlb	2	; () banked
   526  000B1E  0E02               	movlw	high _lcd_upper_row_buffer
   527  000B20  0100               	movlb	0	; () banked
   528  000B22  6F63               	movwf	(strncpy@from+1)& (0+255),b
   529  000B24  0102               	movlb	2	; () banked
   530  000B26  0E00               	movlw	low _lcd_upper_row_buffer
   531  000B28  0100               	movlb	0	; () banked
   532  000B2A  6F62               	movwf	strncpy@from& (0+255),b
   533  000B2C  0E00               	movlw	0
   534  000B2E  0100               	movlb	0	; () banked
   535  000B30  6F65               	movwf	(strncpy@size+1)& (0+255),b
   536  000B32  0E10               	movlw	16
   537  000B34  0100               	movlb	0	; () banked
   538  000B36  6F64               	movwf	strncpy@size& (0+255),b
   539  000B38  ECFF  F007         	call	_strncpy	;wreg free
   540                           
   541                           ;main.c: 71: lcd_puts(lcd_upper_display_buffer);
   542  000B3C  0E00               	movlw	high _lcd_upper_display_buffer
   543  000B3E  0100               	movlb	0	; () banked
   544  000B40  6F69               	movwf	(lcd_puts@str+1)& (0+255),b
   545  000B42  0E1E               	movlw	low _lcd_upper_display_buffer
   546  000B44  0100               	movlb	0	; () banked
   547  000B46  6F68               	movwf	lcd_puts@str& (0+255),b
   548  000B48  EC3B  F008         	call	_lcd_puts	;wreg free
   549                           
   550                           ;main.c: 73: lcd_gotoxy(0,1);
   551  000B4C  0E01               	movlw	1
   552  000B4E  0100               	movlb	0	; () banked
   553  000B50  6F65               	movwf	lcd_gotoxy@y& (0+255),b
   554  000B52  0E00               	movlw	0
   555  000B54  EC76  F008         	call	_lcd_gotoxy
   556                           
   557                           ;main.c: 74: strncpy(lcd_lower_display_buffer, lcd_lower_row_buffer, 16);
   558  000B58  0E00               	movlw	high _lcd_lower_display_buffer
   559  000B5A  0100               	movlb	0	; () banked
   560  000B5C  6F61               	movwf	(strncpy@to+1)& (0+255),b
   561  000B5E  0E0E               	movlw	low _lcd_lower_display_buffer
   562  000B60  0100               	movlb	0	; () banked
   563  000B62  6F60               	movwf	strncpy@to& (0+255),b
   564  000B64  0103               	movlb	3	; () banked
   565  000B66  0E03               	movlw	high _lcd_lower_row_buffer
   566  000B68  0100               	movlb	0	; () banked
   567  000B6A  6F63               	movwf	(strncpy@from+1)& (0+255),b
   568  000B6C  0103               	movlb	3	; () banked
   569  000B6E  0E00               	movlw	low _lcd_lower_row_buffer
   570  000B70  0100               	movlb	0	; () banked
   571  000B72  6F62               	movwf	strncpy@from& (0+255),b
   572  000B74  0E00               	movlw	0
   573  000B76  0100               	movlb	0	; () banked
   574  000B78  6F65               	movwf	(strncpy@size+1)& (0+255),b
   575  000B7A  0E10               	movlw	16
   576  000B7C  0100               	movlb	0	; () banked
   577  000B7E  6F64               	movwf	strncpy@size& (0+255),b
   578  000B80  ECFF  F007         	call	_strncpy	;wreg free
   579                           
   580                           ;main.c: 75: lcd_puts(lcd_lower_display_buffer);
   581  000B84  0E00               	movlw	high _lcd_lower_display_buffer
   582  000B86  0100               	movlb	0	; () banked
   583  000B88  6F69               	movwf	(lcd_puts@str+1)& (0+255),b
   584  000B8A  0E0E               	movlw	low _lcd_lower_display_buffer
   585  000B8C  0100               	movlb	0	; () banked
   586  000B8E  6F68               	movwf	lcd_puts@str& (0+255),b
   587  000B90  EC3B  F008         	call	_lcd_puts	;wreg free
   588                           
   589                           ;main.c: 76: if(cantidadLetrasUP > 16)
   590  000B94  5004               	movf	_cantidadLetrasUP+1,w,c
   591  000B96  0A80               	xorlw	128
   592  000B98  0F80               	addlw	-128
   593  000B9A  0E11               	movlw	17
   594  000B9C  B4D8               	btfsc	status,2,c
   595  000B9E  5C03               	subwf	_cantidadLetrasUP,w,c
   596  000BA0  A0D8               	btfss	status,0,c
   597  000BA2  D00E               	goto	l1953
   598                           
   599                           ;main.c: 77: {
   600                           ;main.c: 78: rotarString(lcd_upper_row_buffer, cantidadLetrasUP);
   601  000BA4  0102               	movlb	2	; () banked
   602  000BA6  0E02               	movlw	high _lcd_upper_row_buffer
   603  000BA8  0100               	movlb	0	; () banked
   604  000BAA  6F61               	movwf	(rotarString@str+1)& (0+255),b
   605  000BAC  0102               	movlb	2	; () banked
   606  000BAE  0E00               	movlw	low _lcd_upper_row_buffer
   607  000BB0  0100               	movlb	0	; () banked
   608  000BB2  6F60               	movwf	rotarString@str& (0+255),b
   609  000BB4  C003  F062         	movff	_cantidadLetrasUP,rotarString@length
   610  000BB8  C004  F063         	movff	_cantidadLetrasUP+1,rotarString@length+1
   611  000BBC  EC9D  F006         	call	_rotarString	;wreg free
   612  000BC0                     l1953:
   613                           
   614                           ;main.c: 79: }
   615                           ;main.c: 80: if(cantidadLetrasDOWN > 16)
   616  000BC0  5002               	movf	_cantidadLetrasDOWN+1,w,c
   617  000BC2  0A80               	xorlw	128
   618  000BC4  0F80               	addlw	-128
   619  000BC6  0E11               	movlw	17
   620  000BC8  B4D8               	btfsc	status,2,c
   621  000BCA  5C01               	subwf	_cantidadLetrasDOWN,w,c
   622  000BCC  A0D8               	btfss	status,0,c
   623  000BCE  D00E               	goto	l1957
   624                           
   625                           ;main.c: 81: {
   626                           ;main.c: 82: rotarString(lcd_lower_row_buffer, cantidadLetrasDOWN);
   627  000BD0  0103               	movlb	3	; () banked
   628  000BD2  0E03               	movlw	high _lcd_lower_row_buffer
   629  000BD4  0100               	movlb	0	; () banked
   630  000BD6  6F61               	movwf	(rotarString@str+1)& (0+255),b
   631  000BD8  0103               	movlb	3	; () banked
   632  000BDA  0E00               	movlw	low _lcd_lower_row_buffer
   633  000BDC  0100               	movlb	0	; () banked
   634  000BDE  6F60               	movwf	rotarString@str& (0+255),b
   635  000BE0  C001  F062         	movff	_cantidadLetrasDOWN,rotarString@length
   636  000BE4  C002  F063         	movff	_cantidadLetrasDOWN+1,rotarString@length+1
   637  000BE8  EC9D  F006         	call	_rotarString	;wreg free
   638  000BEC                     l1957:
   639                           
   640                           ;main.c: 83: }
   641                           ;main.c: 84: _delay((unsigned long)((50)*(12000000/4000.0)));
   642  000BEC  0EC3               	movlw	195
   643  000BEE  0100               	movlb	0	; () banked
   644  000BF0  6F6C               	movwf	??_main& (0+255),b
   645  000BF2  0ECD               	movlw	205
   646  000BF4                     u1437:
   647  000BF4  2EE8               	decfsz	wreg,f,c
   648  000BF6  D7FE               	goto	u1437
   649  000BF8  2F6C               	decfsz	??_main& (0+255),f,b
   650  000BFA  D7FC               	goto	u1437
   651  000BFC  F000               	nop	
   652                           
   653                           ;main.c: 85: _delay((unsigned long)((50)*(12000000/4000.0)));
   654  000BFE  0EC3               	movlw	195
   655  000C00  0100               	movlb	0	; () banked
   656  000C02  6F6C               	movwf	??_main& (0+255),b
   657  000C04  0ECD               	movlw	205
   658  000C06                     u1447:
   659  000C06  2EE8               	decfsz	wreg,f,c
   660  000C08  D7FE               	goto	u1447
   661  000C0A  2F6C               	decfsz	??_main& (0+255),f,b
   662  000C0C  D7FC               	goto	u1447
   663  000C0E  F000               	nop	
   664                           
   665                           ;main.c: 86: _delay((unsigned long)((50)*(12000000/4000.0)));
   666  000C10  0EC3               	movlw	195
   667  000C12  0100               	movlb	0	; () banked
   668  000C14  6F6C               	movwf	??_main& (0+255),b
   669  000C16  0ECD               	movlw	205
   670  000C18                     u1457:
   671  000C18  2EE8               	decfsz	wreg,f,c
   672  000C1A  D7FE               	goto	u1457
   673  000C1C  2F6C               	decfsz	??_main& (0+255),f,b
   674  000C1E  D7FC               	goto	u1457
   675  000C20  F000               	nop	
   676                           
   677                           ;main.c: 87: _delay((unsigned long)((50)*(12000000/4000.0)));
   678  000C22  0EC3               	movlw	195
   679  000C24  0100               	movlb	0	; () banked
   680  000C26  6F6C               	movwf	??_main& (0+255),b
   681  000C28  0ECD               	movlw	205
   682  000C2A                     u1467:
   683  000C2A  2EE8               	decfsz	wreg,f,c
   684  000C2C  D7FE               	goto	u1467
   685  000C2E  2F6C               	decfsz	??_main& (0+255),f,b
   686  000C30  D7FC               	goto	u1467
   687  000C32  F000               	nop	
   688                           
   689                           ;main.c: 88: _delay((unsigned long)((50)*(12000000/4000.0)));
   690  000C34  0EC3               	movlw	195
   691  000C36  0100               	movlb	0	; () banked
   692  000C38  6F6C               	movwf	??_main& (0+255),b
   693  000C3A  0ECD               	movlw	205
   694  000C3C                     u1477:
   695  000C3C  2EE8               	decfsz	wreg,f,c
   696  000C3E  D7FE               	goto	u1477
   697  000C40  2F6C               	decfsz	??_main& (0+255),f,b
   698  000C42  D7FC               	goto	u1477
   699  000C44  F000               	nop	
   700                           
   701                           ;main.c: 89: LATDbits.LATD0 =~ LATDbits.LATD0;
   702  000C46  708C               	btg	3980,0,c	;volatile
   703  000C48  D75D               	goto	l1937
   704  000C4A                     __end_of_main:
   705                           	opt stack 0
   706                           tblptru	equ	0xFF8
   707                           intcon	equ	0xFF2
   708                           postinc0	equ	0xFEE
   709                           wreg	equ	0xFE8
   710                           status	equ	0xFD8
   711                           
   712 ;; *************** function _strncpy *****************
   713 ;; Defined at:
   714 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\strncpy.c"
   715 ;; Parameters:    Size  Location     Type
   716 ;;  to              2    0[BANK0 ] PTR unsigned char 
   717 ;;		 -> lcd_lower_display_buffer(16), lcd_upper_display_buffer(16), 
   718 ;;  from            2    2[BANK0 ] PTR const unsigned char 
   719 ;;		 -> lcd_lower_row_buffer(200), lcd_upper_row_buffer(200), 
   720 ;;  size            2    4[BANK0 ] unsigned int 
   721 ;; Auto vars:     Size  Location     Type
   722 ;;  cp              2    6[BANK0 ] PTR unsigned char 
   723 ;;		 -> lcd_lower_display_buffer(16), lcd_upper_display_buffer(16), 
   724 ;; Return value:  Size  Location     Type
   725 ;;                  2    0[BANK0 ] PTR unsigned char 
   726 ;; Registers used:
   727 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   733 ;;      Params:         0       6       0       0       0       0       0       0       0
   734 ;;      Locals:         0       2       0       0       0       0       0       0       0
   735 ;;      Temps:          0       0       0       0       0       0       0       0       0
   736 ;;      Totals:         0       8       0       0       0       0       0       0       0
   737 ;;Total ram usage:        8 bytes
   738 ;; Hardware stack levels used:    1
   739 ;; Hardware stack levels required when called:    5
   740 ;; This function calls:
   741 ;;		Nothing
   742 ;; This function is called by:
   743 ;;		_main
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           	psect	text1
   748  000FFE                     __ptext1:
   749                           	opt stack 0
   750  000FFE                     _strncpy:
   751                           	opt stack 25
   752                           
   753                           ;incstack = 0
   754  000FFE  0100               	movlb	0	; () banked
   755  001000  C061  F067         	movff	strncpy@to+1,strncpy@cp+1
   756  001004  0100               	movlb	0	; () banked
   757  001006  C060  F066         	movff	strncpy@to,strncpy@cp
   758  00100A  D01B               	goto	l1867
   759  00100C                     l1861:
   760                           
   761                           ; BSR set to: 0
   762  00100C  0100               	movlb	0	; () banked
   763  00100E  0764               	decf	strncpy@size& (0+255),f,b
   764  001010  A0D8               	btfss	status,0,c
   765  001012  0765               	decf	(strncpy@size+1)& (0+255),f,b
   766                           
   767                           ; BSR set to: 0
   768  001014  0100               	movlb	0	; () banked
   769  001016  C062  FFD9         	movff	strncpy@from,fsr2l
   770  00101A  0100               	movlb	0	; () banked
   771  00101C  C063  FFDA         	movff	strncpy@from+1,fsr2h
   772  001020  0100               	movlb	0	; () banked
   773  001022  4B62               	infsnz	strncpy@from& (0+255),f,b
   774  001024  2B63               	incf	(strncpy@from+1)& (0+255),f,b
   775  001026  0100               	movlb	0	; () banked
   776  001028  C066  FFE1         	movff	strncpy@cp,fsr1l
   777  00102C  0100               	movlb	0	; () banked
   778  00102E  C067  FFE2         	movff	strncpy@cp+1,fsr1h
   779  001032  0100               	movlb	0	; () banked
   780  001034  4B66               	infsnz	strncpy@cp& (0+255),f,b
   781  001036  2B67               	incf	(strncpy@cp+1)& (0+255),f,b
   782  001038  CFDF FFE7          	movff	indf2,indf1
   783  00103C  50E7               	movf	indf1,w,c
   784  00103E  B4D8               	btfsc	status,2,c
   785  001040  D00F               	goto	l1873
   786  001042                     l1867:
   787                           
   788                           ; BSR set to: 0
   789  001042  0100               	movlb	0	; () banked
   790  001044  5165               	movf	(strncpy@size+1)& (0+255),w,b
   791  001046  1164               	iorwf	strncpy@size& (0+255),w,b
   792  001048  B4D8               	btfsc	status,2,c
   793  00104A  D00A               	goto	l1873
   794  00104C  D7DF               	goto	l1861
   795  00104E                     l1869:
   796                           
   797                           ; BSR set to: 0
   798  00104E  C066  FFD9         	movff	strncpy@cp,fsr2l
   799  001052  C067  FFDA         	movff	strncpy@cp+1,fsr2h
   800  001056  0E00               	movlw	0
   801  001058  6EDF               	movwf	indf2,c
   802                           
   803                           ; BSR set to: 0
   804  00105A  0100               	movlb	0	; () banked
   805  00105C  4B66               	infsnz	strncpy@cp& (0+255),f,b
   806  00105E  2B67               	incf	(strncpy@cp+1)& (0+255),f,b
   807  001060                     l1873:
   808                           
   809                           ; BSR set to: 0
   810  001060  0100               	movlb	0	; () banked
   811  001062  0764               	decf	strncpy@size& (0+255),f,b
   812  001064  A0D8               	btfss	status,0,c
   813  001066  0765               	decf	(strncpy@size+1)& (0+255),f,b
   814  001068  0100               	movlb	0	; () banked
   815  00106A  2964               	incf	strncpy@size& (0+255),w,b
   816  00106C  B4D8               	btfsc	status,2,c
   817  00106E  2965               	incf	(strncpy@size+1)& (0+255),w,b
   818  001070  B4D8               	btfsc	status,2,c
   819                           
   820                           ; BSR set to: 0
   821                           
   822                           ; BSR set to: 0
   823                           ;	Return value of _strncpy is never used
   824  001072  0012               	return	
   825  001074  D7EC               	goto	l1869
   826  001076                     __end_of_strncpy:
   827                           	opt stack 0
   828                           tblptru	equ	0xFF8
   829                           intcon	equ	0xFF2
   830                           postinc0	equ	0xFEE
   831                           wreg	equ	0xFE8
   832                           indf1	equ	0xFE7
   833                           fsr1h	equ	0xFE2
   834                           fsr1l	equ	0xFE1
   835                           indf2	equ	0xFDF
   836                           fsr2h	equ	0xFDA
   837                           fsr2l	equ	0xFD9
   838                           status	equ	0xFD8
   839                           
   840 ;; *************** function _rotarString *****************
   841 ;; Defined at:
   842 ;;		line 162 in file "main.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;  str             2    0[BANK0 ] PTR unsigned char 
   845 ;;		 -> lcd_lower_row_buffer(200), lcd_upper_row_buffer(200), 
   846 ;;  length          2    2[BANK0 ] int 
   847 ;; Auto vars:     Size  Location     Type
   848 ;;  j               2   10[BANK0 ] int 
   849 ;;  aux             1    9[BANK0 ] unsigned char 
   850 ;; Return value:  Size  Location     Type
   851 ;;		None               void
   852 ;; Registers used:
   853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   859 ;;      Params:         0       4       0       0       0       0       0       0       0
   860 ;;      Locals:         0       3       0       0       0       0       0       0       0
   861 ;;      Temps:          0       5       0       0       0       0       0       0       0
   862 ;;      Totals:         0      12       0       0       0       0       0       0       0
   863 ;;Total ram usage:       12 bytes
   864 ;; Hardware stack levels used:    1
   865 ;; Hardware stack levels required when called:    5
   866 ;; This function calls:
   867 ;;		Nothing
   868 ;; This function is called by:
   869 ;;		_main
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	text2
   874  000D3A                     __ptext2:
   875                           	opt stack 0
   876  000D3A                     _rotarString:
   877                           	opt stack 25
   878                           
   879                           ;main.c: 164: int j;
   880                           ;main.c: 165: char aux;
   881                           ;main.c: 166: aux = str[0];
   882                           
   883                           ; BSR set to: 0
   884                           ;incstack = 0
   885  000D3A  C060  FFD9         	movff	rotarString@str,fsr2l
   886  000D3E  C061  FFDA         	movff	rotarString@str+1,fsr2h
   887  000D42  50DF               	movf	indf2,w,c
   888  000D44  0100               	movlb	0	; () banked
   889  000D46  6F69               	movwf	rotarString@aux& (0+255),b
   890                           
   891                           ; BSR set to: 0
   892                           ;main.c: 167: for(j = 0; j<length - 1; j++)
   893  000D48  0E00               	movlw	0
   894  000D4A  0100               	movlb	0	; () banked
   895  000D4C  6F6B               	movwf	(rotarString@j+1)& (0+255),b
   896  000D4E  0E00               	movlw	0
   897  000D50  0100               	movlb	0	; () banked
   898  000D52  6F6A               	movwf	rotarString@j& (0+255),b
   899  000D54  D023               	goto	l1903
   900  000D56                     l1899:
   901                           
   902                           ; BSR set to: 0
   903                           ;main.c: 168: {
   904                           ;main.c: 169: str[j] = str[j+1];
   905  000D56  0E01               	movlw	1
   906  000D58  0100               	movlb	0	; () banked
   907  000D5A  256A               	addwf	rotarString@j& (0+255),w,b
   908  000D5C  0100               	movlb	0	; () banked
   909  000D5E  6F64               	movwf	??_rotarString& (0+255),b
   910  000D60  0E00               	movlw	0
   911  000D62  0100               	movlb	0	; () banked
   912  000D64  216B               	addwfc	(rotarString@j+1)& (0+255),w,b
   913  000D66  0100               	movlb	0	; () banked
   914  000D68  6F65               	movwf	(??_rotarString+1)& (0+255),b
   915  000D6A  0100               	movlb	0	; () banked
   916  000D6C  5164               	movf	??_rotarString& (0+255),w,b
   917  000D6E  0100               	movlb	0	; () banked
   918  000D70  2560               	addwf	rotarString@str& (0+255),w,b
   919  000D72  6ED9               	movwf	fsr2l,c
   920  000D74  0100               	movlb	0	; () banked
   921  000D76  5165               	movf	(??_rotarString+1)& (0+255),w,b
   922  000D78  0100               	movlb	0	; () banked
   923  000D7A  2161               	addwfc	(rotarString@str+1)& (0+255),w,b
   924  000D7C  6EDA               	movwf	fsr2h,c
   925  000D7E  0100               	movlb	0	; () banked
   926  000D80  516A               	movf	rotarString@j& (0+255),w,b
   927  000D82  0100               	movlb	0	; () banked
   928  000D84  2560               	addwf	rotarString@str& (0+255),w,b
   929  000D86  6EE1               	movwf	fsr1l,c
   930  000D88  0100               	movlb	0	; () banked
   931  000D8A  516B               	movf	(rotarString@j+1)& (0+255),w,b
   932  000D8C  0100               	movlb	0	; () banked
   933  000D8E  2161               	addwfc	(rotarString@str+1)& (0+255),w,b
   934  000D90  6EE2               	movwf	fsr1h,c
   935  000D92  CFDF FFE7          	movff	indf2,indf1
   936                           
   937                           ; BSR set to: 0
   938  000D96  0100               	movlb	0	; () banked
   939  000D98  4B6A               	infsnz	rotarString@j& (0+255),f,b
   940  000D9A  2B6B               	incf	(rotarString@j+1)& (0+255),f,b
   941  000D9C                     l1903:
   942                           
   943                           ; BSR set to: 0
   944  000D9C  0EFF               	movlw	255
   945  000D9E  0100               	movlb	0	; () banked
   946  000DA0  6F64               	movwf	??_rotarString& (0+255),b
   947  000DA2  0EFF               	movlw	255
   948  000DA4  6F65               	movwf	(??_rotarString+1)& (0+255),b
   949  000DA6  0100               	movlb	0	; () banked
   950  000DA8  C062  F066         	movff	rotarString@length,??_rotarString+2
   951  000DAC  0100               	movlb	0	; () banked
   952  000DAE  C063  F067         	movff	rotarString@length+1,??_rotarString+3
   953  000DB2  0100               	movlb	0	; () banked
   954  000DB4  5164               	movf	??_rotarString& (0+255),w,b
   955  000DB6  0100               	movlb	0	; () banked
   956  000DB8  2766               	addwf	(??_rotarString+2)& (0+255),f,b
   957  000DBA  0100               	movlb	0	; () banked
   958  000DBC  5165               	movf	(??_rotarString+1)& (0+255),w,b
   959  000DBE  0100               	movlb	0	; () banked
   960  000DC0  2367               	addwfc	(??_rotarString+3)& (0+255),f,b
   961  000DC2  0100               	movlb	0	; () banked
   962  000DC4  516B               	movf	(rotarString@j+1)& (0+255),w,b
   963  000DC6  0A80               	xorlw	128
   964  000DC8  0100               	movlb	0	; () banked
   965  000DCA  6F68               	movwf	(??_rotarString+4)& (0+255),b
   966  000DCC  5166               	movf	(??_rotarString+2)& (0+255),w,b
   967  000DCE  0100               	movlb	0	; () banked
   968  000DD0  5D6A               	subwf	rotarString@j& (0+255),w,b
   969  000DD2  0100               	movlb	0	; () banked
   970  000DD4  5167               	movf	(??_rotarString+3)& (0+255),w,b
   971  000DD6  0A80               	xorlw	128
   972  000DD8  0100               	movlb	0	; () banked
   973  000DDA  5968               	subwfb	(??_rotarString+4)& (0+255),w,b
   974  000DDC  A0D8               	btfss	status,0,c
   975  000DDE  D7BB               	goto	l1899
   976                           
   977                           ; BSR set to: 0
   978                           ;main.c: 170: }
   979                           ;main.c: 171: str[length - 1] = aux;
   980                           
   981                           ; BSR set to: 0
   982  000DE0  0EFF               	movlw	255
   983  000DE2  0100               	movlb	0	; () banked
   984  000DE4  6F64               	movwf	??_rotarString& (0+255),b
   985  000DE6  0EFF               	movlw	255
   986  000DE8  6F65               	movwf	(??_rotarString+1)& (0+255),b
   987  000DEA  0100               	movlb	0	; () banked
   988  000DEC  C062  F066         	movff	rotarString@length,??_rotarString+2
   989  000DF0  0100               	movlb	0	; () banked
   990  000DF2  C063  F067         	movff	rotarString@length+1,??_rotarString+3
   991  000DF6  0100               	movlb	0	; () banked
   992  000DF8  5164               	movf	??_rotarString& (0+255),w,b
   993  000DFA  0100               	movlb	0	; () banked
   994  000DFC  2766               	addwf	(??_rotarString+2)& (0+255),f,b
   995  000DFE  0100               	movlb	0	; () banked
   996  000E00  5165               	movf	(??_rotarString+1)& (0+255),w,b
   997  000E02  0100               	movlb	0	; () banked
   998  000E04  2367               	addwfc	(??_rotarString+3)& (0+255),f,b
   999  000E06  0100               	movlb	0	; () banked
  1000  000E08  5166               	movf	(??_rotarString+2)& (0+255),w,b
  1001  000E0A  0100               	movlb	0	; () banked
  1002  000E0C  2560               	addwf	rotarString@str& (0+255),w,b
  1003  000E0E  6ED9               	movwf	fsr2l,c
  1004  000E10  0100               	movlb	0	; () banked
  1005  000E12  5167               	movf	(??_rotarString+3)& (0+255),w,b
  1006  000E14  0100               	movlb	0	; () banked
  1007  000E16  2161               	addwfc	(rotarString@str+1)& (0+255),w,b
  1008  000E18  6EDA               	movwf	fsr2h,c
  1009  000E1A  0100               	movlb	0	; () banked
  1010  000E1C  C069  FFDF         	movff	rotarString@aux,indf2
  1011                           
  1012                           ; BSR set to: 0
  1013  000E20  0012               	return	
  1014  000E22                     __end_of_rotarString:
  1015                           	opt stack 0
  1016                           tblptru	equ	0xFF8
  1017                           intcon	equ	0xFF2
  1018                           postinc0	equ	0xFEE
  1019                           wreg	equ	0xFE8
  1020                           indf1	equ	0xFE7
  1021                           fsr1h	equ	0xFE2
  1022                           fsr1l	equ	0xFE1
  1023                           indf2	equ	0xFDF
  1024                           fsr2h	equ	0xFDA
  1025                           fsr2l	equ	0xFD9
  1026                           status	equ	0xFD8
  1027                           
  1028 ;; *************** function _lcd_puts *****************
  1029 ;; Defined at:
  1030 ;;		line 108 in file "lcd_driver.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;  str             2    8[BANK0 ] PTR unsigned char 
  1033 ;;		 -> lcd_lower_display_buffer(16), lcd_upper_display_buffer(16), 
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;		None
  1036 ;; Return value:  Size  Location     Type
  1037 ;;		None               void
  1038 ;; Registers used:
  1039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1045 ;;      Params:         0       2       0       0       0       0       0       0       0
  1046 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1048 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1049 ;;Total ram usage:        2 bytes
  1050 ;; Hardware stack levels used:    1
  1051 ;; Hardware stack levels required when called:    8
  1052 ;; This function calls:
  1053 ;;		_lcd_gotoxy
  1054 ;;		_lcd_write_byte
  1055 ;; This function is called by:
  1056 ;;		_main
  1057 ;; This function uses a non-reentrant model
  1058 ;;
  1059                           
  1060                           	psect	text3
  1061  001076                     __ptext3:
  1062                           	opt stack 0
  1063  001076                     _lcd_puts:
  1064                           	opt stack 22
  1065                           
  1066                           ;lcd_driver.c: 110: while (*str != 0)
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;incstack = 0
  1070  001076  D032               	goto	l1893
  1071  001078                     l1877:
  1072                           
  1073                           ;lcd_driver.c: 111: {
  1074                           ;lcd_driver.c: 112: if (*str != '\n')
  1075  001078  C068  FFD9         	movff	lcd_puts@str,fsr2l
  1076  00107C  C069  FFDA         	movff	lcd_puts@str+1,fsr2h
  1077  001080  50DF               	movf	indf2,w,c
  1078  001082  0A0A               	xorlw	10
  1079  001084  B4D8               	btfsc	status,2,c
  1080  001086  D00A               	goto	l1881
  1081                           
  1082                           ;lcd_driver.c: 113: {
  1083                           ;lcd_driver.c: 114: {lcd_write_byte(*str, 1);};
  1084  001088  0E01               	movlw	1
  1085  00108A  0100               	movlb	0	; () banked
  1086  00108C  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1087  00108E  C068  FFD9         	movff	lcd_puts@str,fsr2l
  1088  001092  C069  FFDA         	movff	lcd_puts@str+1,fsr2h
  1089  001096  50DF               	movf	indf2,w,c
  1090  001098  EC3F  F009         	call	_lcd_write_byte
  1091  00109C                     l1881:
  1092                           
  1093                           ;lcd_driver.c: 115: }
  1094                           ;lcd_driver.c: 117: if ((++lcd_x == 16) || (*str == '\n'))
  1095  00109C  2A0C               	incf	_lcd_x,f,c
  1096  00109E  500C               	movf	_lcd_x& (0+255),w,c
  1097  0010A0  0A10               	xorlw	16
  1098  0010A2  B4D8               	btfsc	status,2,c
  1099  0010A4  D007               	goto	l1885
  1100  0010A6  0E0A               	movlw	10
  1101  0010A8  C068  FFD9         	movff	lcd_puts@str,fsr2l
  1102  0010AC  C069  FFDA         	movff	lcd_puts@str+1,fsr2h
  1103  0010B0  62DF               	cpfseq	indf2,c
  1104  0010B2  D011               	goto	l1891
  1105  0010B4                     l1885:
  1106                           
  1107                           ;lcd_driver.c: 118: {
  1108                           ;lcd_driver.c: 119: if (++lcd_y == 2)
  1109  0010B4  2A0D               	incf	_lcd_y,f,c
  1110  0010B6  500D               	movf	_lcd_y& (0+255),w,c
  1111  0010B8  0A02               	xorlw	2
  1112  0010BA  A4D8               	btfss	status,2,c
  1113  0010BC  D007               	goto	l1889
  1114                           
  1115                           ;lcd_driver.c: 120: {
  1116                           ;lcd_driver.c: 121: lcd_gotoxy(0,0);
  1117  0010BE  0E00               	movlw	0
  1118  0010C0  0100               	movlb	0	; () banked
  1119  0010C2  6F65               	movwf	lcd_gotoxy@y& (0+255),b
  1120  0010C4  0E00               	movlw	0
  1121  0010C6  EC76  F008         	call	_lcd_gotoxy
  1122                           
  1123                           ;lcd_driver.c: 122: }
  1124  0010CA  D005               	goto	l1891
  1125  0010CC                     l1889:
  1126                           
  1127                           ;lcd_driver.c: 123: else
  1128                           ;lcd_driver.c: 124: {
  1129                           ;lcd_driver.c: 125: lcd_gotoxy(0, lcd_y);
  1130  0010CC  C00D  F065         	movff	_lcd_y,lcd_gotoxy@y
  1131  0010D0  0E00               	movlw	0
  1132  0010D2  EC76  F008         	call	_lcd_gotoxy
  1133  0010D6                     l1891:
  1134                           
  1135                           ;lcd_driver.c: 126: }
  1136                           ;lcd_driver.c: 127: }
  1137                           ;lcd_driver.c: 128: str++;
  1138  0010D6  0100               	movlb	0	; () banked
  1139  0010D8  4B68               	infsnz	lcd_puts@str& (0+255),f,b
  1140  0010DA  2B69               	incf	(lcd_puts@str+1)& (0+255),f,b
  1141  0010DC                     l1893:
  1142  0010DC  C068  FFD9         	movff	lcd_puts@str,fsr2l
  1143  0010E0  C069  FFDA         	movff	lcd_puts@str+1,fsr2h
  1144  0010E4  50DF               	movf	indf2,w,c
  1145  0010E6  B4D8               	btfsc	status,2,c
  1146  0010E8  0012               	return	
  1147  0010EA  D7C6               	goto	l1877
  1148  0010EC                     __end_of_lcd_puts:
  1149                           	opt stack 0
  1150                           tblptru	equ	0xFF8
  1151                           intcon	equ	0xFF2
  1152                           postinc0	equ	0xFEE
  1153                           wreg	equ	0xFE8
  1154                           indf1	equ	0xFE7
  1155                           fsr1h	equ	0xFE2
  1156                           fsr1l	equ	0xFE1
  1157                           indf2	equ	0xFDF
  1158                           fsr2h	equ	0xFDA
  1159                           fsr2l	equ	0xFD9
  1160                           status	equ	0xFD8
  1161                           
  1162 ;; *************** function _lcd_gotoxy *****************
  1163 ;; Defined at:
  1164 ;;		line 54 in file "lcd_driver.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;  x               1    wreg     unsigned char 
  1167 ;;  y               1    5[BANK0 ] unsigned char 
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;  x               1    7[BANK0 ] unsigned char 
  1170 ;;  addr            1    6[BANK0 ] unsigned char 
  1171 ;; Return value:  Size  Location     Type
  1172 ;;		None               void
  1173 ;; Registers used:
  1174 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1175 ;; Tracked objects:
  1176 ;;		On entry : 0/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1180 ;;      Params:         0       1       0       0       0       0       0       0       0
  1181 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1182 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1183 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1184 ;;Total ram usage:        3 bytes
  1185 ;; Hardware stack levels used:    1
  1186 ;; Hardware stack levels required when called:    7
  1187 ;; This function calls:
  1188 ;;		_lcd_write_byte
  1189 ;; This function is called by:
  1190 ;;		_main
  1191 ;;		_lcd_puts
  1192 ;;		_lcd_putnum
  1193 ;;		_lcd_puts_const
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           	psect	text4
  1198  0010EC                     __ptext4:
  1199                           	opt stack 0
  1200  0010EC                     _lcd_gotoxy:
  1201                           	opt stack 22
  1202                           
  1203                           ;incstack = 0
  1204                           ;lcd_gotoxy@x stored from wreg
  1205  0010EC  0100               	movlb	0	; () banked
  1206  0010EE  6F67               	movwf	lcd_gotoxy@x& (0+255),b
  1207                           
  1208                           ; BSR set to: 0
  1209                           ;lcd_driver.c: 57: uint8_t addr;
  1210                           ;lcd_driver.c: 59: if ((y > 3) || (x > 19))
  1211  0010F0  0E04               	movlw	4
  1212  0010F2  0100               	movlb	0	; () banked
  1213  0010F4  5D65               	subwf	lcd_gotoxy@y& (0+255),w,b
  1214  0010F6  B0D8               	btfsc	status,0,c
  1215  0010F8  D032               	goto	l138
  1216                           
  1217                           ; BSR set to: 0
  1218  0010FA  0E13               	movlw	19
  1219  0010FC  0100               	movlb	0	; () banked
  1220  0010FE  6567               	cpfsgt	lcd_gotoxy@x& (0+255),b
  1221  001100  D001               	goto	l135
  1222  001102  D02D               	goto	l138
  1223  001104                     l135:
  1224                           
  1225                           ; BSR set to: 0
  1226                           ;lcd_driver.c: 62: }
  1227                           ;lcd_driver.c: 63: lcd_x = x;
  1228  001104  C067  F00C         	movff	lcd_gotoxy@x,_lcd_x
  1229                           
  1230                           ;lcd_driver.c: 64: lcd_y = y;
  1231  001108  C065  F00D         	movff	lcd_gotoxy@y,_lcd_y
  1232                           
  1233                           ;lcd_driver.c: 65: addr = x;
  1234  00110C  C067  F066         	movff	lcd_gotoxy@x,lcd_gotoxy@addr
  1235                           
  1236                           ; BSR set to: 0
  1237                           ;lcd_driver.c: 66: addr += LCD_ROW_ADDRESS[y];
  1238  001110  0100               	movlb	0	; () banked
  1239  001112  5165               	movf	lcd_gotoxy@y& (0+255),w,b
  1240  001114  0D01               	mullw	1
  1241  001116  0E01               	movlw	low _LCD_ROW_ADDRESS
  1242  001118  24F3               	addwf	prodl,w,c
  1243  00111A  6EF6               	movwf	tblptrl,c
  1244  00111C  0E08               	movlw	high _LCD_ROW_ADDRESS
  1245  00111E  20F4               	addwfc	prodh,w,c
  1246  001120  6EF7               	movwf	tblptrh,c
  1247  001122                     	if	0	;There are less than 3 active tblptr bytes
  1248  001122                     	endif
  1249  001122  0008               	tblrd		*
  1250  001124  50F5               	movf	tablat,w,c
  1251  001126  0100               	movlb	0	; () banked
  1252  001128  2766               	addwf	lcd_gotoxy@addr& (0+255),f,b
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;lcd_driver.c: 67: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1256  00112A  0EFA               	movlw	250
  1257  00112C                     u1487:
  1258  00112C  F000               	nop	
  1259  00112E  2EE8               	decfsz	wreg,f,c
  1260  001130  D7FD               	goto	u1487
  1261                           
  1262                           ;lcd_driver.c: 68: lcd_write_byte(addr, 0);
  1263  001132  0E00               	movlw	0
  1264  001134  0100               	movlb	0	; () banked
  1265  001136  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1266  001138  0100               	movlb	0	; () banked
  1267  00113A  5166               	movf	lcd_gotoxy@addr& (0+255),w,b
  1268  00113C  EC3F  F009         	call	_lcd_write_byte
  1269                           
  1270                           ;lcd_driver.c: 69: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1271  001140  0EFA               	movlw	250
  1272  001142                     u1497:
  1273  001142  F000               	nop	
  1274  001144  2EE8               	decfsz	wreg,f,c
  1275  001146  D7FD               	goto	u1497
  1276                           
  1277                           ;lcd_driver.c: 70: lcd_write_byte(addr, 0);
  1278  001148  0E00               	movlw	0
  1279  00114A  0100               	movlb	0	; () banked
  1280  00114C  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1281  00114E  0100               	movlb	0	; () banked
  1282  001150  5166               	movf	lcd_gotoxy@addr& (0+255),w,b
  1283  001152  EC3F  F009         	call	_lcd_write_byte
  1284                           
  1285                           ;lcd_driver.c: 71: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1286  001156  0EFA               	movlw	250
  1287  001158                     u1507:
  1288  001158  F000               	nop	
  1289  00115A  2EE8               	decfsz	wreg,f,c
  1290  00115C  D7FD               	goto	u1507
  1291  00115E                     l138:
  1292  00115E  0012               	return	
  1293  001160                     __end_of_lcd_gotoxy:
  1294                           	opt stack 0
  1295                           tblptru	equ	0xFF8
  1296                           tblptrh	equ	0xFF7
  1297                           tblptrl	equ	0xFF6
  1298                           tablat	equ	0xFF5
  1299                           prodh	equ	0xFF4
  1300                           prodl	equ	0xFF3
  1301                           intcon	equ	0xFF2
  1302                           postinc0	equ	0xFEE
  1303                           wreg	equ	0xFE8
  1304                           indf1	equ	0xFE7
  1305                           fsr1h	equ	0xFE2
  1306                           fsr1l	equ	0xFE1
  1307                           indf2	equ	0xFDF
  1308                           fsr2h	equ	0xFDA
  1309                           fsr2l	equ	0xFD9
  1310                           status	equ	0xFD8
  1311                           
  1312 ;; *************** function _lcd_init *****************
  1313 ;; Defined at:
  1314 ;;		line 11 in file "lcd_driver.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;		None
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;		None
  1319 ;; Return value:  Size  Location     Type
  1320 ;;		None               void
  1321 ;; Registers used:
  1322 ;;		wreg, status,2, status,0, cstack
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1328 ;;      Params:         0       0       0       0       0       0       0       0       0
  1329 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1330 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1331 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1332 ;;Total ram usage:        1 bytes
  1333 ;; Hardware stack levels used:    1
  1334 ;; Hardware stack levels required when called:    7
  1335 ;; This function calls:
  1336 ;;		_lcd_write_byte
  1337 ;;		_lcd_write_nibble
  1338 ;; This function is called by:
  1339 ;;		_main
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text5
  1344  000C4A                     __ptext5:
  1345                           	opt stack 0
  1346  000C4A                     _lcd_init:
  1347                           	opt stack 23
  1348                           
  1349                           ;lcd_driver.c: 15: { _delay((unsigned long)((15000)*(4000000/4000000.0))); };
  1350                           
  1351                           ;incstack = 0
  1352  000C4A  0E14               	movlw	20
  1353  000C4C  0100               	movlb	0	; () banked
  1354  000C4E  6F65               	movwf	??_lcd_init& (0+255),b
  1355  000C50  0E7A               	movlw	122
  1356  000C52                     u1517:
  1357  000C52  2EE8               	decfsz	wreg,f,c
  1358  000C54  D7FE               	goto	u1517
  1359  000C56  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1360  000C58  D7FC               	goto	u1517
  1361                           
  1362                           ;lcd_driver.c: 18: lcd_write_nibble(0x3, 0);
  1363  000C5A  0E00               	movlw	0
  1364  000C5C  0100               	movlb	0	; () banked
  1365  000C5E  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1366  000C60  0E03               	movlw	3
  1367  000C62  EC11  F007         	call	_lcd_write_nibble
  1368                           
  1369                           ;lcd_driver.c: 20: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1370  000C66  0E07               	movlw	7
  1371  000C68  0100               	movlb	0	; () banked
  1372  000C6A  6F65               	movwf	??_lcd_init& (0+255),b
  1373  000C6C  0E7D               	movlw	125
  1374  000C6E                     u1527:
  1375  000C6E  2EE8               	decfsz	wreg,f,c
  1376  000C70  D7FE               	goto	u1527
  1377  000C72  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1378  000C74  D7FC               	goto	u1527
  1379  000C76  F000               	nop	
  1380                           
  1381                           ;lcd_driver.c: 22: lcd_write_nibble(0x3, 0);
  1382  000C78  0E00               	movlw	0
  1383  000C7A  0100               	movlb	0	; () banked
  1384  000C7C  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1385  000C7E  0E03               	movlw	3
  1386  000C80  EC11  F007         	call	_lcd_write_nibble
  1387                           
  1388                           ;lcd_driver.c: 24: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1389  000C84  0E07               	movlw	7
  1390  000C86  0100               	movlb	0	; () banked
  1391  000C88  6F65               	movwf	??_lcd_init& (0+255),b
  1392  000C8A  0E7D               	movlw	125
  1393  000C8C                     u1537:
  1394  000C8C  2EE8               	decfsz	wreg,f,c
  1395  000C8E  D7FE               	goto	u1537
  1396  000C90  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1397  000C92  D7FC               	goto	u1537
  1398  000C94  F000               	nop	
  1399                           
  1400                           ;lcd_driver.c: 26: lcd_write_nibble(0x3, 0);
  1401  000C96  0E00               	movlw	0
  1402  000C98  0100               	movlb	0	; () banked
  1403  000C9A  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1404  000C9C  0E03               	movlw	3
  1405  000C9E  EC11  F007         	call	_lcd_write_nibble
  1406                           
  1407                           ;lcd_driver.c: 28: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1408  000CA2  0E07               	movlw	7
  1409  000CA4  0100               	movlb	0	; () banked
  1410  000CA6  6F65               	movwf	??_lcd_init& (0+255),b
  1411  000CA8  0E7D               	movlw	125
  1412  000CAA                     u1547:
  1413  000CAA  2EE8               	decfsz	wreg,f,c
  1414  000CAC  D7FE               	goto	u1547
  1415  000CAE  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1416  000CB0  D7FC               	goto	u1547
  1417  000CB2  F000               	nop	
  1418                           
  1419                           ;lcd_driver.c: 30: lcd_write_nibble(0x2, 0);
  1420  000CB4  0E00               	movlw	0
  1421  000CB6  0100               	movlb	0	; () banked
  1422  000CB8  6F60               	movwf	lcd_write_nibble@is_data& (0+255),b
  1423  000CBA  0E02               	movlw	2
  1424  000CBC  EC11  F007         	call	_lcd_write_nibble
  1425                           
  1426                           ;lcd_driver.c: 39: lcd_write_byte(0x28, 0);
  1427  000CC0  0E00               	movlw	0
  1428  000CC2  0100               	movlb	0	; () banked
  1429  000CC4  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1430  000CC6  0E28               	movlw	40
  1431  000CC8  EC3F  F009         	call	_lcd_write_byte
  1432                           
  1433                           ;lcd_driver.c: 40: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1434  000CCC  0E07               	movlw	7
  1435  000CCE  0100               	movlb	0	; () banked
  1436  000CD0  6F65               	movwf	??_lcd_init& (0+255),b
  1437  000CD2  0E7D               	movlw	125
  1438  000CD4                     u1557:
  1439  000CD4  2EE8               	decfsz	wreg,f,c
  1440  000CD6  D7FE               	goto	u1557
  1441  000CD8  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1442  000CDA  D7FC               	goto	u1557
  1443  000CDC  F000               	nop	
  1444                           
  1445                           ;lcd_driver.c: 42: lcd_write_byte(0x0c, 0);
  1446  000CDE  0E00               	movlw	0
  1447  000CE0  0100               	movlb	0	; () banked
  1448  000CE2  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1449  000CE4  0E0C               	movlw	12
  1450  000CE6  EC3F  F009         	call	_lcd_write_byte
  1451                           
  1452                           ;lcd_driver.c: 43: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1453  000CEA  0E07               	movlw	7
  1454  000CEC  0100               	movlb	0	; () banked
  1455  000CEE  6F65               	movwf	??_lcd_init& (0+255),b
  1456  000CF0  0E7D               	movlw	125
  1457  000CF2                     u1567:
  1458  000CF2  2EE8               	decfsz	wreg,f,c
  1459  000CF4  D7FE               	goto	u1567
  1460  000CF6  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1461  000CF8  D7FC               	goto	u1567
  1462  000CFA  F000               	nop	
  1463                           
  1464                           ;lcd_driver.c: 45: lcd_write_byte(0x01, 0);
  1465  000CFC  0E00               	movlw	0
  1466  000CFE  0100               	movlb	0	; () banked
  1467  000D00  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1468  000D02  0E01               	movlw	1
  1469  000D04  EC3F  F009         	call	_lcd_write_byte
  1470                           
  1471                           ;lcd_driver.c: 46: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1472  000D08  0E07               	movlw	7
  1473  000D0A  0100               	movlb	0	; () banked
  1474  000D0C  6F65               	movwf	??_lcd_init& (0+255),b
  1475  000D0E  0E7D               	movlw	125
  1476  000D10                     u1577:
  1477  000D10  2EE8               	decfsz	wreg,f,c
  1478  000D12  D7FE               	goto	u1577
  1479  000D14  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1480  000D16  D7FC               	goto	u1577
  1481  000D18  F000               	nop	
  1482                           
  1483                           ;lcd_driver.c: 48: lcd_write_byte(0x6, 0);
  1484  000D1A  0E00               	movlw	0
  1485  000D1C  0100               	movlb	0	; () banked
  1486  000D1E  6F63               	movwf	lcd_write_byte@is_data& (0+255),b
  1487  000D20  0E06               	movlw	6
  1488  000D22  EC3F  F009         	call	_lcd_write_byte
  1489                           
  1490                           ;lcd_driver.c: 49: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1491  000D26  0E07               	movlw	7
  1492  000D28  0100               	movlb	0	; () banked
  1493  000D2A  6F65               	movwf	??_lcd_init& (0+255),b
  1494  000D2C  0E7D               	movlw	125
  1495  000D2E                     u1587:
  1496  000D2E  2EE8               	decfsz	wreg,f,c
  1497  000D30  D7FE               	goto	u1587
  1498  000D32  2F65               	decfsz	??_lcd_init& (0+255),f,b
  1499  000D34  D7FC               	goto	u1587
  1500  000D36  F000               	nop	
  1501  000D38  0012               	return	
  1502  000D3A                     __end_of_lcd_init:
  1503                           	opt stack 0
  1504                           tblptru	equ	0xFF8
  1505                           tblptrh	equ	0xFF7
  1506                           tblptrl	equ	0xFF6
  1507                           tablat	equ	0xFF5
  1508                           prodh	equ	0xFF4
  1509                           prodl	equ	0xFF3
  1510                           intcon	equ	0xFF2
  1511                           postinc0	equ	0xFEE
  1512                           wreg	equ	0xFE8
  1513                           indf1	equ	0xFE7
  1514                           fsr1h	equ	0xFE2
  1515                           fsr1l	equ	0xFE1
  1516                           indf2	equ	0xFDF
  1517                           fsr2h	equ	0xFDA
  1518                           fsr2l	equ	0xFD9
  1519                           status	equ	0xFD8
  1520                           
  1521 ;; *************** function _lcd_write_byte *****************
  1522 ;; Defined at:
  1523 ;;		line 185 in file "lcd_driver.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;  byte            1    wreg     unsigned char 
  1526 ;;  is_data         1    3[BANK0 ] unsigned char 
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;  byte            1    4[BANK0 ] unsigned char 
  1529 ;; Return value:  Size  Location     Type
  1530 ;;		None               void
  1531 ;; Registers used:
  1532 ;;		wreg, status,2, status,0, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1538 ;;      Params:         0       1       0       0       0       0       0       0       0
  1539 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1540 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1541 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1542 ;;Total ram usage:        2 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:    6
  1545 ;; This function calls:
  1546 ;;		_lcd_write_nibble
  1547 ;; This function is called by:
  1548 ;;		_main
  1549 ;;		_lcd_init
  1550 ;;		_lcd_gotoxy
  1551 ;;		_lcd_puts
  1552 ;;		_lcd_putnum
  1553 ;;		_lcd_puts_const
  1554 ;;		_lcd_set_cgram
  1555 ;; This function uses a non-reentrant model
  1556 ;;
  1557                           
  1558                           	psect	text6
  1559  00127E                     __ptext6:
  1560                           	opt stack 0
  1561  00127E                     _lcd_write_byte:
  1562                           	opt stack 24
  1563                           
  1564                           ;incstack = 0
  1565                           ;lcd_write_byte@byte stored from wreg
  1566  00127E  0100               	movlb	0	; () banked
  1567  001280  6F64               	movwf	lcd_write_byte@byte& (0+255),b
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;lcd_driver.c: 188: lcd_write_nibble(byte >> 4, is_data);
  1571  001282  C063  F060         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
  1572  001286  0100               	movlb	0	; () banked
  1573  001288  3964               	swapf	lcd_write_byte@byte& (0+255),w,b
  1574  00128A  0B0F               	andlw	15
  1575  00128C  EC11  F007         	call	_lcd_write_nibble
  1576                           
  1577                           ;lcd_driver.c: 189: lcd_write_nibble(byte, is_data);
  1578  001290  C063  F060         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
  1579  001294  0100               	movlb	0	; () banked
  1580  001296  5164               	movf	lcd_write_byte@byte& (0+255),w,b
  1581  001298  EC11  F007         	call	_lcd_write_nibble
  1582  00129C  0012               	return	
  1583  00129E                     __end_of_lcd_write_byte:
  1584                           	opt stack 0
  1585                           tblptru	equ	0xFF8
  1586                           tblptrh	equ	0xFF7
  1587                           tblptrl	equ	0xFF6
  1588                           tablat	equ	0xFF5
  1589                           prodh	equ	0xFF4
  1590                           prodl	equ	0xFF3
  1591                           intcon	equ	0xFF2
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           indf1	equ	0xFE7
  1595                           fsr1h	equ	0xFE2
  1596                           fsr1l	equ	0xFE1
  1597                           indf2	equ	0xFDF
  1598                           fsr2h	equ	0xFDA
  1599                           fsr2l	equ	0xFD9
  1600                           status	equ	0xFD8
  1601                           
  1602 ;; *************** function _lcd_write_nibble *****************
  1603 ;; Defined at:
  1604 ;;		line 176 in file "lcd_driver.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;  nibble          1    wreg     unsigned char 
  1607 ;;  is_data         1    0[BANK0 ] unsigned char 
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;  nibble          1    2[BANK0 ] unsigned char 
  1610 ;; Return value:  Size  Location     Type
  1611 ;;		None               void
  1612 ;; Registers used:
  1613 ;;		wreg, status,2, status,0, cstack
  1614 ;; Tracked objects:
  1615 ;;		On entry : 0/0
  1616 ;;		On exit  : 0/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1619 ;;      Params:         0       1       0       0       0       0       0       0       0
  1620 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1621 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1622 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1623 ;;Total ram usage:        3 bytes
  1624 ;; Hardware stack levels used:    1
  1625 ;; Hardware stack levels required when called:    5
  1626 ;; This function calls:
  1627 ;;		Nothing
  1628 ;; This function is called by:
  1629 ;;		_lcd_init
  1630 ;;		_lcd_write_byte
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text7
  1635  000E22                     __ptext7:
  1636                           	opt stack 0
  1637  000E22                     _lcd_write_nibble:
  1638                           	opt stack 24
  1639                           
  1640                           ;incstack = 0
  1641                           ;lcd_write_nibble@nibble stored from wreg
  1642  000E22  0100               	movlb	0	; () banked
  1643  000E24  6F62               	movwf	lcd_write_nibble@nibble& (0+255),b
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;lcd_driver.c: 179: { LATDbits.LATD2 = is_data; };
  1647  000E26  0100               	movlb	0	; () banked
  1648  000E28  B160               	btfsc	lcd_write_nibble@is_data& (0+255),0,b
  1649  000E2A  D002               	bra	u1095
  1650  000E2C  948C               	bcf	3980,2,c	;volatile
  1651  000E2E  D001               	bra	u1096
  1652  000E30                     u1095:
  1653  000E30  848C               	bsf	3980,2,c	;volatile
  1654  000E32                     u1096:
  1655                           
  1656                           ;lcd_driver.c: 180: { _delay((unsigned long)((100)*(4000000/4000000.0))); };
  1657  000E32  0E21               	movlw	33
  1658  000E34                     u1597:
  1659  000E34  2EE8               	decfsz	wreg,f,c
  1660  000E36  D7FE               	goto	u1597
  1661  000E38  F000               	nop	
  1662                           
  1663                           ;lcd_driver.c: 181: { LATDbits.LATD4 = nibble & 1; LATDbits.LATD5 = (nibble & 2) >> 1; L
      +                          ATDbits.LATD6 = (nibble & 4) >> 2; LATDbits.LATD7 = (nibble & 8) >> 3; };
  1664  000E3A  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1665  000E3E  0E01               	movlw	1
  1666  000E40  0100               	movlb	0	; () banked
  1667  000E42  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1668  000E44  0100               	movlb	0	; () banked
  1669  000E46  3B61               	swapf	??_lcd_write_nibble& (0+255),f,b
  1670  000E48  508C               	movf	3980,w,c	;volatile
  1671  000E4A  0100               	movlb	0	; () banked
  1672  000E4C  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1673  000E4E  0BEF               	andlw	-17
  1674  000E50  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1675  000E52  6E8C               	movwf	3980,c	;volatile
  1676                           
  1677                           ; BSR set to: 0
  1678  000E54  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1679  000E58  0100               	movlb	0	; () banked
  1680  000E5A  90D8               	bcf	status,0,c
  1681  000E5C  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1682  000E5E  0E01               	movlw	1
  1683  000E60  0100               	movlb	0	; () banked
  1684  000E62  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1685  000E64  0100               	movlb	0	; () banked
  1686  000E66  3B61               	swapf	??_lcd_write_nibble& (0+255),f,b
  1687  000E68  4761               	rlncf	??_lcd_write_nibble& (0+255),f,b
  1688  000E6A  508C               	movf	3980,w,c	;volatile
  1689  000E6C  0100               	movlb	0	; () banked
  1690  000E6E  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1691  000E70  0BDF               	andlw	-33
  1692  000E72  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1693  000E74  6E8C               	movwf	3980,c	;volatile
  1694                           
  1695                           ; BSR set to: 0
  1696  000E76  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1697  000E7A  0100               	movlb	0	; () banked
  1698  000E7C  90D8               	bcf	status,0,c
  1699  000E7E  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1700  000E80  0100               	movlb	0	; () banked
  1701  000E82  90D8               	bcf	status,0,c
  1702  000E84  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1703  000E86  0E01               	movlw	1
  1704  000E88  0100               	movlb	0	; () banked
  1705  000E8A  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1706  000E8C  0100               	movlb	0	; () banked
  1707  000E8E  3B61               	swapf	??_lcd_write_nibble& (0+255),f,b
  1708  000E90  4761               	rlncf	??_lcd_write_nibble& (0+255),f,b
  1709  000E92  4761               	rlncf	??_lcd_write_nibble& (0+255),f,b
  1710  000E94  508C               	movf	3980,w,c	;volatile
  1711  000E96  0100               	movlb	0	; () banked
  1712  000E98  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1713  000E9A  0BBF               	andlw	-65
  1714  000E9C  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1715  000E9E  6E8C               	movwf	3980,c	;volatile
  1716                           
  1717                           ; BSR set to: 0
  1718  000EA0  C062  F061         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1719  000EA4  0100               	movlb	0	; () banked
  1720  000EA6  90D8               	bcf	status,0,c
  1721  000EA8  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1722  000EAA  0100               	movlb	0	; () banked
  1723  000EAC  90D8               	bcf	status,0,c
  1724  000EAE  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1725  000EB0  0100               	movlb	0	; () banked
  1726  000EB2  90D8               	bcf	status,0,c
  1727  000EB4  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1728  000EB6  0E01               	movlw	1
  1729  000EB8  0100               	movlb	0	; () banked
  1730  000EBA  1761               	andwf	??_lcd_write_nibble& (0+255),f,b
  1731  000EBC  0100               	movlb	0	; () banked
  1732  000EBE  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1733  000EC0  3361               	rrcf	??_lcd_write_nibble& (0+255),f,b
  1734  000EC2  508C               	movf	3980,w,c	;volatile
  1735  000EC4  0100               	movlb	0	; () banked
  1736  000EC6  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1737  000EC8  0B7F               	andlw	-129
  1738  000ECA  1961               	xorwf	??_lcd_write_nibble& (0+255),w,b
  1739  000ECC  6E8C               	movwf	3980,c	;volatile
  1740                           
  1741                           ; BSR set to: 0
  1742                           ;lcd_driver.c: 182: { LATDbits.LATD3 = 1; { _delay((unsigned long)((200)*(4000000/400000
      +                          0.0))); }; LATDbits.LATD3 = 0; { _delay((unsigned long)((500)*(4000000/4000000.0))); }; 
      +                          };
  1743  000ECE  868C               	bsf	3980,3,c	;volatile
  1744                           
  1745                           ; BSR set to: 0
  1746  000ED0  0E42               	movlw	66
  1747  000ED2                     u1607:
  1748  000ED2  2EE8               	decfsz	wreg,f,c
  1749  000ED4  D7FE               	goto	u1607
  1750  000ED6  D000               	nop2		;nop
  1751  000ED8  968C               	bcf	3980,3,c	;volatile
  1752  000EDA  0EA6               	movlw	166
  1753  000EDC                     u1617:
  1754  000EDC  2EE8               	decfsz	wreg,f,c
  1755  000EDE  D7FE               	goto	u1617
  1756  000EE0  D000               	nop2		;nop
  1757  000EE2  0012               	return	
  1758  000EE4                     __end_of_lcd_write_nibble:
  1759                           	opt stack 0
  1760                           tblptru	equ	0xFF8
  1761                           tblptrh	equ	0xFF7
  1762                           tblptrl	equ	0xFF6
  1763                           tablat	equ	0xFF5
  1764                           prodh	equ	0xFF4
  1765                           prodl	equ	0xFF3
  1766                           intcon	equ	0xFF2
  1767                           postinc0	equ	0xFEE
  1768                           wreg	equ	0xFE8
  1769                           indf1	equ	0xFE7
  1770                           fsr1h	equ	0xFE2
  1771                           fsr1l	equ	0xFE1
  1772                           indf2	equ	0xFDF
  1773                           fsr2h	equ	0xFDA
  1774                           fsr2l	equ	0xFD9
  1775                           status	equ	0xFD8
  1776                           
  1777 ;; *************** function _OpenUSART *****************
  1778 ;; Defined at:
  1779 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;  config          1    wreg     unsigned char 
  1782 ;;  spbrg           2    0[BANK0 ] unsigned int 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;  config          1    5[BANK0 ] unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;		None               void
  1787 ;; Registers used:
  1788 ;;		wreg, status,2
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1794 ;;      Params:         0       2       0       0       0       0       0       0       0
  1795 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1796 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1797 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1798 ;;Total ram usage:        6 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    5
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_main
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           	psect	text8
  1809  000F7E                     __ptext8:
  1810                           	opt stack 0
  1811  000F7E                     _OpenUSART:
  1812                           	opt stack 25
  1813                           
  1814                           ;incstack = 0
  1815                           ;OpenUSART@config stored from wreg
  1816  000F7E  0100               	movlb	0	; () banked
  1817  000F80  6F65               	movwf	OpenUSART@config& (0+255),b
  1818                           
  1819                           ; BSR set to: 0
  1820  000F82  0E00               	movlw	0
  1821  000F84  6EAC               	movwf	4012,c	;volatile
  1822  000F86  0E00               	movlw	0
  1823  000F88  6EAB               	movwf	4011,c	;volatile
  1824                           
  1825                           ; BSR set to: 0
  1826  000F8A  0100               	movlb	0	; () banked
  1827  000F8C  B165               	btfsc	OpenUSART@config& (0+255),0,b
  1828                           
  1829                           ; BSR set to: 0
  1830  000F8E  88AC               	bsf	4012,4,c	;volatile
  1831                           
  1832                           ; BSR set to: 0
  1833                           
  1834                           ; BSR set to: 0
  1835  000F90  0100               	movlb	0	; () banked
  1836  000F92  A365               	btfss	OpenUSART@config& (0+255),1,b
  1837  000F94  D002               	goto	l1797
  1838                           
  1839                           ; BSR set to: 0
  1840  000F96  8CAC               	bsf	4012,6,c	;volatile
  1841  000F98  8CAB               	bsf	4011,6,c	;volatile
  1842  000F9A                     l1797:
  1843                           
  1844                           ; BSR set to: 0
  1845  000F9A  0100               	movlb	0	; () banked
  1846  000F9C  B565               	btfsc	OpenUSART@config& (0+255),2,b
  1847                           
  1848                           ; BSR set to: 0
  1849  000F9E  8EAC               	bsf	4012,7,c	;volatile
  1850                           
  1851                           ; BSR set to: 0
  1852                           
  1853                           ; BSR set to: 0
  1854  000FA0  0100               	movlb	0	; () banked
  1855  000FA2  A765               	btfss	OpenUSART@config& (0+255),3,b
  1856  000FA4  D002               	goto	l210
  1857                           
  1858                           ; BSR set to: 0
  1859  000FA6  88AB               	bsf	4011,4,c	;volatile
  1860  000FA8  D001               	goto	l1805
  1861  000FAA                     l210:
  1862                           
  1863                           ; BSR set to: 0
  1864  000FAA  8AAB               	bsf	4011,5,c	;volatile
  1865  000FAC                     l1805:
  1866                           
  1867                           ; BSR set to: 0
  1868  000FAC  0100               	movlb	0	; () banked
  1869  000FAE  B965               	btfsc	OpenUSART@config& (0+255),4,b
  1870                           
  1871                           ; BSR set to: 0
  1872  000FB0  84AC               	bsf	4012,2,c	;volatile
  1873                           
  1874                           ; BSR set to: 0
  1875  000FB2  989E               	bcf	3998,4,c	;volatile
  1876                           
  1877                           ; BSR set to: 0
  1878  000FB4  0100               	movlb	0	; () banked
  1879  000FB6  BB65               	btfsc	OpenUSART@config& (0+255),5,b
  1880                           
  1881                           ; BSR set to: 0
  1882  000FB8  86AB               	bsf	4011,3,c	;volatile
  1883                           
  1884                           ; BSR set to: 0
  1885                           
  1886                           ; BSR set to: 0
  1887  000FBA  0100               	movlb	0	; () banked
  1888  000FBC  AD65               	btfss	OpenUSART@config& (0+255),6,b
  1889  000FBE  D002               	goto	l214
  1890                           
  1891                           ; BSR set to: 0
  1892  000FC0  8A9D               	bsf	3997,5,c	;volatile
  1893  000FC2  D001               	goto	l215
  1894  000FC4                     l214:
  1895                           
  1896                           ; BSR set to: 0
  1897  000FC4  9A9D               	bcf	3997,5,c	;volatile
  1898  000FC6                     l215:
  1899                           
  1900                           ; BSR set to: 0
  1901  000FC6  9A9E               	bcf	3998,5,c	;volatile
  1902                           
  1903                           ; BSR set to: 0
  1904  000FC8  0100               	movlb	0	; () banked
  1905  000FCA  AF65               	btfss	OpenUSART@config& (0+255),7,b
  1906  000FCC  D002               	goto	l216
  1907                           
  1908                           ; BSR set to: 0
  1909  000FCE  889D               	bsf	3997,4,c	;volatile
  1910  000FD0  D001               	goto	l217
  1911  000FD2                     l216:
  1912                           
  1913                           ; BSR set to: 0
  1914  000FD2  989D               	bcf	3997,4,c	;volatile
  1915  000FD4                     l217:
  1916                           
  1917                           ; BSR set to: 0
  1918  000FD4  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1919                           
  1920                           ; BSR set to: 0
  1921  000FD8  0100               	movlb	0	; () banked
  1922  000FDA  C061  F062         	movff	OpenUSART@spbrg+1,??_OpenUSART
  1923  000FDE  C062  F063         	movff	??_OpenUSART,??_OpenUSART+1
  1924  000FE2  0100               	movlb	0	; () banked
  1925  000FE4  6B64               	clrf	(??_OpenUSART+2)& (0+255),b
  1926  000FE6  0100               	movlb	0	; () banked
  1927  000FE8  5163               	movf	(??_OpenUSART+1)& (0+255),w,b
  1928  000FEA  6EB0               	movwf	4016,c	;volatile
  1929                           
  1930                           ; BSR set to: 0
  1931  000FEC  8AAC               	bsf	4012,5,c	;volatile
  1932                           
  1933                           ; BSR set to: 0
  1934  000FEE  8EAB               	bsf	4011,7,c	;volatile
  1935                           
  1936                           ; BSR set to: 0
  1937  000FF0  9C94               	bcf	3988,6,c	;volatile
  1938                           
  1939                           ; BSR set to: 0
  1940  000FF2  8E94               	bsf	3988,7,c	;volatile
  1941                           
  1942                           ; BSR set to: 0
  1943  000FF4  B8AC               	btfsc	4012,4,c	;volatile
  1944                           
  1945                           ; BSR set to: 0
  1946  000FF6  BEAC               	btfsc	4012,7,c	;volatile
  1947  000FF8  D001               	goto	l219
  1948                           
  1949                           ; BSR set to: 0
  1950  000FFA  8C94               	bsf	3988,6,c	;volatile
  1951  000FFC                     l219:
  1952                           
  1953                           ; BSR set to: 0
  1954  000FFC  0012               	return	
  1955  000FFE                     __end_of_OpenUSART:
  1956                           	opt stack 0
  1957                           tblptru	equ	0xFF8
  1958                           tblptrh	equ	0xFF7
  1959                           tblptrl	equ	0xFF6
  1960                           tablat	equ	0xFF5
  1961                           prodh	equ	0xFF4
  1962                           prodl	equ	0xFF3
  1963                           intcon	equ	0xFF2
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           indf1	equ	0xFE7
  1967                           fsr1h	equ	0xFE2
  1968                           fsr1l	equ	0xFE1
  1969                           indf2	equ	0xFDF
  1970                           fsr2h	equ	0xFDA
  1971                           fsr2l	equ	0xFD9
  1972                           status	equ	0xFD8
  1973                           
  1974 ;; *************** function _ISR *****************
  1975 ;; Defined at:
  1976 ;;		line 93 in file "main.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;		None
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;		None
  1981 ;; Return value:  Size  Location     Type
  1982 ;;		None               void
  1983 ;; Registers used:
  1984 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1985 ;; Tracked objects:
  1986 ;;		On entry : 0/0
  1987 ;;		On exit  : 0/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1990 ;;      Params:         0       0       0       0       0       0       0       0       0
  1991 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1992 ;;      Temps:         18       0       0       0       0       0       0       0       0
  1993 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1994 ;;Total ram usage:       18 bytes
  1995 ;; Hardware stack levels used:    1
  1996 ;; Hardware stack levels required when called:    4
  1997 ;; This function calls:
  1998 ;;		_ReadUSART
  1999 ;;		_cuentaLetras
  2000 ;;		_lcd_put_blank
  2001 ;;		_putsUSART
  2002 ;;		_strcpy
  2003 ;; This function is called by:
  2004 ;;		Interrupt level 2
  2005 ;; This function uses a non-reentrant model
  2006 ;;
  2007                           
  2008                           	psect	intcode
  2009  000008                     __pintcode:
  2010                           	opt stack 0
  2011  000008                     _ISR:
  2012                           	opt stack 22
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;incstack = 0
  2016  000008  CFFA F03D          	movff	pclath,??_ISR+4
  2017  00000C  CFFB F03E          	movff	pclatu,??_ISR+5
  2018  000010  CFE9 F03F          	movff	fsr0l,??_ISR+6
  2019  000014  ED03  F004         	call	int_func,f	;refresh shadow registers
  2020                           pclatu	equ	0xFFB
  2021                           pclath	equ	0xFFA
  2022                           tblptru	equ	0xFF8
  2023                           tblptrh	equ	0xFF7
  2024                           tblptrl	equ	0xFF6
  2025                           tablat	equ	0xFF5
  2026                           prodh	equ	0xFF4
  2027                           prodl	equ	0xFF3
  2028                           intcon	equ	0xFF2
  2029                           postinc0	equ	0xFEE
  2030                           fsr0l	equ	0xFE9
  2031                           wreg	equ	0xFE8
  2032                           indf1	equ	0xFE7
  2033                           fsr1h	equ	0xFE2
  2034                           fsr1l	equ	0xFE1
  2035                           indf2	equ	0xFDF
  2036                           fsr2h	equ	0xFDA
  2037                           fsr2l	equ	0xFD9
  2038                           status	equ	0xFD8
  2039                           
  2040                           	psect	intcode_body
  2041  000806                     __pintcode_body:
  2042                           	opt stack 22
  2043  000806                     int_func:
  2044                           	opt stack 22
  2045  000806  0006               	pop		; remove dummy address from shadow register refresh
  2046  000808  CFEA F040          	movff	fsr0h,??_ISR+7
  2047  00080C  CFE1 F041          	movff	fsr1l,??_ISR+8
  2048  000810  CFE2 F042          	movff	fsr1h,??_ISR+9
  2049  000814  CFD9 F043          	movff	fsr2l,??_ISR+10
  2050  000818  CFDA F044          	movff	fsr2h,??_ISR+11
  2051  00081C  CFF3 F045          	movff	prodl,??_ISR+12
  2052  000820  CFF4 F046          	movff	prodh,??_ISR+13
  2053  000824  CFF6 F047          	movff	tblptrl,??_ISR+14
  2054  000828  CFF7 F048          	movff	tblptrh,??_ISR+15
  2055  00082C  CFF8 F049          	movff	tblptru,??_ISR+16
  2056  000830  CFF5 F04A          	movff	tablat,??_ISR+17
  2057                           
  2058                           ;main.c: 96: if(PIR1bits.RCIF == 1)
  2059  000834  AA9E               	btfss	3998,5,c	;volatile
  2060  000836  D10F               	goto	i2l99
  2061                           
  2062                           ;main.c: 97: {
  2063                           ;main.c: 98: if(i<200)
  2064  000838  5006               	movf	_i+1,w,c
  2065  00083A  0A80               	xorlw	128
  2066  00083C  6EF3               	movwf	prodl,c
  2067  00083E  0E80               	movlw	128
  2068  000840  5CF3               	subwf	prodl,w,c
  2069  000842  0EC8               	movlw	200
  2070  000844  B4D8               	btfsc	status,2,c
  2071  000846  5C05               	subwf	_i,w,c
  2072  000848  B0D8               	btfsc	status,0,c
  2073  00084A  D0E1               	goto	i2l1679
  2074                           
  2075                           ;main.c: 99: {
  2076                           ;main.c: 101: MessageBuffer[i] = ReadUSART();
  2077  00084C  0101               	movlb	1	; () banked
  2078  00084E  0E00               	movlw	low _MessageBuffer
  2079  000850  2405               	addwf	_i,w,c
  2080  000852  6ED9               	movwf	fsr2l,c
  2081  000854  0101               	movlb	1	; () banked
  2082  000856  0E01               	movlw	high _MessageBuffer
  2083  000858  2006               	addwfc	_i+1,w,c
  2084  00085A  6EDA               	movwf	fsr2h,c
  2085  00085C  EC5F  F009         	call	_ReadUSART	;wreg free
  2086  000860  6EDF               	movwf	indf2,c
  2087                           
  2088                           ;main.c: 102: if(MessageBuffer[i] == 0x0D)
  2089  000862  0101               	movlb	1	; () banked
  2090  000864  0E00               	movlw	low _MessageBuffer
  2091  000866  2405               	addwf	_i,w,c
  2092  000868  6ED9               	movwf	fsr2l,c
  2093  00086A  0101               	movlb	1	; () banked
  2094  00086C  0E01               	movlw	high _MessageBuffer
  2095  00086E  2006               	addwfc	_i+1,w,c
  2096  000870  6EDA               	movwf	fsr2h,c
  2097  000872  0E0D               	movlw	13
  2098  000874  62DF               	cpfseq	indf2,c
  2099  000876  D0C7               	goto	i2l1675
  2100                           
  2101                           ; BSR set to: 1
  2102                           ;main.c: 103: {
  2103                           ;main.c: 104: lcd_put_blank(0,flag_newline, 16);
  2104  000878  C00B  F036         	movff	_flag_newline,lcd_put_blank@y
  2105  00087C  0E10               	movlw	16
  2106  00087E  6E37               	movwf	lcd_put_blank@size,c
  2107  000880  0E00               	movlw	0
  2108  000882  EC4F  F009         	call	_lcd_put_blank
  2109                           
  2110                           ;main.c: 105: switch (flag_newline)
  2111  000886  D094               	goto	i2l1657
  2112  000888                     i2l1627:
  2113                           
  2114                           ;main.c: 109: lcd_upper_row_buffer[k] = 0x00;
  2115  000888  0102               	movlb	2	; () banked
  2116  00088A  0E00               	movlw	low _lcd_upper_row_buffer
  2117  00088C  2407               	addwf	_k,w,c
  2118  00088E  6ED9               	movwf	fsr2l,c
  2119  000890  0102               	movlb	2	; () banked
  2120  000892  0E02               	movlw	high _lcd_upper_row_buffer
  2121  000894  2008               	addwfc	_k+1,w,c
  2122  000896  6EDA               	movwf	fsr2h,c
  2123  000898  0E00               	movlw	0
  2124  00089A  6EDF               	movwf	indf2,c
  2125                           
  2126                           ; BSR set to: 2
  2127  00089C  0607               	decf	_k,f,c
  2128  00089E  A0D8               	btfss	status,0,c
  2129  0008A0  0608               	decf	_k+1,f,c
  2130  0008A2                     i2l1631:
  2131  0008A2  5008               	movf	_k+1,w,c
  2132  0008A4  0A80               	xorlw	128
  2133  0008A6  6EF3               	movwf	prodl,c
  2134  0008A8  0E80               	movlw	128
  2135  0008AA  5CF3               	subwf	prodl,w,c
  2136  0008AC  0E01               	movlw	1
  2137  0008AE  B4D8               	btfsc	status,2,c
  2138  0008B0  5C07               	subwf	_k,w,c
  2139  0008B2  B0D8               	btfsc	status,0,c
  2140  0008B4  D7E9               	goto	i2l1627
  2141                           
  2142                           ;main.c: 110: k = 0;
  2143  0008B6  0E00               	movlw	0
  2144  0008B8  6E08               	movwf	_k+1,c
  2145  0008BA  0E00               	movlw	0
  2146  0008BC  6E07               	movwf	_k,c
  2147                           
  2148                           ;main.c: 111: strcpy(lcd_upper_row_buffer, MessageBuffer);
  2149  0008BE  0102               	movlb	2	; () banked
  2150  0008C0  0E02               	movlw	high _lcd_upper_row_buffer
  2151  0008C2  6E2F               	movwf	strcpy@to+1,c
  2152  0008C4  0102               	movlb	2	; () banked
  2153  0008C6  0E00               	movlw	low _lcd_upper_row_buffer
  2154  0008C8  6E2E               	movwf	strcpy@to,c
  2155  0008CA  0101               	movlb	1	; () banked
  2156  0008CC  0E01               	movlw	high _MessageBuffer
  2157  0008CE  6E31               	movwf	strcpy@from+1,c
  2158  0008D0  0101               	movlb	1	; () banked
  2159  0008D2  0E00               	movlw	low _MessageBuffer
  2160  0008D4  6E30               	movwf	strcpy@from,c
  2161  0008D6  ECFE  F008         	call	_strcpy	;wreg free
  2162                           
  2163                           ;main.c: 112: cantidadLetrasUP = cuentaLetras(MessageBuffer);
  2164  0008DA  0101               	movlb	1	; () banked
  2165  0008DC  0E01               	movlw	high _MessageBuffer
  2166  0008DE  6E2F               	movwf	cuentaLetras@str+1,c
  2167  0008E0  0101               	movlb	1	; () banked
  2168  0008E2  0E00               	movlw	low _MessageBuffer
  2169  0008E4  6E2E               	movwf	cuentaLetras@str,c
  2170  0008E6  EC15  F009         	call	_cuentaLetras	;wreg free
  2171  0008EA  C02E  F003         	movff	?_cuentaLetras,_cantidadLetrasUP
  2172  0008EE  C02F  F004         	movff	?_cuentaLetras+1,_cantidadLetrasUP+1
  2173                           
  2174                           ;main.c: 113: lcd_upper_row_buffer[cantidadLetrasUP - 1] = ' ';
  2175  0008F2  0EFF               	movlw	255
  2176  0008F4  6E39               	movwf	??_ISR& (0+255),c
  2177  0008F6  0EFF               	movlw	255
  2178  0008F8  6E3A               	movwf	(??_ISR+1)& (0+255),c
  2179  0008FA  C003  F03B         	movff	_cantidadLetrasUP,??_ISR+2
  2180  0008FE  C004  F03C         	movff	_cantidadLetrasUP+1,??_ISR+3
  2181  000902  5039               	movf	??_ISR,w,c
  2182  000904  263B               	addwf	??_ISR+2,f,c
  2183  000906  503A               	movf	??_ISR+1,w,c
  2184  000908  223C               	addwfc	??_ISR+3,f,c
  2185  00090A  0102               	movlb	2	; () banked
  2186  00090C  0E00               	movlw	low _lcd_upper_row_buffer
  2187  00090E  243B               	addwf	??_ISR+2,w,c
  2188  000910  6ED9               	movwf	fsr2l,c
  2189  000912  0102               	movlb	2	; () banked
  2190  000914  0E02               	movlw	high _lcd_upper_row_buffer
  2191  000916  D047               	goto	L1
  2192  000918                     i2l1641:
  2193                           
  2194                           ;main.c: 118: lcd_lower_row_buffer[k] = 0x00;
  2195  000918  0103               	movlb	3	; () banked
  2196  00091A  0E00               	movlw	low _lcd_lower_row_buffer
  2197  00091C  2407               	addwf	_k,w,c
  2198  00091E  6ED9               	movwf	fsr2l,c
  2199  000920  0103               	movlb	3	; () banked
  2200  000922  0E03               	movlw	high _lcd_lower_row_buffer
  2201  000924  2008               	addwfc	_k+1,w,c
  2202  000926  6EDA               	movwf	fsr2h,c
  2203  000928  0E00               	movlw	0
  2204  00092A  6EDF               	movwf	indf2,c
  2205                           
  2206                           ; BSR set to: 3
  2207  00092C  0607               	decf	_k,f,c
  2208  00092E  A0D8               	btfss	status,0,c
  2209  000930  0608               	decf	_k+1,f,c
  2210  000932                     i2l1645:
  2211  000932  5008               	movf	_k+1,w,c
  2212  000934  0A80               	xorlw	128
  2213  000936  6EF3               	movwf	prodl,c
  2214  000938  0E80               	movlw	128
  2215  00093A  5CF3               	subwf	prodl,w,c
  2216  00093C  0E01               	movlw	1
  2217  00093E  B4D8               	btfsc	status,2,c
  2218  000940  5C07               	subwf	_k,w,c
  2219  000942  B0D8               	btfsc	status,0,c
  2220  000944  D7E9               	goto	i2l1641
  2221                           
  2222                           ;main.c: 119: k = 0;
  2223  000946  0E00               	movlw	0
  2224  000948  6E08               	movwf	_k+1,c
  2225  00094A  0E00               	movlw	0
  2226  00094C  6E07               	movwf	_k,c
  2227                           
  2228                           ;main.c: 120: strcpy(lcd_lower_row_buffer, MessageBuffer);
  2229  00094E  0103               	movlb	3	; () banked
  2230  000950  0E03               	movlw	high _lcd_lower_row_buffer
  2231  000952  6E2F               	movwf	strcpy@to+1,c
  2232  000954  0103               	movlb	3	; () banked
  2233  000956  0E00               	movlw	low _lcd_lower_row_buffer
  2234  000958  6E2E               	movwf	strcpy@to,c
  2235  00095A  0101               	movlb	1	; () banked
  2236  00095C  0E01               	movlw	high _MessageBuffer
  2237  00095E  6E31               	movwf	strcpy@from+1,c
  2238  000960  0101               	movlb	1	; () banked
  2239  000962  0E00               	movlw	low _MessageBuffer
  2240  000964  6E30               	movwf	strcpy@from,c
  2241  000966  ECFE  F008         	call	_strcpy	;wreg free
  2242                           
  2243                           ;main.c: 121: cantidadLetrasDOWN = cuentaLetras(MessageBuffer);
  2244  00096A  0101               	movlb	1	; () banked
  2245  00096C  0E01               	movlw	high _MessageBuffer
  2246  00096E  6E2F               	movwf	cuentaLetras@str+1,c
  2247  000970  0101               	movlb	1	; () banked
  2248  000972  0E00               	movlw	low _MessageBuffer
  2249  000974  6E2E               	movwf	cuentaLetras@str,c
  2250  000976  EC15  F009         	call	_cuentaLetras	;wreg free
  2251  00097A  C02E  F001         	movff	?_cuentaLetras,_cantidadLetrasDOWN
  2252  00097E  C02F  F002         	movff	?_cuentaLetras+1,_cantidadLetrasDOWN+1
  2253                           
  2254                           ;main.c: 122: lcd_lower_row_buffer[cantidadLetrasDOWN - 1] = ' ';
  2255  000982  0EFF               	movlw	255
  2256  000984  6E39               	movwf	??_ISR& (0+255),c
  2257  000986  0EFF               	movlw	255
  2258  000988  6E3A               	movwf	(??_ISR+1)& (0+255),c
  2259  00098A  C001  F03B         	movff	_cantidadLetrasDOWN,??_ISR+2
  2260  00098E  C002  F03C         	movff	_cantidadLetrasDOWN+1,??_ISR+3
  2261  000992  5039               	movf	??_ISR,w,c
  2262  000994  263B               	addwf	??_ISR+2,f,c
  2263  000996  503A               	movf	??_ISR+1,w,c
  2264  000998  223C               	addwfc	??_ISR+3,f,c
  2265  00099A  0103               	movlb	3	; () banked
  2266  00099C  0E00               	movlw	low _lcd_lower_row_buffer
  2267  00099E  243B               	addwf	??_ISR+2,w,c
  2268  0009A0  6ED9               	movwf	fsr2l,c
  2269  0009A2  0103               	movlb	3	; () banked
  2270  0009A4  0E03               	movlw	high _lcd_lower_row_buffer
  2271  0009A6                     L1:
  2272  0009A6  203C               	addwfc	??_ISR+3,w,c
  2273  0009A8  6EDA               	movwf	fsr2h,c
  2274  0009AA  0E20               	movlw	32
  2275  0009AC  6EDF               	movwf	indf2,c
  2276                           
  2277                           ;main.c: 123: break;
  2278  0009AE  D007               	goto	i2l1659
  2279  0009B0                     i2l1657:
  2280  0009B0  500B               	movf	_flag_newline,w,c
  2281                           
  2282                           ; Switch size 1, requested type "space"
  2283                           ; Number of cases is 2, Range of values is 0 to 1
  2284                           ; switch strategies available:
  2285                           ; Name         Instructions Cycles
  2286                           ; simple_byte            7     4 (average)
  2287                           ;	Chosen strategy is simple_byte
  2288  0009B2  0A00               	xorlw	0	; case 0
  2289  0009B4  B4D8               	btfsc	status,2,c
  2290  0009B6  D775               	goto	i2l1631
  2291  0009B8  0A01               	xorlw	1	; case 1
  2292  0009BA  B4D8               	btfsc	status,2,c
  2293  0009BC  D7BA               	goto	i2l1645
  2294  0009BE                     i2l1659:
  2295                           
  2296                           ;main.c: 125: putsUSART(MessageBuffer);
  2297  0009BE  0101               	movlb	1	; () banked
  2298  0009C0  0E01               	movlw	high _MessageBuffer
  2299  0009C2  6E30               	movwf	putsUSART@data+1,c
  2300  0009C4  0101               	movlb	1	; () banked
  2301  0009C6  0E00               	movlw	low _MessageBuffer
  2302  0009C8  6E2F               	movwf	putsUSART@data,c
  2303  0009CA  EC2C  F009         	call	_putsUSART	;wreg free
  2304                           
  2305                           ;main.c: 127: LATDbits.LATD1 =~ LATDbits.LATD1;
  2306  0009CE  728C               	btg	3980,1,c	;volatile
  2307                           
  2308                           ;main.c: 130: flag_newline^=1;
  2309  0009D0  0E01               	movlw	1
  2310  0009D2  1A0B               	xorwf	_flag_newline,f,c
  2311                           
  2312                           ;main.c: 131: for(;i>0;i--)
  2313  0009D4  D00D               	goto	i2l1669
  2314  0009D6                     i2l1665:
  2315                           
  2316                           ;main.c: 132: MessageBuffer[i] = 0x00;
  2317  0009D6  0101               	movlb	1	; () banked
  2318  0009D8  0E00               	movlw	low _MessageBuffer
  2319  0009DA  2405               	addwf	_i,w,c
  2320  0009DC  6ED9               	movwf	fsr2l,c
  2321  0009DE  0101               	movlb	1	; () banked
  2322  0009E0  0E01               	movlw	high _MessageBuffer
  2323  0009E2  2006               	addwfc	_i+1,w,c
  2324  0009E4  6EDA               	movwf	fsr2h,c
  2325  0009E6  0E00               	movlw	0
  2326  0009E8  6EDF               	movwf	indf2,c
  2327                           
  2328                           ; BSR set to: 1
  2329  0009EA  0605               	decf	_i,f,c
  2330  0009EC  A0D8               	btfss	status,0,c
  2331  0009EE  0606               	decf	_i+1,f,c
  2332  0009F0                     i2l1669:
  2333  0009F0  5006               	movf	_i+1,w,c
  2334  0009F2  0A80               	xorlw	128
  2335  0009F4  6EF3               	movwf	prodl,c
  2336  0009F6  0E80               	movlw	128
  2337  0009F8  5CF3               	subwf	prodl,w,c
  2338  0009FA  0E01               	movlw	1
  2339  0009FC  B4D8               	btfsc	status,2,c
  2340  0009FE  5C05               	subwf	_i,w,c
  2341  000A00  B0D8               	btfsc	status,0,c
  2342  000A02  D7E9               	goto	i2l1665
  2343  000A04  D024               	goto	i2l1687
  2344  000A06                     i2l1675:
  2345                           
  2346                           ;main.c: 135: }
  2347                           ;main.c: 136: i++;
  2348  000A06  4A05               	infsnz	_i,f,c
  2349  000A08  2A06               	incf	_i+1,f,c
  2350                           
  2351                           ;main.c: 137: PIR1bits.RCIF = 0;
  2352  000A0A  9A9E               	bcf	3998,5,c	;volatile
  2353                           
  2354                           ;main.c: 138: }
  2355  000A0C  D024               	goto	i2l99
  2356  000A0E                     i2l1679:
  2357                           
  2358                           ;main.c: 139: else
  2359                           ;main.c: 140: {
  2360                           ;main.c: 142: putsUSART(MessageBuffer);
  2361  000A0E  0101               	movlb	1	; () banked
  2362  000A10  0E01               	movlw	high _MessageBuffer
  2363  000A12  6E30               	movwf	putsUSART@data+1,c
  2364  000A14  0101               	movlb	1	; () banked
  2365  000A16  0E00               	movlw	low _MessageBuffer
  2366  000A18  6E2F               	movwf	putsUSART@data,c
  2367  000A1A  EC2C  F009         	call	_putsUSART	;wreg free
  2368                           
  2369                           ;main.c: 143: for(;i>0;i--)
  2370  000A1E  D00D               	goto	i2l1685
  2371  000A20                     i2l1681:
  2372                           
  2373                           ;main.c: 144: MessageBuffer[i] = 0x00;
  2374  000A20  0101               	movlb	1	; () banked
  2375  000A22  0E00               	movlw	low _MessageBuffer
  2376  000A24  2405               	addwf	_i,w,c
  2377  000A26  6ED9               	movwf	fsr2l,c
  2378  000A28  0101               	movlb	1	; () banked
  2379  000A2A  0E01               	movlw	high _MessageBuffer
  2380  000A2C  2006               	addwfc	_i+1,w,c
  2381  000A2E  6EDA               	movwf	fsr2h,c
  2382  000A30  0E00               	movlw	0
  2383  000A32  6EDF               	movwf	indf2,c
  2384                           
  2385                           ; BSR set to: 1
  2386  000A34  0605               	decf	_i,f,c
  2387  000A36  A0D8               	btfss	status,0,c
  2388  000A38  0606               	decf	_i+1,f,c
  2389  000A3A                     i2l1685:
  2390  000A3A  5006               	movf	_i+1,w,c
  2391  000A3C  0A80               	xorlw	128
  2392  000A3E  6EF3               	movwf	prodl,c
  2393  000A40  0E80               	movlw	128
  2394  000A42  5CF3               	subwf	prodl,w,c
  2395  000A44  0E01               	movlw	1
  2396  000A46  B4D8               	btfsc	status,2,c
  2397  000A48  5C05               	subwf	_i,w,c
  2398  000A4A  B0D8               	btfsc	status,0,c
  2399  000A4C  D7E9               	goto	i2l1681
  2400  000A4E                     i2l1687:
  2401                           
  2402                           ;main.c: 145: i=0;
  2403  000A4E  0E00               	movlw	0
  2404  000A50  6E06               	movwf	_i+1,c
  2405  000A52  0E00               	movlw	0
  2406  000A54  6E05               	movwf	_i,c
  2407  000A56                     i2l99:
  2408  000A56  C04A  FFF5         	movff	??_ISR+17,tablat
  2409  000A5A  C049  FFF8         	movff	??_ISR+16,tblptru
  2410  000A5E  C048  FFF7         	movff	??_ISR+15,tblptrh
  2411  000A62  C047  FFF6         	movff	??_ISR+14,tblptrl
  2412  000A66  C046  FFF4         	movff	??_ISR+13,prodh
  2413  000A6A  C045  FFF3         	movff	??_ISR+12,prodl
  2414  000A6E  C044  FFDA         	movff	??_ISR+11,fsr2h
  2415  000A72  C043  FFD9         	movff	??_ISR+10,fsr2l
  2416  000A76  C042  FFE2         	movff	??_ISR+9,fsr1h
  2417  000A7A  C041  FFE1         	movff	??_ISR+8,fsr1l
  2418  000A7E  C040  FFEA         	movff	??_ISR+7,fsr0h
  2419  000A82  C03F  FFE9         	movff	??_ISR+6,fsr0l
  2420  000A86  C03E  FFFB         	movff	??_ISR+5,pclatu
  2421  000A8A  C03D  FFFA         	movff	??_ISR+4,pclath
  2422  000A8E  0011               	retfie		f
  2423  000A90                     __end_of_ISR:
  2424                           	opt stack 0
  2425                           pclatu	equ	0xFFB
  2426                           pclath	equ	0xFFA
  2427                           tblptru	equ	0xFF8
  2428                           tblptrh	equ	0xFF7
  2429                           tblptrl	equ	0xFF6
  2430                           tablat	equ	0xFF5
  2431                           prodh	equ	0xFF4
  2432                           prodl	equ	0xFF3
  2433                           intcon	equ	0xFF2
  2434                           postinc0	equ	0xFEE
  2435                           fsr0h	equ	0xFEA
  2436                           fsr0l	equ	0xFE9
  2437                           wreg	equ	0xFE8
  2438                           indf1	equ	0xFE7
  2439                           fsr1h	equ	0xFE2
  2440                           fsr1l	equ	0xFE1
  2441                           indf2	equ	0xFDF
  2442                           fsr2h	equ	0xFDA
  2443                           fsr2l	equ	0xFD9
  2444                           status	equ	0xFD8
  2445                           
  2446 ;; *************** function _strcpy *****************
  2447 ;; Defined at:
  2448 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\strcpy.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  to              2    0[COMRAM] PTR unsigned char 
  2451 ;;		 -> lcd_lower_row_buffer(200), lcd_upper_row_buffer(200), 
  2452 ;;  from            2    2[COMRAM] PTR const unsigned char 
  2453 ;;		 -> MessageBuffer(200), 
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;  cp              2    4[COMRAM] PTR unsigned char 
  2456 ;;		 -> lcd_lower_row_buffer(200), lcd_upper_row_buffer(200), 
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  2    0[COMRAM] PTR unsigned char 
  2459 ;; Registers used:
  2460 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2466 ;;      Params:         4       0       0       0       0       0       0       0       0
  2467 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2468 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2469 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2470 ;;Total ram usage:        6 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; This function calls:
  2473 ;;		Nothing
  2474 ;; This function is called by:
  2475 ;;		_ISR
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           	psect	text10
  2480  0011FC                     __ptext10:
  2481                           	opt stack 0
  2482  0011FC                     _strcpy:
  2483                           	opt stack 25
  2484                           
  2485                           ;incstack = 0
  2486  0011FC  C02F  F033         	movff	strcpy@to+1,strcpy@cp+1
  2487  001200  C02E  F032         	movff	strcpy@to,strcpy@cp
  2488  001204  D004               	goto	i2l1539
  2489  001206                     i2l1537:
  2490  001206  4A32               	infsnz	strcpy@cp,f,c
  2491  001208  2A33               	incf	strcpy@cp+1,f,c
  2492  00120A  4A30               	infsnz	strcpy@from,f,c
  2493  00120C  2A31               	incf	strcpy@from+1,f,c
  2494  00120E                     i2l1539:
  2495  00120E  C030  FFD9         	movff	strcpy@from,fsr2l
  2496  001212  C031  FFDA         	movff	strcpy@from+1,fsr2h
  2497  001216  C032  FFE1         	movff	strcpy@cp,fsr1l
  2498  00121A  C033  FFE2         	movff	strcpy@cp+1,fsr1h
  2499  00121E  CFDF FFE7          	movff	indf2,indf1
  2500  001222  50E7               	movf	indf1,w,c
  2501  001224  B4D8               	btfsc	status,2,c
  2502                           
  2503                           ;	Return value of _strcpy is never used
  2504  001226  0012               	return	
  2505  001228  D7EE               	goto	i2l1537
  2506  00122A                     __end_of_strcpy:
  2507                           	opt stack 0
  2508                           pclatu	equ	0xFFB
  2509                           pclath	equ	0xFFA
  2510                           tblptru	equ	0xFF8
  2511                           tblptrh	equ	0xFF7
  2512                           tblptrl	equ	0xFF6
  2513                           tablat	equ	0xFF5
  2514                           prodh	equ	0xFF4
  2515                           prodl	equ	0xFF3
  2516                           intcon	equ	0xFF2
  2517                           postinc0	equ	0xFEE
  2518                           fsr0h	equ	0xFEA
  2519                           fsr0l	equ	0xFE9
  2520                           wreg	equ	0xFE8
  2521                           indf1	equ	0xFE7
  2522                           fsr1h	equ	0xFE2
  2523                           fsr1l	equ	0xFE1
  2524                           indf2	equ	0xFDF
  2525                           fsr2h	equ	0xFDA
  2526                           fsr2l	equ	0xFD9
  2527                           status	equ	0xFD8
  2528                           
  2529 ;; *************** function _putsUSART *****************
  2530 ;; Defined at:
  2531 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\uputs.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;  data            2    1[COMRAM] PTR unsigned char 
  2534 ;;		 -> MessageBuffer(200), 
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;		None
  2537 ;; Return value:  Size  Location     Type
  2538 ;;		None               void
  2539 ;; Registers used:
  2540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2546 ;;      Params:         2       0       0       0       0       0       0       0       0
  2547 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2548 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2549 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2550 ;;Total ram usage:        2 bytes
  2551 ;; Hardware stack levels used:    1
  2552 ;; Hardware stack levels required when called:    1
  2553 ;; This function calls:
  2554 ;;		_WriteUSART
  2555 ;; This function is called by:
  2556 ;;		_ISR
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           	psect	text11
  2561  001258                     __ptext11:
  2562                           	opt stack 0
  2563  001258                     _putsUSART:
  2564                           	opt stack 24
  2565  001258                     i2l227:
  2566  001258  A2AC               	btfss	4012,1,c	;volatile
  2567  00125A  D7FE               	goto	i2l227
  2568  00125C  C02F  FFD9         	movff	putsUSART@data,fsr2l
  2569  001260  C030  FFDA         	movff	putsUSART@data+1,fsr2h
  2570  001264  50DF               	movf	indf2,w,c
  2571  001266  EC7B  F009         	call	_WriteUSART
  2572  00126A  C02F  FFD9         	movff	putsUSART@data,fsr2l
  2573  00126E  C030  FFDA         	movff	putsUSART@data+1,fsr2h
  2574  001272  4A2F               	infsnz	putsUSART@data,f,c
  2575  001274  2A30               	incf	putsUSART@data+1,f,c
  2576  001276  50DF               	movf	indf2,w,c
  2577  001278  B4D8               	btfsc	status,2,c
  2578  00127A  0012               	return	
  2579  00127C  D7ED               	goto	i2l227
  2580  00127E                     __end_of_putsUSART:
  2581                           	opt stack 0
  2582                           pclatu	equ	0xFFB
  2583                           pclath	equ	0xFFA
  2584                           tblptru	equ	0xFF8
  2585                           tblptrh	equ	0xFF7
  2586                           tblptrl	equ	0xFF6
  2587                           tablat	equ	0xFF5
  2588                           prodh	equ	0xFF4
  2589                           prodl	equ	0xFF3
  2590                           intcon	equ	0xFF2
  2591                           postinc0	equ	0xFEE
  2592                           fsr0h	equ	0xFEA
  2593                           fsr0l	equ	0xFE9
  2594                           wreg	equ	0xFE8
  2595                           indf1	equ	0xFE7
  2596                           fsr1h	equ	0xFE2
  2597                           fsr1l	equ	0xFE1
  2598                           indf2	equ	0xFDF
  2599                           fsr2h	equ	0xFDA
  2600                           fsr2l	equ	0xFD9
  2601                           status	equ	0xFD8
  2602                           
  2603 ;; *************** function _WriteUSART *****************
  2604 ;; Defined at:
  2605 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;  data            1    wreg     unsigned char 
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;  data            1    0[COMRAM] unsigned char 
  2610 ;; Return value:  Size  Location     Type
  2611 ;;		None               void
  2612 ;; Registers used:
  2613 ;;		wreg
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2619 ;;      Params:         0       0       0       0       0       0       0       0       0
  2620 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2621 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2622 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2623 ;;Total ram usage:        1 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; This function calls:
  2626 ;;		Nothing
  2627 ;; This function is called by:
  2628 ;;		_putsUSART
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text12
  2633  0012F6                     __ptext12:
  2634                           	opt stack 0
  2635  0012F6                     _WriteUSART:
  2636                           	opt stack 24
  2637                           
  2638                           ;incstack = 0
  2639                           ;WriteUSART@data stored from wreg
  2640  0012F6  6E2E               	movwf	WriteUSART@data,c
  2641  0012F8  ACAC               	btfss	4012,6,c	;volatile
  2642  0012FA  D003               	goto	i2l1373
  2643  0012FC  90AC               	bcf	4012,0,c	;volatile
  2644  0012FE  B209               	btfsc	_USART_Status,1,c
  2645  001300  80AC               	bsf	4012,0,c	;volatile
  2646  001302                     i2l1373:
  2647  001302  C02E  FFAD         	movff	WriteUSART@data,4013	;volatile
  2648  001306  0012               	return	
  2649  001308                     __end_of_WriteUSART:
  2650                           	opt stack 0
  2651                           pclatu	equ	0xFFB
  2652                           pclath	equ	0xFFA
  2653                           tblptru	equ	0xFF8
  2654                           tblptrh	equ	0xFF7
  2655                           tblptrl	equ	0xFF6
  2656                           tablat	equ	0xFF5
  2657                           prodh	equ	0xFF4
  2658                           prodl	equ	0xFF3
  2659                           intcon	equ	0xFF2
  2660                           postinc0	equ	0xFEE
  2661                           fsr0h	equ	0xFEA
  2662                           fsr0l	equ	0xFE9
  2663                           wreg	equ	0xFE8
  2664                           indf1	equ	0xFE7
  2665                           fsr1h	equ	0xFE2
  2666                           fsr1l	equ	0xFE1
  2667                           indf2	equ	0xFDF
  2668                           fsr2h	equ	0xFDA
  2669                           fsr2l	equ	0xFD9
  2670                           status	equ	0xFD8
  2671                           
  2672 ;; *************** function _lcd_put_blank *****************
  2673 ;; Defined at:
  2674 ;;		line 74 in file "lcd_driver.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;  x               1    wreg     unsigned char 
  2677 ;;  y               1    8[COMRAM] unsigned char 
  2678 ;;  size            1    9[COMRAM] unsigned char 
  2679 ;; Auto vars:     Size  Location     Type
  2680 ;;  x               1   10[COMRAM] unsigned char 
  2681 ;; Return value:  Size  Location     Type
  2682 ;;		None               void
  2683 ;; Registers used:
  2684 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2685 ;; Tracked objects:
  2686 ;;		On entry : 0/0
  2687 ;;		On exit  : 0/0
  2688 ;;		Unchanged: 0/0
  2689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2690 ;;      Params:         2       0       0       0       0       0       0       0       0
  2691 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2692 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2693 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2694 ;;Total ram usage:        3 bytes
  2695 ;; Hardware stack levels used:    1
  2696 ;; Hardware stack levels required when called:    3
  2697 ;; This function calls:
  2698 ;;		i2_lcd_gotoxy
  2699 ;;		i2_lcd_write_byte
  2700 ;; This function is called by:
  2701 ;;		_ISR
  2702 ;; This function uses a non-reentrant model
  2703 ;;
  2704                           
  2705                           	psect	text13
  2706  00129E                     __ptext13:
  2707                           	opt stack 0
  2708  00129E                     _lcd_put_blank:
  2709                           	opt stack 22
  2710                           
  2711                           ;incstack = 0
  2712                           ;lcd_put_blank@x stored from wreg
  2713  00129E  6E38               	movwf	lcd_put_blank@x,c
  2714                           
  2715                           ;lcd_driver.c: 78: lcd_gotoxy(x,y);
  2716  0012A0  C036  F033         	movff	lcd_put_blank@y,i2lcd_gotoxy@y
  2717  0012A4  5038               	movf	lcd_put_blank@x,w,c
  2718  0012A6  ECB0  F008         	call	i2_lcd_gotoxy
  2719                           
  2720                           ;lcd_driver.c: 80: while (size)
  2721  0012AA  D006               	goto	i2l1533
  2722  0012AC                     i2l1529:
  2723                           
  2724                           ;lcd_driver.c: 81: {
  2725                           ;lcd_driver.c: 82: {lcd_write_byte(' ', 1);};
  2726  0012AC  0E01               	movlw	1
  2727  0012AE  6E31               	movwf	i2lcd_write_byte@is_data,c
  2728  0012B0  0E20               	movlw	32
  2729  0012B2  EC6E  F009         	call	i2_lcd_write_byte
  2730                           
  2731                           ;lcd_driver.c: 83: size--;
  2732  0012B6  0637               	decf	lcd_put_blank@size,f,c
  2733  0012B8                     i2l1533:
  2734  0012B8  6637               	tstfsz	lcd_put_blank@size,c
  2735  0012BA  D7F8               	goto	i2l1529
  2736  0012BC  0012               	return	
  2737  0012BE                     __end_of_lcd_put_blank:
  2738                           	opt stack 0
  2739                           pclatu	equ	0xFFB
  2740                           pclath	equ	0xFFA
  2741                           tblptru	equ	0xFF8
  2742                           tblptrh	equ	0xFF7
  2743                           tblptrl	equ	0xFF6
  2744                           tablat	equ	0xFF5
  2745                           prodh	equ	0xFF4
  2746                           prodl	equ	0xFF3
  2747                           intcon	equ	0xFF2
  2748                           postinc0	equ	0xFEE
  2749                           fsr0h	equ	0xFEA
  2750                           fsr0l	equ	0xFE9
  2751                           wreg	equ	0xFE8
  2752                           indf1	equ	0xFE7
  2753                           fsr1h	equ	0xFE2
  2754                           fsr1l	equ	0xFE1
  2755                           indf2	equ	0xFDF
  2756                           fsr2h	equ	0xFDA
  2757                           fsr2l	equ	0xFD9
  2758                           status	equ	0xFD8
  2759                           
  2760 ;; *************** function i2_lcd_gotoxy *****************
  2761 ;; Defined at:
  2762 ;;		line 54 in file "lcd_driver.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;  x               1    wreg     unsigned char 
  2765 ;;  y               1    5[COMRAM] unsigned char 
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;  x               1    7[COMRAM] unsigned char 
  2768 ;;  lcd_gotoxy      1    6[COMRAM] unsigned char 
  2769 ;; Return value:  Size  Location     Type
  2770 ;;		None               void
  2771 ;; Registers used:
  2772 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2773 ;; Tracked objects:
  2774 ;;		On entry : 0/0
  2775 ;;		On exit  : 0/0
  2776 ;;		Unchanged: 0/0
  2777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2778 ;;      Params:         1       0       0       0       0       0       0       0       0
  2779 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2780 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2781 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2782 ;;Total ram usage:        3 bytes
  2783 ;; Hardware stack levels used:    1
  2784 ;; Hardware stack levels required when called:    2
  2785 ;; This function calls:
  2786 ;;		i2_lcd_write_byte
  2787 ;; This function is called by:
  2788 ;;		_lcd_put_blank
  2789 ;; This function uses a non-reentrant model
  2790 ;;
  2791                           
  2792                           	psect	text14
  2793  001160                     __ptext14:
  2794                           	opt stack 0
  2795  001160                     i2_lcd_gotoxy:
  2796                           	opt stack 22
  2797                           
  2798                           ;incstack = 0
  2799                           ;i2lcd_gotoxy@x stored from wreg
  2800  001160  6E35               	movwf	i2lcd_gotoxy@x,c
  2801                           
  2802                           ;lcd_driver.c: 57: uint8_t addr;
  2803                           ;lcd_driver.c: 59: if ((y > 3) || (x > 19))
  2804  001162  0E04               	movlw	4
  2805  001164  5C33               	subwf	i2lcd_gotoxy@y,w,c
  2806  001166  B0D8               	btfsc	status,0,c
  2807  001168  D02B               	goto	i2l138
  2808  00116A  0E13               	movlw	19
  2809  00116C  6435               	cpfsgt	i2lcd_gotoxy@x,c
  2810  00116E  D001               	goto	i2l135
  2811  001170  D027               	goto	i2l138
  2812  001172                     i2l135:
  2813                           
  2814                           ;lcd_driver.c: 62: }
  2815                           ;lcd_driver.c: 63: lcd_x = x;
  2816  001172  C035  F00C         	movff	i2lcd_gotoxy@x,_lcd_x
  2817                           
  2818                           ;lcd_driver.c: 64: lcd_y = y;
  2819  001176  C033  F00D         	movff	i2lcd_gotoxy@y,_lcd_y
  2820                           
  2821                           ;lcd_driver.c: 65: addr = x;
  2822  00117A  C035  F034         	movff	i2lcd_gotoxy@x,i2lcd_gotoxy@addr
  2823                           
  2824                           ;lcd_driver.c: 66: addr += LCD_ROW_ADDRESS[y];
  2825  00117E  5033               	movf	i2lcd_gotoxy@y,w,c
  2826  001180  0D01               	mullw	1
  2827  001182  0E01               	movlw	low _LCD_ROW_ADDRESS
  2828  001184  24F3               	addwf	prodl,w,c
  2829  001186  6EF6               	movwf	tblptrl,c
  2830  001188  0E08               	movlw	high _LCD_ROW_ADDRESS
  2831  00118A  20F4               	addwfc	prodh,w,c
  2832  00118C  6EF7               	movwf	tblptrh,c
  2833  00118E                     	if	0	;There are less than 3 active tblptr bytes
  2834  00118E                     	endif
  2835  00118E  0008               	tblrd		*
  2836  001190  50F5               	movf	tablat,w,c
  2837  001192  2634               	addwf	i2lcd_gotoxy@addr,f,c
  2838                           
  2839                           ;lcd_driver.c: 67: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  2840  001194  0EFA               	movlw	250
  2841  001196                     i2u162_47:
  2842  001196  F000               	nop	
  2843  001198  2EE8               	decfsz	wreg,f,c
  2844  00119A  D7FD               	goto	i2u162_47
  2845                           
  2846                           ;lcd_driver.c: 68: lcd_write_byte(addr, 0);
  2847  00119C  0E00               	movlw	0
  2848  00119E  6E31               	movwf	i2lcd_write_byte@is_data,c
  2849  0011A0  5034               	movf	i2lcd_gotoxy@addr,w,c
  2850  0011A2  EC6E  F009         	call	i2_lcd_write_byte
  2851                           
  2852                           ;lcd_driver.c: 69: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  2853  0011A6  0EFA               	movlw	250
  2854  0011A8                     i2u163_47:
  2855  0011A8  F000               	nop	
  2856  0011AA  2EE8               	decfsz	wreg,f,c
  2857  0011AC  D7FD               	goto	i2u163_47
  2858                           
  2859                           ;lcd_driver.c: 70: lcd_write_byte(addr, 0);
  2860  0011AE  0E00               	movlw	0
  2861  0011B0  6E31               	movwf	i2lcd_write_byte@is_data,c
  2862  0011B2  5034               	movf	i2lcd_gotoxy@addr,w,c
  2863  0011B4  EC6E  F009         	call	i2_lcd_write_byte
  2864                           
  2865                           ;lcd_driver.c: 71: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  2866  0011B8  0EFA               	movlw	250
  2867  0011BA                     i2u164_47:
  2868  0011BA  F000               	nop	
  2869  0011BC  2EE8               	decfsz	wreg,f,c
  2870  0011BE  D7FD               	goto	i2u164_47
  2871  0011C0                     i2l138:
  2872  0011C0  0012               	return	
  2873  0011C2                     __end_ofi2_lcd_gotoxy:
  2874                           	opt stack 0
  2875                           pclatu	equ	0xFFB
  2876                           pclath	equ	0xFFA
  2877                           tblptru	equ	0xFF8
  2878                           tblptrh	equ	0xFF7
  2879                           tblptrl	equ	0xFF6
  2880                           tablat	equ	0xFF5
  2881                           prodh	equ	0xFF4
  2882                           prodl	equ	0xFF3
  2883                           intcon	equ	0xFF2
  2884                           postinc0	equ	0xFEE
  2885                           fsr0h	equ	0xFEA
  2886                           fsr0l	equ	0xFE9
  2887                           wreg	equ	0xFE8
  2888                           indf1	equ	0xFE7
  2889                           fsr1h	equ	0xFE2
  2890                           fsr1l	equ	0xFE1
  2891                           indf2	equ	0xFDF
  2892                           fsr2h	equ	0xFDA
  2893                           fsr2l	equ	0xFD9
  2894                           status	equ	0xFD8
  2895                           
  2896 ;; *************** function i2_lcd_write_byte *****************
  2897 ;; Defined at:
  2898 ;;		line 185 in file "lcd_driver.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;  byte            1    wreg     unsigned char 
  2901 ;;  is_data         1    3[COMRAM] unsigned char 
  2902 ;; Auto vars:     Size  Location     Type
  2903 ;;  byte            1    4[COMRAM] unsigned char 
  2904 ;; Return value:  Size  Location     Type
  2905 ;;		None               void
  2906 ;; Registers used:
  2907 ;;		wreg, status,2, status,0, cstack
  2908 ;; Tracked objects:
  2909 ;;		On entry : 0/0
  2910 ;;		On exit  : 0/0
  2911 ;;		Unchanged: 0/0
  2912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2913 ;;      Params:         1       0       0       0       0       0       0       0       0
  2914 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2915 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2916 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2917 ;;Total ram usage:        2 bytes
  2918 ;; Hardware stack levels used:    1
  2919 ;; Hardware stack levels required when called:    1
  2920 ;; This function calls:
  2921 ;;		i2_lcd_write_nibble
  2922 ;; This function is called by:
  2923 ;;		_lcd_put_blank
  2924 ;;		i2_lcd_gotoxy
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928                           	psect	text15
  2929  0012DC                     __ptext15:
  2930                           	opt stack 0
  2931  0012DC                     i2_lcd_write_byte:
  2932                           	opt stack 23
  2933                           
  2934                           ;incstack = 0
  2935                           ;i2lcd_write_byte@byte stored from wreg
  2936  0012DC  6E32               	movwf	i2lcd_write_byte@byte,c
  2937                           
  2938                           ;lcd_driver.c: 188: lcd_write_nibble(byte >> 4, is_data);
  2939  0012DE  C031  F02E         	movff	i2lcd_write_byte@is_data,i2lcd_write_nibble@is_data
  2940  0012E2  3832               	swapf	i2lcd_write_byte@byte,w,c
  2941  0012E4  0B0F               	andlw	15
  2942  0012E6  EC72  F007         	call	i2_lcd_write_nibble
  2943                           
  2944                           ;lcd_driver.c: 189: lcd_write_nibble(byte, is_data);
  2945  0012EA  C031  F02E         	movff	i2lcd_write_byte@is_data,i2lcd_write_nibble@is_data
  2946  0012EE  5032               	movf	i2lcd_write_byte@byte,w,c
  2947  0012F0  EC72  F007         	call	i2_lcd_write_nibble
  2948  0012F4  0012               	return	
  2949  0012F6                     __end_ofi2_lcd_write_byte:
  2950                           	opt stack 0
  2951                           pclatu	equ	0xFFB
  2952                           pclath	equ	0xFFA
  2953                           tblptru	equ	0xFF8
  2954                           tblptrh	equ	0xFF7
  2955                           tblptrl	equ	0xFF6
  2956                           tablat	equ	0xFF5
  2957                           prodh	equ	0xFF4
  2958                           prodl	equ	0xFF3
  2959                           intcon	equ	0xFF2
  2960                           postinc0	equ	0xFEE
  2961                           fsr0h	equ	0xFEA
  2962                           fsr0l	equ	0xFE9
  2963                           wreg	equ	0xFE8
  2964                           indf1	equ	0xFE7
  2965                           fsr1h	equ	0xFE2
  2966                           fsr1l	equ	0xFE1
  2967                           indf2	equ	0xFDF
  2968                           fsr2h	equ	0xFDA
  2969                           fsr2l	equ	0xFD9
  2970                           status	equ	0xFD8
  2971                           
  2972 ;; *************** function i2_lcd_write_nibble *****************
  2973 ;; Defined at:
  2974 ;;		line 176 in file "lcd_driver.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;  nibble          1    wreg     unsigned char 
  2977 ;;  is_data         1    0[COMRAM] unsigned char 
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;  nibble          1    2[COMRAM] unsigned char 
  2980 ;; Return value:  Size  Location     Type
  2981 ;;		None               void
  2982 ;; Registers used:
  2983 ;;		wreg, status,2, status,0, cstack
  2984 ;; Tracked objects:
  2985 ;;		On entry : 0/0
  2986 ;;		On exit  : 0/0
  2987 ;;		Unchanged: 0/0
  2988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2989 ;;      Params:         1       0       0       0       0       0       0       0       0
  2990 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2991 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2992 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2993 ;;Total ram usage:        3 bytes
  2994 ;; Hardware stack levels used:    1
  2995 ;; This function calls:
  2996 ;;		Nothing
  2997 ;; This function is called by:
  2998 ;;		i2_lcd_write_byte
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           	psect	text16
  3003  000EE4                     __ptext16:
  3004                           	opt stack 0
  3005  000EE4                     i2_lcd_write_nibble:
  3006                           	opt stack 23
  3007                           
  3008                           ;incstack = 0
  3009                           ;i2lcd_write_nibble@nibble stored from wreg
  3010  000EE4  6E30               	movwf	i2lcd_write_nibble@nibble,c
  3011                           
  3012                           ;lcd_driver.c: 179: { LATDbits.LATD2 = is_data; };
  3013  000EE6  B02E               	btfsc	i2lcd_write_nibble@is_data,0,c
  3014  000EE8  D002               	bra	i2u56_45
  3015  000EEA  948C               	bcf	3980,2,c	;volatile
  3016  000EEC  D001               	bra	i2u56_46
  3017  000EEE                     i2u56_45:
  3018  000EEE  848C               	bsf	3980,2,c	;volatile
  3019  000EF0                     i2u56_46:
  3020                           
  3021                           ;lcd_driver.c: 180: { _delay((unsigned long)((100)*(4000000/4000000.0))); };
  3022  000EF0  0E21               	movlw	33
  3023  000EF2                     i2u165_47:
  3024  000EF2  2EE8               	decfsz	wreg,f,c
  3025  000EF4  D7FE               	goto	i2u165_47
  3026  000EF6  F000               	nop	
  3027                           
  3028                           ;lcd_driver.c: 181: { LATDbits.LATD4 = nibble & 1; LATDbits.LATD5 = (nibble & 2) >> 1; L
      +                          ATDbits.LATD6 = (nibble & 4) >> 2; LATDbits.LATD7 = (nibble & 8) >> 3; };
  3029  000EF8  C030  F02F         	movff	i2lcd_write_nibble@nibble,??i2_lcd_write_nibble
  3030  000EFC  0E01               	movlw	1
  3031  000EFE  162F               	andwf	??i2_lcd_write_nibble,f,c
  3032  000F00  3A2F               	swapf	??i2_lcd_write_nibble,f,c
  3033  000F02  508C               	movf	3980,w,c	;volatile
  3034  000F04  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3035  000F06  0BEF               	andlw	-17
  3036  000F08  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3037  000F0A  6E8C               	movwf	3980,c	;volatile
  3038  000F0C  C030  F02F         	movff	i2lcd_write_nibble@nibble,??i2_lcd_write_nibble
  3039  000F10  90D8               	bcf	status,0,c
  3040  000F12  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3041  000F14  0E01               	movlw	1
  3042  000F16  162F               	andwf	??i2_lcd_write_nibble,f,c
  3043  000F18  3A2F               	swapf	??i2_lcd_write_nibble,f,c
  3044  000F1A  462F               	rlncf	??i2_lcd_write_nibble,f,c
  3045  000F1C  508C               	movf	3980,w,c	;volatile
  3046  000F1E  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3047  000F20  0BDF               	andlw	-33
  3048  000F22  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3049  000F24  6E8C               	movwf	3980,c	;volatile
  3050  000F26  C030  F02F         	movff	i2lcd_write_nibble@nibble,??i2_lcd_write_nibble
  3051  000F2A  90D8               	bcf	status,0,c
  3052  000F2C  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3053  000F2E  90D8               	bcf	status,0,c
  3054  000F30  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3055  000F32  0E01               	movlw	1
  3056  000F34  162F               	andwf	??i2_lcd_write_nibble,f,c
  3057  000F36  3A2F               	swapf	??i2_lcd_write_nibble,f,c
  3058  000F38  462F               	rlncf	??i2_lcd_write_nibble,f,c
  3059  000F3A  462F               	rlncf	??i2_lcd_write_nibble,f,c
  3060  000F3C  508C               	movf	3980,w,c	;volatile
  3061  000F3E  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3062  000F40  0BBF               	andlw	-65
  3063  000F42  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3064  000F44  6E8C               	movwf	3980,c	;volatile
  3065  000F46  C030  F02F         	movff	i2lcd_write_nibble@nibble,??i2_lcd_write_nibble
  3066  000F4A  90D8               	bcf	status,0,c
  3067  000F4C  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3068  000F4E  90D8               	bcf	status,0,c
  3069  000F50  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3070  000F52  90D8               	bcf	status,0,c
  3071  000F54  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3072  000F56  0E01               	movlw	1
  3073  000F58  162F               	andwf	??i2_lcd_write_nibble,f,c
  3074  000F5A  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3075  000F5C  322F               	rrcf	??i2_lcd_write_nibble,f,c
  3076  000F5E  508C               	movf	3980,w,c	;volatile
  3077  000F60  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3078  000F62  0B7F               	andlw	-129
  3079  000F64  182F               	xorwf	??i2_lcd_write_nibble,w,c
  3080  000F66  6E8C               	movwf	3980,c	;volatile
  3081                           
  3082                           ;lcd_driver.c: 182: { LATDbits.LATD3 = 1; { _delay((unsigned long)((200)*(4000000/400000
      +                          0.0))); }; LATDbits.LATD3 = 0; { _delay((unsigned long)((500)*(4000000/4000000.0))); }; 
      +                          };
  3083  000F68  868C               	bsf	3980,3,c	;volatile
  3084  000F6A  0E42               	movlw	66
  3085  000F6C                     i2u166_47:
  3086  000F6C  2EE8               	decfsz	wreg,f,c
  3087  000F6E  D7FE               	goto	i2u166_47
  3088  000F70  D000               	nop2		;nop
  3089  000F72  968C               	bcf	3980,3,c	;volatile
  3090  000F74  0EA6               	movlw	166
  3091  000F76                     i2u167_47:
  3092  000F76  2EE8               	decfsz	wreg,f,c
  3093  000F78  D7FE               	goto	i2u167_47
  3094  000F7A  D000               	nop2		;nop
  3095  000F7C  0012               	return	
  3096  000F7E                     __end_ofi2_lcd_write_nibble:
  3097                           	opt stack 0
  3098                           pclatu	equ	0xFFB
  3099                           pclath	equ	0xFFA
  3100                           tblptru	equ	0xFF8
  3101                           tblptrh	equ	0xFF7
  3102                           tblptrl	equ	0xFF6
  3103                           tablat	equ	0xFF5
  3104                           prodh	equ	0xFF4
  3105                           prodl	equ	0xFF3
  3106                           intcon	equ	0xFF2
  3107                           postinc0	equ	0xFEE
  3108                           fsr0h	equ	0xFEA
  3109                           fsr0l	equ	0xFE9
  3110                           wreg	equ	0xFE8
  3111                           indf1	equ	0xFE7
  3112                           fsr1h	equ	0xFE2
  3113                           fsr1l	equ	0xFE1
  3114                           indf2	equ	0xFDF
  3115                           fsr2h	equ	0xFDA
  3116                           fsr2l	equ	0xFD9
  3117                           status	equ	0xFD8
  3118                           
  3119 ;; *************** function _cuentaLetras *****************
  3120 ;; Defined at:
  3121 ;;		line 152 in file "main.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  str             2    0[COMRAM] PTR unsigned char 
  3124 ;;		 -> MessageBuffer(200), 
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  j               2    2[COMRAM] int 
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  2    0[COMRAM] int 
  3129 ;; Registers used:
  3130 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3136 ;;      Params:         2       0       0       0       0       0       0       0       0
  3137 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3139 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3140 ;;Total ram usage:        4 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; This function calls:
  3143 ;;		Nothing
  3144 ;; This function is called by:
  3145 ;;		_ISR
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           	psect	text17
  3150  00122A                     __ptext17:
  3151                           	opt stack 0
  3152  00122A                     _cuentaLetras:
  3153                           	opt stack 25
  3154                           
  3155                           ;main.c: 154: int j=0;
  3156                           
  3157                           ;incstack = 0
  3158  00122A  0E00               	movlw	0
  3159  00122C  6E31               	movwf	cuentaLetras@j+1,c
  3160  00122E  0E00               	movlw	0
  3161  001230  6E30               	movwf	cuentaLetras@j,c
  3162                           
  3163                           ;main.c: 155: while(str[j]!= 0x0D)
  3164  001232  D002               	goto	i2l1545
  3165  001234                     i2l1543:
  3166                           
  3167                           ;main.c: 156: {
  3168                           ;main.c: 157: j++;
  3169  001234  4A30               	infsnz	cuentaLetras@j,f,c
  3170  001236  2A31               	incf	cuentaLetras@j+1,f,c
  3171  001238                     i2l1545:
  3172  001238  5030               	movf	cuentaLetras@j,w,c
  3173  00123A  242E               	addwf	cuentaLetras@str,w,c
  3174  00123C  6ED9               	movwf	fsr2l,c
  3175  00123E  5031               	movf	cuentaLetras@j+1,w,c
  3176  001240  202F               	addwfc	cuentaLetras@str+1,w,c
  3177  001242  6EDA               	movwf	fsr2h,c
  3178  001244  0E0D               	movlw	13
  3179  001246  62DF               	cpfseq	indf2,c
  3180  001248  D7F5               	goto	i2l1543
  3181                           
  3182                           ;main.c: 158: }
  3183                           ;main.c: 159: return j+1;
  3184  00124A  0E01               	movlw	1
  3185  00124C  2430               	addwf	cuentaLetras@j,w,c
  3186  00124E  6E2E               	movwf	?_cuentaLetras,c
  3187  001250  0E00               	movlw	0
  3188  001252  2031               	addwfc	cuentaLetras@j+1,w,c
  3189  001254  6E2F               	movwf	?_cuentaLetras+1,c
  3190  001256  0012               	return	
  3191  001258                     __end_of_cuentaLetras:
  3192                           	opt stack 0
  3193                           pclatu	equ	0xFFB
  3194                           pclath	equ	0xFFA
  3195                           tblptru	equ	0xFF8
  3196                           tblptrh	equ	0xFF7
  3197                           tblptrl	equ	0xFF6
  3198                           tablat	equ	0xFF5
  3199                           prodh	equ	0xFF4
  3200                           prodl	equ	0xFF3
  3201                           intcon	equ	0xFF2
  3202                           postinc0	equ	0xFEE
  3203                           fsr0h	equ	0xFEA
  3204                           fsr0l	equ	0xFE9
  3205                           wreg	equ	0xFE8
  3206                           indf1	equ	0xFE7
  3207                           fsr1h	equ	0xFE2
  3208                           fsr1l	equ	0xFE1
  3209                           indf2	equ	0xFDF
  3210                           fsr2h	equ	0xFDA
  3211                           fsr2l	equ	0xFD9
  3212                           status	equ	0xFD8
  3213                           
  3214 ;; *************** function _ReadUSART *****************
  3215 ;; Defined at:
  3216 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;		None
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;  data            1    0[COMRAM] unsigned char 
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  1    wreg      unsigned char 
  3223 ;; Registers used:
  3224 ;;		wreg, status,2, status,0
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3230 ;;      Params:         0       0       0       0       0       0       0       0       0
  3231 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3232 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3233 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3234 ;;Total ram usage:        1 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; This function calls:
  3237 ;;		Nothing
  3238 ;; This function is called by:
  3239 ;;		_ISR
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           	psect	text18
  3244  0012BE                     __ptext18:
  3245                           	opt stack 0
  3246  0012BE                     _ReadUSART:
  3247                           	opt stack 25
  3248                           
  3249                           ;incstack = 0
  3250  0012BE  0EF2               	movlw	242
  3251  0012C0  1609               	andwf	_USART_Status,f,c
  3252  0012C2  ACAB               	btfss	4011,6,c	;volatile
  3253  0012C4  D003               	goto	i2l240
  3254  0012C6  9009               	bcf	_USART_Status,0,c
  3255  0012C8  B0AB               	btfsc	4011,0,c	;volatile
  3256  0012CA  8009               	bsf	_USART_Status,0,c
  3257  0012CC                     i2l240:
  3258  0012CC  B4AB               	btfsc	4011,2,c	;volatile
  3259  0012CE  8409               	bsf	_USART_Status,2,c
  3260  0012D0  B2AB               	btfsc	4011,1,c	;volatile
  3261  0012D2  8609               	bsf	_USART_Status,3,c
  3262  0012D4  CFAE F02E          	movff	4014,ReadUSART@data	;volatile
  3263  0012D8  502E               	movf	ReadUSART@data,w,c
  3264  0012DA  0012               	return	
  3265  0012DC                     __end_of_ReadUSART:
  3266                           	opt stack 0
  3267                           pclatu	equ	0xFFB
  3268                           pclath	equ	0xFFA
  3269                           tblptru	equ	0xFF8
  3270                           tblptrh	equ	0xFF7
  3271                           tblptrl	equ	0xFF6
  3272                           tablat	equ	0xFF5
  3273                           prodh	equ	0xFF4
  3274                           prodl	equ	0xFF3
  3275                           intcon	equ	0xFF2
  3276                           postinc0	equ	0xFEE
  3277                           fsr0h	equ	0xFEA
  3278                           fsr0l	equ	0xFE9
  3279                           wreg	equ	0xFE8
  3280                           indf1	equ	0xFE7
  3281                           fsr1h	equ	0xFE2
  3282                           fsr1l	equ	0xFE1
  3283                           indf2	equ	0xFDF
  3284                           fsr2h	equ	0xFDA
  3285                           fsr2l	equ	0xFD9
  3286                           status	equ	0xFD8
  3287                           pclatu	equ	0xFFB
  3288                           pclath	equ	0xFFA
  3289                           tblptru	equ	0xFF8
  3290                           tblptrh	equ	0xFF7
  3291                           tblptrl	equ	0xFF6
  3292                           tablat	equ	0xFF5
  3293                           prodh	equ	0xFF4
  3294                           prodl	equ	0xFF3
  3295                           intcon	equ	0xFF2
  3296                           postinc0	equ	0xFEE
  3297                           fsr0h	equ	0xFEA
  3298                           fsr0l	equ	0xFE9
  3299                           wreg	equ	0xFE8
  3300                           indf1	equ	0xFE7
  3301                           fsr1h	equ	0xFE2
  3302                           fsr1l	equ	0xFE1
  3303                           indf2	equ	0xFDF
  3304                           fsr2h	equ	0xFDA
  3305                           fsr2l	equ	0xFD9
  3306                           status	equ	0xFD8
  3307                           
  3308                           	psect	rparam
  3309  0000                     pclatu	equ	0xFFB
  3310                           pclath	equ	0xFFA
  3311                           tblptru	equ	0xFF8
  3312                           tblptrh	equ	0xFF7
  3313                           tblptrl	equ	0xFF6
  3314                           tablat	equ	0xFF5
  3315                           prodh	equ	0xFF4
  3316                           prodl	equ	0xFF3
  3317                           intcon	equ	0xFF2
  3318                           postinc0	equ	0xFEE
  3319                           fsr0h	equ	0xFEA
  3320                           fsr0l	equ	0xFE9
  3321                           wreg	equ	0xFE8
  3322                           indf1	equ	0xFE7
  3323                           fsr1h	equ	0xFE2
  3324                           fsr1l	equ	0xFE1
  3325                           indf2	equ	0xFDF
  3326                           fsr2h	equ	0xFDA
  3327                           fsr2l	equ	0xFD9
  3328                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        0
    BSS         645
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     29      74
    BANK0           160     15      15
    BANK1           256      0     200
    BANK2           256      0     200
    BANK3           256      0     200
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strncpy@from	PTR const unsigned char  size(2) Largest target is 200
		 -> lcd_lower_row_buffer(BANK3[200]), lcd_upper_row_buffer(BANK2[200]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 16
		 -> lcd_lower_display_buffer(COMRAM[16]), lcd_upper_display_buffer(COMRAM[16]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 16
		 -> lcd_lower_display_buffer(COMRAM[16]), lcd_upper_display_buffer(COMRAM[16]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 200
		 -> MessageBuffer(BANK1[200]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 200
		 -> lcd_lower_row_buffer(BANK3[200]), lcd_upper_row_buffer(BANK2[200]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 200
		 -> lcd_lower_row_buffer(BANK3[200]), lcd_upper_row_buffer(BANK2[200]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 200
		 -> MessageBuffer(BANK1[200]), 

    lcd_puts@str	PTR unsigned char  size(2) Largest target is 16
		 -> lcd_lower_display_buffer(COMRAM[16]), lcd_upper_display_buffer(COMRAM[16]), 

    rotarString@str	PTR unsigned char  size(2) Largest target is 200
		 -> lcd_lower_row_buffer(BANK3[200]), lcd_upper_row_buffer(BANK2[200]), 

    cuentaLetras@str	PTR unsigned char  size(2) Largest target is 200
		 -> MessageBuffer(BANK1[200]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 200
		 -> lcd_lower_row_buffer(BANK3[200]), lcd_upper_row_buffer(BANK2[200]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 16
		 -> lcd_lower_display_buffer(COMRAM[16]), lcd_upper_display_buffer(COMRAM[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_lcd_put_blank
    _putsUSART->_WriteUSART
    _lcd_put_blank->i2_lcd_gotoxy
    i2_lcd_gotoxy->i2_lcd_write_byte
    i2_lcd_write_byte->i2_lcd_write_nibble

Critical Paths under _main in BANK0

    _main->_rotarString
    _lcd_puts->_lcd_gotoxy
    _lcd_gotoxy->_lcd_write_byte
    _lcd_init->_lcd_write_byte
    _lcd_write_byte->_lcd_write_nibble

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   13009
                                             12 BANK0      3     3      0
                          _OpenUSART
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                     _lcd_write_byte
                        _rotarString
                            _strncpy
 ---------------------------------------------------------------------------------
 (1) _strncpy                                              8     2      6     664
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _rotarString                                         12     8      4     627
                                              0 BANK0     12     8      4
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    4607
                                              8 BANK0      2     0      2
                         _lcd_gotoxy
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    2619
                                              5 BANK0      3     2      1
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    2324
                                              5 BANK0      1     1      0
                     _lcd_write_byte
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (1) _lcd_write_byte                                       2     1      1    1707
                                              3 BANK0      2     1      1
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (2) _lcd_write_nibble                                     3     2      1     617
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _OpenUSART                                            6     4      2     387
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 18    18      0    1799
                                             11 COMRAM    18    18      0
                          _ReadUSART
                       _cuentaLetras
                      _lcd_put_blank
                          _putsUSART
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4     331
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _putsUSART                                            2     0      2     194
                                              1 COMRAM     2     0      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (7) _WriteUSART                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _lcd_put_blank                                        3     1      2    1055
                                              8 COMRAM     3     1      2
                       i2_lcd_gotoxy
                   i2_lcd_write_byte
 ---------------------------------------------------------------------------------
 (7) i2_lcd_gotoxy                                         3     2      1     532
                                              5 COMRAM     3     2      1
                   i2_lcd_write_byte
 ---------------------------------------------------------------------------------
 (7) i2_lcd_write_byte                                     2     1      1     328
                                              3 COMRAM     2     1      1
                 i2_lcd_write_nibble
 ---------------------------------------------------------------------------------
 (8) i2_lcd_write_nibble                                   3     2      1     162
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (6) _cuentaLetras                                         4     2      2     196
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OpenUSART
   _lcd_gotoxy
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_init
     _lcd_write_byte
       _lcd_write_nibble
     _lcd_write_nibble
   _lcd_puts
     _lcd_gotoxy
       _lcd_write_byte
         _lcd_write_nibble
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_write_byte
     _lcd_write_nibble
   _rotarString
   _strncpy

 _ISR (ROOT)
   _ReadUSART
   _cuentaLetras
   _lcd_put_blank
     i2_lcd_gotoxy
       i2_lcd_write_byte
         i2_lcd_write_nibble
     i2_lcd_write_byte
       i2_lcd_write_nibble
   _putsUSART
     _WriteUSART
   _strcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      F       F       5        9.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1D      4A       1       77.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B1      20        0.0%
DATA                 0      0     2B1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Jan 03 18:25:13 2017

                _rotarString 0D3A                            _c 000A                            _i 0005  
                          _k 0007                          l210 0FAA                          l214 0FC4  
                        l215 0FC6                          l135 1104                          l216 0FD2  
                        l217 0FD4                          l138 115E                          l219 0FFC  
                        _ISR 0008                          wreg 000FE8   __end_ofi2_lcd_write_nibble 0F7E  
               __CFG_FOSC$HS 000000            rotarString@length 0062                  lcd_gotoxy@x 0067  
                lcd_gotoxy@y 0065               ?_lcd_put_blank 0036                 __CFG_LVP$OFF 000000  
                       ?_ISR 002E                 __CFG_WDT$OFF 000000                         l1805 0FAC  
                       l1903 0D9C                         l1861 100C                         l1881 109C  
                       l1873 1060                         l1953 0BC0                         l1937 0B04  
                       l1891 10D6                         l1867 1042                         l1797 0F9A  
                       l1885 10B4                         l1877 1078                         l1893 10DC  
                       l1869 104E                         l1957 0BEC                         l1889 10CC  
                       l1899 0D56                         u1095 0E30                         u1096 0E32  
                       u1507 1158                         u1427 0AF0                         u1517 0C52  
                       u1437 0BF4                         u1607 0ED2                         u1527 0C6E  
                       u1447 0C06                         u1617 0EDC                         u1537 0C8C  
                       u1457 0C18                         u1547 0CAA                         u1467 0C2A  
                       u1557 0CD4                         u1477 0C3C                         u1567 0CF2  
                       u1487 112C                         _PIE1 000F9D                         u1577 0D10  
                       u1497 1142                         u1587 0D2E                         u1597 0E34  
                       _PEIE 007F96                         _RCIE 007CED                         _RCIF 007CF5  
                       _RCIP 007CFD                         i2l99 0A56       __end_of_lcd_write_byte 129E  
                       _main 0A90                         fsr0h 000FEA                         fsr1h 000FE2  
                       fsr0l 000FE9                         fsr2h 000FDA                         indf1 000FE7  
                       fsr1l 000FE1                         indf2 000FDF                         fsr2l 000FD9  
                lcd_puts@str 0068                         pclat 000FFA                         prodh 000FF4  
                       prodl 000FF3                         start 0018                ?_cuentaLetras 002E  
   __end_ofi2_lcd_write_byte 12F6                __CFG_MCLRE$ON 000000                        ??_ISR 0039  
                      ?_main 002E                        i2l135 1172                        i2l240 12CC  
                      i2l138 11C0                        i2l227 1258                        _RCREG 000FAE  
                      _RCSTA 000FAB                        _SPBRG 000FAF                        _TRISC 000F94  
                      _TRISD 000F95                        _TXREG 000FAD                        _TXSTA 000FAC  
                      _lcd_x 000C                        _lcd_y 000D                        tablat 000FF5  
                      status 000FD8              ?_lcd_write_byte 0063        __size_ofi2_lcd_gotoxy 0062  
            __end_of_strncpy 1076               ??_cuentaLetras 0030             i2lcd_gotoxy@addr 0034  
             WriteUSART@data 002E              __initialization 11C2                 __end_of_main 0C4A  
                     ??_main 006C                __activetblptr 000002                 rotarString@j 006A  
            ??_lcd_put_blank 0038    i2lcd_write_nibble@is_data 002E                 i2_lcd_gotoxy 1160  
                     i2l1533 12B8                       i2l1373 1302                       i2l1543 1234  
                     i2l1631 08A2                       i2l1545 1238                       i2l1529 12AC  
                     i2l1537 1206                       i2l1641 0918                       i2l1539 120E  
                     i2l1627 0888                       i2l1645 0932                       i2l1681 0A20  
                     i2l1665 09D6                       i2l1657 09B0                       i2l1659 09BE  
                     i2l1675 0A06                       i2l1685 0A3A                       i2l1669 09F0  
                     i2l1687 0A4E                       i2l1679 0A0E           __size_of_ReadUSART 001E  
                     _SPBRGH 000FB0             __end_of_lcd_init 0D3A           __size_of_OpenUSART 0080  
           __end_of_lcd_puts 10EC     __end_of_lcd_write_nibble 0EE4                       clear_0 11C8  
                     clear_1 11D4                       clear_2 11E0                       clear_3 11EC  
                     _strcpy 11FC         _lcd_lower_row_buffer 0300                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                  ??_strncpy 0066                _MessageBuffer 0100                   __accesstop 0060  
    __end_of__initialization 11F2                   _WriteUSART 12F6               __pcstackCOMRAM 002E  
               ?_rotarString 0060            __end_of_ReadUSART 12DC               lcd_gotoxy@addr 0066  
   i2lcd_write_nibble@nibble 0030         __end_of_cuentaLetras 1258                ReadUSART@data 002E  
          __end_of_OpenUSART 0FFE                   __pbssBANK1 0100                   __pbssBANK2 0200  
                 __pbssBANK3 0300           i2_lcd_write_nibble 0EE4            ?i2_lcd_write_byte 0031  
        ?i2_lcd_write_nibble 002E           ??i2_lcd_write_byte 0032                putsUSART@data 002F  
                    ?_strcpy 002E                   _lcd_gotoxy 10EC                      i2u56_45 0EEE  
                    i2u56_46 0EF0           __size_of_putsUSART 0026             ??_lcd_write_byte 0064  
       ??i2_lcd_write_nibble 002F                    ?_lcd_init 002E                    ?_lcd_puts 0068  
              cuentaLetras@j 0030                      __Hparam 0000                      __Lparam 0000  
               _flag_newline 000B                  ?_WriteUSART 002E                 __psmallconst 0800  
      lcd_write_byte@is_data 0063                      __pcinit 11C2                      __ramtop 0800  
                    __ptext0 0A90                      __ptext1 0FFE                      __ptext2 0D3A  
                    __ptext3 1076                      __ptext4 10EC                      __ptext5 0C4A  
                    __ptext6 127E                      __ptext7 0E22                      __ptext8 0F7E  
            __size_of_strcpy 002E                 __size_of_ISR 0A88           lcd_write_byte@byte 0064  
       _lcd_upper_row_buffer 0200               lcd_put_blank@x 0038               lcd_put_blank@y 0036  
                 ??_lcd_init 0065               __pintcode_body 0806                      _strncpy 0FFE  
                 ??_lcd_puts 006A         end_of_initialization 11F2             _cantidadLetrasUP 0003  
              __Lmediumconst 0000                      int_func 0806                    _RCSTAbits 000FAB  
                    postinc0 000FEE            __end_of_putsUSART 127E            ?_lcd_write_nibble 0060  
      __size_of_cuentaLetras 002E         __size_of_rotarString 00E8           ??_lcd_write_nibble 0061  
          lcd_put_blank@size 0037                    _TRISCbits 000F94                  ?_lcd_gotoxy 0065  
      __end_of_lcd_put_blank 12BE          __size_of_WriteUSART 0012                   main@config 006D  
                  _TXSTAbits 000FAC                 _cuentaLetras 122A              cuentaLetras@str 002E  
             __end_of_strcpy 122A          start_initialization 11C2                    _ReadUSART 12BE  
                __end_of_ISR 0A90     _lcd_lower_display_buffer 000E                    _OpenUSART 0F7E  
        __size_of_lcd_gotoxy 0074      i2lcd_write_byte@is_data 0031                     ??_strcpy 0032  
                __pbssCOMRAM 0001               rotarString@aux 0069                   ?_ReadUSART 002E  
             rotarString@str 0060    __size_ofi2_lcd_write_byte 001A                __pcstackBANK0 0060  
              i2lcd_gotoxy@x 0035                i2lcd_gotoxy@y 0033                   ?_OpenUSART 0060  
          __size_of_lcd_init 00F0            __size_of_lcd_puts 0076                 ??_WriteUSART 002E  
                  __pintcode 0008                  __smallconst 0800                ?i2_lcd_gotoxy 0033  
__size_ofi2_lcd_write_nibble 009A              _LCD_ROW_ADDRESS 0801                     ?_strncpy 0060  
         __end_of_WriteUSART 1308                     _LATDbits 000F8C                  strncpy@from 0062  
                   _PIE1bits 000F9D                  strncpy@size 0064                     i2u162_47 1196  
                   i2u163_47 11A8                     i2u164_47 11BA                     i2u165_47 0EF2  
                   i2u166_47 0F6C                     i2u167_47 0F76                     _PIR1bits 000F9E  
   _lcd_upper_display_buffer 001E                    _putsUSART 1258                  ??_ReadUSART 002E  
             ??i2_lcd_gotoxy 0034                    main@spbrg 006E                 ??_lcd_gotoxy 0066  
  __size_of_lcd_write_nibble 00C2           _cantidadLetrasDOWN 0001                  ??_OpenUSART 0062  
            OpenUSART@config 0065      __size_of_lcd_write_byte 0020                     __Hrparam 0000  
    lcd_write_nibble@is_data 0060                     __Lrparam 0000                ??_rotarString 0064  
         __end_of_lcd_gotoxy 1160                   ?_putsUSART 002F      __end_of_LCD_ROW_ADDRESS 0805  
       i2lcd_write_byte@byte 0032             i2_lcd_write_byte 12DC                     __ptext10 11FC  
                   __ptext11 1258                     __ptext12 12F6                     __ptext13 129E  
                   __ptext14 1160                     __ptext15 12DC                     __ptext16 0EE4  
                   __ptext17 122A                     __ptext18 12BE                     _lcd_init 0C4A  
                   _lcd_puts 1076             __size_of_strncpy 0078                   strcpy@from 0030  
              __size_of_main 01BA       __size_of_lcd_put_blank 0020          __end_of_rotarString 0E22  
                 _INTCONbits 000FF2               OpenUSART@spbrg 0060       lcd_write_nibble@nibble 0062  
                   intlevel2 0000                    strncpy@cp 0066                    strncpy@to 0060  
       __end_ofi2_lcd_gotoxy 11C2                  ??_putsUSART 0031                     strcpy@cp 0032  
                   strcpy@to 002E             _lcd_write_nibble 0E22                _lcd_put_blank 129E  
               _USART_Status 0009               _lcd_write_byte 127E  
