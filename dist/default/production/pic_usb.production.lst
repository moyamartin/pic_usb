

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Jan 03 19:34:56 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           	psect	idataCOMRAM
    41  0011EE                     __pidataCOMRAM:
    42                           	opt stack 0
    43                           
    44                           ;initializer for _DutyCycle
    45  0011EE  000A               	dw	10
    46                           
    47                           	psect	smallconst
    48  000800                     __psmallconst:
    49                           	opt stack 0
    50  000800  00                 	db	0
    51  000801                     _LCD_ROW_ADDRESS:
    52                           	opt stack 0
    53  000801  80                 	db	128
    54  000802  C0                 	db	192
    55  000803  94                 	db	148
    56  000804  D4                 	db	212
    57  000805                     __end_of_LCD_ROW_ADDRESS:
    58                           	opt stack 0
    59  0000                     _CCP1CON	set	4029
    60  0000                     _CCPR1L	set	4030
    61  0000                     _INTCONbits	set	4082
    62  0000                     _LATDbits	set	3980
    63  0000                     _PIE1	set	3997
    64  0000                     _PIE1bits	set	3997
    65  0000                     _PIR1bits	set	3998
    66  0000                     _PR2	set	4043
    67  0000                     _RCREG	set	4014
    68  0000                     _RCSTA	set	4011
    69  0000                     _RCSTAbits	set	4011
    70  0000                     _SPBRG	set	4015
    71  0000                     _SPBRGH	set	4016
    72  0000                     _T2CON	set	4042
    73  0000                     _T2CONbits	set	4042
    74  0000                     _TRISC	set	3988
    75  0000                     _TRISCbits	set	3988
    76  0000                     _TRISD	set	3989
    77  0000                     _TXREG	set	4013
    78  0000                     _TXSTA	set	4012
    79  0000                     _TXSTAbits	set	4012
    80  0000                     _PEIE	set	32662
    81  0000                     _RCIE	set	31981
    82  0000                     _RCIF	set	31989
    83  0000                     _RCIP	set	31997
    84  000805                     __stringdata:
    85                           	opt stack 0
    86  000805                     STR_2:
    87  000805  4D                 	db	77	;'M'
    88  000806  6F                 	db	111	;'o'
    89  000807  64                 	db	100	;'d'
    90  000808  69                 	db	105	;'i'
    91  000809  66                 	db	102	;'f'
    92  00080A  69                 	db	105	;'i'
    93  00080B  63                 	db	99	;'c'
    94  00080C  61                 	db	97	;'a'
    95  00080D  64                 	db	100	;'d'
    96  00080E  6F                 	db	111	;'o'
    97  00080F  20                 	db	32
    98  000810  65                 	db	101	;'e'
    99  000811  6C                 	db	108	;'l'
   100  000812  20                 	db	32
   101  000813  53                 	db	83	;'S'
   102  000814  65                 	db	101	;'e'
   103  000815  74                 	db	116	;'t'
   104  000816  50                 	db	80	;'P'
   105  000817  6F                 	db	111	;'o'
   106  000818  69                 	db	105	;'i'
   107  000819  6E                 	db	110	;'n'
   108  00081A  74                 	db	116	;'t'
   109  00081B  20                 	db	32
   110  00081C  61                 	db	97	;'a'
   111  00081D  20                 	db	32
   112  00081E  00                 	db	0
   113  00081F                     STR_4:
   114  00081F  45                 	db	69	;'E'
   115  000820  72                 	db	114	;'r'
   116  000821  72                 	db	114	;'r'
   117  000822  6F                 	db	111	;'o'
   118  000823  72                 	db	114	;'r'
   119  000824  20                 	db	32
   120  000825  6D                 	db	109	;'m'
   121  000826  61                 	db	97	;'a'
   122  000827  71                 	db	113	;'q'
   123  000828  75                 	db	117	;'u'
   124  000829  69                 	db	105	;'i'
   125  00082A  6E                 	db	110	;'n'
   126  00082B  6F                 	db	111	;'o'
   127  00082C  6C                 	db	108	;'l'
   128  00082D  61                 	db	97	;'a'
   129  00082E  0A                 	db	10
   130  00082F  00                 	db	0
   131  000830                     STR_1:
   132  000830  44                 	db	68	;'D'
   133  000831  75                 	db	117	;'u'
   134  000832  74                 	db	116	;'t'
   135  000833  79                 	db	121	;'y'
   136  000834  20                 	db	32
   137  000835  43                 	db	67	;'C'
   138  000836  79                 	db	121	;'y'
   139  000837  63                 	db	99	;'c'
   140  000838  6C                 	db	108	;'l'
   141  000839  65                 	db	101	;'e'
   142  00083A  3A                 	db	58	;':'
   143  00083B  20                 	db	32
   144  00083C  00                 	db	0
   145  00083D                     __end_of__stringdata:
   146                           	opt stack 0
   147                           
   148                           ; #config settings
   149  00083D  00                 	db	0	; dummy byte at the end
   150  0000                     
   151                           	psect	cinit
   152  000FAC                     __pcinit:
   153                           	opt stack 0
   154  000FAC                     start_initialization:
   155                           	opt stack 0
   156  000FAC                     __initialization:
   157                           	opt stack 0
   158                           
   159                           ; Clear objects allocated to BANK3 (200 bytes)
   160  000FAC  EE03  F000         	lfsr	0,__pbssBANK3
   161  000FB0  0EC8               	movlw	200
   162  000FB2                     clear_0:
   163  000FB2  6AEE               	clrf	postinc0,c
   164  000FB4  06E8               	decf	wreg,f,c
   165  000FB6  E1FD               	bnz	clear_0
   166                           
   167                           ; Clear objects allocated to BANK2 (200 bytes)
   168  000FB8  EE02  F000         	lfsr	0,__pbssBANK2
   169  000FBC  0EC8               	movlw	200
   170  000FBE                     clear_1:
   171  000FBE  6AEE               	clrf	postinc0,c
   172  000FC0  06E8               	decf	wreg,f,c
   173  000FC2  E1FD               	bnz	clear_1
   174                           
   175                           ; Clear objects allocated to BANK1 (200 bytes)
   176  000FC4  EE01  F000         	lfsr	0,__pbssBANK1
   177  000FC8  0EC8               	movlw	200
   178  000FCA                     clear_2:
   179  000FCA  6AEE               	clrf	postinc0,c
   180  000FCC  06E8               	decf	wreg,f,c
   181  000FCE  E1FD               	bnz	clear_2
   182                           
   183                           ; Clear objects allocated to BANK0 (16 bytes)
   184  000FD0  EE00  F060         	lfsr	0,__pbssBANK0
   185  000FD4  0E10               	movlw	16
   186  000FD6                     clear_3:
   187  000FD6  6AEE               	clrf	postinc0,c
   188  000FD8  06E8               	decf	wreg,f,c
   189  000FDA  E1FD               	bnz	clear_3
   190                           
   191                           ; Clear objects allocated to COMRAM (34 bytes)
   192  000FDC  EE00  F001         	lfsr	0,__pbssCOMRAM
   193  000FE0  0E22               	movlw	34
   194  000FE2                     clear_4:
   195  000FE2  6AEE               	clrf	postinc0,c
   196  000FE4  06E8               	decf	wreg,f,c
   197  000FE6  E1FD               	bnz	clear_4
   198                           
   199                           ; Initialize objects allocated to COMRAM (2 bytes)
   200                           ; load TBLPTR registers with __pidataCOMRAM
   201  000FE8  0EEE               	movlw	low __pidataCOMRAM
   202  000FEA  6EF6               	movwf	tblptrl,c
   203  000FEC  0E11               	movlw	high __pidataCOMRAM
   204  000FEE  6EF7               	movwf	tblptrh,c
   205  000FF0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   206  000FF2  6EF8               	movwf	tblptru,c
   207  000FF4  0009               	tblrd		*+	;fetch initializer
   208  000FF6  CFF5 F043          	movff	tablat,__pdataCOMRAM
   209  000FFA  0009               	tblrd		*+	;fetch initializer
   210  000FFC  CFF5 F044          	movff	tablat,__pdataCOMRAM+1
   211  001000                     end_of_initialization:
   212                           	opt stack 0
   213  001000                     __end_of__initialization:
   214                           	opt stack 0
   215  001000  0E00               	movlw	low (__Lmediumconst shr (0+16))
   216  001002  6EF8               	movwf	tblptru,c
   217  001004  0100               	movlb	0
   218  001006  EFFD  F004         	goto	_main	;jump to C main() function
   219                           tblptru	equ	0xFF8
   220                           tblptrh	equ	0xFF7
   221                           tblptrl	equ	0xFF6
   222                           tablat	equ	0xFF5
   223                           postinc0	equ	0xFEE
   224                           wreg	equ	0xFE8
   225                           
   226                           	psect	bssCOMRAM
   227  000001                     __pbssCOMRAM:
   228                           	opt stack 0
   229  000001                     _lcd_lower_display_buffer:
   230                           	opt stack 0
   231  000001                     	ds	16
   232  000011                     _cantidadLetrasDOWN:
   233                           	opt stack 0
   234  000011                     	ds	2
   235  000013                     _cantidadLetrasUP:
   236                           	opt stack 0
   237  000013                     	ds	2
   238  000015                     _i:
   239                           	opt stack 0
   240  000015                     	ds	2
   241  000017                     _k:
   242                           	opt stack 0
   243  000017                     	ds	2
   244  000019                     _USART_Status:
   245                           	opt stack 0
   246  000019                     	ds	1
   247  00001A                     _c:
   248                           	opt stack 0
   249  00001A                     	ds	1
   250  00001B                     _flag_newline:
   251                           	opt stack 0
   252  00001B                     	ds	1
   253  00001C                     _lcd_x:
   254                           	opt stack 0
   255  00001C                     	ds	1
   256  00001D                     _lcd_y:
   257                           	opt stack 0
   258  00001D                     	ds	1
   259  00001E                     _DC_str:
   260                           	opt stack 0
   261  00001E                     	ds	5
   262                           tblptru	equ	0xFF8
   263                           tblptrh	equ	0xFF7
   264                           tblptrl	equ	0xFF6
   265                           tablat	equ	0xFF5
   266                           postinc0	equ	0xFEE
   267                           wreg	equ	0xFE8
   268                           
   269                           	psect	dataCOMRAM
   270  000043                     __pdataCOMRAM:
   271                           	opt stack 0
   272  000043                     _DutyCycle:
   273                           	opt stack 0
   274  000043                     	ds	2
   275                           tblptru	equ	0xFF8
   276                           tblptrh	equ	0xFF7
   277                           tblptrl	equ	0xFF6
   278                           tablat	equ	0xFF5
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           
   282                           	psect	bssBANK0
   283  000060                     __pbssBANK0:
   284                           	opt stack 0
   285  000060                     _lcd_upper_display_buffer:
   286                           	opt stack 0
   287  000060                     	ds	16
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           tblptrl	equ	0xFF6
   291                           tablat	equ	0xFF5
   292                           postinc0	equ	0xFEE
   293                           wreg	equ	0xFE8
   294                           
   295                           	psect	bssBANK1
   296  000100                     __pbssBANK1:
   297                           	opt stack 0
   298  000100                     _MessageBuffer:
   299                           	opt stack 0
   300  000100                     	ds	200
   301                           tblptru	equ	0xFF8
   302                           tblptrh	equ	0xFF7
   303                           tblptrl	equ	0xFF6
   304                           tablat	equ	0xFF5
   305                           postinc0	equ	0xFEE
   306                           wreg	equ	0xFE8
   307                           
   308                           	psect	bssBANK2
   309  000200                     __pbssBANK2:
   310                           	opt stack 0
   311  000200                     _lcd_upper_row_buffer:
   312                           	opt stack 0
   313  000200                     	ds	200
   314                           tblptru	equ	0xFF8
   315                           tblptrh	equ	0xFF7
   316                           tblptrl	equ	0xFF6
   317                           tablat	equ	0xFF5
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           
   321                           	psect	bssBANK3
   322  000300                     __pbssBANK3:
   323                           	opt stack 0
   324  000300                     _lcd_lower_row_buffer:
   325                           	opt stack 0
   326  000300                     	ds	200
   327                           tblptru	equ	0xFF8
   328                           tblptrh	equ	0xFF7
   329                           tblptrl	equ	0xFF6
   330                           tablat	equ	0xFF5
   331                           postinc0	equ	0xFEE
   332                           wreg	equ	0xFE8
   333                           
   334                           	psect	cstackBANK0
   335  000070                     __pcstackBANK0:
   336                           	opt stack 0
   337  000070                     ??_lcd_init:
   338  000070                     lcd_gotoxy@y:
   339                           	opt stack 0
   340  000070                     OpenUSART@config:
   341                           	opt stack 0
   342  000070                     SetDCPWM1@DCycle:
   343                           	opt stack 0
   344  000070                     ___lwdiv@quotient:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x0
   348  000070                     	ds	1
   349  000071                     lcd_gotoxy@addr:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0x1
   353  000071                     	ds	1
   354  000072                     lcd_gotoxy@x:
   355                           	opt stack 0
   356  000072                     ___lwdiv@counter:
   357                           	opt stack 0
   358                           
   359                           ; 1 bytes @ 0x2
   360  000072                     	ds	1
   361  000073                     lcd_putnum@num:
   362                           	opt stack 0
   363  000073                     lcd_puts@str:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x3
   367  000073                     	ds	2
   368  000075                     lcd_putnum@len:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0x5
   372  000075                     	ds	1
   373  000076                     lcd_putnum@x:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0x6
   377  000076                     	ds	1
   378  000077                     lcd_putnum@y:
   379                           	opt stack 0
   380                           
   381                           ; 1 bytes @ 0x7
   382  000077                     	ds	1
   383  000078                     lcd_putnum@dec:
   384                           	opt stack 0
   385                           
   386                           ; 1 bytes @ 0x8
   387  000078                     	ds	1
   388  000079                     lcd_putnum@r:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x9
   392  000079                     	ds	2
   393  00007B                     ??_main:
   394                           
   395                           ; 0 bytes @ 0xB
   396  00007B                     	ds	1
   397  00007C                     main@config:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0xC
   401  00007C                     	ds	1
   402  00007D                     main@spbrg:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0xD
   406  00007D                     	ds	1
   407                           tblptru	equ	0xFF8
   408                           tblptrh	equ	0xFF7
   409                           tblptrl	equ	0xFF6
   410                           tablat	equ	0xFF5
   411                           postinc0	equ	0xFEE
   412                           wreg	equ	0xFE8
   413                           
   414                           	psect	cstackCOMRAM
   415  000023                     __pcstackCOMRAM:
   416                           	opt stack 0
   417  000023                     ??_isdigit:
   418  000023                     ?_strcat:
   419                           	opt stack 0
   420  000023                     ?___wmul:
   421                           	opt stack 0
   422  000023                     ReadUSART@data:
   423                           	opt stack 0
   424  000023                     WriteUSART@data:
   425                           	opt stack 0
   426  000023                     ___wmul@multiplier:
   427                           	opt stack 0
   428  000023                     strcat@to:
   429                           	opt stack 0
   430  000023                     strncpy@to:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x0
   434  000023                     	ds	1
   435  000024                     _isdigit$1320:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x1
   439  000024                     	ds	1
   440  000025                     isdigit@c:
   441                           	opt stack 0
   442  000025                     ___wmul@multiplicand:
   443                           	opt stack 0
   444  000025                     strcat@from:
   445                           	opt stack 0
   446  000025                     strncpy@from:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x2
   450  000025                     	ds	2
   451  000027                     ___wmul@product:
   452                           	opt stack 0
   453  000027                     strcat@cp:
   454                           	opt stack 0
   455  000027                     strncpy@size:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x4
   459  000027                     	ds	2
   460  000029                     ?_atoi:
   461                           	opt stack 0
   462  000029                     putsUSART@data:
   463                           	opt stack 0
   464  000029                     atoi@s:
   465                           	opt stack 0
   466  000029                     strncpy@cp:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x6
   470  000029                     	ds	2
   471  00002B                     ??_atoi:
   472  00002B                     ??_putsUSART:
   473                           
   474                           ; 0 bytes @ 0x8
   475  00002B                     	ds	2
   476  00002D                     atoi@sign:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0xA
   480  00002D                     	ds	1
   481  00002E                     atoi@a:
   482                           	opt stack 0
   483                           
   484                           ; 2 bytes @ 0xB
   485  00002E                     	ds	2
   486  000030                     ??_ISR:
   487                           
   488                           ; 0 bytes @ 0xD
   489  000030                     	ds	14
   490  00003E                     ?___lwdiv:
   491                           	opt stack 0
   492  00003E                     lcd_write_nibble@is_data:
   493                           	opt stack 0
   494  00003E                     OpenPWM1@period:
   495                           	opt stack 0
   496  00003E                     SetDCPWM1@dutycycle:
   497                           	opt stack 0
   498  00003E                     OpenUSART@spbrg:
   499                           	opt stack 0
   500  00003E                     ___lwdiv@dividend:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x1B
   504  00003E                     	ds	1
   505  00003F                     ??_lcd_write_nibble:
   506                           
   507                           ; 0 bytes @ 0x1C
   508  00003F                     	ds	1
   509  000040                     ??_OpenUSART:
   510  000040                     ??_SetDCPWM1:
   511  000040                     lcd_write_nibble@nibble:
   512                           	opt stack 0
   513  000040                     ___lwdiv@divisor:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x1D
   517  000040                     	ds	1
   518  000041                     lcd_write_byte@is_data:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x1E
   522  000041                     	ds	1
   523  000042                     lcd_write_byte@byte:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x1F
   527  000042                     	ds	1
   528  000043                     tblptru	equ	0xFF8
   529                           tblptrh	equ	0xFF7
   530                           tblptrl	equ	0xFF6
   531                           tablat	equ	0xFF5
   532                           postinc0	equ	0xFEE
   533                           wreg	equ	0xFE8
   534                           
   535                           ; 0 bytes @ 0x20
   536 ;;
   537 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   538 ;;
   539 ;; *************** function _main *****************
   540 ;; Defined at:
   541 ;;		line 46 in file "main.c"
   542 ;; Parameters:    Size  Location     Type
   543 ;;		None
   544 ;; Auto vars:     Size  Location     Type
   545 ;;  spbrg           1   13[BANK0 ] unsigned char 
   546 ;;  config          1   12[BANK0 ] unsigned char 
   547 ;; Return value:  Size  Location     Type
   548 ;;		None               void
   549 ;; Registers used:
   550 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   551 ;; Tracked objects:
   552 ;;		On entry : 0/0
   553 ;;		On exit  : 0/0
   554 ;;		Unchanged: 0/0
   555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   556 ;;      Params:         0       0       0       0       0       0       0       0       0
   557 ;;      Locals:         0       2       0       0       0       0       0       0       0
   558 ;;      Temps:          0       1       0       0       0       0       0       0       0
   559 ;;      Totals:         0       3       0       0       0       0       0       0       0
   560 ;;Total ram usage:        3 bytes
   561 ;; Hardware stack levels required when called:    7
   562 ;; This function calls:
   563 ;;		_OpenPWM1
   564 ;;		_OpenUSART
   565 ;;		_SetDCPWM1
   566 ;;		_lcd_gotoxy
   567 ;;		_lcd_init
   568 ;;		_lcd_putnum
   569 ;;		_lcd_puts
   570 ;;		_lcd_write_byte
   571 ;; This function is called by:
   572 ;;		Startup code after reset
   573 ;; This function uses a non-reentrant model
   574 ;;
   575                           
   576                           	psect	text0
   577  0009FA                     __ptext0:
   578                           	opt stack 0
   579  0009FA                     _main:
   580                           	opt stack 24
   581                           
   582                           ;main.c: 48: unsigned char config = 0, spbrg = 0;
   583                           
   584                           ;incstack = 0
   585  0009FA  0E00               	movlw	0
   586  0009FC  0100               	movlb	0	; () banked
   587  0009FE  6F7C               	movwf	main@config& (0+255),b
   588  000A00  0E00               	movlw	0
   589  000A02  0100               	movlb	0	; () banked
   590  000A04  6F7D               	movwf	main@spbrg& (0+255),b
   591                           
   592                           ;main.c: 50: TRISC = 0b10000000;
   593  000A06  0E80               	movlw	128
   594  000A08  6E94               	movwf	3988,c	;volatile
   595                           
   596                           ;main.c: 51: TRISD = 0b00000000;
   597  000A0A  0E00               	movlw	0
   598  000A0C  6E95               	movwf	3989,c	;volatile
   599                           
   600                           ; BSR set to: 0
   601                           ;main.c: 56: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
   602  000A0E  0E4F               	movlw	79
   603  000A10  16AB               	andwf	4011,f,c	;volatile
   604                           
   605                           ; BSR set to: 0
   606  000A12  9AAC               	bcf	4012,5,c	;volatile
   607                           
   608                           ; BSR set to: 0
   609  000A14  0ECF               	movlw	207
   610  000A16  169D               	andwf	3997,f,c	;volatile
   611                           
   612                           ;main.c: 57: config = 0b01111111& 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111;
   613  000A18  0E7C               	movlw	124
   614  000A1A  0100               	movlb	0	; () banked
   615  000A1C  6F7C               	movwf	main@config& (0+255),b
   616                           
   617                           ;main.c: 58: spbrg = 77;
   618  000A1E  0E4D               	movlw	77
   619  000A20  0100               	movlb	0	; () banked
   620  000A22  6F7D               	movwf	main@spbrg& (0+255),b
   621                           
   622                           ; BSR set to: 0
   623                           ;main.c: 59: OpenUSART(config, spbrg);
   624  000A24  0100               	movlb	0	; () banked
   625  000A26  C07D  F03E         	movff	main@spbrg,OpenUSART@spbrg
   626  000A2A  6A3F               	clrf	OpenUSART@spbrg+1,c
   627  000A2C  0100               	movlb	0	; () banked
   628  000A2E  517C               	movf	main@config& (0+255),w,b
   629  000A30  ECFC  F006         	call	_OpenUSART
   630                           
   631                           ;main.c: 60: RCIF = 0;
   632  000A34  9A9E               	bcf	3998,5,c	;volatile
   633                           
   634                           ;main.c: 61: RCIP = 0;
   635  000A36  9A9F               	bcf	3999,5,c	;volatile
   636                           
   637                           ;main.c: 62: RCIE = 1;
   638  000A38  8A9D               	bsf	3997,5,c	;volatile
   639                           
   640                           ;main.c: 63: PEIE = 1;
   641  000A3A  8CF2               	bsf	intcon,6,c	;volatile
   642                           
   643                           ;main.c: 64: PIR1bits.RCIF = 0;
   644  000A3C  9A9E               	bcf	3998,5,c	;volatile
   645                           
   646                           ;main.c: 65: (INTCONbits.GIE = 1);
   647  000A3E  8EF2               	bsf	intcon,7,c	;volatile
   648                           
   649                           ;main.c: 69: T2CON = 0b00000111 ;
   650  000A40  0E07               	movlw	7
   651  000A42  6ECA               	movwf	4042,c	;volatile
   652                           
   653                           ;main.c: 70: OpenPWM1(0b10111011);
   654  000A44  0EBB               	movlw	187
   655  000A46  ECE5  F008         	call	_OpenPWM1
   656                           
   657                           ;main.c: 72: SetDCPWM1(DutyCycle);
   658  000A4A  C043  F03E         	movff	_DutyCycle,SetDCPWM1@dutycycle
   659  000A4E  C044  F03F         	movff	_DutyCycle+1,SetDCPWM1@dutycycle+1
   660  000A52  EC89  F008         	call	_SetDCPWM1	;wreg free
   661                           
   662                           ;main.c: 75: lcd_init();
   663  000A56  EC92  F005         	call	_lcd_init	;wreg free
   664                           
   665                           ;main.c: 76: {lcd_write_byte(0x01, 0); { _delay((unsigned long)((5000)*(12000000/4000000
      +                          .0))); };};
   666  000A5A  0E00               	movlw	0
   667  000A5C  6E41               	movwf	lcd_write_byte@is_data,c
   668  000A5E  0E01               	movlw	1
   669  000A60  ECD8  F008         	call	_lcd_write_byte
   670  000A64  0E14               	movlw	20
   671  000A66  0100               	movlb	0	; () banked
   672  000A68  6F7B               	movwf	??_main& (0+255),b
   673  000A6A  0E7A               	movlw	122
   674  000A6C                     u1127:
   675  000A6C  2EE8               	decfsz	wreg,f,c
   676  000A6E  D7FE               	goto	u1127
   677  000A70  2F7B               	decfsz	??_main& (0+255),f,b
   678  000A72  D7FC               	goto	u1127
   679                           
   680                           ;main.c: 77: lcd_gotoxy(0,0);
   681  000A74  0E00               	movlw	0
   682  000A76  0100               	movlb	0	; () banked
   683  000A78  6F70               	movwf	lcd_gotoxy@y& (0+255),b
   684  000A7A  0E00               	movlw	0
   685  000A7C  EC39  F007         	call	_lcd_gotoxy
   686  000A80                     l1669:
   687                           
   688                           ;main.c: 79: {
   689                           ;main.c: 80: SetDCPWM1(DutyCycle);
   690  000A80  C043  F03E         	movff	_DutyCycle,SetDCPWM1@dutycycle
   691  000A84  C044  F03F         	movff	_DutyCycle+1,SetDCPWM1@dutycycle+1
   692  000A88  EC89  F008         	call	_SetDCPWM1	;wreg free
   693                           
   694                           ;main.c: 82: lcd_gotoxy(0,0);
   695  000A8C  0E00               	movlw	0
   696  000A8E  0100               	movlb	0	; () banked
   697  000A90  6F70               	movwf	lcd_gotoxy@y& (0+255),b
   698  000A92  0E00               	movlw	0
   699  000A94  EC39  F007         	call	_lcd_gotoxy
   700                           
   701                           ;main.c: 83: lcd_puts("Duty Cycle: ");
   702  000A98  0E08               	movlw	high STR_1
   703  000A9A  0100               	movlb	0	; () banked
   704  000A9C  6F74               	movwf	(lcd_puts@str+1)& (0+255),b
   705  000A9E  0E30               	movlw	low STR_1
   706  000AA0  0100               	movlb	0	; () banked
   707  000AA2  6F73               	movwf	lcd_puts@str& (0+255),b
   708  000AA4  ECB4  F006         	call	_lcd_puts	;wreg free
   709                           
   710                           ;main.c: 84: lcd_putnum(DutyCycle, 4, 0, 1);
   711  000AA8  C043  F073         	movff	_DutyCycle,lcd_putnum@num
   712  000AAC  C044  F074         	movff	_DutyCycle+1,lcd_putnum@num+1
   713  000AB0  0E04               	movlw	4
   714  000AB2  0100               	movlb	0	; () banked
   715  000AB4  6F75               	movwf	lcd_putnum@len& (0+255),b
   716  000AB6  0E00               	movlw	0
   717  000AB8  0100               	movlb	0	; () banked
   718  000ABA  6F76               	movwf	lcd_putnum@x& (0+255),b
   719  000ABC  0E01               	movlw	1
   720  000ABE  0100               	movlb	0	; () banked
   721  000AC0  6F77               	movwf	lcd_putnum@y& (0+255),b
   722  000AC2  EC71  F007         	call	_lcd_putnum	;wreg free
   723                           
   724                           ;main.c: 85: _delay((unsigned long)((50)*(12000000/4000.0)));
   725  000AC6  0EC3               	movlw	195
   726  000AC8  0100               	movlb	0	; () banked
   727  000ACA  6F7B               	movwf	??_main& (0+255),b
   728  000ACC  0ECD               	movlw	205
   729  000ACE                     u1137:
   730  000ACE  2EE8               	decfsz	wreg,f,c
   731  000AD0  D7FE               	goto	u1137
   732  000AD2  2F7B               	decfsz	??_main& (0+255),f,b
   733  000AD4  D7FC               	goto	u1137
   734  000AD6  F000               	nop	
   735                           
   736                           ;main.c: 86: _delay((unsigned long)((50)*(12000000/4000.0)));
   737  000AD8  0EC3               	movlw	195
   738  000ADA  0100               	movlb	0	; () banked
   739  000ADC  6F7B               	movwf	??_main& (0+255),b
   740  000ADE  0ECD               	movlw	205
   741  000AE0                     u1147:
   742  000AE0  2EE8               	decfsz	wreg,f,c
   743  000AE2  D7FE               	goto	u1147
   744  000AE4  2F7B               	decfsz	??_main& (0+255),f,b
   745  000AE6  D7FC               	goto	u1147
   746  000AE8  F000               	nop	
   747                           
   748                           ;main.c: 87: _delay((unsigned long)((50)*(12000000/4000.0)));
   749  000AEA  0EC3               	movlw	195
   750  000AEC  0100               	movlb	0	; () banked
   751  000AEE  6F7B               	movwf	??_main& (0+255),b
   752  000AF0  0ECD               	movlw	205
   753  000AF2                     u1157:
   754  000AF2  2EE8               	decfsz	wreg,f,c
   755  000AF4  D7FE               	goto	u1157
   756  000AF6  2F7B               	decfsz	??_main& (0+255),f,b
   757  000AF8  D7FC               	goto	u1157
   758  000AFA  F000               	nop	
   759                           
   760                           ;main.c: 88: _delay((unsigned long)((50)*(12000000/4000.0)));
   761  000AFC  0EC3               	movlw	195
   762  000AFE  0100               	movlb	0	; () banked
   763  000B00  6F7B               	movwf	??_main& (0+255),b
   764  000B02  0ECD               	movlw	205
   765  000B04                     u1167:
   766  000B04  2EE8               	decfsz	wreg,f,c
   767  000B06  D7FE               	goto	u1167
   768  000B08  2F7B               	decfsz	??_main& (0+255),f,b
   769  000B0A  D7FC               	goto	u1167
   770  000B0C  F000               	nop	
   771                           
   772                           ;main.c: 89: _delay((unsigned long)((50)*(12000000/4000.0)));
   773  000B0E  0EC3               	movlw	195
   774  000B10  0100               	movlb	0	; () banked
   775  000B12  6F7B               	movwf	??_main& (0+255),b
   776  000B14  0ECD               	movlw	205
   777  000B16                     u1177:
   778  000B16  2EE8               	decfsz	wreg,f,c
   779  000B18  D7FE               	goto	u1177
   780  000B1A  2F7B               	decfsz	??_main& (0+255),f,b
   781  000B1C  D7FC               	goto	u1177
   782  000B1E  F000               	nop	
   783                           
   784                           ;main.c: 90: LATDbits.LATD0 =~ LATDbits.LATD0;
   785  000B20  708C               	btg	3980,0,c	;volatile
   786  000B22  D7AE               	goto	l1669
   787  000B24                     __end_of_main:
   788                           	opt stack 0
   789                           tblptru	equ	0xFF8
   790                           tblptrh	equ	0xFF7
   791                           tblptrl	equ	0xFF6
   792                           tablat	equ	0xFF5
   793                           intcon	equ	0xFF2
   794                           postinc0	equ	0xFEE
   795                           wreg	equ	0xFE8
   796                           
   797 ;; *************** function _lcd_puts *****************
   798 ;; Defined at:
   799 ;;		line 108 in file "lcd_driver.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;  str             2    3[BANK0 ] PTR unsigned char 
   802 ;;		 -> STR_1(13), 
   803 ;; Auto vars:     Size  Location     Type
   804 ;;		None
   805 ;; Return value:  Size  Location     Type
   806 ;;		None               void
   807 ;; Registers used:
   808 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   809 ;; Tracked objects:
   810 ;;		On entry : 0/0
   811 ;;		On exit  : 0/0
   812 ;;		Unchanged: 0/0
   813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   814 ;;      Params:         0       2       0       0       0       0       0       0       0
   815 ;;      Locals:         0       0       0       0       0       0       0       0       0
   816 ;;      Temps:          0       0       0       0       0       0       0       0       0
   817 ;;      Totals:         0       2       0       0       0       0       0       0       0
   818 ;;Total ram usage:        2 bytes
   819 ;; Hardware stack levels used:    1
   820 ;; Hardware stack levels required when called:    6
   821 ;; This function calls:
   822 ;;		_lcd_gotoxy
   823 ;;		_lcd_write_byte
   824 ;; This function is called by:
   825 ;;		_main
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           	psect	text1
   830  000D68                     __ptext1:
   831                           	opt stack 0
   832  000D68                     _lcd_puts:
   833                           	opt stack 24
   834                           
   835                           ;lcd_driver.c: 110: while (*str != 0)
   836                           
   837                           ;incstack = 0
   838  000D68  D03B               	goto	l1613
   839  000D6A                     l1597:
   840                           
   841                           ;lcd_driver.c: 111: {
   842                           ;lcd_driver.c: 112: if (*str != '\n')
   843  000D6A  0100               	movlb	0	; () banked
   844  000D6C  C073  FFF6         	movff	lcd_puts@str,tblptrl
   845  000D70  0100               	movlb	0	; () banked
   846  000D72  C074  FFF7         	movff	lcd_puts@str+1,tblptrh
   847  000D76                     	if	0	;tblptru may be non-zero
   848  000D76                     	endif
   849  000D76                     	if	0	;tblptru may be non-zero
   850  000D76                     	endif
   851  000D76  0008               	tblrd		*
   852  000D78  50F5               	movf	tablat,w,c
   853  000D7A  0A0A               	xorlw	10
   854  000D7C  B4D8               	btfsc	status,2,c
   855  000D7E  D00C               	goto	l1601
   856                           
   857                           ; BSR set to: 0
   858                           ;lcd_driver.c: 113: {
   859                           ;lcd_driver.c: 114: {lcd_write_byte(*str, 1);};
   860  000D80  0E01               	movlw	1
   861  000D82  6E41               	movwf	lcd_write_byte@is_data,c
   862  000D84  0100               	movlb	0	; () banked
   863  000D86  C073  FFF6         	movff	lcd_puts@str,tblptrl
   864  000D8A  0100               	movlb	0	; () banked
   865  000D8C  C074  FFF7         	movff	lcd_puts@str+1,tblptrh
   866  000D90                     	if	0	;tblptru may be non-zero
   867  000D90                     	endif
   868  000D90                     	if	0	;tblptru may be non-zero
   869  000D90                     	endif
   870  000D90  0008               	tblrd		*
   871  000D92  50F5               	movf	tablat,w,c
   872  000D94  ECD8  F008         	call	_lcd_write_byte
   873  000D98                     l1601:
   874                           
   875                           ;lcd_driver.c: 115: }
   876                           ;lcd_driver.c: 117: if ((++lcd_x == 16) || (*str == '\n'))
   877  000D98  2A1C               	incf	_lcd_x,f,c
   878  000D9A  501C               	movf	_lcd_x& (0+255),w,c
   879  000D9C  0A10               	xorlw	16
   880  000D9E  B4D8               	btfsc	status,2,c
   881  000DA0  D00B               	goto	l1605
   882  000DA2  0100               	movlb	0	; () banked
   883  000DA4  C073  FFF6         	movff	lcd_puts@str,tblptrl
   884  000DA8  0100               	movlb	0	; () banked
   885  000DAA  C074  FFF7         	movff	lcd_puts@str+1,tblptrh
   886  000DAE                     	if	0	;tblptru may be non-zero
   887  000DAE                     	endif
   888  000DAE                     	if	0	;tblptru may be non-zero
   889  000DAE                     	endif
   890  000DAE  0008               	tblrd		*
   891  000DB0  50F5               	movf	tablat,w,c
   892  000DB2  0A0A               	xorlw	10
   893  000DB4  A4D8               	btfss	status,2,c
   894  000DB6  D011               	goto	l1611
   895  000DB8                     l1605:
   896                           
   897                           ;lcd_driver.c: 118: {
   898                           ;lcd_driver.c: 119: if (++lcd_y == 2)
   899  000DB8  2A1D               	incf	_lcd_y,f,c
   900  000DBA  501D               	movf	_lcd_y& (0+255),w,c
   901  000DBC  0A02               	xorlw	2
   902  000DBE  A4D8               	btfss	status,2,c
   903  000DC0  D007               	goto	l1609
   904                           
   905                           ;lcd_driver.c: 120: {
   906                           ;lcd_driver.c: 121: lcd_gotoxy(0,0);
   907  000DC2  0E00               	movlw	0
   908  000DC4  0100               	movlb	0	; () banked
   909  000DC6  6F70               	movwf	lcd_gotoxy@y& (0+255),b
   910  000DC8  0E00               	movlw	0
   911  000DCA  EC39  F007         	call	_lcd_gotoxy
   912                           
   913                           ;lcd_driver.c: 122: }
   914  000DCE  D005               	goto	l1611
   915  000DD0                     l1609:
   916                           
   917                           ;lcd_driver.c: 123: else
   918                           ;lcd_driver.c: 124: {
   919                           ;lcd_driver.c: 125: lcd_gotoxy(0, lcd_y);
   920  000DD0  C01D  F070         	movff	_lcd_y,lcd_gotoxy@y
   921  000DD4  0E00               	movlw	0
   922  000DD6  EC39  F007         	call	_lcd_gotoxy
   923  000DDA                     l1611:
   924                           
   925                           ;lcd_driver.c: 126: }
   926                           ;lcd_driver.c: 127: }
   927                           ;lcd_driver.c: 128: str++;
   928  000DDA  0100               	movlb	0	; () banked
   929  000DDC  4B73               	infsnz	lcd_puts@str& (0+255),f,b
   930  000DDE  2B74               	incf	(lcd_puts@str+1)& (0+255),f,b
   931  000DE0                     l1613:
   932  000DE0  0100               	movlb	0	; () banked
   933  000DE2  C073  FFF6         	movff	lcd_puts@str,tblptrl
   934  000DE6  0100               	movlb	0	; () banked
   935  000DE8  C074  FFF7         	movff	lcd_puts@str+1,tblptrh
   936  000DEC                     	if	0	;tblptru may be non-zero
   937  000DEC                     	endif
   938  000DEC                     	if	0	;tblptru may be non-zero
   939  000DEC                     	endif
   940  000DEC  0008               	tblrd		*
   941  000DEE  50F5               	movf	tablat,w,c
   942  000DF0  0900               	iorlw	0
   943  000DF2  B4D8               	btfsc	status,2,c
   944                           
   945                           ; BSR set to: 0
   946                           
   947                           ; BSR set to: 0
   948  000DF4  0012               	return	
   949  000DF6  D7B9               	goto	l1597
   950  000DF8                     __end_of_lcd_puts:
   951                           	opt stack 0
   952                           tblptru	equ	0xFF8
   953                           tblptrh	equ	0xFF7
   954                           tblptrl	equ	0xFF6
   955                           tablat	equ	0xFF5
   956                           intcon	equ	0xFF2
   957                           postinc0	equ	0xFEE
   958                           wreg	equ	0xFE8
   959                           status	equ	0xFD8
   960                           
   961 ;; *************** function _lcd_putnum *****************
   962 ;; Defined at:
   963 ;;		line 87 in file "lcd_driver.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;  num             2    3[BANK0 ] unsigned int 
   966 ;;  len             1    5[BANK0 ] unsigned char 
   967 ;;  x               1    6[BANK0 ] unsigned char 
   968 ;;  y               1    7[BANK0 ] unsigned char 
   969 ;; Auto vars:     Size  Location     Type
   970 ;;  r               2    9[BANK0 ] unsigned int 
   971 ;;  dec             1    8[BANK0 ] unsigned char 
   972 ;; Return value:  Size  Location     Type
   973 ;;		None               void
   974 ;; Registers used:
   975 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   976 ;; Tracked objects:
   977 ;;		On entry : 0/0
   978 ;;		On exit  : 0/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   981 ;;      Params:         0       5       0       0       0       0       0       0       0
   982 ;;      Locals:         0       3       0       0       0       0       0       0       0
   983 ;;      Temps:          0       0       0       0       0       0       0       0       0
   984 ;;      Totals:         0       8       0       0       0       0       0       0       0
   985 ;;Total ram usage:        8 bytes
   986 ;; Hardware stack levels used:    1
   987 ;; Hardware stack levels required when called:    6
   988 ;; This function calls:
   989 ;;		___lwdiv
   990 ;;		_lcd_gotoxy
   991 ;;		_lcd_write_byte
   992 ;; This function is called by:
   993 ;;		_main
   994 ;; This function uses a non-reentrant model
   995 ;;
   996                           
   997                           	psect	text2
   998  000EE2                     __ptext2:
   999                           	opt stack 0
  1000  000EE2                     _lcd_putnum:
  1001                           	opt stack 24
  1002                           
  1003                           ;lcd_driver.c: 92: uint16_t r;
  1004                           ;lcd_driver.c: 93: uint8_t dec;
  1005                           ;lcd_driver.c: 95: x+=len;
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;incstack = 0
  1009  000EE2  0100               	movlb	0	; () banked
  1010  000EE4  5175               	movf	lcd_putnum@len& (0+255),w,b
  1011  000EE6  0100               	movlb	0	; () banked
  1012  000EE8  2776               	addwf	lcd_putnum@x& (0+255),f,b
  1013                           
  1014                           ;lcd_driver.c: 96: while (len)
  1015  000EEA  D02C               	goto	l1631
  1016  000EEC                     l1617:
  1017                           
  1018                           ; BSR set to: 0
  1019                           ;lcd_driver.c: 97: {
  1020                           ;lcd_driver.c: 98: r = num/10;
  1021  000EEC  C073  F03E         	movff	lcd_putnum@num,___lwdiv@dividend
  1022  000EF0  C074  F03F         	movff	lcd_putnum@num+1,___lwdiv@dividend+1
  1023  000EF4  0E00               	movlw	0
  1024  000EF6  6E41               	movwf	___lwdiv@divisor+1,c
  1025  000EF8  0E0A               	movlw	10
  1026  000EFA  6E40               	movwf	___lwdiv@divisor,c
  1027  000EFC  ECA6  F007         	call	___lwdiv	;wreg free
  1028  000F00  C03E  F079         	movff	?___lwdiv,lcd_putnum@r
  1029  000F04  C03F  F07A         	movff	?___lwdiv+1,lcd_putnum@r+1
  1030                           
  1031                           ;lcd_driver.c: 99: dec = num - r*10;
  1032  000F08  0100               	movlb	0	; () banked
  1033  000F0A  5179               	movf	lcd_putnum@r& (0+255),w,b
  1034  000F0C  0D0A               	mullw	10
  1035  000F0E  50F3               	movf	prodl,w,c
  1036  000F10  0800               	sublw	0
  1037  000F12  0100               	movlb	0	; () banked
  1038  000F14  2573               	addwf	lcd_putnum@num& (0+255),w,b
  1039  000F16  0100               	movlb	0	; () banked
  1040  000F18  6F78               	movwf	lcd_putnum@dec& (0+255),b
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;lcd_driver.c: 100: x--;
  1044  000F1A  0100               	movlb	0	; () banked
  1045  000F1C  0776               	decf	lcd_putnum@x& (0+255),f,b
  1046                           
  1047                           ; BSR set to: 0
  1048                           ;lcd_driver.c: 101: len--;
  1049  000F1E  0100               	movlb	0	; () banked
  1050  000F20  0775               	decf	lcd_putnum@len& (0+255),f,b
  1051                           
  1052                           ; BSR set to: 0
  1053                           ;lcd_driver.c: 102: lcd_gotoxy(x,y);
  1054  000F22  C077  F070         	movff	lcd_putnum@y,lcd_gotoxy@y
  1055  000F26  0100               	movlb	0	; () banked
  1056  000F28  5176               	movf	lcd_putnum@x& (0+255),w,b
  1057  000F2A  EC39  F007         	call	_lcd_gotoxy
  1058                           
  1059                           ;lcd_driver.c: 103: {lcd_write_byte(dec + 0x30, 1);};
  1060  000F2E  0E01               	movlw	1
  1061  000F30  6E41               	movwf	lcd_write_byte@is_data,c
  1062  000F32  0100               	movlb	0	; () banked
  1063  000F34  5178               	movf	lcd_putnum@dec& (0+255),w,b
  1064  000F36  0F30               	addlw	48
  1065  000F38  ECD8  F008         	call	_lcd_write_byte
  1066                           
  1067                           ;lcd_driver.c: 104: num = r;
  1068  000F3C  C079  F073         	movff	lcd_putnum@r,lcd_putnum@num
  1069  000F40  C07A  F074         	movff	lcd_putnum@r+1,lcd_putnum@num+1
  1070  000F44                     l1631:
  1071  000F44  0100               	movlb	0	; () banked
  1072  000F46  6775               	tstfsz	lcd_putnum@len& (0+255),b
  1073  000F48  D7D1               	goto	l1617
  1074                           
  1075                           ; BSR set to: 0
  1076                           
  1077                           ; BSR set to: 0
  1078  000F4A  0012               	return	
  1079  000F4C                     __end_of_lcd_putnum:
  1080                           	opt stack 0
  1081                           tblptru	equ	0xFF8
  1082                           tblptrh	equ	0xFF7
  1083                           tblptrl	equ	0xFF6
  1084                           tablat	equ	0xFF5
  1085                           prodl	equ	0xFF3
  1086                           intcon	equ	0xFF2
  1087                           postinc0	equ	0xFEE
  1088                           wreg	equ	0xFE8
  1089                           status	equ	0xFD8
  1090                           
  1091 ;; *************** function _lcd_gotoxy *****************
  1092 ;; Defined at:
  1093 ;;		line 54 in file "lcd_driver.c"
  1094 ;; Parameters:    Size  Location     Type
  1095 ;;  x               1    wreg     unsigned char 
  1096 ;;  y               1    0[BANK0 ] unsigned char 
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;  x               1    2[BANK0 ] unsigned char 
  1099 ;;  addr            1    1[BANK0 ] unsigned char 
  1100 ;; Return value:  Size  Location     Type
  1101 ;;		None               void
  1102 ;; Registers used:
  1103 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1109 ;;      Params:         0       1       0       0       0       0       0       0       0
  1110 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1111 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1112 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1113 ;;Total ram usage:        3 bytes
  1114 ;; Hardware stack levels used:    1
  1115 ;; Hardware stack levels required when called:    5
  1116 ;; This function calls:
  1117 ;;		_lcd_write_byte
  1118 ;; This function is called by:
  1119 ;;		_main
  1120 ;;		_lcd_putnum
  1121 ;;		_lcd_puts
  1122 ;;		_lcd_put_blank
  1123 ;;		_lcd_puts_const
  1124 ;; This function uses a non-reentrant model
  1125 ;;
  1126                           
  1127                           	psect	text3
  1128  000E72                     __ptext3:
  1129                           	opt stack 0
  1130  000E72                     _lcd_gotoxy:
  1131                           	opt stack 24
  1132                           
  1133                           ; BSR set to: 0
  1134                           ;incstack = 0
  1135                           ;lcd_gotoxy@x stored from wreg
  1136  000E72  0100               	movlb	0	; () banked
  1137  000E74  6F72               	movwf	lcd_gotoxy@x& (0+255),b
  1138                           
  1139                           ; BSR set to: 0
  1140                           ;lcd_driver.c: 57: uint8_t addr;
  1141                           ;lcd_driver.c: 59: if ((y > 3) || (x > 19))
  1142  000E76  0E04               	movlw	4
  1143  000E78  0100               	movlb	0	; () banked
  1144  000E7A  5D70               	subwf	lcd_gotoxy@y& (0+255),w,b
  1145  000E7C  B0D8               	btfsc	status,0,c
  1146  000E7E  D030               	goto	l136
  1147                           
  1148                           ; BSR set to: 0
  1149  000E80  0E13               	movlw	19
  1150  000E82  0100               	movlb	0	; () banked
  1151  000E84  6572               	cpfsgt	lcd_gotoxy@x& (0+255),b
  1152  000E86  D001               	goto	l133
  1153  000E88  D02B               	goto	l136
  1154  000E8A                     l133:
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;lcd_driver.c: 62: }
  1158                           ;lcd_driver.c: 63: lcd_x = x;
  1159  000E8A  C072  F01C         	movff	lcd_gotoxy@x,_lcd_x
  1160                           
  1161                           ;lcd_driver.c: 64: lcd_y = y;
  1162  000E8E  C070  F01D         	movff	lcd_gotoxy@y,_lcd_y
  1163                           
  1164                           ;lcd_driver.c: 65: addr = x;
  1165  000E92  C072  F071         	movff	lcd_gotoxy@x,lcd_gotoxy@addr
  1166                           
  1167                           ; BSR set to: 0
  1168                           ;lcd_driver.c: 66: addr += LCD_ROW_ADDRESS[y];
  1169  000E96  0100               	movlb	0	; () banked
  1170  000E98  5170               	movf	lcd_gotoxy@y& (0+255),w,b
  1171  000E9A  0D01               	mullw	1
  1172  000E9C  0E01               	movlw	low _LCD_ROW_ADDRESS
  1173  000E9E  24F3               	addwf	prodl,w,c
  1174  000EA0  6EF6               	movwf	tblptrl,c
  1175  000EA2  0E08               	movlw	high _LCD_ROW_ADDRESS
  1176  000EA4  20F4               	addwfc	prodh,w,c
  1177  000EA6  6EF7               	movwf	tblptrh,c
  1178  000EA8                     	if	0	;There are less than 3 active tblptr bytes
  1179  000EA8                     	endif
  1180  000EA8  0008               	tblrd		*
  1181  000EAA  50F5               	movf	tablat,w,c
  1182  000EAC  0100               	movlb	0	; () banked
  1183  000EAE  2771               	addwf	lcd_gotoxy@addr& (0+255),f,b
  1184                           
  1185                           ; BSR set to: 0
  1186                           ;lcd_driver.c: 67: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1187  000EB0  0EFA               	movlw	250
  1188  000EB2                     u1187:
  1189  000EB2  F000               	nop	
  1190  000EB4  2EE8               	decfsz	wreg,f,c
  1191  000EB6  D7FD               	goto	u1187
  1192                           
  1193                           ;lcd_driver.c: 68: lcd_write_byte(addr, 0);
  1194  000EB8  0E00               	movlw	0
  1195  000EBA  6E41               	movwf	lcd_write_byte@is_data,c
  1196  000EBC  0100               	movlb	0	; () banked
  1197  000EBE  5171               	movf	lcd_gotoxy@addr& (0+255),w,b
  1198  000EC0  ECD8  F008         	call	_lcd_write_byte
  1199                           
  1200                           ;lcd_driver.c: 69: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1201  000EC4  0EFA               	movlw	250
  1202  000EC6                     u1197:
  1203  000EC6  F000               	nop	
  1204  000EC8  2EE8               	decfsz	wreg,f,c
  1205  000ECA  D7FD               	goto	u1197
  1206                           
  1207                           ;lcd_driver.c: 70: lcd_write_byte(addr, 0);
  1208  000ECC  0E00               	movlw	0
  1209  000ECE  6E41               	movwf	lcd_write_byte@is_data,c
  1210  000ED0  0100               	movlb	0	; () banked
  1211  000ED2  5171               	movf	lcd_gotoxy@addr& (0+255),w,b
  1212  000ED4  ECD8  F008         	call	_lcd_write_byte
  1213                           
  1214                           ;lcd_driver.c: 71: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
  1215  000ED8  0EFA               	movlw	250
  1216  000EDA                     u1207:
  1217  000EDA  F000               	nop	
  1218  000EDC  2EE8               	decfsz	wreg,f,c
  1219  000EDE  D7FD               	goto	u1207
  1220  000EE0                     l136:
  1221  000EE0  0012               	return	
  1222  000EE2                     __end_of_lcd_gotoxy:
  1223                           	opt stack 0
  1224                           tblptru	equ	0xFF8
  1225                           tblptrh	equ	0xFF7
  1226                           tblptrl	equ	0xFF6
  1227                           tablat	equ	0xFF5
  1228                           prodh	equ	0xFF4
  1229                           prodl	equ	0xFF3
  1230                           intcon	equ	0xFF2
  1231                           postinc0	equ	0xFEE
  1232                           wreg	equ	0xFE8
  1233                           status	equ	0xFD8
  1234                           
  1235 ;; *************** function ___lwdiv *****************
  1236 ;; Defined at:
  1237 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1238 ;; Parameters:    Size  Location     Type
  1239 ;;  dividend        2   27[COMRAM] unsigned int 
  1240 ;;  divisor         2   29[COMRAM] unsigned int 
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;  quotient        2    0[BANK0 ] unsigned int 
  1243 ;;  counter         1    2[BANK0 ] unsigned char 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  2   27[COMRAM] unsigned int 
  1246 ;; Registers used:
  1247 ;;		wreg, status,2, status,0
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1253 ;;      Params:         4       0       0       0       0       0       0       0       0
  1254 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1255 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1256 ;;      Totals:         4       3       0       0       0       0       0       0       0
  1257 ;;Total ram usage:        7 bytes
  1258 ;; Hardware stack levels used:    1
  1259 ;; Hardware stack levels required when called:    3
  1260 ;; This function calls:
  1261 ;;		Nothing
  1262 ;; This function is called by:
  1263 ;;		_lcd_putnum
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text4
  1268  000F4C                     __ptext4:
  1269                           	opt stack 0
  1270  000F4C                     ___lwdiv:
  1271                           	opt stack 26
  1272                           
  1273                           ;incstack = 0
  1274  000F4C  0E00               	movlw	0
  1275  000F4E  0100               	movlb	0	; () banked
  1276  000F50  6F71               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1277  000F52  0E00               	movlw	0
  1278  000F54  0100               	movlb	0	; () banked
  1279  000F56  6F70               	movwf	___lwdiv@quotient& (0+255),b
  1280                           
  1281                           ; BSR set to: 0
  1282  000F58  5041               	movf	___lwdiv@divisor+1,w,c
  1283  000F5A  1040               	iorwf	___lwdiv@divisor,w,c
  1284  000F5C  B4D8               	btfsc	status,2,c
  1285  000F5E  D021               	goto	l809
  1286                           
  1287                           ; BSR set to: 0
  1288  000F60  0E01               	movlw	1
  1289  000F62  0100               	movlb	0	; () banked
  1290  000F64  6F72               	movwf	___lwdiv@counter& (0+255),b
  1291  000F66  D005               	goto	l1495
  1292  000F68                     l1493:
  1293                           
  1294                           ; BSR set to: 0
  1295  000F68  90D8               	bcf	status,0,c
  1296  000F6A  3640               	rlcf	___lwdiv@divisor,f,c
  1297  000F6C  3641               	rlcf	___lwdiv@divisor+1,f,c
  1298  000F6E  0100               	movlb	0	; () banked
  1299  000F70  2B72               	incf	___lwdiv@counter& (0+255),f,b
  1300  000F72                     l1495:
  1301                           
  1302                           ; BSR set to: 0
  1303  000F72  AE41               	btfss	___lwdiv@divisor+1,7,c
  1304  000F74  D7F9               	goto	l1493
  1305  000F76                     l1497:
  1306                           
  1307                           ; BSR set to: 0
  1308  000F76  0100               	movlb	0	; () banked
  1309  000F78  90D8               	bcf	status,0,c
  1310  000F7A  3770               	rlcf	___lwdiv@quotient& (0+255),f,b
  1311  000F7C  3771               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1312                           
  1313                           ; BSR set to: 0
  1314  000F7E  5040               	movf	___lwdiv@divisor,w,c
  1315  000F80  5C3E               	subwf	___lwdiv@dividend,w,c
  1316  000F82  5041               	movf	___lwdiv@divisor+1,w,c
  1317  000F84  583F               	subwfb	___lwdiv@dividend+1,w,c
  1318  000F86  A0D8               	btfss	status,0,c
  1319  000F88  D006               	goto	l1505
  1320                           
  1321                           ; BSR set to: 0
  1322  000F8A  5040               	movf	___lwdiv@divisor,w,c
  1323  000F8C  5E3E               	subwf	___lwdiv@dividend,f,c
  1324  000F8E  5041               	movf	___lwdiv@divisor+1,w,c
  1325  000F90  5A3F               	subwfb	___lwdiv@dividend+1,f,c
  1326                           
  1327                           ; BSR set to: 0
  1328  000F92  0100               	movlb	0	; () banked
  1329  000F94  8170               	bsf	___lwdiv@quotient& (0+255),0,b
  1330  000F96                     l1505:
  1331                           
  1332                           ; BSR set to: 0
  1333  000F96  90D8               	bcf	status,0,c
  1334  000F98  3241               	rrcf	___lwdiv@divisor+1,f,c
  1335  000F9A  3240               	rrcf	___lwdiv@divisor,f,c
  1336                           
  1337                           ; BSR set to: 0
  1338  000F9C  0100               	movlb	0	; () banked
  1339  000F9E  2F72               	decfsz	___lwdiv@counter& (0+255),f,b
  1340  000FA0  D7EA               	goto	l1497
  1341  000FA2                     l809:
  1342                           
  1343                           ; BSR set to: 0
  1344  000FA2  C070  F03E         	movff	___lwdiv@quotient,?___lwdiv
  1345  000FA6  C071  F03F         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1346                           
  1347                           ; BSR set to: 0
  1348  000FAA  0012               	return	
  1349  000FAC                     __end_of___lwdiv:
  1350                           	opt stack 0
  1351                           tblptru	equ	0xFF8
  1352                           tblptrh	equ	0xFF7
  1353                           tblptrl	equ	0xFF6
  1354                           tablat	equ	0xFF5
  1355                           prodh	equ	0xFF4
  1356                           prodl	equ	0xFF3
  1357                           intcon	equ	0xFF2
  1358                           postinc0	equ	0xFEE
  1359                           wreg	equ	0xFE8
  1360                           status	equ	0xFD8
  1361                           
  1362 ;; *************** function _lcd_init *****************
  1363 ;; Defined at:
  1364 ;;		line 11 in file "lcd_driver.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;		None
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;		None
  1369 ;; Return value:  Size  Location     Type
  1370 ;;		None               void
  1371 ;; Registers used:
  1372 ;;		wreg, status,2, status,0, cstack
  1373 ;; Tracked objects:
  1374 ;;		On entry : 0/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1378 ;;      Params:         0       0       0       0       0       0       0       0       0
  1379 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1380 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1381 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1382 ;;Total ram usage:        1 bytes
  1383 ;; Hardware stack levels used:    1
  1384 ;; Hardware stack levels required when called:    5
  1385 ;; This function calls:
  1386 ;;		_lcd_write_byte
  1387 ;;		_lcd_write_nibble
  1388 ;; This function is called by:
  1389 ;;		_main
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text5
  1394  000B24                     __ptext5:
  1395                           	opt stack 0
  1396  000B24                     _lcd_init:
  1397                           	opt stack 25
  1398                           
  1399                           ;lcd_driver.c: 15: { _delay((unsigned long)((15000)*(4000000/4000000.0))); };
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;incstack = 0
  1403  000B24  0E14               	movlw	20
  1404  000B26  0100               	movlb	0	; () banked
  1405  000B28  6F70               	movwf	??_lcd_init& (0+255),b
  1406  000B2A  0E7A               	movlw	122
  1407  000B2C                     u1217:
  1408  000B2C  2EE8               	decfsz	wreg,f,c
  1409  000B2E  D7FE               	goto	u1217
  1410  000B30  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1411  000B32  D7FC               	goto	u1217
  1412                           
  1413                           ;lcd_driver.c: 18: lcd_write_nibble(0x3, 0);
  1414  000B34  0E00               	movlw	0
  1415  000B36  6E3E               	movwf	lcd_write_nibble@is_data,c
  1416  000B38  0E03               	movlw	3
  1417  000B3A  EC67  F006         	call	_lcd_write_nibble
  1418                           
  1419                           ;lcd_driver.c: 20: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1420  000B3E  0E07               	movlw	7
  1421  000B40  0100               	movlb	0	; () banked
  1422  000B42  6F70               	movwf	??_lcd_init& (0+255),b
  1423  000B44  0E7D               	movlw	125
  1424  000B46                     u1227:
  1425  000B46  2EE8               	decfsz	wreg,f,c
  1426  000B48  D7FE               	goto	u1227
  1427  000B4A  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1428  000B4C  D7FC               	goto	u1227
  1429  000B4E  F000               	nop	
  1430                           
  1431                           ;lcd_driver.c: 22: lcd_write_nibble(0x3, 0);
  1432  000B50  0E00               	movlw	0
  1433  000B52  6E3E               	movwf	lcd_write_nibble@is_data,c
  1434  000B54  0E03               	movlw	3
  1435  000B56  EC67  F006         	call	_lcd_write_nibble
  1436                           
  1437                           ;lcd_driver.c: 24: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1438  000B5A  0E07               	movlw	7
  1439  000B5C  0100               	movlb	0	; () banked
  1440  000B5E  6F70               	movwf	??_lcd_init& (0+255),b
  1441  000B60  0E7D               	movlw	125
  1442  000B62                     u1237:
  1443  000B62  2EE8               	decfsz	wreg,f,c
  1444  000B64  D7FE               	goto	u1237
  1445  000B66  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1446  000B68  D7FC               	goto	u1237
  1447  000B6A  F000               	nop	
  1448                           
  1449                           ;lcd_driver.c: 26: lcd_write_nibble(0x3, 0);
  1450  000B6C  0E00               	movlw	0
  1451  000B6E  6E3E               	movwf	lcd_write_nibble@is_data,c
  1452  000B70  0E03               	movlw	3
  1453  000B72  EC67  F006         	call	_lcd_write_nibble
  1454                           
  1455                           ;lcd_driver.c: 28: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1456  000B76  0E07               	movlw	7
  1457  000B78  0100               	movlb	0	; () banked
  1458  000B7A  6F70               	movwf	??_lcd_init& (0+255),b
  1459  000B7C  0E7D               	movlw	125
  1460  000B7E                     u1247:
  1461  000B7E  2EE8               	decfsz	wreg,f,c
  1462  000B80  D7FE               	goto	u1247
  1463  000B82  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1464  000B84  D7FC               	goto	u1247
  1465  000B86  F000               	nop	
  1466                           
  1467                           ;lcd_driver.c: 30: lcd_write_nibble(0x2, 0);
  1468  000B88  0E00               	movlw	0
  1469  000B8A  6E3E               	movwf	lcd_write_nibble@is_data,c
  1470  000B8C  0E02               	movlw	2
  1471  000B8E  EC67  F006         	call	_lcd_write_nibble
  1472                           
  1473                           ;lcd_driver.c: 39: lcd_write_byte(0x28, 0);
  1474  000B92  0E00               	movlw	0
  1475  000B94  6E41               	movwf	lcd_write_byte@is_data,c
  1476  000B96  0E28               	movlw	40
  1477  000B98  ECD8  F008         	call	_lcd_write_byte
  1478                           
  1479                           ;lcd_driver.c: 40: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1480  000B9C  0E07               	movlw	7
  1481  000B9E  0100               	movlb	0	; () banked
  1482  000BA0  6F70               	movwf	??_lcd_init& (0+255),b
  1483  000BA2  0E7D               	movlw	125
  1484  000BA4                     u1257:
  1485  000BA4  2EE8               	decfsz	wreg,f,c
  1486  000BA6  D7FE               	goto	u1257
  1487  000BA8  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1488  000BAA  D7FC               	goto	u1257
  1489  000BAC  F000               	nop	
  1490                           
  1491                           ;lcd_driver.c: 42: lcd_write_byte(0x0c, 0);
  1492  000BAE  0E00               	movlw	0
  1493  000BB0  6E41               	movwf	lcd_write_byte@is_data,c
  1494  000BB2  0E0C               	movlw	12
  1495  000BB4  ECD8  F008         	call	_lcd_write_byte
  1496                           
  1497                           ;lcd_driver.c: 43: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1498  000BB8  0E07               	movlw	7
  1499  000BBA  0100               	movlb	0	; () banked
  1500  000BBC  6F70               	movwf	??_lcd_init& (0+255),b
  1501  000BBE  0E7D               	movlw	125
  1502  000BC0                     u1267:
  1503  000BC0  2EE8               	decfsz	wreg,f,c
  1504  000BC2  D7FE               	goto	u1267
  1505  000BC4  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1506  000BC6  D7FC               	goto	u1267
  1507  000BC8  F000               	nop	
  1508                           
  1509                           ;lcd_driver.c: 45: lcd_write_byte(0x01, 0);
  1510  000BCA  0E00               	movlw	0
  1511  000BCC  6E41               	movwf	lcd_write_byte@is_data,c
  1512  000BCE  0E01               	movlw	1
  1513  000BD0  ECD8  F008         	call	_lcd_write_byte
  1514                           
  1515                           ;lcd_driver.c: 46: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1516  000BD4  0E07               	movlw	7
  1517  000BD6  0100               	movlb	0	; () banked
  1518  000BD8  6F70               	movwf	??_lcd_init& (0+255),b
  1519  000BDA  0E7D               	movlw	125
  1520  000BDC                     u1277:
  1521  000BDC  2EE8               	decfsz	wreg,f,c
  1522  000BDE  D7FE               	goto	u1277
  1523  000BE0  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1524  000BE2  D7FC               	goto	u1277
  1525  000BE4  F000               	nop	
  1526                           
  1527                           ;lcd_driver.c: 48: lcd_write_byte(0x6, 0);
  1528  000BE6  0E00               	movlw	0
  1529  000BE8  6E41               	movwf	lcd_write_byte@is_data,c
  1530  000BEA  0E06               	movlw	6
  1531  000BEC  ECD8  F008         	call	_lcd_write_byte
  1532                           
  1533                           ;lcd_driver.c: 49: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
  1534  000BF0  0E07               	movlw	7
  1535  000BF2  0100               	movlb	0	; () banked
  1536  000BF4  6F70               	movwf	??_lcd_init& (0+255),b
  1537  000BF6  0E7D               	movlw	125
  1538  000BF8                     u1287:
  1539  000BF8  2EE8               	decfsz	wreg,f,c
  1540  000BFA  D7FE               	goto	u1287
  1541  000BFC  2F70               	decfsz	??_lcd_init& (0+255),f,b
  1542  000BFE  D7FC               	goto	u1287
  1543  000C00  F000               	nop	
  1544  000C02  0012               	return	
  1545  000C04                     __end_of_lcd_init:
  1546                           	opt stack 0
  1547                           tblptru	equ	0xFF8
  1548                           tblptrh	equ	0xFF7
  1549                           tblptrl	equ	0xFF6
  1550                           tablat	equ	0xFF5
  1551                           prodh	equ	0xFF4
  1552                           prodl	equ	0xFF3
  1553                           intcon	equ	0xFF2
  1554                           postinc0	equ	0xFEE
  1555                           wreg	equ	0xFE8
  1556                           status	equ	0xFD8
  1557                           
  1558 ;; *************** function _lcd_write_byte *****************
  1559 ;; Defined at:
  1560 ;;		line 185 in file "lcd_driver.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;  byte            1    wreg     unsigned char 
  1563 ;;  is_data         1   30[COMRAM] unsigned char 
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;  byte            1   31[COMRAM] unsigned char 
  1566 ;; Return value:  Size  Location     Type
  1567 ;;		None               void
  1568 ;; Registers used:
  1569 ;;		wreg, status,2, status,0, cstack
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1575 ;;      Params:         1       0       0       0       0       0       0       0       0
  1576 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1577 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1578 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1579 ;;Total ram usage:        2 bytes
  1580 ;; Hardware stack levels used:    1
  1581 ;; Hardware stack levels required when called:    4
  1582 ;; This function calls:
  1583 ;;		_lcd_write_nibble
  1584 ;; This function is called by:
  1585 ;;		_main
  1586 ;;		_lcd_init
  1587 ;;		_lcd_gotoxy
  1588 ;;		_lcd_putnum
  1589 ;;		_lcd_puts
  1590 ;;		_lcd_put_blank
  1591 ;;		_lcd_puts_const
  1592 ;;		_lcd_set_cgram
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           	psect	text6
  1597  0011B0                     __ptext6:
  1598                           	opt stack 0
  1599  0011B0                     _lcd_write_byte:
  1600                           	opt stack 26
  1601                           
  1602                           ;incstack = 0
  1603                           ;lcd_write_byte@byte stored from wreg
  1604  0011B0  6E42               	movwf	lcd_write_byte@byte,c
  1605                           
  1606                           ;lcd_driver.c: 188: lcd_write_nibble(byte >> 4, is_data);
  1607  0011B2  C041  F03E         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
  1608  0011B6  3842               	swapf	lcd_write_byte@byte,w,c
  1609  0011B8  0B0F               	andlw	15
  1610  0011BA  EC67  F006         	call	_lcd_write_nibble
  1611                           
  1612                           ;lcd_driver.c: 189: lcd_write_nibble(byte, is_data);
  1613  0011BE  C041  F03E         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
  1614  0011C2  5042               	movf	lcd_write_byte@byte,w,c
  1615  0011C4  EC67  F006         	call	_lcd_write_nibble
  1616  0011C8  0012               	return	
  1617  0011CA                     __end_of_lcd_write_byte:
  1618                           	opt stack 0
  1619                           tblptru	equ	0xFF8
  1620                           tblptrh	equ	0xFF7
  1621                           tblptrl	equ	0xFF6
  1622                           tablat	equ	0xFF5
  1623                           prodh	equ	0xFF4
  1624                           prodl	equ	0xFF3
  1625                           intcon	equ	0xFF2
  1626                           postinc0	equ	0xFEE
  1627                           wreg	equ	0xFE8
  1628                           status	equ	0xFD8
  1629                           
  1630 ;; *************** function _lcd_write_nibble *****************
  1631 ;; Defined at:
  1632 ;;		line 176 in file "lcd_driver.c"
  1633 ;; Parameters:    Size  Location     Type
  1634 ;;  nibble          1    wreg     unsigned char 
  1635 ;;  is_data         1   27[COMRAM] unsigned char 
  1636 ;; Auto vars:     Size  Location     Type
  1637 ;;  nibble          1   29[COMRAM] unsigned char 
  1638 ;; Return value:  Size  Location     Type
  1639 ;;		None               void
  1640 ;; Registers used:
  1641 ;;		wreg, status,2, status,0, cstack
  1642 ;; Tracked objects:
  1643 ;;		On entry : 0/0
  1644 ;;		On exit  : 0/0
  1645 ;;		Unchanged: 0/0
  1646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1647 ;;      Params:         1       0       0       0       0       0       0       0       0
  1648 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1649 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1650 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1651 ;;Total ram usage:        3 bytes
  1652 ;; Hardware stack levels used:    1
  1653 ;; Hardware stack levels required when called:    3
  1654 ;; This function calls:
  1655 ;;		Nothing
  1656 ;; This function is called by:
  1657 ;;		_lcd_init
  1658 ;;		_lcd_write_byte
  1659 ;; This function uses a non-reentrant model
  1660 ;;
  1661                           
  1662                           	psect	text7
  1663  000CCE                     __ptext7:
  1664                           	opt stack 0
  1665  000CCE                     _lcd_write_nibble:
  1666                           	opt stack 26
  1667                           
  1668                           ;incstack = 0
  1669                           ;lcd_write_nibble@nibble stored from wreg
  1670  000CCE  6E40               	movwf	lcd_write_nibble@nibble,c
  1671                           
  1672                           ;lcd_driver.c: 179: { LATDbits.LATD2 = is_data; };
  1673  000CD0  B03E               	btfsc	lcd_write_nibble@is_data,0,c
  1674  000CD2  D002               	bra	u805
  1675  000CD4  948C               	bcf	3980,2,c	;volatile
  1676  000CD6  D001               	bra	u806
  1677  000CD8                     u805:
  1678  000CD8  848C               	bsf	3980,2,c	;volatile
  1679  000CDA                     u806:
  1680                           
  1681                           ;lcd_driver.c: 180: { _delay((unsigned long)((100)*(4000000/4000000.0))); };
  1682  000CDA  0E21               	movlw	33
  1683  000CDC                     u1297:
  1684  000CDC  2EE8               	decfsz	wreg,f,c
  1685  000CDE  D7FE               	goto	u1297
  1686  000CE0  F000               	nop	
  1687                           
  1688                           ;lcd_driver.c: 181: { LATDbits.LATD4 = nibble & 1; LATDbits.LATD5 = (nibble & 2) >> 1; L
      +                          ATDbits.LATD6 = (nibble & 4) >> 2; LATDbits.LATD7 = (nibble & 8) >> 3; };
  1689  000CE2  C040  F03F         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1690  000CE6  0E01               	movlw	1
  1691  000CE8  163F               	andwf	??_lcd_write_nibble,f,c
  1692  000CEA  3A3F               	swapf	??_lcd_write_nibble,f,c
  1693  000CEC  508C               	movf	3980,w,c	;volatile
  1694  000CEE  183F               	xorwf	??_lcd_write_nibble,w,c
  1695  000CF0  0BEF               	andlw	-17
  1696  000CF2  183F               	xorwf	??_lcd_write_nibble,w,c
  1697  000CF4  6E8C               	movwf	3980,c	;volatile
  1698  000CF6  C040  F03F         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1699  000CFA  90D8               	bcf	status,0,c
  1700  000CFC  323F               	rrcf	??_lcd_write_nibble,f,c
  1701  000CFE  0E01               	movlw	1
  1702  000D00  163F               	andwf	??_lcd_write_nibble,f,c
  1703  000D02  3A3F               	swapf	??_lcd_write_nibble,f,c
  1704  000D04  463F               	rlncf	??_lcd_write_nibble,f,c
  1705  000D06  508C               	movf	3980,w,c	;volatile
  1706  000D08  183F               	xorwf	??_lcd_write_nibble,w,c
  1707  000D0A  0BDF               	andlw	-33
  1708  000D0C  183F               	xorwf	??_lcd_write_nibble,w,c
  1709  000D0E  6E8C               	movwf	3980,c	;volatile
  1710  000D10  C040  F03F         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1711  000D14  90D8               	bcf	status,0,c
  1712  000D16  323F               	rrcf	??_lcd_write_nibble,f,c
  1713  000D18  90D8               	bcf	status,0,c
  1714  000D1A  323F               	rrcf	??_lcd_write_nibble,f,c
  1715  000D1C  0E01               	movlw	1
  1716  000D1E  163F               	andwf	??_lcd_write_nibble,f,c
  1717  000D20  3A3F               	swapf	??_lcd_write_nibble,f,c
  1718  000D22  463F               	rlncf	??_lcd_write_nibble,f,c
  1719  000D24  463F               	rlncf	??_lcd_write_nibble,f,c
  1720  000D26  508C               	movf	3980,w,c	;volatile
  1721  000D28  183F               	xorwf	??_lcd_write_nibble,w,c
  1722  000D2A  0BBF               	andlw	-65
  1723  000D2C  183F               	xorwf	??_lcd_write_nibble,w,c
  1724  000D2E  6E8C               	movwf	3980,c	;volatile
  1725  000D30  C040  F03F         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1726  000D34  90D8               	bcf	status,0,c
  1727  000D36  323F               	rrcf	??_lcd_write_nibble,f,c
  1728  000D38  90D8               	bcf	status,0,c
  1729  000D3A  323F               	rrcf	??_lcd_write_nibble,f,c
  1730  000D3C  90D8               	bcf	status,0,c
  1731  000D3E  323F               	rrcf	??_lcd_write_nibble,f,c
  1732  000D40  0E01               	movlw	1
  1733  000D42  163F               	andwf	??_lcd_write_nibble,f,c
  1734  000D44  323F               	rrcf	??_lcd_write_nibble,f,c
  1735  000D46  323F               	rrcf	??_lcd_write_nibble,f,c
  1736  000D48  508C               	movf	3980,w,c	;volatile
  1737  000D4A  183F               	xorwf	??_lcd_write_nibble,w,c
  1738  000D4C  0B7F               	andlw	-129
  1739  000D4E  183F               	xorwf	??_lcd_write_nibble,w,c
  1740  000D50  6E8C               	movwf	3980,c	;volatile
  1741                           
  1742                           ;lcd_driver.c: 182: { LATDbits.LATD3 = 1; { _delay((unsigned long)((200)*(4000000/400000
      +                          0.0))); }; LATDbits.LATD3 = 0; { _delay((unsigned long)((500)*(4000000/4000000.0))); }; 
      +                          };
  1743  000D52  868C               	bsf	3980,3,c	;volatile
  1744  000D54  0E42               	movlw	66
  1745  000D56                     u1307:
  1746  000D56  2EE8               	decfsz	wreg,f,c
  1747  000D58  D7FE               	goto	u1307
  1748  000D5A  D000               	nop2		;nop
  1749  000D5C  968C               	bcf	3980,3,c	;volatile
  1750  000D5E  0EA6               	movlw	166
  1751  000D60                     u1317:
  1752  000D60  2EE8               	decfsz	wreg,f,c
  1753  000D62  D7FE               	goto	u1317
  1754  000D64  D000               	nop2		;nop
  1755  000D66  0012               	return	
  1756  000D68                     __end_of_lcd_write_nibble:
  1757                           	opt stack 0
  1758                           tblptru	equ	0xFF8
  1759                           tblptrh	equ	0xFF7
  1760                           tblptrl	equ	0xFF6
  1761                           tablat	equ	0xFF5
  1762                           prodh	equ	0xFF4
  1763                           prodl	equ	0xFF3
  1764                           intcon	equ	0xFF2
  1765                           postinc0	equ	0xFEE
  1766                           wreg	equ	0xFE8
  1767                           status	equ	0xFD8
  1768                           
  1769 ;; *************** function _SetDCPWM1 *****************
  1770 ;; Defined at:
  1771 ;;		line 7 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;  dutycycle       2   27[COMRAM] unsigned int 
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;  DCycle          2    0[BANK0 ] struct PWMDC
  1776 ;; Return value:  Size  Location     Type
  1777 ;;		None               void
  1778 ;; Registers used:
  1779 ;;		wreg, status,2, status,0
  1780 ;; Tracked objects:
  1781 ;;		On entry : 0/0
  1782 ;;		On exit  : 0/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1785 ;;      Params:         2       0       0       0       0       0       0       0       0
  1786 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1787 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1788 ;;      Totals:         4       2       0       0       0       0       0       0       0
  1789 ;;Total ram usage:        6 bytes
  1790 ;; Hardware stack levels used:    1
  1791 ;; Hardware stack levels required when called:    3
  1792 ;; This function calls:
  1793 ;;		Nothing
  1794 ;; This function is called by:
  1795 ;;		_main
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           	psect	text8
  1800  001112                     __ptext8:
  1801                           	opt stack 0
  1802  001112                     _SetDCPWM1:
  1803                           	opt stack 27
  1804                           
  1805                           ;incstack = 0
  1806  001112  C03E  F040         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  1807  001116  C03F  F041         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  1808  00111A  0E06               	movlw	6
  1809  00111C                     u965:
  1810  00111C  90D8               	bcf	status,0,c
  1811  00111E  3640               	rlcf	??_SetDCPWM1,f,c
  1812  001120  3641               	rlcf	??_SetDCPWM1+1,f,c
  1813  001122  2EE8               	decfsz	wreg,f,c
  1814  001124  D7FB               	goto	u965
  1815  001126  C040  F070         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  1816  00112A  C041  F071         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  1817  00112E  C071  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  1818  001132  C070  F040         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  1819  001136  90D8               	bcf	status,0,c
  1820  001138  3240               	rrcf	??_SetDCPWM1,f,c
  1821  00113A  90D8               	bcf	status,0,c
  1822  00113C  3240               	rrcf	??_SetDCPWM1,f,c
  1823  00113E  0E30               	movlw	48
  1824  001140  1640               	andwf	??_SetDCPWM1,f,c
  1825  001142  50BD               	movf	4029,w,c	;volatile
  1826  001144  0BCF               	andlw	207
  1827  001146  1040               	iorwf	??_SetDCPWM1,w,c
  1828  001148  6EBD               	movwf	4029,c	;volatile
  1829  00114A  0012               	return	
  1830  00114C                     __end_of_SetDCPWM1:
  1831                           	opt stack 0
  1832                           tblptru	equ	0xFF8
  1833                           tblptrh	equ	0xFF7
  1834                           tblptrl	equ	0xFF6
  1835                           tablat	equ	0xFF5
  1836                           prodh	equ	0xFF4
  1837                           prodl	equ	0xFF3
  1838                           intcon	equ	0xFF2
  1839                           postinc0	equ	0xFEE
  1840                           wreg	equ	0xFE8
  1841                           status	equ	0xFD8
  1842                           
  1843 ;; *************** function _OpenUSART *****************
  1844 ;; Defined at:
  1845 ;;		line 73 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;  config          1    wreg     unsigned char 
  1848 ;;  spbrg           2   27[COMRAM] unsigned int 
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;  config          1    0[BANK0 ] unsigned char 
  1851 ;; Return value:  Size  Location     Type
  1852 ;;		None               void
  1853 ;; Registers used:
  1854 ;;		wreg, status,2
  1855 ;; Tracked objects:
  1856 ;;		On entry : 0/0
  1857 ;;		On exit  : 0/0
  1858 ;;		Unchanged: 0/0
  1859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1860 ;;      Params:         2       0       0       0       0       0       0       0       0
  1861 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1862 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1863 ;;      Totals:         5       1       0       0       0       0       0       0       0
  1864 ;;Total ram usage:        6 bytes
  1865 ;; Hardware stack levels used:    1
  1866 ;; Hardware stack levels required when called:    3
  1867 ;; This function calls:
  1868 ;;		Nothing
  1869 ;; This function is called by:
  1870 ;;		_main
  1871 ;; This function uses a non-reentrant model
  1872 ;;
  1873                           
  1874                           	psect	text9
  1875  000DF8                     __ptext9:
  1876                           	opt stack 0
  1877  000DF8                     _OpenUSART:
  1878                           	opt stack 27
  1879                           
  1880                           ;incstack = 0
  1881                           ;OpenUSART@config stored from wreg
  1882  000DF8  0100               	movlb	0	; () banked
  1883  000DFA  6F70               	movwf	OpenUSART@config& (0+255),b
  1884                           
  1885                           ; BSR set to: 0
  1886  000DFC  0E00               	movlw	0
  1887  000DFE  6EAC               	movwf	4012,c	;volatile
  1888  000E00  0E00               	movlw	0
  1889  000E02  6EAB               	movwf	4011,c	;volatile
  1890                           
  1891                           ; BSR set to: 0
  1892  000E04  0100               	movlb	0	; () banked
  1893  000E06  B170               	btfsc	OpenUSART@config& (0+255),0,b
  1894                           
  1895                           ; BSR set to: 0
  1896  000E08  88AC               	bsf	4012,4,c	;volatile
  1897                           
  1898                           ; BSR set to: 0
  1899                           
  1900                           ; BSR set to: 0
  1901  000E0A  0100               	movlb	0	; () banked
  1902  000E0C  A370               	btfss	OpenUSART@config& (0+255),1,b
  1903  000E0E  D002               	goto	l1519
  1904                           
  1905                           ; BSR set to: 0
  1906  000E10  8CAC               	bsf	4012,6,c	;volatile
  1907  000E12  8CAB               	bsf	4011,6,c	;volatile
  1908  000E14                     l1519:
  1909                           
  1910                           ; BSR set to: 0
  1911  000E14  0100               	movlb	0	; () banked
  1912  000E16  B570               	btfsc	OpenUSART@config& (0+255),2,b
  1913                           
  1914                           ; BSR set to: 0
  1915  000E18  8EAC               	bsf	4012,7,c	;volatile
  1916                           
  1917                           ; BSR set to: 0
  1918                           
  1919                           ; BSR set to: 0
  1920  000E1A  0100               	movlb	0	; () banked
  1921  000E1C  A770               	btfss	OpenUSART@config& (0+255),3,b
  1922  000E1E  D002               	goto	l229
  1923                           
  1924                           ; BSR set to: 0
  1925  000E20  88AB               	bsf	4011,4,c	;volatile
  1926  000E22  D001               	goto	l1527
  1927  000E24                     l229:
  1928                           
  1929                           ; BSR set to: 0
  1930  000E24  8AAB               	bsf	4011,5,c	;volatile
  1931  000E26                     l1527:
  1932                           
  1933                           ; BSR set to: 0
  1934  000E26  0100               	movlb	0	; () banked
  1935  000E28  B970               	btfsc	OpenUSART@config& (0+255),4,b
  1936                           
  1937                           ; BSR set to: 0
  1938  000E2A  84AC               	bsf	4012,2,c	;volatile
  1939                           
  1940                           ; BSR set to: 0
  1941  000E2C  989E               	bcf	3998,4,c	;volatile
  1942                           
  1943                           ; BSR set to: 0
  1944  000E2E  0100               	movlb	0	; () banked
  1945  000E30  BB70               	btfsc	OpenUSART@config& (0+255),5,b
  1946                           
  1947                           ; BSR set to: 0
  1948  000E32  86AB               	bsf	4011,3,c	;volatile
  1949                           
  1950                           ; BSR set to: 0
  1951                           
  1952                           ; BSR set to: 0
  1953  000E34  0100               	movlb	0	; () banked
  1954  000E36  AD70               	btfss	OpenUSART@config& (0+255),6,b
  1955  000E38  D002               	goto	l233
  1956                           
  1957                           ; BSR set to: 0
  1958  000E3A  8A9D               	bsf	3997,5,c	;volatile
  1959  000E3C  D001               	goto	l234
  1960  000E3E                     l233:
  1961                           
  1962                           ; BSR set to: 0
  1963  000E3E  9A9D               	bcf	3997,5,c	;volatile
  1964  000E40                     l234:
  1965                           
  1966                           ; BSR set to: 0
  1967  000E40  9A9E               	bcf	3998,5,c	;volatile
  1968                           
  1969                           ; BSR set to: 0
  1970  000E42  0100               	movlb	0	; () banked
  1971  000E44  AF70               	btfss	OpenUSART@config& (0+255),7,b
  1972  000E46  D002               	goto	l235
  1973                           
  1974                           ; BSR set to: 0
  1975  000E48  889D               	bsf	3997,4,c	;volatile
  1976  000E4A  D001               	goto	l236
  1977  000E4C                     l235:
  1978                           
  1979                           ; BSR set to: 0
  1980  000E4C  989D               	bcf	3997,4,c	;volatile
  1981  000E4E                     l236:
  1982                           
  1983                           ; BSR set to: 0
  1984  000E4E  C03E  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1985                           
  1986                           ; BSR set to: 0
  1987  000E52  C03F  F040         	movff	OpenUSART@spbrg+1,??_OpenUSART
  1988  000E56  C040  F041         	movff	??_OpenUSART,??_OpenUSART+1
  1989  000E5A  6A42               	clrf	(??_OpenUSART+2)& (0+255),c
  1990  000E5C  5041               	movf	??_OpenUSART+1,w,c
  1991  000E5E  6EB0               	movwf	4016,c	;volatile
  1992                           
  1993                           ; BSR set to: 0
  1994  000E60  8AAC               	bsf	4012,5,c	;volatile
  1995                           
  1996                           ; BSR set to: 0
  1997  000E62  8EAB               	bsf	4011,7,c	;volatile
  1998                           
  1999                           ; BSR set to: 0
  2000  000E64  9C94               	bcf	3988,6,c	;volatile
  2001                           
  2002                           ; BSR set to: 0
  2003  000E66  8E94               	bsf	3988,7,c	;volatile
  2004                           
  2005                           ; BSR set to: 0
  2006  000E68  B8AC               	btfsc	4012,4,c	;volatile
  2007                           
  2008                           ; BSR set to: 0
  2009  000E6A  BEAC               	btfsc	4012,7,c	;volatile
  2010  000E6C  D001               	goto	l238
  2011                           
  2012                           ; BSR set to: 0
  2013  000E6E  8C94               	bsf	3988,6,c	;volatile
  2014  000E70                     l238:
  2015                           
  2016                           ; BSR set to: 0
  2017  000E70  0012               	return	
  2018  000E72                     __end_of_OpenUSART:
  2019                           	opt stack 0
  2020                           tblptru	equ	0xFF8
  2021                           tblptrh	equ	0xFF7
  2022                           tblptrl	equ	0xFF6
  2023                           tablat	equ	0xFF5
  2024                           prodh	equ	0xFF4
  2025                           prodl	equ	0xFF3
  2026                           intcon	equ	0xFF2
  2027                           postinc0	equ	0xFEE
  2028                           wreg	equ	0xFE8
  2029                           status	equ	0xFD8
  2030                           
  2031 ;; *************** function _OpenPWM1 *****************
  2032 ;; Defined at:
  2033 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  2034 ;; Parameters:    Size  Location     Type
  2035 ;;  period          1    wreg     unsigned char 
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;  period          1   27[COMRAM] unsigned char 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;		None               void
  2040 ;; Registers used:
  2041 ;;		wreg, status,2, status,0
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2047 ;;      Params:         0       0       0       0       0       0       0       0       0
  2048 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2049 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2050 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2051 ;;Total ram usage:        1 bytes
  2052 ;; Hardware stack levels used:    1
  2053 ;; Hardware stack levels required when called:    3
  2054 ;; This function calls:
  2055 ;;		Nothing
  2056 ;; This function is called by:
  2057 ;;		_main
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           	psect	text10
  2062  0011CA                     __ptext10:
  2063                           	opt stack 0
  2064  0011CA                     _OpenPWM1:
  2065                           	opt stack 27
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;incstack = 0
  2069                           ;OpenPWM1@period stored from wreg
  2070  0011CA  6E3E               	movwf	OpenPWM1@period,c
  2071  0011CC  0E0C               	movlw	12
  2072  0011CE  12BD               	iorwf	4029,f,c	;volatile
  2073  0011D0  9494               	bcf	3988,2,c	;volatile
  2074  0011D2  94CA               	bcf	4042,2,c	;volatile
  2075  0011D4  C03E  FFCB         	movff	OpenPWM1@period,4043	;volatile
  2076  0011D8  84CA               	bsf	4042,2,c	;volatile
  2077  0011DA  0012               	return	
  2078  0011DC                     __end_of_OpenPWM1:
  2079                           	opt stack 0
  2080                           tblptru	equ	0xFF8
  2081                           tblptrh	equ	0xFF7
  2082                           tblptrl	equ	0xFF6
  2083                           tablat	equ	0xFF5
  2084                           prodh	equ	0xFF4
  2085                           prodl	equ	0xFF3
  2086                           intcon	equ	0xFF2
  2087                           postinc0	equ	0xFEE
  2088                           wreg	equ	0xFE8
  2089                           status	equ	0xFD8
  2090                           
  2091 ;; *************** function _ISR *****************
  2092 ;; Defined at:
  2093 ;;		line 96 in file "main.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;		None
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;		None
  2098 ;; Return value:  Size  Location     Type
  2099 ;;		None               void
  2100 ;; Registers used:
  2101 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2107 ;;      Params:         0       0       0       0       0       0       0       0       0
  2108 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2109 ;;      Temps:         14       0       0       0       0       0       0       0       0
  2110 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2111 ;;Total ram usage:       14 bytes
  2112 ;; Hardware stack levels used:    1
  2113 ;; Hardware stack levels required when called:    2
  2114 ;; This function calls:
  2115 ;;		_ReadUSART
  2116 ;;		_atoi
  2117 ;;		_putsUSART
  2118 ;;		_strcat
  2119 ;;		_strncpy
  2120 ;; This function is called by:
  2121 ;;		Interrupt level 2
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           	psect	intcode
  2126  000008                     __pintcode:
  2127                           	opt stack 0
  2128  000008                     _ISR:
  2129                           	opt stack 24
  2130                           
  2131                           ;incstack = 0
  2132  000008  CFFA F030          	movff	pclath,??_ISR
  2133  00000C  CFFB F031          	movff	pclatu,??_ISR+1
  2134  000010  CFE9 F032          	movff	fsr0l,??_ISR+2
  2135  000014  ED1F  F004         	call	int_func,f	;refresh shadow registers
  2136                           pclatu	equ	0xFFB
  2137                           pclath	equ	0xFFA
  2138                           tblptru	equ	0xFF8
  2139                           tblptrh	equ	0xFF7
  2140                           tblptrl	equ	0xFF6
  2141                           tablat	equ	0xFF5
  2142                           prodh	equ	0xFF4
  2143                           prodl	equ	0xFF3
  2144                           intcon	equ	0xFF2
  2145                           postinc0	equ	0xFEE
  2146                           fsr0l	equ	0xFE9
  2147                           wreg	equ	0xFE8
  2148                           status	equ	0xFD8
  2149                           
  2150                           	psect	intcode_body
  2151  00083E                     __pintcode_body:
  2152                           	opt stack 24
  2153  00083E                     int_func:
  2154                           	opt stack 24
  2155  00083E  0006               	pop		; remove dummy address from shadow register refresh
  2156  000840  CFEA F033          	movff	fsr0h,??_ISR+3
  2157  000844  CFE1 F034          	movff	fsr1l,??_ISR+4
  2158  000848  CFE2 F035          	movff	fsr1h,??_ISR+5
  2159  00084C  CFD9 F036          	movff	fsr2l,??_ISR+6
  2160  000850  CFDA F037          	movff	fsr2h,??_ISR+7
  2161  000854  CFF3 F038          	movff	prodl,??_ISR+8
  2162  000858  CFF4 F039          	movff	prodh,??_ISR+9
  2163  00085C  CFF6 F03A          	movff	tblptrl,??_ISR+10
  2164  000860  CFF7 F03B          	movff	tblptrh,??_ISR+11
  2165  000864  CFF8 F03C          	movff	tblptru,??_ISR+12
  2166  000868  CFF5 F03D          	movff	tablat,??_ISR+13
  2167                           
  2168                           ;main.c: 99: if(PIR1bits.RCIF == 1)
  2169  00086C  AA9E               	btfss	3998,5,c	;volatile
  2170  00086E  D0A8               	goto	i2l97
  2171                           
  2172                           ;main.c: 100: {
  2173                           ;main.c: 101: if(i<200)
  2174  000870  5016               	movf	_i+1,w,c
  2175  000872  0A80               	xorlw	128
  2176  000874  6EF3               	movwf	prodl,c
  2177  000876  0E80               	movlw	128
  2178  000878  5CF3               	subwf	prodl,w,c
  2179  00087A  0EC8               	movlw	200
  2180  00087C  B4D8               	btfsc	status,2,c
  2181  00087E  5C15               	subwf	_i,w,c
  2182  000880  B0D8               	btfsc	status,0,c
  2183  000882  D07A               	goto	i2l1439
  2184                           
  2185                           ;main.c: 102: {
  2186                           ;main.c: 103: MessageBuffer[i] = ReadUSART();
  2187  000884  0101               	movlb	1	; () banked
  2188  000886  0E00               	movlw	low _MessageBuffer
  2189  000888  2415               	addwf	_i,w,c
  2190  00088A  6ED9               	movwf	fsr2l,c
  2191  00088C  0101               	movlb	1	; () banked
  2192  00088E  0E01               	movlw	high _MessageBuffer
  2193  000890  2016               	addwfc	_i+1,w,c
  2194  000892  6EDA               	movwf	fsr2h,c
  2195  000894  ECC9  F008         	call	_ReadUSART	;wreg free
  2196  000898  6EDF               	movwf	indf2,c
  2197                           
  2198                           ;main.c: 104: if(MessageBuffer[i] == 0x0D)
  2199  00089A  0101               	movlb	1	; () banked
  2200  00089C  0E00               	movlw	low _MessageBuffer
  2201  00089E  2415               	addwf	_i,w,c
  2202  0008A0  6ED9               	movwf	fsr2l,c
  2203  0008A2  0101               	movlb	1	; () banked
  2204  0008A4  0E01               	movlw	high _MessageBuffer
  2205  0008A6  2016               	addwfc	_i+1,w,c
  2206  0008A8  6EDA               	movwf	fsr2h,c
  2207  0008AA  0E0D               	movlw	13
  2208  0008AC  62DF               	cpfseq	indf2,c
  2209  0008AE  D060               	goto	i2l1435
  2210                           
  2211                           ; BSR set to: 1
  2212                           ;main.c: 105: {
  2213                           ;main.c: 106: strncpy(DC_str, MessageBuffer,4);
  2214  0008B0  0E00               	movlw	high _DC_str
  2215  0008B2  6E24               	movwf	strncpy@to+1,c
  2216  0008B4  0E1E               	movlw	low _DC_str
  2217  0008B6  6E23               	movwf	strncpy@to,c
  2218  0008B8  0101               	movlb	1	; () banked
  2219  0008BA  0E01               	movlw	high _MessageBuffer
  2220  0008BC  6E26               	movwf	strncpy@from+1,c
  2221  0008BE  0101               	movlb	1	; () banked
  2222  0008C0  0E00               	movlw	low _MessageBuffer
  2223  0008C2  6E25               	movwf	strncpy@from,c
  2224  0008C4  0E00               	movlw	0
  2225  0008C6  6E28               	movwf	strncpy@size+1,c
  2226  0008C8  0E04               	movlw	4
  2227  0008CA  6E27               	movwf	strncpy@size,c
  2228  0008CC  EC05  F008         	call	_strncpy	;wreg free
  2229                           
  2230                           ;main.c: 107: k = atoi(DC_str);
  2231  0008D0  0E00               	movlw	high _DC_str
  2232  0008D2  6E2A               	movwf	atoi@s+1,c
  2233  0008D4  0E1E               	movlw	low _DC_str
  2234  0008D6  6E29               	movwf	atoi@s,c
  2235  0008D8  EC02  F006         	call	_atoi	;wreg free
  2236  0008DC  C029  F017         	movff	?_atoi,_k
  2237  0008E0  C02A  F018         	movff	?_atoi+1,_k+1
  2238                           
  2239                           ;main.c: 108: if(k >= 0 && k <= 1023)
  2240  0008E4  BE18               	btfsc	_k+1,7,c
  2241  0008E6  D025               	goto	i2l1423
  2242  0008E8  5018               	movf	_k+1,w,c
  2243  0008EA  0A80               	xorlw	128
  2244  0008EC  6EF3               	movwf	prodl,c
  2245  0008EE  0E84               	movlw	132
  2246  0008F0  5CF3               	subwf	prodl,w,c
  2247  0008F2  0E00               	movlw	0
  2248  0008F4  B4D8               	btfsc	status,2,c
  2249  0008F6  5C17               	subwf	_k,w,c
  2250  0008F8  B0D8               	btfsc	status,0,c
  2251  0008FA  D01B               	goto	i2l1423
  2252                           
  2253                           ;main.c: 109: {
  2254                           ;main.c: 110: DutyCycle = k;
  2255  0008FC  C017  F043         	movff	_k,_DutyCycle
  2256  000900  C018  F044         	movff	_k+1,_DutyCycle+1
  2257                           
  2258                           ;main.c: 111: putsUSART(strcat("Modificado el SetPoint a ",DC_str));
  2259  000904  0E08               	movlw	high STR_2
  2260  000906  6E24               	movwf	strcat@to+1,c
  2261  000908  0E05               	movlw	low STR_2
  2262  00090A  6E23               	movwf	strcat@to,c
  2263  00090C  0E00               	movlw	high _DC_str
  2264  00090E  6E26               	movwf	strcat@from+1,c
  2265  000910  0E1E               	movlw	low _DC_str
  2266  000912  6E25               	movwf	strcat@from,c
  2267  000914  EC62  F008         	call	_strcat	;wreg free
  2268  000918  C023  F029         	movff	?_strcat,putsUSART@data
  2269  00091C  C024  F02A         	movff	?_strcat+1,putsUSART@data+1
  2270  000920  EC34  F008         	call	_putsUSART	;wreg free
  2271                           
  2272                           ;main.c: 112: putsUSART("\n");
  2273  000924  0E08               	movlw	high (STR_4+15)
  2274  000926  6E2A               	movwf	putsUSART@data+1,c
  2275  000928  0E2E               	movlw	low (STR_4+15)
  2276  00092A  6E29               	movwf	putsUSART@data,c
  2277  00092C  EC34  F008         	call	_putsUSART	;wreg free
  2278                           
  2279                           ;main.c: 113: }
  2280  000930  D014               	goto	i2l1429
  2281  000932                     i2l1423:
  2282                           
  2283                           ;main.c: 114: else
  2284                           ;main.c: 115: {
  2285                           ;main.c: 116: putsUSART("Error maquinola\n");
  2286  000932  0E08               	movlw	high STR_4
  2287  000934  6E2A               	movwf	putsUSART@data+1,c
  2288  000936  0E1F               	movlw	low STR_4
  2289  000938  6E29               	movwf	putsUSART@data,c
  2290  00093A  EC34  F008         	call	_putsUSART	;wreg free
  2291  00093E  D00D               	goto	i2l1429
  2292  000940                     i2l1425:
  2293                           
  2294                           ;main.c: 120: MessageBuffer[i] = 0x00;
  2295  000940  0101               	movlb	1	; () banked
  2296  000942  0E00               	movlw	low _MessageBuffer
  2297  000944  2415               	addwf	_i,w,c
  2298  000946  6ED9               	movwf	fsr2l,c
  2299  000948  0101               	movlb	1	; () banked
  2300  00094A  0E01               	movlw	high _MessageBuffer
  2301  00094C  2016               	addwfc	_i+1,w,c
  2302  00094E  6EDA               	movwf	fsr2h,c
  2303  000950  0E00               	movlw	0
  2304  000952  6EDF               	movwf	indf2,c
  2305                           
  2306                           ; BSR set to: 1
  2307  000954  0615               	decf	_i,f,c
  2308  000956  A0D8               	btfss	status,0,c
  2309  000958  0616               	decf	_i+1,f,c
  2310  00095A                     i2l1429:
  2311  00095A  5016               	movf	_i+1,w,c
  2312  00095C  0A80               	xorlw	128
  2313  00095E  6EF3               	movwf	prodl,c
  2314  000960  0E80               	movlw	128
  2315  000962  5CF3               	subwf	prodl,w,c
  2316  000964  0E01               	movlw	1
  2317  000966  B4D8               	btfsc	status,2,c
  2318  000968  5C15               	subwf	_i,w,c
  2319  00096A  B0D8               	btfsc	status,0,c
  2320  00096C  D7E9               	goto	i2l1425
  2321  00096E  D024               	goto	i2l1447
  2322  000970                     i2l1435:
  2323                           
  2324                           ;main.c: 123: }
  2325                           ;main.c: 124: i++;
  2326  000970  4A15               	infsnz	_i,f,c
  2327  000972  2A16               	incf	_i+1,f,c
  2328                           
  2329                           ;main.c: 125: PIR1bits.RCIF = 0;
  2330  000974  9A9E               	bcf	3998,5,c	;volatile
  2331                           
  2332                           ;main.c: 126: }
  2333  000976  D024               	goto	i2l97
  2334  000978                     i2l1439:
  2335                           
  2336                           ;main.c: 127: else
  2337                           ;main.c: 128: {
  2338                           ;main.c: 129: putsUSART(MessageBuffer);
  2339  000978  0101               	movlb	1	; () banked
  2340  00097A  0E01               	movlw	high _MessageBuffer
  2341  00097C  6E2A               	movwf	putsUSART@data+1,c
  2342  00097E  0101               	movlb	1	; () banked
  2343  000980  0E00               	movlw	low _MessageBuffer
  2344  000982  6E29               	movwf	putsUSART@data,c
  2345  000984  EC34  F008         	call	_putsUSART	;wreg free
  2346                           
  2347                           ;main.c: 130: for(;i>0;i--)
  2348  000988  D00D               	goto	i2l1445
  2349  00098A                     i2l1441:
  2350                           
  2351                           ;main.c: 131: MessageBuffer[i] = 0x00;
  2352  00098A  0101               	movlb	1	; () banked
  2353  00098C  0E00               	movlw	low _MessageBuffer
  2354  00098E  2415               	addwf	_i,w,c
  2355  000990  6ED9               	movwf	fsr2l,c
  2356  000992  0101               	movlb	1	; () banked
  2357  000994  0E01               	movlw	high _MessageBuffer
  2358  000996  2016               	addwfc	_i+1,w,c
  2359  000998  6EDA               	movwf	fsr2h,c
  2360  00099A  0E00               	movlw	0
  2361  00099C  6EDF               	movwf	indf2,c
  2362                           
  2363                           ; BSR set to: 1
  2364  00099E  0615               	decf	_i,f,c
  2365  0009A0  A0D8               	btfss	status,0,c
  2366  0009A2  0616               	decf	_i+1,f,c
  2367  0009A4                     i2l1445:
  2368  0009A4  5016               	movf	_i+1,w,c
  2369  0009A6  0A80               	xorlw	128
  2370  0009A8  6EF3               	movwf	prodl,c
  2371  0009AA  0E80               	movlw	128
  2372  0009AC  5CF3               	subwf	prodl,w,c
  2373  0009AE  0E01               	movlw	1
  2374  0009B0  B4D8               	btfsc	status,2,c
  2375  0009B2  5C15               	subwf	_i,w,c
  2376  0009B4  B0D8               	btfsc	status,0,c
  2377  0009B6  D7E9               	goto	i2l1441
  2378  0009B8                     i2l1447:
  2379                           
  2380                           ;main.c: 132: i=0;
  2381  0009B8  0E00               	movlw	0
  2382  0009BA  6E16               	movwf	_i+1,c
  2383  0009BC  0E00               	movlw	0
  2384  0009BE  6E15               	movwf	_i,c
  2385  0009C0                     i2l97:
  2386  0009C0  C03D  FFF5         	movff	??_ISR+13,tablat
  2387  0009C4  C03C  FFF8         	movff	??_ISR+12,tblptru
  2388  0009C8  C03B  FFF7         	movff	??_ISR+11,tblptrh
  2389  0009CC  C03A  FFF6         	movff	??_ISR+10,tblptrl
  2390  0009D0  C039  FFF4         	movff	??_ISR+9,prodh
  2391  0009D4  C038  FFF3         	movff	??_ISR+8,prodl
  2392  0009D8  C037  FFDA         	movff	??_ISR+7,fsr2h
  2393  0009DC  C036  FFD9         	movff	??_ISR+6,fsr2l
  2394  0009E0  C035  FFE2         	movff	??_ISR+5,fsr1h
  2395  0009E4  C034  FFE1         	movff	??_ISR+4,fsr1l
  2396  0009E8  C033  FFEA         	movff	??_ISR+3,fsr0h
  2397  0009EC  C032  FFE9         	movff	??_ISR+2,fsr0l
  2398  0009F0  C031  FFFB         	movff	??_ISR+1,pclatu
  2399  0009F4  C030  FFFA         	movff	??_ISR,pclath
  2400  0009F8  0011               	retfie		f
  2401  0009FA                     __end_of_ISR:
  2402                           	opt stack 0
  2403                           pclatu	equ	0xFFB
  2404                           pclath	equ	0xFFA
  2405                           tblptru	equ	0xFF8
  2406                           tblptrh	equ	0xFF7
  2407                           tblptrl	equ	0xFF6
  2408                           tablat	equ	0xFF5
  2409                           prodh	equ	0xFF4
  2410                           prodl	equ	0xFF3
  2411                           intcon	equ	0xFF2
  2412                           postinc0	equ	0xFEE
  2413                           fsr0h	equ	0xFEA
  2414                           fsr0l	equ	0xFE9
  2415                           wreg	equ	0xFE8
  2416                           fsr1h	equ	0xFE2
  2417                           fsr1l	equ	0xFE1
  2418                           indf2	equ	0xFDF
  2419                           fsr2h	equ	0xFDA
  2420                           fsr2l	equ	0xFD9
  2421                           status	equ	0xFD8
  2422                           
  2423 ;; *************** function _strncpy *****************
  2424 ;; Defined at:
  2425 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\strncpy.c"
  2426 ;; Parameters:    Size  Location     Type
  2427 ;;  to              2    0[COMRAM] PTR unsigned char 
  2428 ;;		 -> DC_str(5), 
  2429 ;;  from            2    2[COMRAM] PTR const unsigned char 
  2430 ;;		 -> MessageBuffer(200), 
  2431 ;;  size            2    4[COMRAM] unsigned int 
  2432 ;; Auto vars:     Size  Location     Type
  2433 ;;  cp              2    6[COMRAM] PTR unsigned char 
  2434 ;;		 -> DC_str(5), 
  2435 ;; Return value:  Size  Location     Type
  2436 ;;                  2    0[COMRAM] PTR unsigned char 
  2437 ;; Registers used:
  2438 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2439 ;; Tracked objects:
  2440 ;;		On entry : 0/0
  2441 ;;		On exit  : 0/0
  2442 ;;		Unchanged: 0/0
  2443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2444 ;;      Params:         6       0       0       0       0       0       0       0       0
  2445 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2446 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2447 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2448 ;;Total ram usage:        8 bytes
  2449 ;; Hardware stack levels used:    1
  2450 ;; This function calls:
  2451 ;;		Nothing
  2452 ;; This function is called by:
  2453 ;;		_ISR
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           	psect	text12
  2458  00100A                     __ptext12:
  2459                           	opt stack 0
  2460  00100A                     _strncpy:
  2461                           	opt stack 25
  2462                           
  2463                           ;incstack = 0
  2464  00100A  C024  F02A         	movff	strncpy@to+1,strncpy@cp+1
  2465  00100E  C023  F029         	movff	strncpy@to,strncpy@cp
  2466  001012  D014               	goto	i2l1141
  2467  001014                     i2l1135:
  2468  001014  0627               	decf	strncpy@size,f,c
  2469  001016  A0D8               	btfss	status,0,c
  2470  001018  0628               	decf	strncpy@size+1,f,c
  2471  00101A  C025  FFD9         	movff	strncpy@from,fsr2l
  2472  00101E  C026  FFDA         	movff	strncpy@from+1,fsr2h
  2473  001022  4A25               	infsnz	strncpy@from,f,c
  2474  001024  2A26               	incf	strncpy@from+1,f,c
  2475  001026  C029  FFE1         	movff	strncpy@cp,fsr1l
  2476  00102A  C02A  FFE2         	movff	strncpy@cp+1,fsr1h
  2477  00102E  4A29               	infsnz	strncpy@cp,f,c
  2478  001030  2A2A               	incf	strncpy@cp+1,f,c
  2479  001032  CFDF FFE7          	movff	indf2,indf1
  2480  001036  50E7               	movf	indf1,w,c
  2481  001038  B4D8               	btfsc	status,2,c
  2482  00103A  D00D               	goto	i2l1147
  2483  00103C                     i2l1141:
  2484  00103C  5028               	movf	strncpy@size+1,w,c
  2485  00103E  1027               	iorwf	strncpy@size,w,c
  2486  001040  B4D8               	btfsc	status,2,c
  2487  001042  D009               	goto	i2l1147
  2488  001044  D7E7               	goto	i2l1135
  2489  001046                     i2l1143:
  2490  001046  C029  FFD9         	movff	strncpy@cp,fsr2l
  2491  00104A  C02A  FFDA         	movff	strncpy@cp+1,fsr2h
  2492  00104E  0E00               	movlw	0
  2493  001050  6EDF               	movwf	indf2,c
  2494  001052  4A29               	infsnz	strncpy@cp,f,c
  2495  001054  2A2A               	incf	strncpy@cp+1,f,c
  2496  001056                     i2l1147:
  2497  001056  0627               	decf	strncpy@size,f,c
  2498  001058  A0D8               	btfss	status,0,c
  2499  00105A  0628               	decf	strncpy@size+1,f,c
  2500  00105C  2827               	incf	strncpy@size& (0+255),w,c
  2501  00105E  B4D8               	btfsc	status,2,c
  2502  001060  2828               	incf	(strncpy@size+1)& (0+255),w,c
  2503  001062  B4D8               	btfsc	status,2,c
  2504                           
  2505                           ;	Return value of _strncpy is never used
  2506  001064  0012               	return	
  2507  001066  D7EF               	goto	i2l1143
  2508  001068                     __end_of_strncpy:
  2509                           	opt stack 0
  2510                           pclatu	equ	0xFFB
  2511                           pclath	equ	0xFFA
  2512                           tblptru	equ	0xFF8
  2513                           tblptrh	equ	0xFF7
  2514                           tblptrl	equ	0xFF6
  2515                           tablat	equ	0xFF5
  2516                           prodh	equ	0xFF4
  2517                           prodl	equ	0xFF3
  2518                           intcon	equ	0xFF2
  2519                           postinc0	equ	0xFEE
  2520                           fsr0h	equ	0xFEA
  2521                           fsr0l	equ	0xFE9
  2522                           wreg	equ	0xFE8
  2523                           indf1	equ	0xFE7
  2524                           fsr1h	equ	0xFE2
  2525                           fsr1l	equ	0xFE1
  2526                           indf2	equ	0xFDF
  2527                           fsr2h	equ	0xFDA
  2528                           fsr2l	equ	0xFD9
  2529                           status	equ	0xFD8
  2530                           
  2531 ;; *************** function _strcat *****************
  2532 ;; Defined at:
  2533 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\strcat.c"
  2534 ;; Parameters:    Size  Location     Type
  2535 ;;  to              2    0[COMRAM] PTR unsigned char 
  2536 ;;		 -> STR_2(26), 
  2537 ;;  from            2    2[COMRAM] PTR const unsigned char 
  2538 ;;		 -> DC_str(5), 
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;  cp              2    4[COMRAM] PTR unsigned char 
  2541 ;;		 -> STR_2(26), 
  2542 ;; Return value:  Size  Location     Type
  2543 ;;                  2    0[COMRAM] PTR unsigned char 
  2544 ;; Registers used:
  2545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2546 ;; Tracked objects:
  2547 ;;		On entry : 0/0
  2548 ;;		On exit  : 0/0
  2549 ;;		Unchanged: 0/0
  2550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2551 ;;      Params:         4       0       0       0       0       0       0       0       0
  2552 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2553 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2554 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2555 ;;Total ram usage:        6 bytes
  2556 ;; Hardware stack levels used:    1
  2557 ;; This function calls:
  2558 ;;		Nothing
  2559 ;; This function is called by:
  2560 ;;		_ISR
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           	psect	text13
  2565  0010C4                     __ptext13:
  2566                           	opt stack 0
  2567  0010C4                     _strcat:
  2568                           	opt stack 25
  2569                           
  2570                           ;incstack = 0
  2571  0010C4  C024  F028         	movff	strcat@to+1,strcat@cp+1
  2572  0010C8  C023  F027         	movff	strcat@to,strcat@cp
  2573  0010CC  D002               	goto	i2l1181
  2574  0010CE                     i2l1179:
  2575  0010CE  4A27               	infsnz	strcat@cp,f,c
  2576  0010D0  2A28               	incf	strcat@cp+1,f,c
  2577  0010D2                     i2l1181:
  2578  0010D2  C027  FFF6         	movff	strcat@cp,tblptrl
  2579  0010D6  C028  FFF7         	movff	strcat@cp+1,tblptrh
  2580  0010DA                     	if	0	;tblptru may be non-zero
  2581  0010DA                     	endif
  2582  0010DA                     	if	0	;tblptru may be non-zero
  2583  0010DA                     	endif
  2584  0010DA  0008               	tblrd		*
  2585  0010DC  50F5               	movf	tablat,w,c
  2586  0010DE  0900               	iorlw	0
  2587  0010E0  B4D8               	btfsc	status,2,c
  2588  0010E2  D005               	goto	i2l1185
  2589  0010E4  D7F4               	goto	i2l1179
  2590  0010E6                     i2l1183:
  2591  0010E6  4A27               	infsnz	strcat@cp,f,c
  2592  0010E8  2A28               	incf	strcat@cp+1,f,c
  2593  0010EA  4A25               	infsnz	strcat@from,f,c
  2594  0010EC  2A26               	incf	strcat@from+1,f,c
  2595  0010EE                     i2l1185:
  2596  0010EE  C025  FFD9         	movff	strcat@from,fsr2l
  2597  0010F2  C026  FFDA         	movff	strcat@from+1,fsr2h
  2598  0010F6  50DF               	movf	indf2,w,c
  2599  0010F8  C027  FFF6         	movff	strcat@cp,tblptrl
  2600  0010FC  C028  FFF7         	movff	strcat@cp+1,tblptrh
  2601  001100                     	if	0	;tblptru may be non-zero
  2602  001100                     	endif
  2603  001100                     	if	0	;tblptru may be non-zero
  2604  001100                     	endif
  2605  001100  6EF5               	movwf	tablat,c
  2606  001102  000C               	tblwt		*
  2607  001104  66F6               	tstfsz	tblptrl,c
  2608  001106  D7EF               	goto	i2l1183
  2609  001108  C024  F024         	movff	strcat@to+1,?_strcat+1
  2610  00110C  C023  F023         	movff	strcat@to,?_strcat
  2611  001110  0012               	return	
  2612  001112                     __end_of_strcat:
  2613                           	opt stack 0
  2614                           pclatu	equ	0xFFB
  2615                           pclath	equ	0xFFA
  2616                           tblptru	equ	0xFF8
  2617                           tblptrh	equ	0xFF7
  2618                           tblptrl	equ	0xFF6
  2619                           tablat	equ	0xFF5
  2620                           prodh	equ	0xFF4
  2621                           prodl	equ	0xFF3
  2622                           intcon	equ	0xFF2
  2623                           postinc0	equ	0xFEE
  2624                           fsr0h	equ	0xFEA
  2625                           fsr0l	equ	0xFE9
  2626                           wreg	equ	0xFE8
  2627                           indf1	equ	0xFE7
  2628                           fsr1h	equ	0xFE2
  2629                           fsr1l	equ	0xFE1
  2630                           indf2	equ	0xFDF
  2631                           fsr2h	equ	0xFDA
  2632                           fsr2l	equ	0xFD9
  2633                           status	equ	0xFD8
  2634                           
  2635 ;; *************** function _putsUSART *****************
  2636 ;; Defined at:
  2637 ;;		line 14 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uputs.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  data            2    6[COMRAM] PTR unsigned char 
  2640 ;;		 -> STR_4(17), STR_3(2), STR_2(26), MessageBuffer(200), 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;		None
  2643 ;; Return value:  Size  Location     Type
  2644 ;;		None               void
  2645 ;; Registers used:
  2646 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2652 ;;      Params:         2       0       0       0       0       0       0       0       0
  2653 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2654 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2655 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2656 ;;Total ram usage:        4 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    1
  2659 ;; This function calls:
  2660 ;;		_WriteUSART
  2661 ;; This function is called by:
  2662 ;;		_ISR
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           	psect	text14
  2667  001068                     __ptext14:
  2668                           	opt stack 0
  2669  001068                     _putsUSART:
  2670                           	opt stack 24
  2671  001068                     i2l246:
  2672  001068  A2AC               	btfss	4012,1,c	;volatile
  2673  00106A  D7FE               	goto	i2l246
  2674  00106C  C029  FFF6         	movff	putsUSART@data,tblptrl
  2675  001070  C02A  FFF7         	movff	putsUSART@data+1,tblptrh
  2676  001074  6AF8               	clrf	tblptru,c
  2677  001076  0E07               	movlw	(high __ramtop+-1)
  2678  001078  64F7               	cpfsgt	tblptrh,c
  2679  00107A  D003               	bra	i2u44_47
  2680  00107C  0008               	tblrd		*
  2681  00107E  50F5               	movf	tablat,w,c
  2682  001080  D005               	bra	i2u44_40
  2683  001082                     i2u44_47:
  2684  001082  CFF6 FFE1          	movff	tblptrl,fsr1l
  2685  001086  CFF7 FFE2          	movff	tblptrh,fsr1h
  2686  00108A  50E7               	movf	indf1,w,c
  2687  00108C                     i2u44_40:
  2688  00108C  ECEE  F008         	call	_WriteUSART
  2689  001090  5029               	movf	putsUSART@data,w,c
  2690  001092  6E2B               	movwf	??_putsUSART& (0+255),c
  2691  001094  502A               	movf	putsUSART@data+1,w,c
  2692  001096  6E2C               	movwf	(??_putsUSART+1)& (0+255),c
  2693  001098  4A29               	infsnz	putsUSART@data,f,c
  2694  00109A  2A2A               	incf	putsUSART@data+1,f,c
  2695  00109C  C02B  FFF6         	movff	??_putsUSART,tblptrl
  2696  0010A0  C02C  FFF7         	movff	??_putsUSART+1,tblptrh
  2697  0010A4  6AF8               	clrf	tblptru,c
  2698  0010A6  0E07               	movlw	(high __ramtop+-1)
  2699  0010A8  64F7               	cpfsgt	tblptrh,c
  2700  0010AA  D003               	bra	i2u45_47
  2701  0010AC  0008               	tblrd		*
  2702  0010AE  50F5               	movf	tablat,w,c
  2703  0010B0  D005               	bra	i2u45_40
  2704  0010B2                     i2u45_47:
  2705  0010B2  CFF6 FFE1          	movff	tblptrl,fsr1l
  2706  0010B6  CFF7 FFE2          	movff	tblptrh,fsr1h
  2707  0010BA  50E7               	movf	indf1,w,c
  2708  0010BC                     i2u45_40:
  2709  0010BC  0900               	iorlw	0
  2710  0010BE  B4D8               	btfsc	status,2,c
  2711  0010C0  0012               	return	
  2712  0010C2  D7D2               	goto	i2l246
  2713  0010C4                     __end_of_putsUSART:
  2714                           	opt stack 0
  2715                           pclatu	equ	0xFFB
  2716                           pclath	equ	0xFFA
  2717                           tblptru	equ	0xFF8
  2718                           tblptrh	equ	0xFF7
  2719                           tblptrl	equ	0xFF6
  2720                           tablat	equ	0xFF5
  2721                           prodh	equ	0xFF4
  2722                           prodl	equ	0xFF3
  2723                           intcon	equ	0xFF2
  2724                           postinc0	equ	0xFEE
  2725                           fsr0h	equ	0xFEA
  2726                           fsr0l	equ	0xFE9
  2727                           wreg	equ	0xFE8
  2728                           indf1	equ	0xFE7
  2729                           fsr1h	equ	0xFE2
  2730                           fsr1l	equ	0xFE1
  2731                           indf2	equ	0xFDF
  2732                           fsr2h	equ	0xFDA
  2733                           fsr2l	equ	0xFD9
  2734                           status	equ	0xFD8
  2735                           
  2736 ;; *************** function _WriteUSART *****************
  2737 ;; Defined at:
  2738 ;;		line 13 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2739 ;; Parameters:    Size  Location     Type
  2740 ;;  data            1    wreg     unsigned char 
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;  data            1    0[COMRAM] unsigned char 
  2743 ;; Return value:  Size  Location     Type
  2744 ;;		None               void
  2745 ;; Registers used:
  2746 ;;		wreg
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2752 ;;      Params:         0       0       0       0       0       0       0       0       0
  2753 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2754 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2755 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2756 ;;Total ram usage:        1 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; This function calls:
  2759 ;;		Nothing
  2760 ;; This function is called by:
  2761 ;;		_putsUSART
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           	psect	text15
  2766  0011DC                     __ptext15:
  2767                           	opt stack 0
  2768  0011DC                     _WriteUSART:
  2769                           	opt stack 24
  2770                           
  2771                           ;incstack = 0
  2772                           ;WriteUSART@data stored from wreg
  2773  0011DC  6E23               	movwf	WriteUSART@data,c
  2774  0011DE  ACAC               	btfss	4012,6,c	;volatile
  2775  0011E0  D003               	goto	i2l951
  2776  0011E2  90AC               	bcf	4012,0,c	;volatile
  2777  0011E4  B219               	btfsc	_USART_Status,1,c
  2778  0011E6  80AC               	bsf	4012,0,c	;volatile
  2779  0011E8                     i2l951:
  2780  0011E8  C023  FFAD         	movff	WriteUSART@data,4013	;volatile
  2781  0011EC  0012               	return	
  2782  0011EE                     __end_of_WriteUSART:
  2783                           	opt stack 0
  2784                           pclatu	equ	0xFFB
  2785                           pclath	equ	0xFFA
  2786                           tblptru	equ	0xFF8
  2787                           tblptrh	equ	0xFF7
  2788                           tblptrl	equ	0xFF6
  2789                           tablat	equ	0xFF5
  2790                           prodh	equ	0xFF4
  2791                           prodl	equ	0xFF3
  2792                           intcon	equ	0xFF2
  2793                           postinc0	equ	0xFEE
  2794                           fsr0h	equ	0xFEA
  2795                           fsr0l	equ	0xFE9
  2796                           wreg	equ	0xFE8
  2797                           indf1	equ	0xFE7
  2798                           fsr1h	equ	0xFE2
  2799                           fsr1l	equ	0xFE1
  2800                           indf2	equ	0xFDF
  2801                           fsr2h	equ	0xFDA
  2802                           fsr2l	equ	0xFD9
  2803                           status	equ	0xFD8
  2804                           
  2805 ;; *************** function _atoi *****************
  2806 ;; Defined at:
  2807 ;;		line 5 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\atoi.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;  s               2    6[COMRAM] PTR const unsigned char 
  2810 ;;		 -> DC_str(5), 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;  a               2   11[COMRAM] int 
  2813 ;;  sign            1   10[COMRAM] unsigned char 
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  2    6[COMRAM] int 
  2816 ;; Registers used:
  2817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2823 ;;      Params:         2       0       0       0       0       0       0       0       0
  2824 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2825 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2826 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2827 ;;Total ram usage:        7 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:    1
  2830 ;; This function calls:
  2831 ;;		___wmul
  2832 ;;		_isdigit
  2833 ;; This function is called by:
  2834 ;;		_ISR
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           	psect	text16
  2839  000C04                     __ptext16:
  2840                           	opt stack 0
  2841  000C04                     _atoi:
  2842                           	opt stack 24
  2843                           
  2844                           ;incstack = 0
  2845  000C04  D002               	goto	i2l1377
  2846  000C06                     i2l1375:
  2847  000C06  4A29               	infsnz	atoi@s,f,c
  2848  000C08  2A2A               	incf	atoi@s+1,f,c
  2849  000C0A                     i2l1377:
  2850  000C0A  C029  FFD9         	movff	atoi@s,fsr2l
  2851  000C0E  C02A  FFDA         	movff	atoi@s+1,fsr2h
  2852  000C12  50DF               	movf	indf2,w,c
  2853  000C14  0A20               	xorlw	32
  2854  000C16  B4D8               	btfsc	status,2,c
  2855  000C18  D7F6               	goto	i2l1375
  2856  000C1A  C029  FFD9         	movff	atoi@s,fsr2l
  2857  000C1E  C02A  FFDA         	movff	atoi@s+1,fsr2h
  2858  000C22  50DF               	movf	indf2,w,c
  2859  000C24  0A09               	xorlw	9
  2860  000C26  B4D8               	btfsc	status,2,c
  2861  000C28  D7EE               	goto	i2l1375
  2862  000C2A  0E00               	movlw	0
  2863  000C2C  6E2F               	movwf	atoi@a+1,c
  2864  000C2E  0E00               	movlw	0
  2865  000C30  6E2E               	movwf	atoi@a,c
  2866  000C32  0E00               	movlw	0
  2867  000C34  6E2D               	movwf	atoi@sign,c
  2868  000C36  0E2D               	movlw	45
  2869  000C38  C029  FFD9         	movff	atoi@s,fsr2l
  2870  000C3C  C02A  FFDA         	movff	atoi@s+1,fsr2h
  2871  000C40  62DF               	cpfseq	indf2,c
  2872  000C42  D002               	goto	i2l1387
  2873  000C44  2A2D               	incf	atoi@sign,f,c
  2874  000C46  D023               	goto	L1
  2875  000C48                     i2l1387:
  2876  000C48  0E2B               	movlw	43
  2877  000C4A  C029  FFD9         	movff	atoi@s,fsr2l
  2878  000C4E  C02A  FFDA         	movff	atoi@s+1,fsr2h
  2879  000C52  62DF               	cpfseq	indf2,c
  2880  000C54  D01E               	goto	i2l1395
  2881  000C56  D01B               	goto	L1
  2882  000C58                     i2l1391:
  2883  000C58  C02E  F023         	movff	atoi@a,___wmul@multiplier
  2884  000C5C  C02F  F024         	movff	atoi@a+1,___wmul@multiplier+1
  2885  000C60  0E00               	movlw	0
  2886  000C62  6E26               	movwf	___wmul@multiplicand+1,c
  2887  000C64  0E0A               	movlw	10
  2888  000C66  6E25               	movwf	___wmul@multiplicand,c
  2889  000C68  ECA6  F008         	call	___wmul	;wreg free
  2890  000C6C  C029  FFD9         	movff	atoi@s,fsr2l
  2891  000C70  C02A  FFDA         	movff	atoi@s+1,fsr2h
  2892  000C74  50DF               	movf	indf2,w,c
  2893  000C76  6E2B               	movwf	??_atoi& (0+255),c
  2894  000C78  6A2C               	clrf	(??_atoi+1)& (0+255),c
  2895  000C7A  5023               	movf	?___wmul,w,c
  2896  000C7C  262B               	addwf	??_atoi,f,c
  2897  000C7E  5024               	movf	?___wmul+1,w,c
  2898  000C80  222C               	addwfc	??_atoi+1,f,c
  2899  000C82  0ED0               	movlw	208
  2900  000C84  242B               	addwf	??_atoi,w,c
  2901  000C86  6E2E               	movwf	atoi@a,c
  2902  000C88  0EFF               	movlw	255
  2903  000C8A  202C               	addwfc	??_atoi+1,w,c
  2904  000C8C  6E2F               	movwf	atoi@a+1,c
  2905  000C8E                     L1:
  2906  000C8E  4A29               	infsnz	atoi@s,f,c
  2907  000C90  2A2A               	incf	atoi@s+1,f,c
  2908  000C92                     i2l1395:
  2909  000C92  C029  FFD9         	movff	atoi@s,fsr2l
  2910  000C96  C02A  FFDA         	movff	atoi@s+1,fsr2h
  2911  000C9A  50DF               	movf	indf2,w,c
  2912  000C9C  ECB9  F008         	call	_isdigit
  2913  000CA0  B0D8               	btfsc	status,0,c
  2914  000CA2  D7DA               	goto	i2l1391
  2915  000CA4  502D               	movf	atoi@sign,w,c
  2916  000CA6  B4D8               	btfsc	status,2,c
  2917  000CA8  D00D               	goto	i2l459
  2918  000CAA  C02E  F02B         	movff	atoi@a,??_atoi
  2919  000CAE  C02F  F02C         	movff	atoi@a+1,??_atoi+1
  2920  000CB2  1E2B               	comf	??_atoi,f,c
  2921  000CB4  1E2C               	comf	??_atoi+1,f,c
  2922  000CB6  4A2B               	infsnz	??_atoi,f,c
  2923  000CB8  2A2C               	incf	??_atoi+1,f,c
  2924  000CBA  C02B  F029         	movff	??_atoi,?_atoi
  2925  000CBE  C02C  F02A         	movff	??_atoi+1,?_atoi+1
  2926  000CC2  D004               	goto	i2l460
  2927  000CC4                     i2l459:
  2928  000CC4  C02E  F029         	movff	atoi@a,?_atoi
  2929  000CC8  C02F  F02A         	movff	atoi@a+1,?_atoi+1
  2930  000CCC                     i2l460:
  2931  000CCC  0012               	return	
  2932  000CCE                     __end_of_atoi:
  2933                           	opt stack 0
  2934                           pclatu	equ	0xFFB
  2935                           pclath	equ	0xFFA
  2936                           tblptru	equ	0xFF8
  2937                           tblptrh	equ	0xFF7
  2938                           tblptrl	equ	0xFF6
  2939                           tablat	equ	0xFF5
  2940                           prodh	equ	0xFF4
  2941                           prodl	equ	0xFF3
  2942                           intcon	equ	0xFF2
  2943                           postinc0	equ	0xFEE
  2944                           fsr0h	equ	0xFEA
  2945                           fsr0l	equ	0xFE9
  2946                           wreg	equ	0xFE8
  2947                           indf1	equ	0xFE7
  2948                           fsr1h	equ	0xFE2
  2949                           fsr1l	equ	0xFE1
  2950                           indf2	equ	0xFDF
  2951                           fsr2h	equ	0xFDA
  2952                           fsr2l	equ	0xFD9
  2953                           status	equ	0xFD8
  2954                           
  2955 ;; *************** function _isdigit *****************
  2956 ;; Defined at:
  2957 ;;		line 8 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\isdigit.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;  c               1    wreg     unsigned char 
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;  c               1    2[COMRAM] unsigned char 
  2962 ;; Return value:  Size  Location     Type
  2963 ;;		None               void
  2964 ;; Registers used:
  2965 ;;		wreg, status,2, status,0
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2971 ;;      Params:         0       0       0       0       0       0       0       0       0
  2972 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2973 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2974 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2975 ;;Total ram usage:        3 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; This function calls:
  2978 ;;		Nothing
  2979 ;; This function is called by:
  2980 ;;		_atoi
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text17
  2985  001172                     __ptext17:
  2986                           	opt stack 0
  2987  001172                     _isdigit:
  2988                           	opt stack 24
  2989                           
  2990                           ;incstack = 0
  2991                           ;isdigit@c stored from wreg
  2992  001172  6E25               	movwf	isdigit@c,c
  2993  001174  0E00               	movlw	0
  2994  001176  6E24               	movwf	_isdigit$1320,c
  2995  001178  0E3A               	movlw	58
  2996  00117A  5C25               	subwf	isdigit@c,w,c
  2997  00117C  B0D8               	btfsc	status,0,c
  2998  00117E  D005               	goto	i2l1369
  2999  001180  0E2F               	movlw	47
  3000  001182  6425               	cpfsgt	isdigit@c,c
  3001  001184  D002               	goto	i2l1369
  3002  001186  0E01               	movlw	1
  3003  001188  6E24               	movwf	_isdigit$1320,c
  3004  00118A                     i2l1369:
  3005  00118A  C024  F023         	movff	_isdigit$1320,??_isdigit
  3006  00118E  3023               	rrcf	??_isdigit,w,c
  3007  001190  0012               	return	
  3008  001192                     __end_of_isdigit:
  3009                           	opt stack 0
  3010                           pclatu	equ	0xFFB
  3011                           pclath	equ	0xFFA
  3012                           tblptru	equ	0xFF8
  3013                           tblptrh	equ	0xFF7
  3014                           tblptrl	equ	0xFF6
  3015                           tablat	equ	0xFF5
  3016                           prodh	equ	0xFF4
  3017                           prodl	equ	0xFF3
  3018                           intcon	equ	0xFF2
  3019                           postinc0	equ	0xFEE
  3020                           fsr0h	equ	0xFEA
  3021                           fsr0l	equ	0xFE9
  3022                           wreg	equ	0xFE8
  3023                           indf1	equ	0xFE7
  3024                           fsr1h	equ	0xFE2
  3025                           fsr1l	equ	0xFE1
  3026                           indf2	equ	0xFDF
  3027                           fsr2h	equ	0xFDA
  3028                           fsr2l	equ	0xFD9
  3029                           status	equ	0xFD8
  3030                           
  3031 ;; *************** function ___wmul *****************
  3032 ;; Defined at:
  3033 ;;		line 15 in file "I:\Programas\Microchip\xc8\v1.33\sources\common\Umul16.c"
  3034 ;; Parameters:    Size  Location     Type
  3035 ;;  multiplier      2    0[COMRAM] unsigned int 
  3036 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;  product         2    4[COMRAM] unsigned int 
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  2    0[COMRAM] unsigned int 
  3041 ;; Registers used:
  3042 ;;		wreg, status,2, status,0, prodl, prodh
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3048 ;;      Params:         4       0       0       0       0       0       0       0       0
  3049 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3050 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3051 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3052 ;;Total ram usage:        6 bytes
  3053 ;; Hardware stack levels used:    1
  3054 ;; This function calls:
  3055 ;;		Nothing
  3056 ;; This function is called by:
  3057 ;;		_atoi
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text18
  3062  00114C                     __ptext18:
  3063                           	opt stack 0
  3064  00114C                     ___wmul:
  3065                           	opt stack 24
  3066                           
  3067                           ;incstack = 0
  3068  00114C  5023               	movf	___wmul@multiplier,w,c
  3069  00114E  0225               	mulwf	___wmul@multiplicand,c
  3070  001150  CFF3 F027          	movff	prodl,___wmul@product
  3071  001154  CFF4 F028          	movff	prodh,___wmul@product+1
  3072  001158  5023               	movf	___wmul@multiplier,w,c
  3073  00115A  0226               	mulwf	___wmul@multiplicand+1,c
  3074  00115C  50F3               	movf	prodl,w,c
  3075  00115E  2628               	addwf	___wmul@product+1,f,c
  3076  001160  5024               	movf	___wmul@multiplier+1,w,c
  3077  001162  0225               	mulwf	___wmul@multiplicand,c
  3078  001164  50F3               	movf	prodl,w,c
  3079  001166  2628               	addwf	___wmul@product+1,f,c
  3080  001168  C027  F023         	movff	___wmul@product,?___wmul
  3081  00116C  C028  F024         	movff	___wmul@product+1,?___wmul+1
  3082  001170  0012               	return	
  3083  001172                     __end_of___wmul:
  3084                           	opt stack 0
  3085                           pclatu	equ	0xFFB
  3086                           pclath	equ	0xFFA
  3087                           tblptru	equ	0xFF8
  3088                           tblptrh	equ	0xFF7
  3089                           tblptrl	equ	0xFF6
  3090                           tablat	equ	0xFF5
  3091                           prodh	equ	0xFF4
  3092                           prodl	equ	0xFF3
  3093                           intcon	equ	0xFF2
  3094                           postinc0	equ	0xFEE
  3095                           fsr0h	equ	0xFEA
  3096                           fsr0l	equ	0xFE9
  3097                           wreg	equ	0xFE8
  3098                           indf1	equ	0xFE7
  3099                           fsr1h	equ	0xFE2
  3100                           fsr1l	equ	0xFE1
  3101                           indf2	equ	0xFDF
  3102                           fsr2h	equ	0xFDA
  3103                           fsr2l	equ	0xFD9
  3104                           status	equ	0xFD8
  3105                           
  3106 ;; *************** function _ReadUSART *****************
  3107 ;; Defined at:
  3108 ;;		line 15 in file "I:\Programas\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;		None
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;  data            1    0[COMRAM] unsigned char 
  3113 ;; Return value:  Size  Location     Type
  3114 ;;                  1    wreg      unsigned char 
  3115 ;; Registers used:
  3116 ;;		wreg, status,2, status,0
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3122 ;;      Params:         0       0       0       0       0       0       0       0       0
  3123 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3124 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3125 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3126 ;;Total ram usage:        1 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; This function calls:
  3129 ;;		Nothing
  3130 ;; This function is called by:
  3131 ;;		_ISR
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           	psect	text19
  3136  001192                     __ptext19:
  3137                           	opt stack 0
  3138  001192                     _ReadUSART:
  3139                           	opt stack 25
  3140                           
  3141                           ;incstack = 0
  3142  001192  0EF2               	movlw	242
  3143  001194  1619               	andwf	_USART_Status,f,c
  3144  001196  ACAB               	btfss	4011,6,c	;volatile
  3145  001198  D003               	goto	i2l259
  3146  00119A  9019               	bcf	_USART_Status,0,c
  3147  00119C  B0AB               	btfsc	4011,0,c	;volatile
  3148  00119E  8019               	bsf	_USART_Status,0,c
  3149  0011A0                     i2l259:
  3150  0011A0  B4AB               	btfsc	4011,2,c	;volatile
  3151  0011A2  8419               	bsf	_USART_Status,2,c
  3152  0011A4  B2AB               	btfsc	4011,1,c	;volatile
  3153  0011A6  8619               	bsf	_USART_Status,3,c
  3154  0011A8  CFAE F023          	movff	4014,ReadUSART@data	;volatile
  3155  0011AC  5023               	movf	ReadUSART@data,w,c
  3156  0011AE  0012               	return	
  3157  0011B0                     __end_of_ReadUSART:
  3158                           	opt stack 0
  3159                           pclatu	equ	0xFFB
  3160                           pclath	equ	0xFFA
  3161                           tblptru	equ	0xFF8
  3162                           tblptrh	equ	0xFF7
  3163                           tblptrl	equ	0xFF6
  3164                           tablat	equ	0xFF5
  3165                           prodh	equ	0xFF4
  3166                           prodl	equ	0xFF3
  3167                           intcon	equ	0xFF2
  3168                           postinc0	equ	0xFEE
  3169                           fsr0h	equ	0xFEA
  3170                           fsr0l	equ	0xFE9
  3171                           wreg	equ	0xFE8
  3172                           indf1	equ	0xFE7
  3173                           fsr1h	equ	0xFE2
  3174                           fsr1l	equ	0xFE1
  3175                           indf2	equ	0xFDF
  3176                           fsr2h	equ	0xFDA
  3177                           fsr2l	equ	0xFD9
  3178                           status	equ	0xFD8
  3179                           pclatu	equ	0xFFB
  3180                           pclath	equ	0xFFA
  3181                           tblptru	equ	0xFF8
  3182                           tblptrh	equ	0xFF7
  3183                           tblptrl	equ	0xFF6
  3184                           tablat	equ	0xFF5
  3185                           prodh	equ	0xFF4
  3186                           prodl	equ	0xFF3
  3187                           intcon	equ	0xFF2
  3188                           postinc0	equ	0xFEE
  3189                           fsr0h	equ	0xFEA
  3190                           fsr0l	equ	0xFE9
  3191                           wreg	equ	0xFE8
  3192                           indf1	equ	0xFE7
  3193                           fsr1h	equ	0xFE2
  3194                           fsr1l	equ	0xFE1
  3195                           indf2	equ	0xFDF
  3196                           fsr2h	equ	0xFDA
  3197                           fsr2l	equ	0xFD9
  3198                           status	equ	0xFD8
  3199                           
  3200                           	psect	rparam
  3201  0000                     pclatu	equ	0xFFB
  3202                           pclath	equ	0xFFA
  3203                           tblptru	equ	0xFF8
  3204                           tblptrh	equ	0xFF7
  3205                           tblptrl	equ	0xFF6
  3206                           tablat	equ	0xFF5
  3207                           prodh	equ	0xFF4
  3208                           prodl	equ	0xFF3
  3209                           intcon	equ	0xFF2
  3210                           postinc0	equ	0xFEE
  3211                           fsr0h	equ	0xFEA
  3212                           fsr0l	equ	0xFE9
  3213                           wreg	equ	0xFE8
  3214                           indf1	equ	0xFE7
  3215                           fsr1h	equ	0xFE2
  3216                           fsr1l	equ	0xFE1
  3217                           indf2	equ	0xFDF
  3218                           fsr2h	equ	0xFDA
  3219                           fsr2l	equ	0xFD9
  3220                           status	equ	0xFD8


Data Sizes:
    Strings     56
    Constant    4
    Data        2
    BSS         650
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     32      68
    BANK0           160     14      30
    BANK1           256      0     200
    BANK2           256      0     200
    BANK3           256      0     200
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strncpy@from	PTR const unsigned char  size(2) Largest target is 200
		 -> MessageBuffer(BANK1[200]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 26
		 -> STR_2(CODE[26]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 26
		 -> STR_2(CODE[26]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 200
		 -> STR_4(CODE[17]), STR_3(CODE[2]), STR_2(CODE[26]), MessageBuffer(BANK1[200]), 

    lcd_puts@str	PTR unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 26
		 -> STR_2(CODE[26]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 5
		 -> DC_str(COMRAM[5]), 


Critical Paths under _main in COMRAM

    _main->_OpenUSART
    _main->_lcd_write_byte
    _lcd_puts->_lcd_write_byte
    _lcd_putnum->_lcd_write_byte
    _lcd_gotoxy->_lcd_write_byte
    _lcd_init->_lcd_write_byte
    _lcd_write_byte->_lcd_write_nibble

Critical Paths under _ISR in COMRAM

    _ISR->_atoi
    _putsUSART->_strcat
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_lcd_putnum
    _lcd_puts->_lcd_gotoxy
    _lcd_putnum->___lwdiv
    _lcd_putnum->_lcd_gotoxy

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   13915
                                             11 BANK0      3     3      0
                           _OpenPWM1
                          _OpenUSART
                          _SetDCPWM1
                         _lcd_gotoxy
                           _lcd_init
                         _lcd_putnum
                           _lcd_puts
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    3671
                                              3 BANK0      2     0      2
                         _lcd_gotoxy
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_putnum                                           8     3      5    4268
                                              3 BANK0      8     3      5
                            ___lwdiv
                         _lcd_gotoxy
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    2104
                                              0 BANK0      3     2      1
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             27 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1908
                                              0 BANK0      1     1      0
                     _lcd_write_byte
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (1) _lcd_write_byte                                       2     1      1    1414
                                             30 COMRAM     2     1      1
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (2) _lcd_write_nibble                                     3     2      1     494
                                             27 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _SetDCPWM1                                            6     4      2     196
                                             27 COMRAM     4     2      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _OpenUSART                                            6     4      2     284
                                             27 COMRAM     5     3      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _OpenPWM1                                             1     1      0      22
                                             27 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 14    14      0    1278
                                             13 COMRAM    14    14      0
                          _ReadUSART
                               _atoi
                          _putsUSART
                             _strcat
                            _strncpy
 ---------------------------------------------------------------------------------
 (6) _strncpy                                              8     2      6     254
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _strcat                                               6     2      4     181
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _putsUSART                                            4     2      2     257
                                              6 COMRAM     4     2      2
                         _WriteUSART
                             _strcat (ARG)
 ---------------------------------------------------------------------------------
 (7) _WriteUSART                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _atoi                                                 7     5      2     571
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     211
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _ReadUSART                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OpenPWM1
   _OpenUSART
   _SetDCPWM1
   _lcd_gotoxy
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_init
     _lcd_write_byte
       _lcd_write_nibble
     _lcd_write_nibble
   _lcd_putnum
     ___lwdiv
     _lcd_gotoxy
       _lcd_write_byte
         _lcd_write_nibble
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_puts
     _lcd_gotoxy
       _lcd_write_byte
         _lcd_write_nibble
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_write_byte
     _lcd_write_nibble

 _ISR (ROOT)
   _ReadUSART
   _atoi
     ___wmul
     _isdigit
   _putsUSART
     _WriteUSART
     _strcat (ARG)
   _strcat
   _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      E      1E       5       18.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     20      44       1       71.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2BA      20        0.0%
DATA                 0      0     2BA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Jan 03 19:34:56 2017

                        _c 001A                          _i 0015                          _k 0017  
      ___wmul@multiplicand 0025                        l133 0E8A                        l136 0EE0  
                      l233 0E3E                        l234 0E40                        l235 0E4C  
                      l236 0E4E                        l229 0E24                        l238 0E70  
                      l809 0FA2                        _PR2 000FCB                        _ISR 0008  
                      u805 0CD8                        u806 0CDA                        u965 111C  
                      wreg 000FE8               __CFG_FOSC$HS 000000                lcd_gotoxy@x 0072  
              lcd_gotoxy@y 0070               __CFG_LVP$OFF 000000                       ?_ISR 0023  
             __CFG_WDT$OFF 000000                       l1505 0F96                       l1601 0D98  
                     l1611 0DDA                       l1605 0DB8                       l1613 0DE0  
                     l1527 0E26                       l1519 0E14                       l1631 0F44  
                     l1617 0EEC                       l1609 0DD0                       l1493 0F68  
                     l1495 0F72                       l1497 0F76                       l1597 0D6A  
                     l1669 0A80                       STR_1 0830                       STR_2 0805  
                     STR_3 082E                       STR_4 081F                       u1207 0EDA  
                     u1127 0A6C                       u1217 0B2C                       u1137 0ACE  
                     u1307 0D56                       u1227 0B46                       u1147 0AE0  
                     u1317 0D60                       u1237 0B62                       u1157 0AF2  
                     u1247 0B7E                       u1167 0B04                       u1257 0BA4  
                     u1177 0B16                       u1267 0BC0                       u1187 0EB2  
                     u1277 0BDC                       u1197 0EC6                       u1287 0BF8  
                     u1297 0CDC                       _PIE1 000F9D                       _PEIE 007F96  
                     _RCIE 007CED                       _RCIF 007CF5                       _RCIP 007CFD  
                     i2l97 09C0     __end_of_lcd_write_byte 11CA                       _atoi 0C04  
                     _main 09FA                       fsr0h 000FEA                       fsr1h 000FE2  
                     fsr0l 000FE9                       fsr2h 000FDA                       indf1 000FE7  
                     fsr1l 000FE1                       indf2 000FDF                       fsr2l 000FD9  
              lcd_puts@str 0073                       pclat 000FFA                       prodh 000FF4  
                     prodl 000FF3                       start 0018                lcd_putnum@r 0079  
              lcd_putnum@x 0076                lcd_putnum@y 0077              __CFG_MCLRE$ON 000000  
                    ??_ISR 0030                      ?_atoi 0029                      ?_main 0023  
                    _T2CON 000FCA            __end_of___lwdiv 0FAC                      i2l246 1068  
                    i2l259 11A0                      i2l460 0CCC                      i2l459 0CC4  
                    i2l951 11E8                      _RCREG 000FAE                      _RCSTA 000FAB  
                    _SPBRG 000FAF                      _TRISC 000F94                      _TRISD 000F95  
                    _TXREG 000FAD                      _TXSTA 000FAC                      _lcd_x 001C  
                    _lcd_y 001D            __end_of_isdigit 1192                      atoi@a 002E  
                    atoi@s 0029                      tablat 000FF5                      tblptr 000FF6  
                    status 000FD8            ?_lcd_write_byte 0041            __end_of_strncpy 1068  
           WriteUSART@data 0023            __initialization 0FAC               __end_of_atoi 0CCE  
             __end_of_main 0B24           __end_of_OpenPWM1 11DC                     ??_atoi 002B  
                   ??_main 007B              __activetblptr 000002                     _CCPR1L 000FBE  
                   i2l1141 103C                     i2l1143 1046                     i2l1135 1014  
                   i2l1147 1056                     i2l1181 10D2                     i2l1183 10E6  
                   i2l1423 0932                     i2l1185 10EE                     i2l1441 098A  
                   i2l1425 0940                     i2l1179 10CE                     i2l1435 0970  
                   i2l1445 09A4                     i2l1429 095A                     i2l1391 0C58  
                   i2l1375 0C06                     i2l1447 09B8                     i2l1439 0978  
                   i2l1369 118A                     i2l1377 0C0A                     i2l1395 0C92  
                   i2l1387 0C48                     _DC_str 001E         __size_of_ReadUSART 001E  
                   _SPBRGH 000FB0         __size_of_SetDCPWM1 003A           __end_of_lcd_init 0C04  
       __size_of_OpenUSART 007A           __end_of_lcd_puts 0DF8                     ___wmul 114C  
 __end_of_lcd_write_nibble 0D68                  ??___lwdiv 0042                     clear_0 0FB2  
                   clear_1 0FBE                     clear_2 0FCA                     clear_3 0FD6  
                   clear_4 0FE2                     _strcat 10C4               __pdataCOMRAM 0043  
                ??_isdigit 0023       _lcd_lower_row_buffer 0300               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
            lcd_putnum@dec 0078              lcd_putnum@len 0075              lcd_putnum@num 0073  
                ??_strncpy 0029              _MessageBuffer 0100                 __accesstop 0060  
  __end_of__initialization 1000                 _WriteUSART 11DC             __pcstackCOMRAM 0023  
        __end_of_ReadUSART 11B0          __end_of_SetDCPWM1 114C             lcd_gotoxy@addr 0071  
            ReadUSART@data 0023          __end_of_OpenUSART 0E72                 __pbssBANK0 0060  
               __pbssBANK1 0100                 __pbssBANK2 0200                 __pbssBANK3 0300  
                ?_OpenPWM1 0023                    ?___wmul 0023                    _CCP1CON 000FBD  
            putsUSART@data 0029                    ?_strcat 0023                 _lcd_gotoxy 0E72  
                  i2u44_40 108C                    i2u44_47 1082                    i2u45_40 10BC  
                  i2u45_47 10B2         __size_of_putsUSART 005C           ??_lcd_write_byte 0042  
               _lcd_putnum 0EE2                  ?_lcd_init 0023                  ?_lcd_puts 0073  
               ??_OpenPWM1 003E                    __Hparam 0000                    __Lparam 0000  
             _flag_newline 001B                ?_WriteUSART 0023            __size_of___wmul 0026  
                  ___lwdiv 0F4C               __psmallconst 0800      lcd_write_byte@is_data 0041  
                  __pcinit 0FAC                    __ramtop 0800                    __ptext0 09FA  
                  __ptext1 0D68                    __ptext2 0EE2                    __ptext3 0E72  
                  __ptext4 0F4C                    __ptext5 0B24                    __ptext6 11B0  
                  __ptext7 0CCE                    __ptext8 1112                    __ptext9 0DF8  
          __size_of_strcat 004E               __size_of_ISR 09F2                  _T2CONbits 000FCA  
       lcd_write_byte@byte 0042                    _isdigit 1172       _lcd_upper_row_buffer 0200  
               ??_lcd_init 0070             __pintcode_body 083E                    _strncpy 100A  
               ??_lcd_puts 0043       end_of_initialization 1000           _cantidadLetrasUP 0013  
            __Lmediumconst 0000                    int_func 083E                  _RCSTAbits 000FAB  
                  postinc0 000FEE          __end_of_putsUSART 10C4          ?_lcd_write_nibble 003E  
       ??_lcd_write_nibble 003F                  _TRISCbits 000F94                ?_lcd_gotoxy 0070  
              ?_lcd_putnum 0073        __size_of_WriteUSART 0012                 main@config 007C  
                _TXSTAbits 000FAC             __end_of___wmul 1172              __pidataCOMRAM 11EE  
           __end_of_strcat 1112        start_initialization 0FAC                  _ReadUSART 1192  
              __end_of_ISR 09FA                  _SetDCPWM1 1112            SetDCPWM1@DCycle 0070  
                _DutyCycle 0043   _lcd_lower_display_buffer 0001                  _OpenUSART 0DF8  
        __size_of_OpenPWM1 0012        __size_of_lcd_gotoxy 0070                   ??___wmul 0027  
      __size_of_lcd_putnum 006A                   ??_strcat 0027                __pbssCOMRAM 0001  
               ?_ReadUSART 0023              __pcstackBANK0 0070                 ?_SetDCPWM1 003E  
      __end_of__stringdata 083D               _isdigit$1320 0024                 ?_OpenUSART 003E  
        __size_of_lcd_init 00E0          __size_of_lcd_puts 0090           ___lwdiv@dividend 003E  
             ??_WriteUSART 0023                  __pintcode 0008                   ?___lwdiv 003E  
              __smallconst 0800                   ?_isdigit 0023           ___lwdiv@quotient 0070  
          _LCD_ROW_ADDRESS 0801                   ?_strncpy 0023         __end_of_WriteUSART 11EE  
           ___wmul@product 0027                   _LATDbits 000F8C                strncpy@from 0025  
                 _PIE1bits 000F9D                strncpy@size 0027                   _PIR1bits 000F9E  
 _lcd_upper_display_buffer 0060                  _putsUSART 1068                __stringdata 0805  
        ___wmul@multiplier 0023                ??_ReadUSART 0023                  main@spbrg 007D  
             ??_lcd_gotoxy 0043                ??_SetDCPWM1 0040               ??_lcd_putnum 0043  
__size_of_lcd_write_nibble 009A         _cantidadLetrasDOWN 0011                ??_OpenUSART 0040  
       SetDCPWM1@dutycycle 003E            OpenUSART@config 0070                   _OpenPWM1 11CA  
  __size_of_lcd_write_byte 001A                   __Hrparam 0000    lcd_write_nibble@is_data 003E  
                 __Lrparam 0000         __end_of_lcd_gotoxy 0EE2           __size_of___lwdiv 0060  
       __end_of_lcd_putnum 0F4C                 ?_putsUSART 0029    __end_of_LCD_ROW_ADDRESS 0805  
           OpenPWM1@period 003E                 strcat@from 0025           __size_of_isdigit 0020  
          ___lwdiv@divisor 0040            ___lwdiv@counter 0072                   __ptext10 11CA  
                 __ptext12 100A                   __ptext13 10C4                   __ptext14 1068  
                 __ptext15 11DC                   __ptext16 0C04                   __ptext17 1172  
                 __ptext18 114C                   __ptext19 1192                   _lcd_init 0B24  
                 _lcd_puts 0D68           __size_of_strncpy 005E              __size_of_atoi 00CA  
            __size_of_main 012A                   atoi@sign 002D                 _INTCONbits 000FF2  
           OpenUSART@spbrg 003E     lcd_write_nibble@nibble 0040                   isdigit@c 0025  
                 intlevel2 0000                  strncpy@cp 0029                  strncpy@to 0023  
              ??_putsUSART 002B                   strcat@cp 0027                   strcat@to 0023  
         _lcd_write_nibble 0CCE               _USART_Status 0019             _lcd_write_byte 11B0  
