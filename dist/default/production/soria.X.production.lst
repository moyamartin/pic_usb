

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Jan 02 19:53:52 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    22  0000                     
    23                           	psect	smallconst
    24  000800                     __psmallconst:
    25                           	opt stack 0
    26  000800  00                 	db	0
    27  000801                     _LCD_ROW_ADDRESS:
    28                           	opt stack 0
    29  000801  80                 	db	128
    30  000802  C0                 	db	192
    31  000803  94                 	db	148
    32  000804  D4                 	db	212
    33  000805                     __end_of_LCD_ROW_ADDRESS:
    34                           	opt stack 0
    35  0000                     _INTCONbits	set	4082
    36  0000                     _LATDbits	set	3980
    37  0000                     _PIE1	set	3997
    38  0000                     _PIE1bits	set	3997
    39  0000                     _PIR1bits	set	3998
    40  0000                     _RCREG	set	4014
    41  0000                     _RCSTA	set	4011
    42  0000                     _RCSTAbits	set	4011
    43  0000                     _SPBRG	set	4015
    44  0000                     _SPBRGH	set	4016
    45  0000                     _TRISC	set	3988
    46  0000                     _TRISCbits	set	3988
    47  0000                     _TRISD	set	3989
    48  0000                     _TXREG	set	4013
    49  0000                     _TXSTA	set	4012
    50  0000                     _TXSTAbits	set	4012
    51  0000                     _PEIE	set	32662
    52  0000                     _RCIE	set	31981
    53  0000                     _RCIF	set	31989
    54  0000                     _RCIP	set	31997
    55  000805                     __stringdata:
    56                           	opt stack 0
    57  000805                     STR_1:
    58  000805  48                 	db	72	;'H'
    59  000806  6F                 	db	111	;'o'
    60  000807  6C                 	db	108	;'l'
    61  000808  61                 	db	97	;'a'
    62  000809  20                 	db	32
    63  00080A  4D                 	db	77	;'M'
    64  00080B  75                 	db	117	;'u'
    65  00080C  6E                 	db	110	;'n'
    66  00080D  64                 	db	100	;'d'
    67  00080E  6F                 	db	111	;'o'
    68  00080F  00                 	db	0
    69  000810                     __end_of__stringdata:
    70                           	opt stack 0
    71                           
    72                           ; #config settings
    73  000810  00                 	db	0	; dummy byte at the end
    74  0000                     
    75                           	psect	cinit
    76  000C8A                     __pcinit:
    77                           	opt stack 0
    78  000C8A                     start_initialization:
    79                           	opt stack 0
    80  000C8A                     __initialization:
    81                           	opt stack 0
    82                           
    83                           ; Clear objects allocated to COMRAM (4 bytes)
    84  000C8A  6A20               	clrf	(__pbssCOMRAM+3)& (0+255),c
    85  000C8C  6A1F               	clrf	(__pbssCOMRAM+2)& (0+255),c
    86  000C8E  6A1E               	clrf	(__pbssCOMRAM+1)& (0+255),c
    87  000C90  6A1D               	clrf	__pbssCOMRAM& (0+255),c
    88  000C92                     end_of_initialization:
    89                           	opt stack 0
    90  000C92                     __end_of__initialization:
    91                           	opt stack 0
    92  000C92  0E00               	movlw	low (__Lsmallconst shr (0+16))
    93  000C94  6EF8               	movwf	tblptru,c
    94  000C96  0E08               	movlw	high __Lsmallconst
    95  000C98  6EF7               	movwf	tblptrh,c
    96  000C9A  0100               	movlb	0
    97  000C9C  EF09  F004         	goto	_main	;jump to C main() function
    98                           tblptru	equ	0xFF8
    99                           tblptrh	equ	0xFF7
   100                           
   101                           	psect	bssCOMRAM
   102  00001D                     __pbssCOMRAM:
   103                           	opt stack 0
   104  00001D                     _USART_Status:
   105                           	opt stack 0
   106  00001D                     	ds	1
   107  00001E                     _c:
   108                           	opt stack 0
   109  00001E                     	ds	1
   110  00001F                     _lcd_x:
   111                           	opt stack 0
   112  00001F                     	ds	1
   113  000020                     _lcd_y:
   114                           	opt stack 0
   115  000020                     	ds	1
   116                           tblptru	equ	0xFF8
   117                           tblptrh	equ	0xFF7
   118                           
   119                           	psect	cstackCOMRAM
   120  000001                     __pcstackCOMRAM:
   121                           	opt stack 0
   122  000001                     ReadUSART@data:
   123                           	opt stack 0
   124  000001                     WriteUSART@data:
   125                           	opt stack 0
   126                           
   127                           ; 1 bytes @ 0x0
   128  000001                     	ds	1
   129  000002                     ??_ISR:
   130                           
   131                           ; 0 bytes @ 0x1
   132  000002                     	ds	14
   133  000010                     lcd_write_nibble@is_data:
   134                           	opt stack 0
   135  000010                     OpenUSART@spbrg:
   136                           	opt stack 0
   137                           
   138                           ; 2 bytes @ 0xF
   139  000010                     	ds	1
   140  000011                     ??_lcd_write_nibble:
   141                           
   142                           ; 0 bytes @ 0x10
   143  000011                     	ds	1
   144  000012                     ??_OpenUSART:
   145  000012                     lcd_write_nibble@nibble:
   146                           	opt stack 0
   147                           
   148                           ; 1 bytes @ 0x11
   149  000012                     	ds	1
   150  000013                     lcd_write_byte@is_data:
   151                           	opt stack 0
   152                           
   153                           ; 1 bytes @ 0x12
   154  000013                     	ds	1
   155  000014                     lcd_write_byte@byte:
   156                           	opt stack 0
   157                           
   158                           ; 1 bytes @ 0x13
   159  000014                     	ds	1
   160  000015                     ??_lcd_init:
   161  000015                     lcd_gotoxy@y:
   162                           	opt stack 0
   163  000015                     OpenUSART@config:
   164                           	opt stack 0
   165                           
   166                           ; 1 bytes @ 0x14
   167  000015                     	ds	1
   168  000016                     lcd_gotoxy@addr:
   169                           	opt stack 0
   170                           
   171                           ; 1 bytes @ 0x15
   172  000016                     	ds	1
   173  000017                     lcd_gotoxy@x:
   174                           	opt stack 0
   175                           
   176                           ; 1 bytes @ 0x16
   177  000017                     	ds	1
   178  000018                     lcd_puts_const@str:
   179                           	opt stack 0
   180                           
   181                           ; 2 bytes @ 0x17
   182  000018                     	ds	2
   183  00001A                     ??_main:
   184                           
   185                           ; 0 bytes @ 0x19
   186  00001A                     	ds	1
   187  00001B                     main@config:
   188                           	opt stack 0
   189                           
   190                           ; 1 bytes @ 0x1A
   191  00001B                     	ds	1
   192  00001C                     main@spbrg:
   193                           	opt stack 0
   194                           
   195                           ; 1 bytes @ 0x1B
   196  00001C                     	ds	1
   197                           tblptru	equ	0xFF8
   198                           tblptrh	equ	0xFF7
   199                           
   200 ;;
   201 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   202 ;;
   203 ;; *************** function _main *****************
   204 ;; Defined at:
   205 ;;		line 22 in file "main.c"
   206 ;; Parameters:    Size  Location     Type
   207 ;;		None
   208 ;; Auto vars:     Size  Location     Type
   209 ;;  spbrg           1   27[COMRAM] unsigned char 
   210 ;;  config          1   26[COMRAM] unsigned char 
   211 ;; Return value:  Size  Location     Type
   212 ;;		None               void
   213 ;; Registers used:
   214 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   215 ;; Tracked objects:
   216 ;;		On entry : 0/0
   217 ;;		On exit  : 0/0
   218 ;;		Unchanged: 0/0
   219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   220 ;;      Params:         0       0       0       0       0       0       0       0       0
   221 ;;      Locals:         2       0       0       0       0       0       0       0       0
   222 ;;      Temps:          1       0       0       0       0       0       0       0       0
   223 ;;      Totals:         3       0       0       0       0       0       0       0       0
   224 ;;Total ram usage:        3 bytes
   225 ;; Hardware stack levels required when called:    6
   226 ;; This function calls:
   227 ;;		_OpenUSART
   228 ;;		_lcd_gotoxy
   229 ;;		_lcd_init
   230 ;;		_lcd_puts_const
   231 ;;		_lcd_write_byte
   232 ;; This function is called by:
   233 ;;		Startup code after reset
   234 ;; This function uses a non-reentrant model
   235 ;;
   236                           
   237                           	psect	text0
   238  000812                     __ptext0:
   239                           	opt stack 0
   240  000812                     _main:
   241                           	opt stack 25
   242                           
   243                           ;main.c: 24: unsigned char config = 0, spbrg = 0;
   244                           
   245                           ;incstack = 0
   246  000812  0E00               	movlw	0
   247  000814  6E1B               	movwf	main@config,c
   248  000816  0E00               	movlw	0
   249  000818  6E1C               	movwf	main@spbrg,c
   250                           
   251                           ;main.c: 26: TRISC = 0b10000000;
   252  00081A  0E80               	movlw	128
   253  00081C  6E94               	movwf	3988,c	;volatile
   254                           
   255                           ;main.c: 27: TRISD = 0b00000000;
   256  00081E  0E00               	movlw	0
   257  000820  6E95               	movwf	3989,c	;volatile
   258                           
   259                           ;main.c: 30: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
   260  000822  0E4F               	movlw	79
   261  000824  16AB               	andwf	4011,f,c	;volatile
   262  000826  9AAC               	bcf	4012,5,c	;volatile
   263  000828  0ECF               	movlw	207
   264  00082A  169D               	andwf	3997,f,c	;volatile
   265                           
   266                           ;main.c: 32: config = 0b01111111& 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111;
   267  00082C  0E7C               	movlw	124
   268  00082E  6E1B               	movwf	main@config,c
   269                           
   270                           ;main.c: 33: spbrg = 77;
   271  000830  0E4D               	movlw	77
   272  000832  6E1C               	movwf	main@spbrg,c
   273                           
   274                           ;main.c: 35: OpenUSART(config, spbrg);
   275  000834  C01C  F010         	movff	main@spbrg,OpenUSART@spbrg
   276  000838  6A11               	clrf	OpenUSART@spbrg+1,c
   277  00083A  501B               	movf	main@config,w,c
   278  00083C  ECC4  F005         	call	_OpenUSART
   279                           
   280                           ;main.c: 38: RCIF = 0;
   281  000840  9A9E               	bcf	3998,5,c	;volatile
   282                           
   283                           ;main.c: 39: RCIP = 0;
   284  000842  9A9F               	bcf	3999,5,c	;volatile
   285                           
   286                           ;main.c: 40: RCIE = 1;
   287  000844  8A9D               	bsf	3997,5,c	;volatile
   288                           
   289                           ;main.c: 41: PEIE = 1;
   290  000846  8CF2               	bsf	intcon,6,c	;volatile
   291                           
   292                           ;main.c: 42: PIR1bits.RCIF = 0;
   293  000848  9A9E               	bcf	3998,5,c	;volatile
   294                           
   295                           ;main.c: 43: (INTCONbits.GIE = 1);
   296  00084A  8EF2               	bsf	intcon,7,c	;volatile
   297                           
   298                           ;main.c: 45: lcd_init();
   299  00084C  EC91  F004         	call	_lcd_init	;wreg free
   300                           
   301                           ;main.c: 46: {lcd_write_byte(0x01, 0); { _delay((unsigned long)((5000)*(12000000/4000000
      +                          .0))); };};
   302  000850  0E00               	movlw	0
   303  000852  6E13               	movwf	lcd_write_byte@is_data,c
   304  000854  0E01               	movlw	1
   305  000856  EC38  F006         	call	_lcd_write_byte
   306  00085A  0E14               	movlw	20
   307  00085C  6E1A               	movwf	??_main& (0+255),c
   308  00085E  0E7A               	movlw	122
   309  000860                     u287:
   310  000860  2EE8               	decfsz	wreg,f,c
   311  000862  D7FE               	goto	u287
   312  000864  2E1A               	decfsz	??_main& (0+255),f,c
   313  000866  D7FC               	goto	u287
   314                           
   315                           ;main.c: 47: lcd_gotoxy(0,0);
   316  000868  0E00               	movlw	0
   317  00086A  6E15               	movwf	lcd_gotoxy@y,c
   318  00086C  0E00               	movlw	0
   319  00086E  ECF8  F005         	call	_lcd_gotoxy
   320                           
   321                           ;main.c: 48: lcd_puts_const("Hola Mundo");
   322  000872  0E08               	movlw	high STR_1
   323  000874  6E19               	movwf	lcd_puts_const@str+1,c
   324  000876  0E05               	movlw	low STR_1
   325  000878  6E18               	movwf	lcd_puts_const@str,c
   326  00087A  EC86  F005         	call	_lcd_puts_const	;wreg free
   327  00087E                     l939:
   328                           
   329                           ;main.c: 53: _delay((unsigned long)((50)*(12000000/4000.0)));
   330  00087E  0EC3               	movlw	195
   331  000880  6E1A               	movwf	??_main& (0+255),c
   332  000882  0ECD               	movlw	205
   333  000884                     u297:
   334  000884  2EE8               	decfsz	wreg,f,c
   335  000886  D7FE               	goto	u297
   336  000888  2E1A               	decfsz	??_main& (0+255),f,c
   337  00088A  D7FC               	goto	u297
   338  00088C  F000               	nop	
   339                           
   340                           ;main.c: 54: _delay((unsigned long)((50)*(12000000/4000.0)));
   341  00088E  0EC3               	movlw	195
   342  000890  6E1A               	movwf	??_main& (0+255),c
   343  000892  0ECD               	movlw	205
   344  000894                     u307:
   345  000894  2EE8               	decfsz	wreg,f,c
   346  000896  D7FE               	goto	u307
   347  000898  2E1A               	decfsz	??_main& (0+255),f,c
   348  00089A  D7FC               	goto	u307
   349  00089C  F000               	nop	
   350                           
   351                           ;main.c: 55: _delay((unsigned long)((50)*(12000000/4000.0)));
   352  00089E  0EC3               	movlw	195
   353  0008A0  6E1A               	movwf	??_main& (0+255),c
   354  0008A2  0ECD               	movlw	205
   355  0008A4                     u317:
   356  0008A4  2EE8               	decfsz	wreg,f,c
   357  0008A6  D7FE               	goto	u317
   358  0008A8  2E1A               	decfsz	??_main& (0+255),f,c
   359  0008AA  D7FC               	goto	u317
   360  0008AC  F000               	nop	
   361                           
   362                           ;main.c: 56: _delay((unsigned long)((50)*(12000000/4000.0)));
   363  0008AE  0EC3               	movlw	195
   364  0008B0  6E1A               	movwf	??_main& (0+255),c
   365  0008B2  0ECD               	movlw	205
   366  0008B4                     u327:
   367  0008B4  2EE8               	decfsz	wreg,f,c
   368  0008B6  D7FE               	goto	u327
   369  0008B8  2E1A               	decfsz	??_main& (0+255),f,c
   370  0008BA  D7FC               	goto	u327
   371  0008BC  F000               	nop	
   372                           
   373                           ;main.c: 57: _delay((unsigned long)((50)*(12000000/4000.0)));
   374  0008BE  0EC3               	movlw	195
   375  0008C0  6E1A               	movwf	??_main& (0+255),c
   376  0008C2  0ECD               	movlw	205
   377  0008C4                     u337:
   378  0008C4  2EE8               	decfsz	wreg,f,c
   379  0008C6  D7FE               	goto	u337
   380  0008C8  2E1A               	decfsz	??_main& (0+255),f,c
   381  0008CA  D7FC               	goto	u337
   382  0008CC  F000               	nop	
   383                           
   384                           ;main.c: 58: _delay((unsigned long)((50)*(12000000/4000.0)));
   385  0008CE  0EC3               	movlw	195
   386  0008D0  6E1A               	movwf	??_main& (0+255),c
   387  0008D2  0ECD               	movlw	205
   388  0008D4                     u347:
   389  0008D4  2EE8               	decfsz	wreg,f,c
   390  0008D6  D7FE               	goto	u347
   391  0008D8  2E1A               	decfsz	??_main& (0+255),f,c
   392  0008DA  D7FC               	goto	u347
   393  0008DC  F000               	nop	
   394                           
   395                           ;main.c: 59: _delay((unsigned long)((50)*(12000000/4000.0)));
   396  0008DE  0EC3               	movlw	195
   397  0008E0  6E1A               	movwf	??_main& (0+255),c
   398  0008E2  0ECD               	movlw	205
   399  0008E4                     u357:
   400  0008E4  2EE8               	decfsz	wreg,f,c
   401  0008E6  D7FE               	goto	u357
   402  0008E8  2E1A               	decfsz	??_main& (0+255),f,c
   403  0008EA  D7FC               	goto	u357
   404  0008EC  F000               	nop	
   405                           
   406                           ;main.c: 60: _delay((unsigned long)((50)*(12000000/4000.0)));
   407  0008EE  0EC3               	movlw	195
   408  0008F0  6E1A               	movwf	??_main& (0+255),c
   409  0008F2  0ECD               	movlw	205
   410  0008F4                     u367:
   411  0008F4  2EE8               	decfsz	wreg,f,c
   412  0008F6  D7FE               	goto	u367
   413  0008F8  2E1A               	decfsz	??_main& (0+255),f,c
   414  0008FA  D7FC               	goto	u367
   415  0008FC  F000               	nop	
   416                           
   417                           ;main.c: 61: _delay((unsigned long)((50)*(12000000/4000.0)));
   418  0008FE  0EC3               	movlw	195
   419  000900  6E1A               	movwf	??_main& (0+255),c
   420  000902  0ECD               	movlw	205
   421  000904                     u377:
   422  000904  2EE8               	decfsz	wreg,f,c
   423  000906  D7FE               	goto	u377
   424  000908  2E1A               	decfsz	??_main& (0+255),f,c
   425  00090A  D7FC               	goto	u377
   426  00090C  F000               	nop	
   427                           
   428                           ;main.c: 62: _delay((unsigned long)((50)*(12000000/4000.0)));
   429  00090E  0EC3               	movlw	195
   430  000910  6E1A               	movwf	??_main& (0+255),c
   431  000912  0ECD               	movlw	205
   432  000914                     u387:
   433  000914  2EE8               	decfsz	wreg,f,c
   434  000916  D7FE               	goto	u387
   435  000918  2E1A               	decfsz	??_main& (0+255),f,c
   436  00091A  D7FC               	goto	u387
   437  00091C  F000               	nop	
   438                           
   439                           ;main.c: 63: LATDbits.LATD0 =~ LATDbits.LATD0;
   440  00091E  708C               	btg	3980,0,c	;volatile
   441  000920  D7AE               	goto	l939
   442  000922                     __end_of_main:
   443                           	opt stack 0
   444                           tblptru	equ	0xFF8
   445                           tblptrh	equ	0xFF7
   446                           intcon	equ	0xFF2
   447                           wreg	equ	0xFE8
   448                           
   449 ;; *************** function _lcd_puts_const *****************
   450 ;; Defined at:
   451 ;;		line 99 in file "lcd_driver.c"
   452 ;; Parameters:    Size  Location     Type
   453 ;;  str             2   23[COMRAM] PTR const unsigned char 
   454 ;;		 -> STR_1(11), 
   455 ;; Auto vars:     Size  Location     Type
   456 ;;		None
   457 ;; Return value:  Size  Location     Type
   458 ;;		None               void
   459 ;; Registers used:
   460 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   461 ;; Tracked objects:
   462 ;;		On entry : 0/0
   463 ;;		On exit  : 0/0
   464 ;;		Unchanged: 0/0
   465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   466 ;;      Params:         2       0       0       0       0       0       0       0       0
   467 ;;      Locals:         0       0       0       0       0       0       0       0       0
   468 ;;      Temps:          0       0       0       0       0       0       0       0       0
   469 ;;      Totals:         2       0       0       0       0       0       0       0       0
   470 ;;Total ram usage:        2 bytes
   471 ;; Hardware stack levels used:    1
   472 ;; Hardware stack levels required when called:    5
   473 ;; This function calls:
   474 ;;		_lcd_gotoxy
   475 ;;		_lcd_write_byte
   476 ;; This function is called by:
   477 ;;		_main
   478 ;; This function uses a non-reentrant model
   479 ;;
   480                           
   481                           	psect	text1
   482  000B0C                     __ptext1:
   483                           	opt stack 0
   484  000B0C                     _lcd_puts_const:
   485                           	opt stack 25
   486                           
   487                           ;lcd_driver.c: 101: while (*str != 0)
   488                           
   489                           ;incstack = 0
   490  000B0C  D033               	goto	l881
   491  000B0E                     l865:
   492                           
   493                           ;lcd_driver.c: 102: {
   494                           ;lcd_driver.c: 103: if (*str != '\n')
   495  000B0E  C018  FFF6         	movff	lcd_puts_const@str,tblptrl
   496  000B12  C019  FFF7         	movff	lcd_puts_const@str+1,tblptrh
   497  000B16                     	if	0	;tblptru may be non-zero
   498  000B16                     	endif
   499  000B16                     	if	0	;tblptru may be non-zero
   500  000B16                     	endif
   501  000B16  0008               	tblrd		*
   502  000B18  50F5               	movf	tablat,w,c
   503  000B1A  0A0A               	xorlw	10
   504  000B1C  B4D8               	btfsc	status,2,c
   505  000B1E  D00A               	goto	l869
   506                           
   507                           ;lcd_driver.c: 104: {
   508                           ;lcd_driver.c: 105: {lcd_write_byte(*str, 1);};
   509  000B20  0E01               	movlw	1
   510  000B22  6E13               	movwf	lcd_write_byte@is_data,c
   511  000B24  C018  FFF6         	movff	lcd_puts_const@str,tblptrl
   512  000B28  C019  FFF7         	movff	lcd_puts_const@str+1,tblptrh
   513  000B2C                     	if	0	;tblptru may be non-zero
   514  000B2C                     	endif
   515  000B2C                     	if	0	;tblptru may be non-zero
   516  000B2C                     	endif
   517  000B2C  0008               	tblrd		*
   518  000B2E  50F5               	movf	tablat,w,c
   519  000B30  EC38  F006         	call	_lcd_write_byte
   520  000B34                     l869:
   521                           
   522                           ;lcd_driver.c: 106: }
   523                           ;lcd_driver.c: 108: if ((++lcd_x == 16) || (*str == '\n'))
   524  000B34  2A1F               	incf	_lcd_x,f,c
   525  000B36  501F               	movf	_lcd_x& (0+255),w,c
   526  000B38  0A10               	xorlw	16
   527  000B3A  B4D8               	btfsc	status,2,c
   528  000B3C  D009               	goto	l873
   529  000B3E  C018  FFF6         	movff	lcd_puts_const@str,tblptrl
   530  000B42  C019  FFF7         	movff	lcd_puts_const@str+1,tblptrh
   531  000B46                     	if	0	;tblptru may be non-zero
   532  000B46                     	endif
   533  000B46                     	if	0	;tblptru may be non-zero
   534  000B46                     	endif
   535  000B46  0008               	tblrd		*
   536  000B48  50F5               	movf	tablat,w,c
   537  000B4A  0A0A               	xorlw	10
   538  000B4C  A4D8               	btfss	status,2,c
   539  000B4E  D010               	goto	l879
   540  000B50                     l873:
   541                           
   542                           ;lcd_driver.c: 109: {
   543                           ;lcd_driver.c: 110: if (++lcd_y == 2)
   544  000B50  2A20               	incf	_lcd_y,f,c
   545  000B52  5020               	movf	_lcd_y& (0+255),w,c
   546  000B54  0A02               	xorlw	2
   547  000B56  A4D8               	btfss	status,2,c
   548  000B58  D006               	goto	l877
   549                           
   550                           ;lcd_driver.c: 111: {
   551                           ;lcd_driver.c: 112: lcd_gotoxy(0,0);
   552  000B5A  0E00               	movlw	0
   553  000B5C  6E15               	movwf	lcd_gotoxy@y,c
   554  000B5E  0E00               	movlw	0
   555  000B60  ECF8  F005         	call	_lcd_gotoxy
   556                           
   557                           ;lcd_driver.c: 113: }
   558  000B64  D005               	goto	l879
   559  000B66                     l877:
   560                           
   561                           ;lcd_driver.c: 114: else
   562                           ;lcd_driver.c: 115: {
   563                           ;lcd_driver.c: 116: lcd_gotoxy(0, lcd_y);
   564  000B66  C020  F015         	movff	_lcd_y,lcd_gotoxy@y
   565  000B6A  0E00               	movlw	0
   566  000B6C  ECF8  F005         	call	_lcd_gotoxy
   567  000B70                     l879:
   568                           
   569                           ;lcd_driver.c: 117: }
   570                           ;lcd_driver.c: 118: }
   571                           ;lcd_driver.c: 119: str++;
   572  000B70  4A18               	infsnz	lcd_puts_const@str,f,c
   573  000B72  2A19               	incf	lcd_puts_const@str+1,f,c
   574  000B74                     l881:
   575  000B74  C018  FFF6         	movff	lcd_puts_const@str,tblptrl
   576  000B78  C019  FFF7         	movff	lcd_puts_const@str+1,tblptrh
   577  000B7C                     	if	0	;tblptru may be non-zero
   578  000B7C                     	endif
   579  000B7C                     	if	0	;tblptru may be non-zero
   580  000B7C                     	endif
   581  000B7C  0008               	tblrd		*
   582  000B7E  50F5               	movf	tablat,w,c
   583  000B80  0900               	iorlw	0
   584  000B82  B4D8               	btfsc	status,2,c
   585  000B84  0012               	return	
   586  000B86  D7C3               	goto	l865
   587  000B88                     __end_of_lcd_puts_const:
   588                           	opt stack 0
   589                           tblptru	equ	0xFF8
   590                           tblptrh	equ	0xFF7
   591                           tblptrl	equ	0xFF6
   592                           tablat	equ	0xFF5
   593                           intcon	equ	0xFF2
   594                           wreg	equ	0xFE8
   595                           status	equ	0xFD8
   596                           
   597 ;; *************** function _lcd_gotoxy *****************
   598 ;; Defined at:
   599 ;;		line 54 in file "lcd_driver.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;  x               1    wreg     unsigned char 
   602 ;;  y               1   20[COMRAM] unsigned char 
   603 ;; Auto vars:     Size  Location     Type
   604 ;;  x               1   22[COMRAM] unsigned char 
   605 ;;  addr            1   21[COMRAM] unsigned char 
   606 ;; Return value:  Size  Location     Type
   607 ;;		None               void
   608 ;; Registers used:
   609 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   610 ;; Tracked objects:
   611 ;;		On entry : 0/0
   612 ;;		On exit  : 0/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   615 ;;      Params:         1       0       0       0       0       0       0       0       0
   616 ;;      Locals:         2       0       0       0       0       0       0       0       0
   617 ;;      Temps:          0       0       0       0       0       0       0       0       0
   618 ;;      Totals:         3       0       0       0       0       0       0       0       0
   619 ;;Total ram usage:        3 bytes
   620 ;; Hardware stack levels used:    1
   621 ;; Hardware stack levels required when called:    4
   622 ;; This function calls:
   623 ;;		_lcd_write_byte
   624 ;; This function is called by:
   625 ;;		_main
   626 ;;		_lcd_puts_const
   627 ;;		_lcd_putnum
   628 ;; This function uses a non-reentrant model
   629 ;;
   630                           
   631                           	psect	text2
   632  000BF0                     __ptext2:
   633                           	opt stack 0
   634  000BF0                     _lcd_gotoxy:
   635                           	opt stack 25
   636                           
   637                           ;incstack = 0
   638                           ;lcd_gotoxy@x stored from wreg
   639  000BF0  6E17               	movwf	lcd_gotoxy@x,c
   640                           
   641                           ;lcd_driver.c: 57: uint8_t addr;
   642                           ;lcd_driver.c: 59: if ((y > 3) || (x > 19))
   643  000BF2  0E04               	movlw	4
   644  000BF4  5C15               	subwf	lcd_gotoxy@y,w,c
   645  000BF6  B0D8               	btfsc	status,0,c
   646  000BF8  D02B               	goto	l78
   647  000BFA  0E13               	movlw	19
   648  000BFC  6417               	cpfsgt	lcd_gotoxy@x,c
   649  000BFE  D001               	goto	l75
   650  000C00  D027               	goto	l78
   651  000C02                     l75:
   652                           
   653                           ;lcd_driver.c: 62: }
   654                           ;lcd_driver.c: 63: lcd_x = x;
   655  000C02  C017  F01F         	movff	lcd_gotoxy@x,_lcd_x
   656                           
   657                           ;lcd_driver.c: 64: lcd_y = y;
   658  000C06  C015  F020         	movff	lcd_gotoxy@y,_lcd_y
   659                           
   660                           ;lcd_driver.c: 65: addr = x;
   661  000C0A  C017  F016         	movff	lcd_gotoxy@x,lcd_gotoxy@addr
   662                           
   663                           ;lcd_driver.c: 66: addr += LCD_ROW_ADDRESS[y];
   664  000C0E  5015               	movf	lcd_gotoxy@y,w,c
   665  000C10  0D01               	mullw	1
   666  000C12  0E01               	movlw	low _LCD_ROW_ADDRESS
   667  000C14  24F3               	addwf	prodl,w,c
   668  000C16  6EF6               	movwf	tblptrl,c
   669  000C18  0E08               	movlw	high _LCD_ROW_ADDRESS
   670  000C1A  20F4               	addwfc	prodh,w,c
   671  000C1C  6EF7               	movwf	tblptrh,c
   672  000C1E                     	if	0	;There are less than 3 active tblptr bytes
   673  000C1E                     	endif
   674  000C1E  0008               	tblrd		*
   675  000C20  50F5               	movf	tablat,w,c
   676  000C22  2616               	addwf	lcd_gotoxy@addr,f,c
   677                           
   678                           ;lcd_driver.c: 67: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
   679  000C24  0EFA               	movlw	250
   680  000C26                     u397:
   681  000C26  F000               	nop	
   682  000C28  2EE8               	decfsz	wreg,f,c
   683  000C2A  D7FD               	goto	u397
   684                           
   685                           ;lcd_driver.c: 68: lcd_write_byte(addr, 0);
   686  000C2C  0E00               	movlw	0
   687  000C2E  6E13               	movwf	lcd_write_byte@is_data,c
   688  000C30  5016               	movf	lcd_gotoxy@addr,w,c
   689  000C32  EC38  F006         	call	_lcd_write_byte
   690                           
   691                           ;lcd_driver.c: 69: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
   692  000C36  0EFA               	movlw	250
   693  000C38                     u407:
   694  000C38  F000               	nop	
   695  000C3A  2EE8               	decfsz	wreg,f,c
   696  000C3C  D7FD               	goto	u407
   697                           
   698                           ;lcd_driver.c: 70: lcd_write_byte(addr, 0);
   699  000C3E  0E00               	movlw	0
   700  000C40  6E13               	movwf	lcd_write_byte@is_data,c
   701  000C42  5016               	movf	lcd_gotoxy@addr,w,c
   702  000C44  EC38  F006         	call	_lcd_write_byte
   703                           
   704                           ;lcd_driver.c: 71: { _delay((unsigned long)((1000)*(4000000/4000000.0))); };
   705  000C48  0EFA               	movlw	250
   706  000C4A                     u417:
   707  000C4A  F000               	nop	
   708  000C4C  2EE8               	decfsz	wreg,f,c
   709  000C4E  D7FD               	goto	u417
   710  000C50                     l78:
   711  000C50  0012               	return	
   712  000C52                     __end_of_lcd_gotoxy:
   713                           	opt stack 0
   714                           tblptru	equ	0xFF8
   715                           tblptrh	equ	0xFF7
   716                           tblptrl	equ	0xFF6
   717                           tablat	equ	0xFF5
   718                           prodh	equ	0xFF4
   719                           prodl	equ	0xFF3
   720                           intcon	equ	0xFF2
   721                           wreg	equ	0xFE8
   722                           status	equ	0xFD8
   723                           
   724 ;; *************** function _lcd_init *****************
   725 ;; Defined at:
   726 ;;		line 11 in file "lcd_driver.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;		None
   729 ;; Auto vars:     Size  Location     Type
   730 ;;		None
   731 ;; Return value:  Size  Location     Type
   732 ;;		None               void
   733 ;; Registers used:
   734 ;;		wreg, status,2, status,0, cstack
   735 ;; Tracked objects:
   736 ;;		On entry : 0/0
   737 ;;		On exit  : 0/0
   738 ;;		Unchanged: 0/0
   739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   740 ;;      Params:         0       0       0       0       0       0       0       0       0
   741 ;;      Locals:         0       0       0       0       0       0       0       0       0
   742 ;;      Temps:          1       0       0       0       0       0       0       0       0
   743 ;;      Totals:         1       0       0       0       0       0       0       0       0
   744 ;;Total ram usage:        1 bytes
   745 ;; Hardware stack levels used:    1
   746 ;; Hardware stack levels required when called:    4
   747 ;; This function calls:
   748 ;;		_lcd_write_byte
   749 ;;		_lcd_write_nibble
   750 ;; This function is called by:
   751 ;;		_main
   752 ;; This function uses a non-reentrant model
   753 ;;
   754                           
   755                           	psect	text3
   756  000922                     __ptext3:
   757                           	opt stack 0
   758  000922                     _lcd_init:
   759                           	opt stack 26
   760                           
   761                           ;lcd_driver.c: 15: { _delay((unsigned long)((15000)*(4000000/4000000.0))); };
   762                           
   763                           ;incstack = 0
   764  000922  0E14               	movlw	20
   765  000924  6E15               	movwf	??_lcd_init& (0+255),c
   766  000926  0E7A               	movlw	122
   767  000928                     u427:
   768  000928  2EE8               	decfsz	wreg,f,c
   769  00092A  D7FE               	goto	u427
   770  00092C  2E15               	decfsz	??_lcd_init& (0+255),f,c
   771  00092E  D7FC               	goto	u427
   772                           
   773                           ;lcd_driver.c: 18: lcd_write_nibble(0x3, 0);
   774  000930  0E00               	movlw	0
   775  000932  6E10               	movwf	lcd_write_nibble@is_data,c
   776  000934  0E03               	movlw	3
   777  000936  ECF9  F004         	call	_lcd_write_nibble
   778                           
   779                           ;lcd_driver.c: 20: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
   780  00093A  0E07               	movlw	7
   781  00093C  6E15               	movwf	??_lcd_init& (0+255),c
   782  00093E  0E7D               	movlw	125
   783  000940                     u437:
   784  000940  2EE8               	decfsz	wreg,f,c
   785  000942  D7FE               	goto	u437
   786  000944  2E15               	decfsz	??_lcd_init& (0+255),f,c
   787  000946  D7FC               	goto	u437
   788  000948  F000               	nop	
   789                           
   790                           ;lcd_driver.c: 22: lcd_write_nibble(0x3, 0);
   791  00094A  0E00               	movlw	0
   792  00094C  6E10               	movwf	lcd_write_nibble@is_data,c
   793  00094E  0E03               	movlw	3
   794  000950  ECF9  F004         	call	_lcd_write_nibble
   795                           
   796                           ;lcd_driver.c: 24: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
   797  000954  0E07               	movlw	7
   798  000956  6E15               	movwf	??_lcd_init& (0+255),c
   799  000958  0E7D               	movlw	125
   800  00095A                     u447:
   801  00095A  2EE8               	decfsz	wreg,f,c
   802  00095C  D7FE               	goto	u447
   803  00095E  2E15               	decfsz	??_lcd_init& (0+255),f,c
   804  000960  D7FC               	goto	u447
   805  000962  F000               	nop	
   806                           
   807                           ;lcd_driver.c: 26: lcd_write_nibble(0x3, 0);
   808  000964  0E00               	movlw	0
   809  000966  6E10               	movwf	lcd_write_nibble@is_data,c
   810  000968  0E03               	movlw	3
   811  00096A  ECF9  F004         	call	_lcd_write_nibble
   812                           
   813                           ;lcd_driver.c: 28: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
   814  00096E  0E07               	movlw	7
   815  000970  6E15               	movwf	??_lcd_init& (0+255),c
   816  000972  0E7D               	movlw	125
   817  000974                     u457:
   818  000974  2EE8               	decfsz	wreg,f,c
   819  000976  D7FE               	goto	u457
   820  000978  2E15               	decfsz	??_lcd_init& (0+255),f,c
   821  00097A  D7FC               	goto	u457
   822  00097C  F000               	nop	
   823                           
   824                           ;lcd_driver.c: 30: lcd_write_nibble(0x2, 0);
   825  00097E  0E00               	movlw	0
   826  000980  6E10               	movwf	lcd_write_nibble@is_data,c
   827  000982  0E02               	movlw	2
   828  000984  ECF9  F004         	call	_lcd_write_nibble
   829                           
   830                           ;lcd_driver.c: 39: lcd_write_byte(0x28, 0);
   831  000988  0E00               	movlw	0
   832  00098A  6E13               	movwf	lcd_write_byte@is_data,c
   833  00098C  0E28               	movlw	40
   834  00098E  EC38  F006         	call	_lcd_write_byte
   835                           
   836                           ;lcd_driver.c: 40: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
   837  000992  0E07               	movlw	7
   838  000994  6E15               	movwf	??_lcd_init& (0+255),c
   839  000996  0E7D               	movlw	125
   840  000998                     u467:
   841  000998  2EE8               	decfsz	wreg,f,c
   842  00099A  D7FE               	goto	u467
   843  00099C  2E15               	decfsz	??_lcd_init& (0+255),f,c
   844  00099E  D7FC               	goto	u467
   845  0009A0  F000               	nop	
   846                           
   847                           ;lcd_driver.c: 42: lcd_write_byte(0x0c, 0);
   848  0009A2  0E00               	movlw	0
   849  0009A4  6E13               	movwf	lcd_write_byte@is_data,c
   850  0009A6  0E0C               	movlw	12
   851  0009A8  EC38  F006         	call	_lcd_write_byte
   852                           
   853                           ;lcd_driver.c: 43: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
   854  0009AC  0E07               	movlw	7
   855  0009AE  6E15               	movwf	??_lcd_init& (0+255),c
   856  0009B0  0E7D               	movlw	125
   857  0009B2                     u477:
   858  0009B2  2EE8               	decfsz	wreg,f,c
   859  0009B4  D7FE               	goto	u477
   860  0009B6  2E15               	decfsz	??_lcd_init& (0+255),f,c
   861  0009B8  D7FC               	goto	u477
   862  0009BA  F000               	nop	
   863                           
   864                           ;lcd_driver.c: 45: lcd_write_byte(0x01, 0);
   865  0009BC  0E00               	movlw	0
   866  0009BE  6E13               	movwf	lcd_write_byte@is_data,c
   867  0009C0  0E01               	movlw	1
   868  0009C2  EC38  F006         	call	_lcd_write_byte
   869                           
   870                           ;lcd_driver.c: 46: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
   871  0009C6  0E07               	movlw	7
   872  0009C8  6E15               	movwf	??_lcd_init& (0+255),c
   873  0009CA  0E7D               	movlw	125
   874  0009CC                     u487:
   875  0009CC  2EE8               	decfsz	wreg,f,c
   876  0009CE  D7FE               	goto	u487
   877  0009D0  2E15               	decfsz	??_lcd_init& (0+255),f,c
   878  0009D2  D7FC               	goto	u487
   879  0009D4  F000               	nop	
   880                           
   881                           ;lcd_driver.c: 48: lcd_write_byte(0x6, 0);
   882  0009D6  0E00               	movlw	0
   883  0009D8  6E13               	movwf	lcd_write_byte@is_data,c
   884  0009DA  0E06               	movlw	6
   885  0009DC  EC38  F006         	call	_lcd_write_byte
   886                           
   887                           ;lcd_driver.c: 49: { _delay((unsigned long)((5000)*(4000000/4000000.0))); };
   888  0009E0  0E07               	movlw	7
   889  0009E2  6E15               	movwf	??_lcd_init& (0+255),c
   890  0009E4  0E7D               	movlw	125
   891  0009E6                     u497:
   892  0009E6  2EE8               	decfsz	wreg,f,c
   893  0009E8  D7FE               	goto	u497
   894  0009EA  2E15               	decfsz	??_lcd_init& (0+255),f,c
   895  0009EC  D7FC               	goto	u497
   896  0009EE  F000               	nop	
   897  0009F0  0012               	return	
   898  0009F2                     __end_of_lcd_init:
   899                           	opt stack 0
   900                           tblptru	equ	0xFF8
   901                           tblptrh	equ	0xFF7
   902                           tblptrl	equ	0xFF6
   903                           tablat	equ	0xFF5
   904                           prodh	equ	0xFF4
   905                           prodl	equ	0xFF3
   906                           intcon	equ	0xFF2
   907                           wreg	equ	0xFE8
   908                           status	equ	0xFD8
   909                           
   910 ;; *************** function _lcd_write_byte *****************
   911 ;; Defined at:
   912 ;;		line 132 in file "lcd_driver.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;  byte            1    wreg     unsigned char 
   915 ;;  is_data         1   18[COMRAM] unsigned char 
   916 ;; Auto vars:     Size  Location     Type
   917 ;;  byte            1   19[COMRAM] unsigned char 
   918 ;; Return value:  Size  Location     Type
   919 ;;		None               void
   920 ;; Registers used:
   921 ;;		wreg, status,2, status,0, cstack
   922 ;; Tracked objects:
   923 ;;		On entry : 0/0
   924 ;;		On exit  : 0/0
   925 ;;		Unchanged: 0/0
   926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   927 ;;      Params:         1       0       0       0       0       0       0       0       0
   928 ;;      Locals:         1       0       0       0       0       0       0       0       0
   929 ;;      Temps:          0       0       0       0       0       0       0       0       0
   930 ;;      Totals:         2       0       0       0       0       0       0       0       0
   931 ;;Total ram usage:        2 bytes
   932 ;; Hardware stack levels used:    1
   933 ;; Hardware stack levels required when called:    3
   934 ;; This function calls:
   935 ;;		_lcd_write_nibble
   936 ;; This function is called by:
   937 ;;		_main
   938 ;;		_lcd_init
   939 ;;		_lcd_gotoxy
   940 ;;		_lcd_puts_const
   941 ;;		_lcd_putnum
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           	psect	text4
   946  000C70                     __ptext4:
   947                           	opt stack 0
   948  000C70                     _lcd_write_byte:
   949                           	opt stack 27
   950                           
   951                           ;incstack = 0
   952                           ;lcd_write_byte@byte stored from wreg
   953  000C70  6E14               	movwf	lcd_write_byte@byte,c
   954                           
   955                           ;lcd_driver.c: 135: lcd_write_nibble(byte >> 4, is_data);
   956  000C72  C013  F010         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
   957  000C76  3814               	swapf	lcd_write_byte@byte,w,c
   958  000C78  0B0F               	andlw	15
   959  000C7A  ECF9  F004         	call	_lcd_write_nibble
   960                           
   961                           ;lcd_driver.c: 136: lcd_write_nibble(byte, is_data);
   962  000C7E  C013  F010         	movff	lcd_write_byte@is_data,lcd_write_nibble@is_data
   963  000C82  5014               	movf	lcd_write_byte@byte,w,c
   964  000C84  ECF9  F004         	call	_lcd_write_nibble
   965  000C88  0012               	return	
   966  000C8A                     __end_of_lcd_write_byte:
   967                           	opt stack 0
   968                           tblptru	equ	0xFF8
   969                           tblptrh	equ	0xFF7
   970                           tblptrl	equ	0xFF6
   971                           tablat	equ	0xFF5
   972                           prodh	equ	0xFF4
   973                           prodl	equ	0xFF3
   974                           intcon	equ	0xFF2
   975                           wreg	equ	0xFE8
   976                           status	equ	0xFD8
   977                           
   978 ;; *************** function _lcd_write_nibble *****************
   979 ;; Defined at:
   980 ;;		line 123 in file "lcd_driver.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;  nibble          1    wreg     unsigned char 
   983 ;;  is_data         1   15[COMRAM] unsigned char 
   984 ;; Auto vars:     Size  Location     Type
   985 ;;  nibble          1   17[COMRAM] unsigned char 
   986 ;; Return value:  Size  Location     Type
   987 ;;		None               void
   988 ;; Registers used:
   989 ;;		wreg, status,2, status,0, cstack
   990 ;; Tracked objects:
   991 ;;		On entry : 0/0
   992 ;;		On exit  : 0/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   995 ;;      Params:         1       0       0       0       0       0       0       0       0
   996 ;;      Locals:         1       0       0       0       0       0       0       0       0
   997 ;;      Temps:          1       0       0       0       0       0       0       0       0
   998 ;;      Totals:         3       0       0       0       0       0       0       0       0
   999 ;;Total ram usage:        3 bytes
  1000 ;; Hardware stack levels used:    1
  1001 ;; Hardware stack levels required when called:    2
  1002 ;; This function calls:
  1003 ;;		Nothing
  1004 ;; This function is called by:
  1005 ;;		_lcd_init
  1006 ;;		_lcd_write_byte
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           	psect	text5
  1011  0009F2                     __ptext5:
  1012                           	opt stack 0
  1013  0009F2                     _lcd_write_nibble:
  1014                           	opt stack 27
  1015                           
  1016                           ;incstack = 0
  1017                           ;lcd_write_nibble@nibble stored from wreg
  1018  0009F2  6E12               	movwf	lcd_write_nibble@nibble,c
  1019                           
  1020                           ;lcd_driver.c: 126: { LATDbits.LATD2 = is_data; };
  1021  0009F4  B010               	btfsc	lcd_write_nibble@is_data,0,c
  1022  0009F6  D002               	bra	u15
  1023  0009F8  948C               	bcf	3980,2,c	;volatile
  1024  0009FA  D001               	bra	u16
  1025  0009FC                     u15:
  1026  0009FC  848C               	bsf	3980,2,c	;volatile
  1027  0009FE                     u16:
  1028                           
  1029                           ;lcd_driver.c: 127: { _delay((unsigned long)((100)*(4000000/4000000.0))); };
  1030  0009FE  0E21               	movlw	33
  1031  000A00                     u507:
  1032  000A00  2EE8               	decfsz	wreg,f,c
  1033  000A02  D7FE               	goto	u507
  1034  000A04  F000               	nop	
  1035                           
  1036                           ;lcd_driver.c: 128: { LATDbits.LATD4 = nibble & 1; LATDbits.LATD5 = (nibble & 2) >> 1; L
      +                          ATDbits.LATD6 = (nibble & 4) >> 2; LATDbits.LATD7 = (nibble & 8) >> 3; };
  1037  000A06  C012  F011         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1038  000A0A  0E01               	movlw	1
  1039  000A0C  1611               	andwf	??_lcd_write_nibble,f,c
  1040  000A0E  3A11               	swapf	??_lcd_write_nibble,f,c
  1041  000A10  508C               	movf	3980,w,c	;volatile
  1042  000A12  1811               	xorwf	??_lcd_write_nibble,w,c
  1043  000A14  0BEF               	andlw	-17
  1044  000A16  1811               	xorwf	??_lcd_write_nibble,w,c
  1045  000A18  6E8C               	movwf	3980,c	;volatile
  1046  000A1A  C012  F011         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1047  000A1E  90D8               	bcf	status,0,c
  1048  000A20  3211               	rrcf	??_lcd_write_nibble,f,c
  1049  000A22  0E01               	movlw	1
  1050  000A24  1611               	andwf	??_lcd_write_nibble,f,c
  1051  000A26  3A11               	swapf	??_lcd_write_nibble,f,c
  1052  000A28  4611               	rlncf	??_lcd_write_nibble,f,c
  1053  000A2A  508C               	movf	3980,w,c	;volatile
  1054  000A2C  1811               	xorwf	??_lcd_write_nibble,w,c
  1055  000A2E  0BDF               	andlw	-33
  1056  000A30  1811               	xorwf	??_lcd_write_nibble,w,c
  1057  000A32  6E8C               	movwf	3980,c	;volatile
  1058  000A34  C012  F011         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1059  000A38  90D8               	bcf	status,0,c
  1060  000A3A  3211               	rrcf	??_lcd_write_nibble,f,c
  1061  000A3C  90D8               	bcf	status,0,c
  1062  000A3E  3211               	rrcf	??_lcd_write_nibble,f,c
  1063  000A40  0E01               	movlw	1
  1064  000A42  1611               	andwf	??_lcd_write_nibble,f,c
  1065  000A44  3A11               	swapf	??_lcd_write_nibble,f,c
  1066  000A46  4611               	rlncf	??_lcd_write_nibble,f,c
  1067  000A48  4611               	rlncf	??_lcd_write_nibble,f,c
  1068  000A4A  508C               	movf	3980,w,c	;volatile
  1069  000A4C  1811               	xorwf	??_lcd_write_nibble,w,c
  1070  000A4E  0BBF               	andlw	-65
  1071  000A50  1811               	xorwf	??_lcd_write_nibble,w,c
  1072  000A52  6E8C               	movwf	3980,c	;volatile
  1073  000A54  C012  F011         	movff	lcd_write_nibble@nibble,??_lcd_write_nibble
  1074  000A58  90D8               	bcf	status,0,c
  1075  000A5A  3211               	rrcf	??_lcd_write_nibble,f,c
  1076  000A5C  90D8               	bcf	status,0,c
  1077  000A5E  3211               	rrcf	??_lcd_write_nibble,f,c
  1078  000A60  90D8               	bcf	status,0,c
  1079  000A62  3211               	rrcf	??_lcd_write_nibble,f,c
  1080  000A64  0E01               	movlw	1
  1081  000A66  1611               	andwf	??_lcd_write_nibble,f,c
  1082  000A68  3211               	rrcf	??_lcd_write_nibble,f,c
  1083  000A6A  3211               	rrcf	??_lcd_write_nibble,f,c
  1084  000A6C  508C               	movf	3980,w,c	;volatile
  1085  000A6E  1811               	xorwf	??_lcd_write_nibble,w,c
  1086  000A70  0B7F               	andlw	-129
  1087  000A72  1811               	xorwf	??_lcd_write_nibble,w,c
  1088  000A74  6E8C               	movwf	3980,c	;volatile
  1089                           
  1090                           ;lcd_driver.c: 129: { LATDbits.LATD3 = 1; { _delay((unsigned long)((200)*(4000000/400000
      +                          0.0))); }; LATDbits.LATD3 = 0; { _delay((unsigned long)((500)*(4000000/4000000.0))); }; 
      +                          };
  1091  000A76  868C               	bsf	3980,3,c	;volatile
  1092  000A78  0E42               	movlw	66
  1093  000A7A                     u517:
  1094  000A7A  2EE8               	decfsz	wreg,f,c
  1095  000A7C  D7FE               	goto	u517
  1096  000A7E  D000               	nop2		;nop
  1097  000A80  968C               	bcf	3980,3,c	;volatile
  1098  000A82  0EA6               	movlw	166
  1099  000A84                     u527:
  1100  000A84  2EE8               	decfsz	wreg,f,c
  1101  000A86  D7FE               	goto	u527
  1102  000A88  D000               	nop2		;nop
  1103  000A8A  0012               	return	
  1104  000A8C                     __end_of_lcd_write_nibble:
  1105                           	opt stack 0
  1106                           tblptru	equ	0xFF8
  1107                           tblptrh	equ	0xFF7
  1108                           tblptrl	equ	0xFF6
  1109                           tablat	equ	0xFF5
  1110                           prodh	equ	0xFF4
  1111                           prodl	equ	0xFF3
  1112                           intcon	equ	0xFF2
  1113                           wreg	equ	0xFE8
  1114                           status	equ	0xFD8
  1115                           
  1116 ;; *************** function _OpenUSART *****************
  1117 ;; Defined at:
  1118 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;  config          1    wreg     unsigned char 
  1121 ;;  spbrg           2   15[COMRAM] unsigned int 
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;  config          1   20[COMRAM] unsigned char 
  1124 ;; Return value:  Size  Location     Type
  1125 ;;		None               void
  1126 ;; Registers used:
  1127 ;;		wreg, status,2
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1133 ;;      Params:         2       0       0       0       0       0       0       0       0
  1134 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1135 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1136 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1137 ;;Total ram usage:        6 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; Hardware stack levels required when called:    2
  1140 ;; This function calls:
  1141 ;;		Nothing
  1142 ;; This function is called by:
  1143 ;;		_main
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           	psect	text6
  1148  000B88                     __ptext6:
  1149                           	opt stack 0
  1150  000B88                     _OpenUSART:
  1151                           	opt stack 28
  1152                           
  1153                           ;incstack = 0
  1154                           ;OpenUSART@config stored from wreg
  1155  000B88  6E15               	movwf	OpenUSART@config,c
  1156  000B8A  0E00               	movlw	0
  1157  000B8C  6EAC               	movwf	4012,c	;volatile
  1158  000B8E  0E00               	movlw	0
  1159  000B90  6EAB               	movwf	4011,c	;volatile
  1160  000B92  B015               	btfsc	OpenUSART@config,0,c
  1161  000B94  88AC               	bsf	4012,4,c	;volatile
  1162  000B96  A215               	btfss	OpenUSART@config,1,c
  1163  000B98  D002               	goto	l801
  1164  000B9A  8CAC               	bsf	4012,6,c	;volatile
  1165  000B9C  8CAB               	bsf	4011,6,c	;volatile
  1166  000B9E                     l801:
  1167  000B9E  B415               	btfsc	OpenUSART@config,2,c
  1168  000BA0  8EAC               	bsf	4012,7,c	;volatile
  1169  000BA2  A615               	btfss	OpenUSART@config,3,c
  1170  000BA4  D002               	goto	l126
  1171  000BA6  88AB               	bsf	4011,4,c	;volatile
  1172  000BA8  D001               	goto	l809
  1173  000BAA                     l126:
  1174  000BAA  8AAB               	bsf	4011,5,c	;volatile
  1175  000BAC                     l809:
  1176  000BAC  B815               	btfsc	OpenUSART@config,4,c
  1177  000BAE  84AC               	bsf	4012,2,c	;volatile
  1178  000BB0  989E               	bcf	3998,4,c	;volatile
  1179  000BB2  BA15               	btfsc	OpenUSART@config,5,c
  1180  000BB4  86AB               	bsf	4011,3,c	;volatile
  1181  000BB6  AC15               	btfss	OpenUSART@config,6,c
  1182  000BB8  D002               	goto	l130
  1183  000BBA  8A9D               	bsf	3997,5,c	;volatile
  1184  000BBC  D001               	goto	l131
  1185  000BBE                     l130:
  1186  000BBE  9A9D               	bcf	3997,5,c	;volatile
  1187  000BC0                     l131:
  1188  000BC0  9A9E               	bcf	3998,5,c	;volatile
  1189  000BC2  AE15               	btfss	OpenUSART@config,7,c
  1190  000BC4  D002               	goto	l132
  1191  000BC6  889D               	bsf	3997,4,c	;volatile
  1192  000BC8  D001               	goto	l133
  1193  000BCA                     l132:
  1194  000BCA  989D               	bcf	3997,4,c	;volatile
  1195  000BCC                     l133:
  1196  000BCC  C010  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1197  000BD0  C011  F012         	movff	OpenUSART@spbrg+1,??_OpenUSART
  1198  000BD4  C012  F013         	movff	??_OpenUSART,??_OpenUSART+1
  1199  000BD8  6A14               	clrf	(??_OpenUSART+2)& (0+255),c
  1200  000BDA  5013               	movf	??_OpenUSART+1,w,c
  1201  000BDC  6EB0               	movwf	4016,c	;volatile
  1202  000BDE  8AAC               	bsf	4012,5,c	;volatile
  1203  000BE0  8EAB               	bsf	4011,7,c	;volatile
  1204  000BE2  9C94               	bcf	3988,6,c	;volatile
  1205  000BE4  8E94               	bsf	3988,7,c	;volatile
  1206  000BE6  B8AC               	btfsc	4012,4,c	;volatile
  1207  000BE8  BEAC               	btfsc	4012,7,c	;volatile
  1208  000BEA  D001               	goto	l135
  1209  000BEC  8C94               	bsf	3988,6,c	;volatile
  1210  000BEE                     l135:
  1211  000BEE  0012               	return	
  1212  000BF0                     __end_of_OpenUSART:
  1213                           	opt stack 0
  1214                           tblptru	equ	0xFF8
  1215                           tblptrh	equ	0xFF7
  1216                           tblptrl	equ	0xFF6
  1217                           tablat	equ	0xFF5
  1218                           prodh	equ	0xFF4
  1219                           prodl	equ	0xFF3
  1220                           intcon	equ	0xFF2
  1221                           wreg	equ	0xFE8
  1222                           status	equ	0xFD8
  1223                           
  1224 ;; *************** function _ISR *****************
  1225 ;; Defined at:
  1226 ;;		line 68 in file "main.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;		None
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;		None
  1231 ;; Return value:  Size  Location     Type
  1232 ;;		None               void
  1233 ;; Registers used:
  1234 ;;		wreg, status,2, status,0, cstack
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1240 ;;      Params:         0       0       0       0       0       0       0       0       0
  1241 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1242 ;;      Temps:         14       0       0       0       0       0       0       0       0
  1243 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1244 ;;Total ram usage:       14 bytes
  1245 ;; Hardware stack levels used:    1
  1246 ;; Hardware stack levels required when called:    1
  1247 ;; This function calls:
  1248 ;;		_ReadUSART
  1249 ;;		_WriteUSART
  1250 ;; This function is called by:
  1251 ;;		Interrupt level 2
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           	psect	intcode
  1256  000008                     __pintcode:
  1257                           	opt stack 0
  1258  000008                     _ISR:
  1259                           	opt stack 25
  1260                           
  1261                           ;incstack = 0
  1262  000008  CFFA F002          	movff	pclath,??_ISR
  1263  00000C  CFFB F003          	movff	pclatu,??_ISR+1
  1264  000010  CFE9 F004          	movff	fsr0l,??_ISR+2
  1265  000014  ED46  F005         	call	int_func,f	;refresh shadow registers
  1266                           pclatu	equ	0xFFB
  1267                           pclath	equ	0xFFA
  1268                           tblptru	equ	0xFF8
  1269                           tblptrh	equ	0xFF7
  1270                           tblptrl	equ	0xFF6
  1271                           tablat	equ	0xFF5
  1272                           prodh	equ	0xFF4
  1273                           prodl	equ	0xFF3
  1274                           intcon	equ	0xFF2
  1275                           fsr0l	equ	0xFE9
  1276                           wreg	equ	0xFE8
  1277                           status	equ	0xFD8
  1278                           
  1279                           	psect	intcode_body
  1280  000A8C                     __pintcode_body:
  1281                           	opt stack 25
  1282  000A8C                     int_func:
  1283                           	opt stack 25
  1284  000A8C  0006               	pop		; remove dummy address from shadow register refresh
  1285  000A8E  CFEA F005          	movff	fsr0h,??_ISR+3
  1286  000A92  CFE1 F006          	movff	fsr1l,??_ISR+4
  1287  000A96  CFE2 F007          	movff	fsr1h,??_ISR+5
  1288  000A9A  CFD9 F008          	movff	fsr2l,??_ISR+6
  1289  000A9E  CFDA F009          	movff	fsr2h,??_ISR+7
  1290  000AA2  CFF3 F00A          	movff	prodl,??_ISR+8
  1291  000AA6  CFF4 F00B          	movff	prodh,??_ISR+9
  1292  000AAA  CFF6 F00C          	movff	tblptrl,??_ISR+10
  1293  000AAE  CFF7 F00D          	movff	tblptrh,??_ISR+11
  1294  000AB2  CFF8 F00E          	movff	tblptru,??_ISR+12
  1295  000AB6  CFF5 F00F          	movff	tablat,??_ISR+13
  1296                           
  1297                           ;main.c: 70: if(PIR1bits.RCIF == 1)
  1298  000ABA  AA9E               	btfss	3998,5,c	;volatile
  1299  000ABC  D00A               	goto	i2l55
  1300                           
  1301                           ;main.c: 71: {
  1302                           ;main.c: 72: PIR1bits.RCIF = 0;
  1303  000ABE  9A9E               	bcf	3998,5,c	;volatile
  1304                           
  1305                           ;main.c: 73: c = ReadUSART();
  1306  000AC0  EC29  F006         	call	_ReadUSART	;wreg free
  1307  000AC4  6E1E               	movwf	_c,c
  1308  000AC6                     i2l52:
  1309  000AC6  A2AC               	btfss	4012,1,c	;volatile
  1310  000AC8  D7FE               	goto	i2l52
  1311                           
  1312                           ;main.c: 75: WriteUSART(c);
  1313  000ACA  501E               	movf	_c,w,c
  1314  000ACC  EC50  F006         	call	_WriteUSART
  1315                           
  1316                           ;main.c: 76: LATDbits.LATD1 =~ LATDbits.LATD1;
  1317  000AD0  728C               	btg	3980,1,c	;volatile
  1318  000AD2                     i2l55:
  1319  000AD2  C00F  FFF5         	movff	??_ISR+13,tablat
  1320  000AD6  C00E  FFF8         	movff	??_ISR+12,tblptru
  1321  000ADA  C00D  FFF7         	movff	??_ISR+11,tblptrh
  1322  000ADE  C00C  FFF6         	movff	??_ISR+10,tblptrl
  1323  000AE2  C00B  FFF4         	movff	??_ISR+9,prodh
  1324  000AE6  C00A  FFF3         	movff	??_ISR+8,prodl
  1325  000AEA  C009  FFDA         	movff	??_ISR+7,fsr2h
  1326  000AEE  C008  FFD9         	movff	??_ISR+6,fsr2l
  1327  000AF2  C007  FFE2         	movff	??_ISR+5,fsr1h
  1328  000AF6  C006  FFE1         	movff	??_ISR+4,fsr1l
  1329  000AFA  C005  FFEA         	movff	??_ISR+3,fsr0h
  1330  000AFE  C004  FFE9         	movff	??_ISR+2,fsr0l
  1331  000B02  C003  FFFB         	movff	??_ISR+1,pclatu
  1332  000B06  C002  FFFA         	movff	??_ISR,pclath
  1333  000B0A  0011               	retfie		f
  1334  000B0C                     __end_of_ISR:
  1335                           	opt stack 0
  1336                           pclatu	equ	0xFFB
  1337                           pclath	equ	0xFFA
  1338                           tblptru	equ	0xFF8
  1339                           tblptrh	equ	0xFF7
  1340                           tblptrl	equ	0xFF6
  1341                           tablat	equ	0xFF5
  1342                           prodh	equ	0xFF4
  1343                           prodl	equ	0xFF3
  1344                           intcon	equ	0xFF2
  1345                           fsr0h	equ	0xFEA
  1346                           fsr0l	equ	0xFE9
  1347                           wreg	equ	0xFE8
  1348                           fsr1h	equ	0xFE2
  1349                           fsr1l	equ	0xFE1
  1350                           fsr2h	equ	0xFDA
  1351                           fsr2l	equ	0xFD9
  1352                           status	equ	0xFD8
  1353                           
  1354 ;; *************** function _WriteUSART *****************
  1355 ;; Defined at:
  1356 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;  data            1    wreg     unsigned char 
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;  data            1    0[COMRAM] unsigned char 
  1361 ;; Return value:  Size  Location     Type
  1362 ;;		None               void
  1363 ;; Registers used:
  1364 ;;		wreg
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1370 ;;      Params:         0       0       0       0       0       0       0       0       0
  1371 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1372 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1373 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1374 ;;Total ram usage:        1 bytes
  1375 ;; Hardware stack levels used:    1
  1376 ;; This function calls:
  1377 ;;		Nothing
  1378 ;; This function is called by:
  1379 ;;		_ISR
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text8
  1384  000CA0                     __ptext8:
  1385                           	opt stack 0
  1386  000CA0                     _WriteUSART:
  1387                           	opt stack 25
  1388                           
  1389                           ;incstack = 0
  1390                           ;WriteUSART@data stored from wreg
  1391  000CA0  6E01               	movwf	WriteUSART@data,c
  1392  000CA2  ACAC               	btfss	4012,6,c	;volatile
  1393  000CA4  D003               	goto	i2l905
  1394  000CA6  90AC               	bcf	4012,0,c	;volatile
  1395  000CA8  B21D               	btfsc	_USART_Status,1,c
  1396  000CAA  80AC               	bsf	4012,0,c	;volatile
  1397  000CAC                     i2l905:
  1398  000CAC  C001  FFAD         	movff	WriteUSART@data,4013	;volatile
  1399  000CB0  0012               	return	
  1400  000CB2                     __end_of_WriteUSART:
  1401                           	opt stack 0
  1402                           pclatu	equ	0xFFB
  1403                           pclath	equ	0xFFA
  1404                           tblptru	equ	0xFF8
  1405                           tblptrh	equ	0xFF7
  1406                           tblptrl	equ	0xFF6
  1407                           tablat	equ	0xFF5
  1408                           prodh	equ	0xFF4
  1409                           prodl	equ	0xFF3
  1410                           intcon	equ	0xFF2
  1411                           fsr0h	equ	0xFEA
  1412                           fsr0l	equ	0xFE9
  1413                           wreg	equ	0xFE8
  1414                           fsr1h	equ	0xFE2
  1415                           fsr1l	equ	0xFE1
  1416                           fsr2h	equ	0xFDA
  1417                           fsr2l	equ	0xFD9
  1418                           status	equ	0xFD8
  1419                           
  1420 ;; *************** function _ReadUSART *****************
  1421 ;; Defined at:
  1422 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;		None
  1425 ;; Auto vars:     Size  Location     Type
  1426 ;;  data            1    0[COMRAM] unsigned char 
  1427 ;; Return value:  Size  Location     Type
  1428 ;;                  1    wreg      unsigned char 
  1429 ;; Registers used:
  1430 ;;		wreg, status,2, status,0
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1436 ;;      Params:         0       0       0       0       0       0       0       0       0
  1437 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1438 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1439 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1440 ;;Total ram usage:        1 bytes
  1441 ;; Hardware stack levels used:    1
  1442 ;; This function calls:
  1443 ;;		Nothing
  1444 ;; This function is called by:
  1445 ;;		_ISR
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           	psect	text9
  1450  000C52                     __ptext9:
  1451                           	opt stack 0
  1452  000C52                     _ReadUSART:
  1453                           	opt stack 25
  1454                           
  1455                           ;incstack = 0
  1456  000C52  0EF2               	movlw	242
  1457  000C54  161D               	andwf	_USART_Status,f,c
  1458  000C56  ACAB               	btfss	4011,6,c	;volatile
  1459  000C58  D003               	goto	i2l144
  1460  000C5A  901D               	bcf	_USART_Status,0,c
  1461  000C5C  B0AB               	btfsc	4011,0,c	;volatile
  1462  000C5E  801D               	bsf	_USART_Status,0,c
  1463  000C60                     i2l144:
  1464  000C60  B4AB               	btfsc	4011,2,c	;volatile
  1465  000C62  841D               	bsf	_USART_Status,2,c
  1466  000C64  B2AB               	btfsc	4011,1,c	;volatile
  1467  000C66  861D               	bsf	_USART_Status,3,c
  1468  000C68  CFAE F001          	movff	4014,ReadUSART@data	;volatile
  1469  000C6C  5001               	movf	ReadUSART@data,w,c
  1470  000C6E  0012               	return	
  1471  000C70                     __end_of_ReadUSART:
  1472                           	opt stack 0
  1473                           pclatu	equ	0xFFB
  1474                           pclath	equ	0xFFA
  1475                           tblptru	equ	0xFF8
  1476                           tblptrh	equ	0xFF7
  1477                           tblptrl	equ	0xFF6
  1478                           tablat	equ	0xFF5
  1479                           prodh	equ	0xFF4
  1480                           prodl	equ	0xFF3
  1481                           intcon	equ	0xFF2
  1482                           fsr0h	equ	0xFEA
  1483                           fsr0l	equ	0xFE9
  1484                           wreg	equ	0xFE8
  1485                           fsr1h	equ	0xFE2
  1486                           fsr1l	equ	0xFE1
  1487                           fsr2h	equ	0xFDA
  1488                           fsr2l	equ	0xFD9
  1489                           status	equ	0xFD8
  1490                           pclatu	equ	0xFFB
  1491                           pclath	equ	0xFFA
  1492                           tblptru	equ	0xFF8
  1493                           tblptrh	equ	0xFF7
  1494                           tblptrl	equ	0xFF6
  1495                           tablat	equ	0xFF5
  1496                           prodh	equ	0xFF4
  1497                           prodl	equ	0xFF3
  1498                           intcon	equ	0xFF2
  1499                           fsr0h	equ	0xFEA
  1500                           fsr0l	equ	0xFE9
  1501                           wreg	equ	0xFE8
  1502                           fsr1h	equ	0xFE2
  1503                           fsr1l	equ	0xFE1
  1504                           fsr2h	equ	0xFDA
  1505                           fsr2l	equ	0xFD9
  1506                           status	equ	0xFD8
  1507                           
  1508                           	psect	rparam
  1509  0000                     pclatu	equ	0xFFB
  1510                           pclath	equ	0xFFA
  1511                           tblptru	equ	0xFF8
  1512                           tblptrh	equ	0xFF7
  1513                           tblptrl	equ	0xFF6
  1514                           tablat	equ	0xFF5
  1515                           prodh	equ	0xFF4
  1516                           prodl	equ	0xFF3
  1517                           intcon	equ	0xFF2
  1518                           fsr0h	equ	0xFEA
  1519                           fsr0l	equ	0xFE9
  1520                           wreg	equ	0xFE8
  1521                           fsr1h	equ	0xFE2
  1522                           fsr1l	equ	0xFE1
  1523                           fsr2h	equ	0xFDA
  1524                           fsr2l	equ	0xFD9
  1525                           status	equ	0xFD8


Data Sizes:
    Strings     11
    Constant    4
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     28      32
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_puts_const@str	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _main->_lcd_puts_const
    _lcd_puts_const->_lcd_gotoxy
    _lcd_gotoxy->_lcd_write_byte
    _lcd_init->_lcd_write_byte
    _lcd_write_byte->_lcd_write_nibble

Critical Paths under _ISR in COMRAM

    _ISR->_ReadUSART
    _ISR->_WriteUSART

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    6053
                                             25 COMRAM     3     3      0
                          _OpenUSART
                         _lcd_gotoxy
                           _lcd_init
                     _lcd_puts_const
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_puts_const                                       2     0      2    2305
                                             23 COMRAM     2     0      2
                         _lcd_gotoxy
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    1262
                                             20 COMRAM     3     2      1
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1323
                                             20 COMRAM     1     1      0
                     _lcd_write_byte
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (1) _lcd_write_byte                                       2     1      1     930
                                             18 COMRAM     2     1      1
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (2) _lcd_write_nibble                                     3     2      1     393
                                             15 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _OpenUSART                                            6     4      2     203
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 14    14      0      30
                                              1 COMRAM    14    14      0
                          _ReadUSART
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (6) _WriteUSART                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _ReadUSART                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OpenUSART
   _lcd_gotoxy
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_init
     _lcd_write_byte
       _lcd_write_nibble
     _lcd_write_nibble
   _lcd_puts_const
     _lcd_gotoxy
       _lcd_write_byte
         _lcd_write_nibble
     _lcd_write_byte
       _lcd_write_nibble
   _lcd_write_byte
     _lcd_write_nibble

 _ISR (ROOT)
   _ReadUSART
   _WriteUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1C      20       1       33.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      20      20        0.0%
DATA                 0      0      20       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Jan 02 19:53:52 2017

                        _c 001E                         l75 0C02                         l78 0C50  
                       u15 09FC                         u16 09FE                        l130 0BBE  
                      l131 0BC0                        l132 0BCA                        l133 0BCC  
                      l126 0BAA                        l135 0BEE                        l801 0B9E  
                      l809 0BAC                        l873 0B50                        l865 0B0E  
                      l881 0B74                        l939 087E                        l877 0B66  
                      l869 0B34                        l879 0B70                        u307 0894  
                      u317 08A4                        u407 0C38                        u327 08B4  
                      u417 0C4A                        u337 08C4                        u507 0A00  
                      u427 0928                        u347 08D4                        _ISR 0008  
                      u517 0A7A                        u437 0940                        u357 08E4  
                      u527 0A84                        u447 095A                        u367 08F4  
                      u287 0860                        u457 0974                        u377 0904  
                      u297 0884                        u467 0998                        u387 0914  
                      u477 09B2                        u397 0C26                        u487 09CC  
                      u497 09E6     __end_of_lcd_puts_const 0B88                        wreg 000FE8  
             __CFG_FOSC$HS 000000                lcd_gotoxy@x 0017                lcd_gotoxy@y 0015  
             __CFG_LVP$OFF 000000                       ?_ISR 0001               __CFG_WDT$OFF 000000  
                     STR_1 0805                       _PIE1 000F9D                       _PEIE 007F96  
                     _RCIE 007CED                       _RCIF 007CF5                       i2l52 0AC6  
                     _RCIP 007CFD                       i2l55 0AD2     __end_of_lcd_write_byte 0C8A  
                     _main 0812                       fsr0h 000FEA                       fsr1h 000FE2  
                     fsr0l 000FE9                       fsr2h 000FDA                       fsr1l 000FE1  
                     fsr2l 000FD9                       pclat 000FFA                       prodh 000FF4  
                     prodl 000FF3                       start 0018              __CFG_MCLRE$ON 000000  
                    ??_ISR 0002                      ?_main 0001                      i2l144 0C60  
                    i2l905 0CAC                      _RCREG 000FAE                      _RCSTA 000FAB  
                    _SPBRG 000FAF                      _TRISC 000F94                      _TRISD 000F95  
          ?_lcd_puts_const 0018                      _TXREG 000FAD                      _TXSTA 000FAC  
                    _lcd_x 001F                      _lcd_y 0020                      tablat 000FF5  
                    status 000FD8            ?_lcd_write_byte 0013             WriteUSART@data 0001  
          __initialization 0C8A               __end_of_main 0922                     ??_main 001A  
            __activetblptr 000001         __size_of_ReadUSART 001E                     _SPBRGH 000FB0  
         __end_of_lcd_init 09F2         __size_of_OpenUSART 0068   __end_of_lcd_write_nibble 0A8C  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                 __accesstop 0060    __end_of__initialization 0C92  
               _WriteUSART 0CA0             __pcstackCOMRAM 0001          __end_of_ReadUSART 0C70  
           lcd_gotoxy@addr 0016              ReadUSART@data 0001          __end_of_OpenUSART 0BF0  
         ??_lcd_puts_const 001A                 _lcd_gotoxy 0BF0           ??_lcd_write_byte 0014  
                ?_lcd_init 0001                    __Hparam 0000                    __Lparam 0000  
              ?_WriteUSART 0001               __psmallconst 0800      lcd_write_byte@is_data 0013  
                  __pcinit 0C8A                    __ramtop 0800                    __ptext0 0812  
                  __ptext1 0B0C                    __ptext2 0BF0                    __ptext3 0922  
                  __ptext4 0C70                    __ptext5 09F2                    __ptext6 0B88  
                  __ptext8 0CA0                    __ptext9 0C52               __size_of_ISR 0B04  
       lcd_write_byte@byte 0014                 ??_lcd_init 0015             __pintcode_body 0A8C  
     end_of_initialization 0C92                    int_func 0A8C                  _RCSTAbits 000FAB  
        ?_lcd_write_nibble 0010         ??_lcd_write_nibble 0011                  _TRISCbits 000F94  
              ?_lcd_gotoxy 0015        __size_of_WriteUSART 0012                 main@config 001B  
                _TXSTAbits 000FAC        start_initialization 0C8A                  _ReadUSART 0C52  
              __end_of_ISR 0B0C                  _OpenUSART 0B88        __size_of_lcd_gotoxy 0062  
              __pbssCOMRAM 001D                 ?_ReadUSART 0001        __end_of__stringdata 0810  
               ?_OpenUSART 0010          __size_of_lcd_init 00D0               ??_WriteUSART 0001  
                __pintcode 0008                __smallconst 0800            _LCD_ROW_ADDRESS 0801  
       __end_of_WriteUSART 0CB2                   _LATDbits 000F8C                   _PIE1bits 000F9D  
                 _PIR1bits 000F9E                __stringdata 0805                ??_ReadUSART 0001  
                main@spbrg 001C               ??_lcd_gotoxy 0016    __size_of_lcd_puts_const 007C  
__size_of_lcd_write_nibble 009A                ??_OpenUSART 0012            OpenUSART@config 0015  
  __size_of_lcd_write_byte 001A                   __Hrparam 0000    lcd_write_nibble@is_data 0010  
                 __Lrparam 0000               __Lsmallconst 0800         __end_of_lcd_gotoxy 0C52  
        lcd_puts_const@str 0018    __end_of_LCD_ROW_ADDRESS 0805                   _lcd_init 0922  
            __size_of_main 0110                 _INTCONbits 000FF2             OpenUSART@spbrg 0010  
   lcd_write_nibble@nibble 0012                   intlevel2 0000             _lcd_puts_const 0B0C  
         _lcd_write_nibble 09F2               _USART_Status 001D             _lcd_write_byte 0C70  
